{"version":3,"sources":["./src/app/app.component.html","./src/app/gi-viewer/attribute/attribute.component.html","./src/app/gi-viewer/attribute/tabs.component.html","./src/app/gi-viewer/gi-viewer.component.html","./src/app/gi-viewer/html/dropdown-menu.component.html","./src/app/gi-viewer/html/modal-window.component.html","./src/app/gi-viewer/html/tabs.component.html","./src/app/gi-viewer/threejs/threejs-viewer.component.html","./src/$_lazy_route_resource lazy namespace object","./src/app/app.component.scss","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/directives/dragDropDirective.ts","./src/app/gi-viewer/attribute/attribute.component.scss","./src/app/gi-viewer/attribute/attribute.component.ts","./src/app/gi-viewer/attribute/attribute.module.ts","./src/app/gi-viewer/attribute/tab.component.ts","./src/app/gi-viewer/attribute/tabs.component.scss","./src/app/gi-viewer/attribute/tabs.component.ts","./src/app/gi-viewer/data/data.service.ts","./src/app/gi-viewer/data/data.threejs.ts","./src/app/gi-viewer/data/data.threejsBase.ts","./src/app/gi-viewer/data/data.threejsLookAt.ts","./src/app/gi-viewer/data/data.threejsSelect.ts","./src/app/gi-viewer/gi-viewer.component.scss","./src/app/gi-viewer/gi-viewer.component.ts","./src/app/gi-viewer/gi-viewer.module.ts","./src/app/gi-viewer/gi-viewer.settings.ts","./src/app/gi-viewer/gi-viewer.ts","./src/app/gi-viewer/html/dropdown-menu.component.scss","./src/app/gi-viewer/html/dropdown-menu.component.ts","./src/app/gi-viewer/html/modal-window.component.scss","./src/app/gi-viewer/html/modal-window.component.ts","./src/app/gi-viewer/html/modal-window.service.ts","./src/app/gi-viewer/html/tab.component.ts","./src/app/gi-viewer/html/tabs.component.scss","./src/app/gi-viewer/html/tabs.component.ts","./src/app/gi-viewer/threejs/threejs-viewer.component.scss","./src/app/gi-viewer/threejs/threejs-viewer.component.ts","./src/app/gi-viewer/threejs/threejs-viewer.service.ts","./src/assets/core/_parameterTypes.ts","./src/assets/core/inline/_arithmetic.ts","./src/assets/core/inline/_colors.ts","./src/assets/core/inline/_constants.ts","./src/assets/core/inline/_conversion.ts","./src/assets/core/inline/_geometry.ts","./src/assets/core/inline/_list.ts","./src/assets/core/inline/_math.ts","./src/assets/core/inline/_mathjs.ts","./src/assets/core/inline/_plane.ts","./src/assets/core/inline/_rand.ts","./src/assets/core/inline/_ray.ts","./src/assets/core/inline/_set.ts","./src/assets/core/inline/_strs.ts","./src/assets/core/inline/_types.ts","./src/assets/core/inline/_util.ts","./src/assets/core/inline/_vec.ts","./src/assets/core/modules/_check_args.ts","./src/assets/core/modules/_check_attribs.ts","./src/assets/core/modules/_check_ids.ts","./src/assets/core/modules/_check_types.ts","./src/assets/core/modules/_model.ts","./src/assets/core/modules/_output.ts","./src/assets/core/modules/basic/_common.ts","./src/assets/core/modules/basic/analyze.ts","./src/assets/core/modules/basic/attrib.ts","./src/assets/core/modules/basic/calc.ts","./src/assets/core/modules/basic/collection.ts","./src/assets/core/modules/basic/dict.ts","./src/assets/core/modules/basic/intersect.ts","./src/assets/core/modules/basic/io.ts","./src/assets/core/modules/basic/list.ts","./src/assets/core/modules/basic/make.ts","./src/assets/core/modules/basic/material.ts","./src/assets/core/modules/basic/modify.ts","./src/assets/core/modules/basic/pattern.ts","./src/assets/core/modules/basic/poly2d.ts","./src/assets/core/modules/basic/query.ts","./src/assets/core/modules/basic/util.ts","./src/assets/core/modules/basic/visualize.ts","./src/assets/core/modules/index.ts","./src/assets/libs/TypedArrayUtils.js","./src/assets/libs/filesys/download.ts","./src/assets/libs/geo-info/GIAttribMap.ts","./src/assets/libs/geo-info/GIAttribMapBool.ts","./src/assets/libs/geo-info/GIAttribModify.ts","./src/assets/libs/geo-info/GIAttribs.ts","./src/assets/libs/geo-info/GIAttribsAdd.ts","./src/assets/libs/geo-info/GIAttribsIO.ts","./src/assets/libs/geo-info/GIAttribsQuery.ts","./src/assets/libs/geo-info/GIAttribsThreejs.ts","./src/assets/libs/geo-info/GIGeom.ts","./src/assets/libs/geo-info/GIGeomAdd.ts","./src/assets/libs/geo-info/GIGeomCheck.ts","./src/assets/libs/geo-info/GIGeomDel.ts","./src/assets/libs/geo-info/GIGeomDelEdge.ts","./src/assets/libs/geo-info/GIGeomDelVert.ts","./src/assets/libs/geo-info/GIGeomIO.ts","./src/assets/libs/geo-info/GIGeomModify.ts","./src/assets/libs/geo-info/GIGeomModifyColl.ts","./src/assets/libs/geo-info/GIGeomModifyPgon.ts","./src/assets/libs/geo-info/GIGeomModifyPline.ts","./src/assets/libs/geo-info/GIGeomNav.ts","./src/assets/libs/geo-info/GIGeomQuery.ts","./src/assets/libs/geo-info/GIGeomThreejs.ts","./src/assets/libs/geo-info/GIGeomTimeStamp.ts","./src/assets/libs/geo-info/GIMetaData.ts","./src/assets/libs/geo-info/GIModel.ts","./src/assets/libs/geo-info/GIModelComparator.ts","./src/assets/libs/geo-info/GIModelData.ts","./src/assets/libs/geo-info/GIModelThreejs.ts","./src/assets/libs/geo-info/GiGeomCompare.ts","./src/assets/libs/geo-info/common.ts","./src/assets/libs/geo-info/common_func.ts","./src/assets/libs/geo-info/id.ts","./src/assets/libs/geo-info/io_geojson.ts","./src/assets/libs/geo-info/io_obj.ts","./src/assets/libs/geo-info/virtual.ts","./src/assets/libs/geom/constants.ts","./src/assets/libs/geom/distance.ts","./src/assets/libs/geom/intersect.ts","./src/assets/libs/geom/matrix.ts","./src/assets/libs/geom/mesh.ts","./src/assets/libs/geom/triangle.ts","./src/assets/libs/geom/vectors.ts","./src/assets/libs/triangulate/earcut.ts","./src/assets/libs/triangulate/threex.ts","./src/assets/libs/triangulate/triangulate.ts","./src/assets/libs/util/arrs.ts","./src/assets/libs/util/maps.ts","./src/assets/libs/verb/verb.js","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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CA;AACA;;AAEA,iCAAiC,2DAA2D;;AAE5F;AACA;AACA;;AAEA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB,sCAAsC;AAC9E;AACA,sBAAsB,0BAA0B;AAChD;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,SAAS;AACT;AACA,EAAE;AACF;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yBAAyB,yBAAyB,qBAAqB,WAAW;AAClH,+BAA+B,wBAAwB,yBAAyB,qBAAqB,WAAW;AAChH;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA,oCAAoC,qDAAqD,wBAAwB;AACjH;AACA,yCAAyC;AACzC;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,0CAA0C;AAC1C;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,GAAG;AACH;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD,mCAAmC,uBAAuB,8BAA8B,qBAAqB,WAAW;AACxH;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yBAAyB,6BAA6B,qBAAqB,WAAW;AAC1H,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,0BAA0B;AAC1B;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,+GAA+G;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,YAAY;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mDAAmD;AAC7E;AACA;AACA,IAAI;AACJ;AACA;AACA,uBAAuB,4BAA4B;AACnD;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,kCAAkC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,6CAA6C;AAChD;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxE,kBAAkB,mDAAmD;AACrE;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2GAA2G;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oGAAoG;AACpG;AACA,2EAA2E;AAC3E,+DAA+D,wCAAwC,yCAAyC,qBAAqB,WAAW;AAChL,uEAAuE,gDAAgD,yCAAyC,qBAAqB,WAAW;AAChM,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA,iFAAiF;AACjxD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mDAAmD,iFAAiF;AACpL;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvyDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnmEAAmE;AACnyEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB,6BAA6B;AAC3E,SAAS;AACT;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtuCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,sDAAsD,sEAAsE;AAC9L,kEAAkE,sDAAsD,sEAAsE;AAC9L;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,gBAAgB,uDAAuD;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtwCAAwC;AACxC;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvuBAAuB;AACvB,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF,mCAAmC;AACnC;AACA;AACA;AACA,6CAA6C;AAC7C,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,8BAA8B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0HAA0H;AAC1H;AACA,iGAAiG;AACjsCAAsC,uCAAuqBAAqB;AACrB;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,yBAAyB;AACzB;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,OAAO;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0GAA0G;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gEAAgE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE,kEAAkE;AAClE,4DAA4D;AAC5D;AACA;AACA;AACA,yEAAyE;AACzE;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvoDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnqCAAqC;AACrmEAAmE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,uBAAuB,6CAA6C,4BAA4B,GAAG,4EAA4E;AAC/K;AACA,qBAAqB,6BAA6B,0CAA0C,OAAO,sDAAsD,qCAAqC,kBAAkB,gBAAgB,2CAA2C,GAAG,aAAa,cAAc,gCAAgC,EAAE,UAAU;AACrV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,oCAAoC;AACpC;AACA;AACA;AACA;AACA,gCAAgC;AAChC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,6CAA6C,iBAAiB;;;AAG/D;;AAEA,CAAC,E;;;;;;;;;;;;AC/jPD;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;;;;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;;;;;;;;;ACfpB;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,MAAM,CAAC,iBAAiB,CAAC,GAAG,eAAe,CAAC;AAC5C,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["export default \"<!-- <div *ngIf=\\\"!files.length\\\" class=\\\"col-12 rmpm dropzone\\\" appDrag (files)=\\\"filesDropped($event)\\\">\\n\\t<div class=\\\"text-wrapper\\\">\\n\\t\\t<div class=\\\"centered\\\">Drop your file here!</div>\\n\\t</div>\\n</div> -->\\n<div class='viewers-container' appDrag (files)=\\\"filesDropped($event)\\\">\\n    <div class='content__panel'>\\n        <gi-viewer [data]=model></gi-viewer>\\n    </div>\\n</div>\"","export default \"<div class = 'attrib--container'>\\r\\n  <my-tabs id=\\\"attribTab\\\" (selectedTab) = \\\"_setDataSource($event)\\\" (selectedTopology) = \\\"_setDataSource($event)\\\" [hidden]=\\\"dataSource === undefined\\\">\\r\\n    <my-tab *ngFor=\\\"let tab of tabs; let i = index\\\" tabTitle=\\\"{{tab.title}}\\\" index=\\\"{{i}}\\\">\\r\\n      <div class=\\\"mat-elevation-z1\\\">\\r\\n        <div class = \\\"table--container\\\">\\r\\n          <!-- <dl id='attribLabel'>\\r\\n              <dd *ngFor=\\\"let label of displayedColumns;\\\">\\r\\n                <span [class]='label'></span>\\r\\n              </dd>\\r\\n          </dl> -->\\r\\n          <table mat-table [dataSource]=\\\"dataSource\\\" matSort [class] = 'columnItalic' id = 'attribTable'>\\r\\n            <ng-container *ngFor=\\\"let column of displayedColumns;\\\" [matColumnDef]=\\\"column\\\" [sticky] = 'column === \\\"_id\\\"'>\\r\\n                <th mat-header-cell *matHeaderCellDef mat-sort-header (click)=\\\"updateSortHeader($event, column)\\\"> {{column}} \\r\\n                    <!-- <i class=\\\"material-icons\\\" (click)=\\\"showAttribLabel($event, column)\\\" [class.active]=\\\"currentShowingCol === column\\\">visibility</i> -->\\r\\n                    <mat-icon class=\\\"material-icons\\\" svgIcon=\\\"cVisibility\\\" (click)=\\\"showAttribLabel($event, column)\\\" [class.active]=\\\"currentShowingCol === column\\\"></mat-icon>\\r\\n                </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n            </ng-container>\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns; sticky: true\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\" [class.selected-row]='row.selected?row.selected:false' (click)=\\\"selectRow(row._id, $event)\\\"></tr>\\r\\n          </table>\\r\\n          <div *ngIf=\\\"dataSource && dataSource.data.length === 0\\\" id=\\\"emptyMessage\\\">\\r\\n            No Data\\r\\n          </div>\\r\\n           \\r\\n        </div>\\r\\n        <div class = 'btm--container'>\\r\\n          <div id=\\\"displaySelected\\\">\\r\\n            <label class=\\\"container\\\">Show Selected\\r\\n              <input type=\\\"checkbox\\\" id=\\\"switch\\\" (click)=\\\"showSelectedSwitch();\\\" [checked]=\\\"showSelected\\\"/>\\r\\n              <span class=\\\"checkmark\\\"></span>\\r\\n            </label>\\r\\n          </div>\\r\\n          <div class = 'paginator--container'>\\r\\n            <mat-paginator id=\\\"matPaginator\\\" [pageSizeOptions]=\\\"[20, 50, 100]\\\" showFirstLastButtons></mat-paginator>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </my-tab>\\r\\n  </my-tabs>\\r\\n</div>\\r\\n  \"","export default \"<ul class=\\\"nav nav-tabs\\\">\\r\\n    <li (click)=\\\"selectTab(0)\\\" [class.active]=\\\"tab_active===0\\\"><span>Positions</span></li>\\r\\n    <li\\r\\n        [class.active]=\\\"tab_active===1\\\"\\r\\n        [class.open]='topology_open'\\r\\n    >\\r\\n        <div class=\\\"dropdown\\\">\\r\\n            <button class=\\\"dropbtn\\\" (click) = 'showTDropdown()' title=\\\"Topology{{topology_text!=='Topology'?(': '+topology_text):''}}\\\">{{topology_text}}</button>\\r\\n            <div class=\\\"dropdown-content\\\" id='topology_dropdown'>\\r\\n                <div *ngFor=\\\"let option of topology;\\\" (click)=\\\"selectTopology(option.tab, $event);\\\">{{option.title}}</div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </li>\\r\\n    <li\\r\\n        [class.active]=\\\"tab_active===2\\\"\\r\\n        [class.open]='object_open'\\r\\n    >\\r\\n        <div class=\\\"dropdown\\\">\\r\\n            <button class=\\\"dropbtn\\\" (click) = 'showODropdown()' title=\\\"Object{{object_text!=='Object'?(': '+object_text):''}}\\\">{{object_text}}</button>\\r\\n            <div class=\\\"dropdown-content\\\" id='object_dropdown'>\\r\\n                <div *ngFor=\\\"let option of object;\\\" (click)=\\\"selectObject(option.tab, $event);\\\">{{option.title}}</div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </li>\\r\\n    <li (click)=\\\"selectTab(8)\\\" [class.active]=\\\"tab_active===8\\\"><span>Collections</span></li>\\r\\n    <li (click)=\\\"selectTab(9)\\\" [class.active]=\\\"tab_active===9\\\"><span>Model</span></li>\\r\\n</ul>\\r\\n<ng-content></ng-content>\\r\\n\\r\\n<ng-template #topoTemplate>\\r\\n    \\r\\n</ng-template>\\r\\n\\r\\n<ng-template #objectTemplate>\\r\\n    \\r\\n</ng-template>\\r\\n\\r\\n\"","export default \"<div id=\\\"gi-viewer-container\\\">\\r\\n\\t<as-split #viewerSplit direction=\\\"vertical\\\" (dragEnd)='dragSplitEnd($event)' [disabled]='checkPublish()'>\\r\\n\\t\\t<as-split-area [size]=\\\"100 - getSplit()\\\" id=\\\"three-js\\\">\\r\\n\\t\\t\\t<threejs-viewer [model]='data'\\r\\n\\t\\t\\t(action)=\\\"threejsAction($event)\\\"\\r\\n\\t\\t\\t\\t[attr_table_select]='attrTableSelect'\\r\\n\\t\\t\\t\\t[selectSwitch] = 'selectSwitchOnOff'\\r\\n\\t\\t\\t\\t[attribLabel] = 'attribLabelVal'\\r\\n\\t\\t\\t></threejs-viewer>\\r\\n\\t\\t\\t<button class='btn' id=\\\"settings_button\\\" mat-icon-button (click)=\\\"openModal('settings_modal')\\\" title=\\\"Settings\\\"><mat-icon svgIcon=\\\"settings\\\"></mat-icon></button>\\r\\n\\t\\t</as-split-area>\\r\\n\\t\\t<as-split-area [size]='getSplit()' id=\\\"attrib\\\">\\r\\n\\t\\t\\t<attribute [model]=\\\"data\\\"\\r\\n\\t\\t\\t\\t[refresh]=\\\"clickedEvent\\\"\\r\\n\\t\\t\\t\\t[reset]=\\\"attrTableReset\\\"\\r\\n\\t\\t\\t\\t(attrTableSelect) = \\\"attribTableSelected($event)\\\"\\r\\n\\t\\t\\t\\t(selectSwitch) = \\\"selectSwitch($event)\\\"\\r\\n\\t\\t\\t\\t(attribLabel) = \\\"attribLabel($event)\\\"\\r\\n\\t\\t\\t>\\r\\n\\t\\t\\t</attribute>\\r\\n\\t\\t</as-split-area>\\r\\n\\t</as-split>\\r\\n    <modal-window id=\\\"settings_modal\\\" (closeModal) = 'onCloseModal()'>\\r\\n        <h1>3D Viewer Settings</h1>\\r\\n        <tabs id=\\\"settingsTab\\\">\\r\\n            <tab tabTitle=\\\"Scene\\\">\\r\\n                <div class=\\\"mat-elevation-z1\\\">\\r\\n                    <dl>\\r\\n                        <!-- <dd [title] = \\\"!normalsEnabled?'No models available':''\\\">\\r\\n                            <div class=\\\"label\\\">Normals</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"normalsOnOff\\\"\\r\\n                                [checked]='settings.normals.show'\\r\\n                                [disabled] = \\\"!normalsEnabled\\\"\\r\\n                                (change)=\\\"settingOnChange('normals.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"normalsOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                            <div class=\\\"slidecontainer\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"1\\\" max=\\\"100\\\" step=\\\"1\\\"\\r\\n                                [value]=\\\"settings.normals.size\\\"\\r\\n                                class=\\\"slider\\\" id=\\\"normalSize\\\"\\r\\n                                (input)=\\\"settingOnChange('normals.size', $event.target.value)\\\"\\r\\n                                [disabled] = \\\"!normalsEnabled\\\">\\r\\n                                <input type=\\\"text\\\" [value]=\\\"settings.normals.size\\\" disabled>\\r\\n                            </div>\\r\\n                        </dd> -->\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Axes</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"axesOnOff\\\"\\r\\n                                [checked]=\\\"settings.axes.show\\\"\\r\\n                                (change)=\\\"settingOnChange('axes.show')\\\">\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"axesOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                            <div class=\\\"slidecontainer\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"1\\\" max=\\\"1000\\\" step=\\\"1\\\" \\r\\n                                [value]=\\\"settings.axes.size\\\" class=\\\"slider\\\" id=\\\"axesSize\\\" \\r\\n                                (input)=\\\"settingOnChange('axes.size', $event.target.value)\\\">\\r\\n                                <input type=\\\"text\\\" [value]=\\\"settings.axes.size\\\" \\r\\n                                (input)=\\\"settingOnChange('axes.size', $event.target.value)\\\">\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Positions</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"positionsOnOff\\\"\\r\\n                                [checked]='settings.positions.show'\\r\\n                                (change)=\\\"settingOnChange('positions.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"positionsOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                            <div class=\\\"slidecontainer\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"0.1\\\" max=\\\"10\\\" step=\\\"0.1\\\" [value]=\\\"settings.positions.size\\\" class=\\\"slider\\\" id=\\\"positionsSize\\\" (input)=\\\"settingOnChange('positions.size', $event.target.value)\\\">\\r\\n                                <input type=\\\"text\\\" [value]=\\\"settings.positions.size\\\" disabled>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Wireframe</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"wireframeOnOff\\\"\\r\\n                                [checked]='settings.wireframe.show'\\r\\n                                (change)=\\\"settingOnChange('wireframe.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"wireframeOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">GI Summary</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"gi_summaryOnOff\\\"\\r\\n                                [checked]='settings.gi_summary.show'\\r\\n                                (change)=\\\"settingOnChange('gi_summary.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"gi_summaryOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Threejs Summary</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"tjs_summaryOnOff\\\"\\r\\n                                [checked]='settings.tjs_summary.show'\\r\\n                                (change)=\\\"settingOnChange('tjs_summary.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"tjs_summaryOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd><hr></dd>\\r\\n                        <dd id='camera'>\\r\\n                            <div class=\\\"label\\\">Camera Position</div>\\r\\n                            <input type=\\\"number\\\"\\r\\n                            (change)=\\\"settingOnChange('camera.pos_x', $event.target.value)\\\" \\r\\n                            [value]=\\\"formatNumber(settings.camera.pos.x)\\\">\\r\\n                            <input type=\\\"number\\\"\\r\\n                            (change)=\\\"settingOnChange('camera.pos_y', $event.target.value)\\\" \\r\\n                            [value]=\\\"formatNumber(settings.camera.pos.y)\\\">\\r\\n                            <input type=\\\"number\\\"\\r\\n                            (change)=\\\"settingOnChange('camera.pos_z', $event.target.value)\\\" \\r\\n                            [value]=\\\"formatNumber(settings.camera.pos.z)\\\">\\r\\n                            <button (click)=\\\"settingOnChange('camera.get_camera_pos')\\\" class=\\\"filebtn getbtn\\\">Get</button>\\r\\n                        </dd>\\r\\n                        <dd id='camera_target'>\\r\\n                            <div class=\\\"label\\\">Camera Target</div>\\r\\n                            <input type=\\\"number\\\"\\r\\n                            (change)=\\\"settingOnChange('camera.target_x', $event.target.value)\\\" \\r\\n                            [value]=\\\"formatNumber(settings.camera.target.x)\\\">\\r\\n                            <input type=\\\"number\\\" \\r\\n                            (change)=\\\"settingOnChange('camera.target_y', $event.target.value)\\\"\\r\\n                            [value]=\\\"formatNumber(settings.camera.target.y)\\\">\\r\\n                            <input type=\\\"number\\\" \\r\\n                            (change)=\\\"settingOnChange('camera.target_z', $event.target.value)\\\"\\r\\n                            [value]=\\\"formatNumber(settings.camera.target.z)\\\">\\r\\n                            <button (click)=\\\"settingOnChange('camera.get_target_pos')\\\" class=\\\"filebtn getbtn\\\">Get</button>\\r\\n                        </dd>\\r\\n                        <dd><hr></dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Grid</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"gridOnOff\\\"\\r\\n                                [checked]='settings.grid.show'\\r\\n                                (change)=\\\"settingOnChange('grid.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"gridOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Grid Size</div>\\r\\n                            <!-- <div class=\\\"onoffswitch\\\">\\r\\n                            </div> -->\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"10\\\" max=\\\"10000\\\" step=\\\"10\\\" [value]=\\\"settings.grid.size\\\" class=\\\"slider\\\" id=\\\"gridSize\\\" (input)=\\\"settingOnChange('grid.size', $event.target.value)\\\">\\r\\n                                <input type=\\\"text\\\" [value]=\\\"settings.grid.size\\\" disabled>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n\\r\\n                        <dd id='grid_pos'>\\r\\n                            <div class=\\\"label\\\">Grid Position</div>\\r\\n                            <input type=\\\"number\\\"\\r\\n                            [value]=\\\"formatNumber(settings.grid.pos_x)\\\"\\r\\n                            (change)=\\\"settingOnChange('grid.update_pos_x', $event.target.value)\\\">\\r\\n                            <input type=\\\"number\\\"\\r\\n                            [value]=\\\"formatNumber(settings.grid.pos_y)\\\"\\r\\n                            (change)=\\\"settingOnChange('grid.update_pos_y', $event.target.value)\\\">\\r\\n                            <input type=\\\"number\\\"\\r\\n                            [value]=\\\"formatNumber(settings.grid.pos_z)\\\"\\r\\n                            (change)=\\\"settingOnChange('grid.update_pos_z', $event.target.value)\\\">\\r\\n                            <button (click)=\\\"settingOnChange('grid.update_pos')\\\" class=\\\"filebtn getbtn\\\">Get</button>\\r\\n                        </dd>\\r\\n                        <dd><hr></dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Preset Background</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"backgroundOnOff\\\"\\r\\n                                [checked]='settings.background.show'\\r\\n                                (change)=\\\"settingOnChange('background.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"backgroundOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Background Set</div>\\r\\n                            <select value={{settings.background.background_set}}\\r\\n                            (change)=\\\"settingOnChange('background.set', $event.target.value)\\\">\\r\\n                            <!--\\r\\n                                background folder: \\\"\\\\src\\\\assets\\\\img\\\\background\\\\\\\"\\r\\n                                each background corresponds to a folder in the directory:\\r\\n                                    option value = 0 -> folder bg0\\r\\n                                    option value = 1 -> folder bg1\\r\\n                                    ...\\r\\n                            -->\\r\\n                                <option value=0>Sky 1</option>\\r\\n                                <option value=1>Sky 2</option>\\r\\n                                <option value=2>Sky 3</option>\\r\\n                                <option value=3>Sky 4</option>\\r\\n                                <option value=4>Sky 5</option>\\r\\n                                <option value=5>Sky 6</option>\\r\\n                                <option value=6>Sky 7</option>\\r\\n                            </select>\\r\\n                            \\r\\n\\r\\n                            <!-- <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"backgroundSelect\\\"\\r\\n                                [checked]='settings.grid.show'\\r\\n                                (change)=\\\"settingOnChange('grid.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"backgroundSelect\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div> -->\\r\\n                        </dd>\\r\\n\\r\\n                    </dl>\\r\\n                </div>\\r\\n            </tab>\\r\\n            <tab tabTitle=\\\"Colors\\\">\\r\\n                <div class=\\\"mat-elevation-z1\\\">\\r\\n                    <dl>\\r\\n                        <dd class='colors' *ngFor=\\\"let item of setting_colors; let i = index\\\">\\r\\n                            <div class=\\\"label\\\">{{item.label}}</div>\\r\\n                            <input\\r\\n                            [(colorPicker)]=\\\"settings.colors[item.setting]\\\"\\r\\n                            [style.background]=\\\"settings.colors[item.setting]\\\"\\r\\n                            [value]=\\\"settings.colors[item.setting]\\\"\\r\\n                            [class.light] = \\\"checkColor(this.settings.colors[item.setting])\\\"\\r\\n                            />\\r\\n                            <!-- <button *ngIf=\\\"item.default\\\" (click)=\\\"resetDefault('colors.viewer_bg','#E6E6E6');\\\" class='filebtn closebtn'>Default</button> -->\\r\\n                            <hr [hidden]=\\\"i % 2 === 1\\\">\\r\\n                        </dd>\\r\\n                    </dl>\\r\\n                </div>\\r\\n            </tab>\\r\\n            <tab tabTitle=\\\"Light & Shadow\\\">\\r\\n                <div class=\\\"mat-elevation-z1\\\">\\r\\n                    <dl>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Ambient Light</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"AmbientOnOff\\\"\\r\\n                                [checked]='settings.ambient_light.show'\\r\\n                                (change)=\\\"settingOnChange('ambient_light.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"AmbientOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd class='colors'>\\r\\n                            <div class=\\\"label\\\">Color</div>\\r\\n                            <input\\r\\n                            [(colorPicker)]=\\\"settings.ambient_light.color\\\"\\r\\n                            [style.background]=\\\"settings.ambient_light.color\\\"\\r\\n                            [value]=\\\"settings.ambient_light.color\\\"\\r\\n                            [class.light] = \\\"checkColor(settings.ambient_light.color)\\\"\\r\\n                            />\\r\\n                            <!-- <button (click)=\\\"resetDefault('ambient_light.color','#FFFFFF');\\\" class='filebtn closebtn'>Default</button> -->\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Intensity</div>\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"0\\\" max=\\\"1\\\" step=\\\"0.01\\\" [value]=\\\"settings.ambient_light.intensity\\\" class=\\\"slider\\\" (input)=\\\"settingOnChange('ambient_light.intensity', $event.target.value)\\\">\\r\\n                                <input type=\\\"text\\\" [value]=\\\"settings.ambient_light.intensity\\\" disabled>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd><hr></dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Hemisphere Light</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"HemisphereOnOff\\\"\\r\\n                                [checked]='settings.hemisphere_light.show'\\r\\n                                (change)=\\\"settingOnChange('hemisphere_light.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"HemisphereOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                            <div class=\\\"label\\\" style=\\\"margin-left:90px\\\">Helper</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"HemisphereLightHelperOnOff\\\"\\r\\n                                [checked]='settings.hemisphere_light.helper'\\r\\n                                (change)=\\\"settingOnChange('hemisphere_light.helper')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"HemisphereLightHelperOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd class='colors'>\\r\\n                            <div class=\\\"label\\\">Sky Color</div>\\r\\n                            <input\\r\\n                            [(colorPicker)]=\\\"settings.hemisphere_light.skyColor\\\"\\r\\n                            [style.background]=\\\"settings.hemisphere_light.skyColor\\\"\\r\\n                            [value]=\\\"settings.hemisphere_light.skyColor\\\"\\r\\n                            [class.light] = \\\"checkColor(settings.hemisphere_light.skyColor)\\\"\\r\\n                            />\\r\\n                            <!-- <button (click)=\\\"resetDefault('hemisphere_light.skyColor','#FFFFFF');\\\" class='filebtn closebtn'>Default</button> -->\\r\\n                        </dd>\\r\\n                        <dd class='colors'>\\r\\n                            <div class=\\\"label\\\">Ground Color</div>\\r\\n                            <input\\r\\n                            [(colorPicker)]=\\\"settings.hemisphere_light.groundColor\\\"\\r\\n                            [style.background]=\\\"settings.hemisphere_light.groundColor\\\"\\r\\n                            [value]=\\\"settings.hemisphere_light.groundColor\\\"\\r\\n                            [class.light] = \\\"checkColor(settings.hemisphere_light.groundColor)\\\"\\r\\n                            />\\r\\n                            <!-- <button (click)=\\\"resetDefault('hemisphere_light.groundColor','#FFFFFF');\\\" class='filebtn closebtn'>Default</button> -->\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Intensity</div>\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"0\\\" max=\\\"1\\\" step=\\\"0.01\\\" [value]=\\\"settings.hemisphere_light.intensity\\\" class=\\\"slider\\\" (input)=\\\"settingOnChange('hemisphere_light.intensity', $event.target.value)\\\">\\r\\n                                <input type=\\\"text\\\" [value]=\\\"settings.hemisphere_light.intensity\\\" disabled>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd><hr></dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\" title='directional_light'>Directional Light</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"DirectionalOnOff\\\"\\r\\n                                [checked]='settings.directional_light.show'\\r\\n                                (change)=\\\"settingOnChange('directional_light.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"DirectionalOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                            <div class=\\\"label\\\" style=\\\"margin-left:90px\\\">Helper</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"DaylightHelperOnOff\\\"\\r\\n                                [checked]='settings.directional_light.helper'\\r\\n                                (change)=\\\"settingOnChange('directional_light.helper')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"DaylightHelperOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <!-- <dd>\\r\\n                            <div class=\\\"label\\\">Light Type</div>\\r\\n                            <div class=\\\"label\\\">Directional Light</div>\\r\\n                            <div class=\\\"onoffswitch radio\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"DirectionalTypeDir\\\"\\r\\n                                [checked]='settings.directional_light.type == \\\"directional\\\"'\\r\\n                                (change)=\\\"settingOnChange('directional_light.type')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"DirectionalTypeDir\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\" style=\\\"margin-left:120px\\\">Point Light</div>\\r\\n                            <div class=\\\"onoffswitch radio\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"DirectionalTypePoint\\\"\\r\\n                                [checked]='settings.directional_light.type == \\\"point\\\"'\\r\\n                                (change)=\\\"settingOnChange('directional_light.type')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"DirectionalTypePoint\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd> -->\\r\\n                        <dd class='colors'>\\r\\n                            <div class=\\\"label\\\">Color</div>\\r\\n                            <input\\r\\n                            [(colorPicker)]=\\\"settings.directional_light.color\\\"\\r\\n                            [style.background]=\\\"settings.directional_light.color\\\"\\r\\n                            [value]=\\\"settings.directional_light.color\\\"\\r\\n                            [class.light] = \\\"checkColor(settings.directional_light.color)\\\"\\r\\n                            />\\r\\n                            <!-- <button (click)=\\\"resetDefault('directional_light.color','#FFFFFF');\\\" class='filebtn closebtn'>Default</button> -->\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Intensity</div>\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"0\\\" max=\\\"1\\\" step=\\\"0.01\\\" [value]=\\\"settings.directional_light.intensity\\\" class=\\\"slider\\\" (input)=\\\"settingOnChange('directional_light.intensity', $event.target.value)\\\">\\r\\n                                <input type=\\\"text\\\" [value]=\\\"settings.directional_light.intensity\\\" disabled>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Shadow</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"DirectionalShadowOnOff\\\"\\r\\n                                [checked]='settings.directional_light.shadow'\\r\\n                                (change)=\\\"settingOnChange('directional_light.shadow')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"DirectionalShadowOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Shadow Intensity</div>\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"1024\\\" max=\\\"5120\\\" step=\\\"512\\\" [value]=\\\"settings.directional_light.shadowSize\\\" class=\\\"slider\\\" (input)=\\\"settingOnChange('directional_light.shadowSize', $event.target.value)\\\">\\r\\n                                <input type=\\\"text\\\" [value]=\\\"settings.directional_light.shadowSize\\\" disabled>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\" title='directional_light.azimuth'>Azimuth</div>\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"0\\\" max=\\\"360\\\" step=\\\"1\\\" [value]=\\\"settings.directional_light.azimuth\\\" class=\\\"slider\\\" (input)=\\\"settingOnChange('directional_light.azimuth', $event.target.value)\\\">\\r\\n                                <input type=\\\"number\\\" disabled [value]=\\\"settings.directional_light.azimuth\\\" class=\\\"number\\\">\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\" title='directional_light.altitude'>Altitude</div>\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"0\\\" max=\\\"90\\\" step=\\\"1\\\" [value]=\\\"settings.directional_light.altitude\\\" class=\\\"slider\\\" (input)=\\\"settingOnChange('directional_light.altitude', $event.target.value)\\\">\\r\\n                                <input type=\\\"number\\\" disabled [value]=\\\"settings.directional_light.altitude\\\" class=\\\"number\\\">\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <!-- <dd>\\r\\n                            <div class=\\\"label\\\">Distance</div>\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"100\\\" max=\\\"1000\\\" step=\\\"10\\\" [value]=\\\"settings.directional_light.distance\\\" class=\\\"slider\\\" (input)=\\\"settingOnChange('directional_light.distance', $event.target.value)\\\">\\r\\n                                <input type=\\\"text\\\" [value]=\\\"settings.directional_light.distance\\\" disabled>\\r\\n                            </div>\\r\\n                        </dd> -->\\r\\n                    </dl>\\r\\n                </div>\\r\\n            </tab>\\r\\n            <tab tabTitle=\\\"Environment\\\">\\r\\n                <div class=\\\"mat-elevation-z1\\\">\\r\\n                    <dl>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Ground</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"GroundOnOff\\\"\\r\\n                                [checked]='settings.ground.show'\\r\\n                                (change)=\\\"settingOnChange('ground.show')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"GroundOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Width</div>\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"0\\\" max=\\\"100000\\\" step=\\\"100\\\" [value]=\\\"settings.ground.width\\\" class=\\\"slider\\\" (input)=\\\"settingOnChange('ground.width', $event.target.value)\\\">\\r\\n                                <input type=\\\"number\\\" [value]=\\\"settings.ground.width\\\" min=\\\"0\\\" max=\\\"100000\\\" class=\\\"number\\\" (input)=\\\"settingOnChange('ground.width', $event.target.value)\\\">\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Length</div>\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"0\\\" max=\\\"100000\\\" step=\\\"100\\\" [value]=\\\"settings.ground.length\\\" class=\\\"slider\\\" (input)=\\\"settingOnChange('ground.length', $event.target.value)\\\">\\r\\n                                <input type=\\\"number\\\" [value]=\\\"settings.ground.length\\\" min=\\\"0\\\" max=\\\"100000\\\" class=\\\"number\\\" (input)=\\\"settingOnChange('ground.length', $event.target.value)\\\">\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Height</div>\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"-10\\\" max=\\\"10\\\" step=\\\"0.1\\\" [value]=\\\"settings.ground.height\\\" class=\\\"slider\\\" (input)=\\\"settingOnChange('ground.height', $event.target.value)\\\">\\r\\n                                <input type=\\\"number\\\" [value]=\\\"settings.ground.height\\\" min=\\\"-10\\\" max=\\\"10\\\" class=\\\"number\\\" (input)=\\\"settingOnChange('ground.height', $event.target.value)\\\">\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd class='colors'>\\r\\n                            <div class=\\\"label\\\">Color</div>\\r\\n                            <input\\r\\n                            [(colorPicker)]=\\\"settings.ground.color\\\"\\r\\n                            [style.background]=\\\"settings.ground.color\\\"\\r\\n                            [value]=\\\"settings.ground.color\\\"\\r\\n                            [class.light] = \\\"checkColor(settings.ground.color)\\\"\\r\\n                            />\\r\\n                            <!-- <button (click)=\\\"resetDefault('ground.color','#FFFFFF');\\\" class='filebtn closebtn'>Default</button> -->\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Shininess</div>\\r\\n                            <div class=\\\"slidecontainer light\\\">\\r\\n                                <input type=\\\"range\\\" min=\\\"0\\\" max=\\\"100\\\" step=\\\"1\\\" [value]=\\\"settings.ground.shininess\\\" class=\\\"slider\\\" (input)=\\\"settingOnChange('ground.shininess', $event.target.value)\\\">\\r\\n                                <input type=\\\"number\\\" min=\\\"0\\\" max=\\\"100\\\" [value]=\\\"settings.ground.shininess\\\" class=\\\"number\\\" (input)=\\\"settingOnChange('ground.shininess', $event.target.value)\\\">\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                    </dl>\\r\\n                    \\r\\n                </div>\\r\\n            </tab>\\r\\n            <tab tabTitle=\\\"Entity selection\\\">\\r\\n                <div class=\\\"mat-elevation-z1\\\">\\r\\n                    <dl>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Positions (ps)</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"psOnOff\\\"\\r\\n                                [checked]='settings.select.enabledselector.ps'\\r\\n                                (change)=\\\"settingOnChange('select.ps')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"psOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Vertices (_v)</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"_vOnOff\\\"\\r\\n                                [checked]='settings.select.enabledselector._v'\\r\\n                                (change)=\\\"settingOnChange('select._v')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"_vOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Edges (_e)</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"_eOnOff\\\"\\r\\n                                [checked]='settings.select.enabledselector._e'\\r\\n                                (change)=\\\"settingOnChange('select._e')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"_eOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Wires (_w)</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"_wOnOff\\\"\\r\\n                                [checked]='settings.select.enabledselector._w'\\r\\n                                (change)=\\\"settingOnChange('select._w')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"_wOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Faces (_f)</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"_fOnOff\\\"\\r\\n                                [checked]='settings.select.enabledselector._f'\\r\\n                                (change)=\\\"settingOnChange('select._f')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"_fOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Points (pt)</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"ptOnOff\\\"\\r\\n                                [checked]='settings.select.enabledselector.pt'\\r\\n                                (change)=\\\"settingOnChange('select.pt')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"ptOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Polylines (pl)</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"plOnOff\\\"\\r\\n                                [checked]='settings.select.enabledselector.pl'\\r\\n                                (change)=\\\"settingOnChange('select.pl')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"plOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Polygons (pg)</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"pgOnOff\\\"\\r\\n                                [checked]='settings.select.enabledselector.pg'\\r\\n                                (change)=\\\"settingOnChange('select.pg')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"pgOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                        <dd>\\r\\n                            <div class=\\\"label\\\">Collections (co)</div>\\r\\n                            <div class=\\\"onoffswitch\\\">\\r\\n                                <input type=\\\"checkbox\\\"\\r\\n                                name=\\\"onoffswitch\\\"\\r\\n                                class=\\\"onoffswitch-checkbox\\\"\\r\\n                                id=\\\"coOnOff\\\"\\r\\n                                [checked]='settings.select.enabledselector.co'\\r\\n                                (change)=\\\"settingOnChange('select.co')\\\"\\r\\n                                >\\r\\n                                <label class=\\\"onoffswitch-label\\\" for=\\\"coOnOff\\\">\\r\\n                                    <span class=\\\"onoffswitch-inner\\\"></span>\\r\\n                                    <span class=\\\"onoffswitch-switch\\\"></span>\\r\\n                                </label>\\r\\n                            </div>\\r\\n                        </dd>\\r\\n                    </dl>\\r\\n                    \\r\\n                </div>\\r\\n            </tab>\\r\\n        </tabs>\\r\\n        \\r\\n        <button (click)=\\\"closeModal('settings_modal', true);\\\" class=\\\"filebtn closebtn setting\\\">Apply</button>\\r\\n        <button (click)=\\\"closeModal('settings_modal');\\\" class='filebtn closebtn setting'>Cancel</button>\\r\\n        <button (click)=\\\"resetToDefault();\\\" class='filebtn closebtn setting' style=\\\"float: right;\\\">Default</button>\\r\\n    </modal-window>\\r\\n</div>\\r\\n\"","export default \"<div\\r\\n    [hidden]=\\\"!visible\\\"\\r\\n    [style.left.px]='position.x'\\r\\n    [style.top.px]='position.y'\\r\\n>\\r\\n    <ul>\\r\\n        <ol>Please choose:</ol>\\r\\n        <ol *ngFor=\\\"let item of items\\\" (click)=\\\"selectItem(item)\\\">{{item.label}}</ol>\\r\\n    </ul>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"modal-window\\\" id=\\\"modal-window\\\">\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <ng-content></ng-content>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"modal-background\\\"></div>\"","export default \"<ul class=\\\"nav nav-tabs\\\">\\r\\n    <li\\r\\n        *ngFor=\\\"let tab of tabs;\\\"\\r\\n        (click)=\\\"selectTab(tab)\\\"\\r\\n        [class.active]=\\\"tab.active\\\"\\r\\n    >\\r\\n        <div>\\r\\n            <span>{{tab.title}}</span>\\r\\n        </div>\\r\\n    </li>\\r\\n    \\r\\n</ul>\\r\\n<ng-content></ng-content>\\r\\n\"","export default \"<div\\r\\n    id=\\\"threejs-container\\\"\\r\\n    (window:mousedown)=\\\"onMouseDown($event)\\\"\\r\\n    (window:mouseup)=\\\"onMouseUp($event)\\\"\\r\\n>\\r\\n    <div\\r\\n        *ngIf=\\\"_model_error\\\"\\r\\n        style=\\\"position:absolute;color:red;margin-top: 50px;left:40%;text-align: center;font-family:sans-serif;font-size: 14px;background-color: white;\\\"\\r\\n    >\\r\\n        Error displaying model:{{text}}\\r\\n    </div>\\r\\n    <div\\r\\n        *ngIf=\\\"_no_model\\\"\\r\\n        style=\\\"position:absolute;color:red;margin-top: 50px;left:40%;text-align: center;font-family:sans-serif;font-size: 14px;background-color: white;\\\"\\r\\n    >\\r\\n        Model or Scene not defined.\\r\\n    </div>\\r\\n    <div class = \\\"messages\\\"\\r\\n        *ngIf=\\\"messageVisible\\\"\\r\\n    >\\r\\n        {{message}}\\r\\n    </div>\\r\\n\\r\\n    <button\\r\\n        id=\\\"zoomingfit\\\"\\r\\n        mat-icon-button\\r\\n        (click)=\\\"zoomfit()\\\"\\r\\n        title='Zoom to Fit Model'\\r\\n    >\\r\\n        <mat-icon svgIcon=\\\"cZoom\\\"></mat-icon>\\r\\n    </button>\\r\\n\\r\\n    <span\\r\\n        class=\\\"switchCameraButton\\\"\\r\\n        mat-icon-button\\r\\n        (click)=\\\"switchCamera()\\\"\\r\\n        title='Switch Camera'\\r\\n    >\\r\\n        <mat-icon svgIcon=\\\"cControlCam\\\"></mat-icon>\\r\\n        <p>{{_data_threejs.currentCamera}}</p>\\r\\n    </span>\\r\\n    <ng-container *ngIf=\\\"enableSelect()\\\">\\r\\n        <button\\r\\n            id=\\\"EntitySelection\\\"\\r\\n            mat-icon-button\\r\\n            (click)=\\\"selectDropdownVisible = !selectDropdownVisible\\\"\\r\\n            title='Selection Type'\\r\\n        >\\r\\n            <mat-icon svgIcon=\\\"select\\\"></mat-icon>\\r\\n        </button>\\r\\n        <span\\r\\n            *ngIf=\\\"!selectDropdownVisible\\\"\\r\\n            id=\\\"SelectingEntityType\\\"\\r\\n            matTooltip=\\\"Selecting {{SelectingEntityType.name}}\\\"\\r\\n            (click)=\\\"selectDropdownVisible = !selectDropdownVisible; needSelect=false\\\"\\r\\n        >\\r\\n            {{EntTypeToStr(SelectingEntityType.id)}}\\r\\n        </span>\\r\\n        <div id=\\\"selectDropdown\\\" *ngIf=\\\"selectDropdownVisible == true\\\" >\\r\\n            <button\\r\\n                *ngFor=\\\"let selection of selections\\\"\\r\\n                (click)=\\\"selectEntityType(selection); needSelect=false\\\"\\r\\n                [class.active]=\\\"SelectingEntityType.id === selection.id\\\"\\r\\n            >\\r\\n                <span matTooltip=\\\"Select {{selection.name}}\\\">{{EntTypeToStr(selection.id)}}</span>\\r\\n            </button>\\r\\n        </div>\\r\\n    </ng-container>\\r\\n\\r\\n    <div id=\\\"giSummary\\\" [hidden]='!this._data_threejs.settings.gi_summary.show'>\\r\\n        <tbody>\\r\\n            <tr *ngFor=\\\"let item of giSummary\\\">\\r\\n                <td style=\\\"width: 80px;\\\">{{item.title}}</td><td>{{item.val}}</td>\\r\\n            </tr>\\r\\n        </tbody>\\r\\n    </div>\\r\\n    <div id=\\\"tjsSummary\\\" [hidden]='!this._data_threejs.settings.tjs_summary.show'>\\r\\n        <tbody>\\r\\n            <tr>\\r\\n                <td\\r\\n                    align=left\\r\\n                    style=\\\"width: 80px;\\\"\\r\\n                >\\r\\n                    3js Triangles:\\r\\n                </td>\\r\\n                <td\\r\\n                    align=left\\r\\n                    style=\\\"width: 20px;\\\"\\r\\n                >\\r\\n                    {{_threejs_nums[2]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td\\r\\n                    align=left\\r\\n                    style=\\\"width: 80px;\\\"\\r\\n                >\\r\\n                    3js Edges:\\r\\n                </td>\\r\\n                <td\\r\\n                    align=left\\r\\n                    style=\\\"width: 20px;\\\"\\r\\n                >\\r\\n                    {{_threejs_nums[1]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td\\r\\n                    align=left\\r\\n                    style=\\\"width: 80px;\\\"\\r\\n                >\\r\\n                    3js Points:\\r\\n                </td>\\r\\n                <td\\r\\n                    align=left\\r\\n                    style=\\\"width: 20px;\\\"\\r\\n                >\\r\\n                    {{_threejs_nums[0]}}\\r\\n                </td>\\r\\n            </tr>\\r\\n        </tbody>\\r\\n    </div>\\r\\n\\r\\n    <div id=\\\"nodeSelect_slider\\\" *ngIf='this._data_threejs.timelineEnabled == 1'>\\r\\n        <input type=\\\"range\\\" id=\\\"nodeSelect_slider_input\\\"\\r\\n            min=\\\"0\\\" [max]=getMaxNodeSelect() step=\\\"1\\\"\\r\\n            [style.width]=getSliderWidth()\\r\\n            [value]=_data_threejs.timelineIndex (change)='changeNodeSlider($event)'\\r\\n            list=\\\"nodeSelect_datalist\\\">\\r\\n        <datalist id=\\\"nodeSelect_datalist\\\">\\r\\n            <option *ngFor='let time_point of _data_threejs.timeline_groups' value={{time_point}} label={{time_point}}></option>\\r\\n        </datalist>\\r\\n    </div>\\r\\n    <div id=\\\"nodeSelect_dropdown\\\" *ngIf='this._data_threejs.timelineEnabled == 2'>\\r\\n        <select  type=\\\"range\\\" id=\\\"nodeSelect_dropdown_input\\\" [value]=_data_threejs.timelineValue (change)='changeNodeDropdown($event)'>\\r\\n            <option *ngFor='let time_point of _data_threejs.timeline_groups' value={{time_point}} label={{time_point}}></option>\\r\\n        </select>\\r\\n    </div>\\r\\n\\r\\n    <dropdown-menu (selected)='selectEntity($event)'></dropdown-menu>\\r\\n</div>\\r\\n\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","export default \"p {\\n  font-family: Lato;\\n}\\n\\n.dropzone {\\n  min-height: 400px;\\n  min-width: 400px;\\n  display: table;\\n  width: 100%;\\n  background-color: #eee;\\n  border: dotted 1px #aaa;\\n}\\n\\n.text-wrapper {\\n  display: table-cell;\\n  vertical-align: middle;\\n}\\n\\n.centered {\\n  font-family: sans-serif;\\n  font-size: 1.3em;\\n  font-weight: bold;\\n  text-align: center;\\n}\\n\\n.viewers-container {\\n  position: relative;\\n  display: block;\\n  height: 100%;\\n  overflow: hidden;\\n}\\n\\n.viewers-container .container__header {\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  display: flex;\\n  background-color: transparent;\\n  height: 40px;\\n  padding: 0px;\\n  margin: 0px;\\n}\\n\\n.viewers-container .container__header .header-btn-group {\\n  height: 40px;\\n  padding: 0px;\\n  margin: 0px;\\n  overflow: hidden;\\n  background-color: transparent;\\n  z-index: 1;\\n}\\n\\n.viewers-container .content__panel {\\n  background-color: transparent;\\n  width: 100%;\\n  height: 100%;\\n  overflow: hidden;\\n  padding: 0px;\\n  margin: 0px;\\n}\\n\\n.viewers-container button {\\n  display: inline-block;\\n  vertical-align: bottom;\\n  background-color: transparent;\\n  color: #808080;\\n  border: none;\\n  outline: none;\\n  cursor: pointer;\\n  padding: 0px;\\n  width: 34px;\\n  height: 34px;\\n  transition: 0.3s;\\n  font-size: 14px;\\n}\\n\\n.viewers-container button:hover {\\n  color: #00006d;\\n}\\n\\n.viewers-container button.active {\\n  color: #00006d;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQzpcXFVzZXJzXFxha2liZHB0XFxEb2N1bWVudHNcXEFuZ3VsYXJcXG1vYml1cy12aWV3ZXIvc3JjXFxhcHBcXGFwcC5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9DOlxcVXNlcnNcXGFraWJkcHRcXERvY3VtZW50c1xcQW5ndWxhclxcbW9iaXVzLXZpZXdlci9zcmNcXHNjc3NcXHZhcmlhYmxlcy5zY3NzIiwic3JjL2FwcC9DOlxcVXNlcnNcXGFraWJkcHRcXERvY3VtZW50c1xcQW5ndWxhclxcbW9iaXVzLXZpZXdlci9zcmNcXHNjc3NcXGNvbG9ycy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBO0VBQ0ksaUJBQUE7QUNISjs7QURLQTtFQUNJLGlCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxjQUFBO0VBQ0EsV0FBQTtFQUNBLHNCQUFBO0VBQ0EsdUJBQUE7QUNGSjs7QURLQTtFQUNJLG1CQUFBO0VBQ0Esc0JBQUE7QUNGSjs7QURLQTtFQUNJLHVCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxpQkFBQTtFQUNBLGtCQUFBO0FDRko7O0FETUE7RUFDSSxrQkFBQTtFQUNBLGNBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7QUNISjs7QURLSTtFQUNJLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLE1BQUE7RUFDQSxhQUFBO0VBQ0EsNkJBQUE7RUFDQSxZRXZDUTtFRndDUixZQUFBO0VBQ0EsV0FBQTtBQ0hSOztBREtRO0VBRUksWUU3Q0k7RUY4Q0osWUFBQTtFQUNBLFdBQUE7RUFDQSxnQkFBQTtFQUNBLDZCQUFBO0VBQ0EsVUFBQTtBQ0paOztBRE9JO0VBQ0ksNkJBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7QUNMUjs7QURTSTtFQUNJLHFCQUFBO0VBQ0Esc0JBQUE7RUFDQSw2QkFBQTtFQUNBLGNHcEVDO0VIcUVELFlBQUE7RUFDQSxhQUFBO0VBQ0EsZUFBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0VBQ0EsWUFBQTtFQUNBLGdCQUFBO0VBQ0EsZUFBQTtBQ1BSOztBRFFRO0VBQ0ksY0duRUs7QUY2RGpCOztBRFFRO0VBQ0ksY0d0RUs7QUZnRWpCIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCAnfnNjc3MvY29sb3JzJztcclxuQGltcG9ydCAnfnNjc3MvdmFyaWFibGVzJztcclxuXHJcbi8vIHRoZSBob3N0XHJcbnAge1xyXG4gICAgZm9udC1mYW1pbHk6IExhdG87XHJcbn1cclxuLmRyb3B6b25lIHtcclxuICAgIG1pbi1oZWlnaHQ6IDQwMHB4O1xyXG4gICAgbWluLXdpZHRoOiA0MDBweDtcclxuICAgIGRpc3BsYXk6IHRhYmxlO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xyXG4gICAgYm9yZGVyOiBkb3R0ZWQgMXB4ICNhYWE7XHJcbn1cclxuICBcclxuLnRleHQtd3JhcHBlciB7XHJcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxufVxyXG4gIFxyXG4uY2VudGVyZWQge1xyXG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XHJcbiAgICBmb250LXNpemU6IDEuM2VtO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB0ZXh0LWFsaWduOmNlbnRlcjtcclxufVxyXG5cclxuXHJcbi52aWV3ZXJzLWNvbnRhaW5lcntcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuXHJcbiAgICAuY29udGFpbmVyX19oZWFkZXJ7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGxlZnQ6IDA7XHJcbiAgICAgICAgdG9wOiAwO1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICAgICAgaGVpZ2h0OiAkaGVhZGVyLWhlaWdodDtcclxuICAgICAgICBwYWRkaW5nOiAwcHg7XHJcbiAgICAgICAgbWFyZ2luOiAwcHg7XHJcbiAgICBcclxuICAgICAgICAuaGVhZGVyLWJ0bi1ncm91cCB7XHJcbiAgICAgICAgICAgIC8vZGlzcGxheTogaW5saW5lO1xyXG4gICAgICAgICAgICBoZWlnaHQ6ICRoZWFkZXItaGVpZ2h0O1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAwcHg7XHJcbiAgICAgICAgICAgIG1hcmdpbjogMHB4O1xyXG4gICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgICAgICAgICAgei1pbmRleDogMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAuY29udGVudF9fcGFuZWx7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlOyBcclxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgIHBhZGRpbmc6IDBweDtcclxuICAgICAgICBtYXJnaW46IDBweDtcclxuICAgIFxyXG4gICAgICAgIC8vcGFkZGluZzogMTBweCAxNXB4O1xyXG4gICAgfVxyXG4gICAgYnV0dG9uIHtcclxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgdmVydGljYWwtYWxpZ246IGJvdHRvbTtcclxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgICAgICBjb2xvcjogJGNvbG9yMTtcclxuICAgICAgICBib3JkZXI6IG5vbmU7XHJcbiAgICAgICAgb3V0bGluZTogbm9uZTtcclxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgcGFkZGluZzogMHB4O1xyXG4gICAgICAgIHdpZHRoOiAzNHB4O1xyXG4gICAgICAgIGhlaWdodDogMzRweDtcclxuICAgICAgICB0cmFuc2l0aW9uOiAwLjNzO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcclxuICAgICAgICAmOmhvdmVyIHtcclxuICAgICAgICAgICAgY29sb3I6JHNlbGVjdGVkLWNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmLmFjdGl2ZSB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkc2VsZWN0ZWQtY29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbiIsInAge1xuICBmb250LWZhbWlseTogTGF0bztcbn1cblxuLmRyb3B6b25lIHtcbiAgbWluLWhlaWdodDogNDAwcHg7XG4gIG1pbi13aWR0aDogNDAwcHg7XG4gIGRpc3BsYXk6IHRhYmxlO1xuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcbiAgYm9yZGVyOiBkb3R0ZWQgMXB4ICNhYWE7XG59XG5cbi50ZXh0LXdyYXBwZXIge1xuICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuXG4uY2VudGVyZWQge1xuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgZm9udC1zaXplOiAxLjNlbTtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnZpZXdlcnMtY29udGFpbmVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLnZpZXdlcnMtY29udGFpbmVyIC5jb250YWluZXJfX2hlYWRlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMDtcbiAgdG9wOiAwO1xuICBkaXNwbGF5OiBmbGV4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgaGVpZ2h0OiA0MHB4O1xuICBwYWRkaW5nOiAwcHg7XG4gIG1hcmdpbjogMHB4O1xufVxuLnZpZXdlcnMtY29udGFpbmVyIC5jb250YWluZXJfX2hlYWRlciAuaGVhZGVyLWJ0bi1ncm91cCB7XG4gIGhlaWdodDogNDBweDtcbiAgcGFkZGluZzogMHB4O1xuICBtYXJnaW46IDBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIHotaW5kZXg6IDE7XG59XG4udmlld2Vycy1jb250YWluZXIgLmNvbnRlbnRfX3BhbmVsIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBhZGRpbmc6IDBweDtcbiAgbWFyZ2luOiAwcHg7XG59XG4udmlld2Vycy1jb250YWluZXIgYnV0dG9uIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgY29sb3I6ICM4MDgwODA7XG4gIGJvcmRlcjogbm9uZTtcbiAgb3V0bGluZTogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBwYWRkaW5nOiAwcHg7XG4gIHdpZHRoOiAzNHB4O1xuICBoZWlnaHQ6IDM0cHg7XG4gIHRyYW5zaXRpb246IDAuM3M7XG4gIGZvbnQtc2l6ZTogMTRweDtcbn1cbi52aWV3ZXJzLWNvbnRhaW5lciBidXR0b246aG92ZXIge1xuICBjb2xvcjogIzAwMDA2ZDtcbn1cbi52aWV3ZXJzLWNvbnRhaW5lciBidXR0b24uYWN0aXZlIHtcbiAgY29sb3I6ICMwMDAwNmQ7XG59IiwiJHBhZGRpbmc6IDQwcHg7IC8vID8gbm90IHVzZWRcclxuJHNtYWxsLXBhZGRpbmc6IDE1cHg7XHJcbiRoZWFkZXItaGVpZ2h0OiA0MHB4O1xyXG5cclxuJGZzaXplMTogMTVweDtcclxuJGZzaXplMjogMTJweDtcclxuJGZzaXplMzogMzBweDtcclxuXHJcbiRwb3J0LXNpemU6IDE1cHg7XHJcbiRkZWZhdWx0LXNpZGUtcGFkZGluZzogMTVweDtcclxuXHJcbiRkaXNhYmxlZC1vcGFjaXR5OiAwLjQ7IiwiXHJcbiRjb2xvcjE6ICM4MDgwODA7XHJcbiRjb2xvcjI6ICM5OTk5OTk7XHJcbiRjb2xvcjM6ICNCM0IzQjM7IFxyXG4kY29sb3I0OiAjQ0NDQ0NDO1xyXG4kY29sb3I1OiAjRTZFNkU2O1xyXG4kY29sb3I1LTU6IHJnYigyNDUsIDI0NSwgMjQ1KTtcclxuJGNvbG9yNjogcmdiKDI1MCwgMjUwLCAyNTEpO1xyXG5cclxuJGNvbG9yNzogd2hpdGU7XHJcbiRjb2xvcjg6ICMzNzM3Mzc7XHJcblxyXG4kc2VsZWN0ZWQtY29sb3I6IHJnYigwLCAwLCAxMDkpO1xyXG4kc2VsZWN0ZWQtY29sb3IxOiByZ2IoMjI4LCAyMjgsIDI0Nyk7XHJcbiRzZWxlY3RlZC1jb2xvcjI6IHJnYigyMTUsIDIxNSwgMjU1KTtcclxuJGhvdmVyLWNvbG9yOiAkY29sb3IyO1xyXG5cclxuJGVycm9yLWNvbG9yOiAjRTk0ODU4OyAvL3BpbmstcmVkXHJcbiRlcnJvci1jb2xvci1sdDogcmdiKDI1NSwgMjIwLCAyMjQpO1xyXG4kcGNvbG9yMjogI0YzQTMyQTsgLy9vcmFuZ2UteWVsbG93XHJcbiRwcmludC1jb2xvcjogcmdiKDEzMCwgMTkxLCAxMTApOyAvL2xpZ2h0Z3JlZW5cclxuJHByaW50LWNvbG9yLWx0OiByZ2IoMjMwLCAyNTUsIDIyMSk7XHJcbiRwcmludC1jb2xvci1kazogcmdiKDYzLCA5OSwgNTEpOyAvL2xpZ2h0Z3JlZW5cclxuJHNlbGVjdEdlb20tY29sb3I6IHJnYigyNTUsIDE3NCwgMCk7IC8vIGxpZ2h0IG9yYW5nZVxyXG4kc2VsZWN0R2VvbS1jb2xvci1sdDogcmdiKDI1NSwgMjI1LCAxNjApO1xyXG5cclxuLy8gJHByb2QtYmFja2dyb3VuZC1jb2xvcjogcmdiKDI1MCwyNTAsMjUwKTtcclxuLy8gJGJhY2tncm91bmQtY29sb3I6IHJnYigyMjAsMjIwLDIyMCk7XHJcbiRmdW5jdGlvbi10ZXh0LWNvbG9yOiByZ2IoMTkwLCAxNDAsIDMwKTtcclxuJGZ1bmN0aW9uLXRleHQtY29sb3IyOiByZ2IoMTgsIDEyNiwgMTM2KTtcclxuJGZ1bmN0aW9uLXRleHQtY29sb3IzOiByZ2IoMTkwLCAxNDAsIDMwKTtcclxuJGJhc2ljLWZ1bmN0aW9uLXRleHQtY29sb3I6IHJnYigyMDAsIDcwLCAxNTApO1xyXG4kY29tbWVudC1jb2xvcjogZGFya2dyZWVuO1xyXG4iXX0= */\"","import { Component } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { _parameterTypes } from '@assets/core/modules';\nimport { FileHandle } from './directives/dragDropDirective';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n    model = null;\n    files: FileHandle[] = [];\n\n    constructor(private matIconRegistry: MatIconRegistry, private domSanitizer: DomSanitizer) {\n        // this.matIconRegistry.addSvgIcon('printDis', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Print_disabled.svg'));\n        // this.matIconRegistry.addSvgIcon('print', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/iconPrint.svg'));\n        // this.matIconRegistry.addSvgIcon('disabled', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/iconDisabled.svg'));\n        this.matIconRegistry.addSvgIcon('settings', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Settings.svg'));\n        this.matIconRegistry.addSvgIcon('select', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Select.svg'));\n        // this.matIconRegistry.addSvgIcon('c3D Viewer', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/3D2.svg'));\n        // this.matIconRegistry.addSvgIcon('cGeo Viewer', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Geo.svg'));\n        // this.matIconRegistry.addSvgIcon('cCytoscape Viewer', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/cyto.svg'));\n        // this.matIconRegistry.addSvgIcon('cMobius Cesium', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Geo2.svg'));\n        // this.matIconRegistry.addSvgIcon('cConsole', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Console.svg'));\n        // this.matIconRegistry.addSvgIcon('cHelp', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Help.svg'));\n        // this.matIconRegistry.addSvgIcon('cSummary', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Summary.svg'));\n        this.matIconRegistry.addSvgIcon('cZoom', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Zoom.svg'));\n        // this.matIconRegistry.addSvgIcon('cfv', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Mobius favicon.svg'));\n        // this.matIconRegistry.addSvgIcon('cMenu', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Three Lines Menu.svg'));\n        // this.matIconRegistry.addSvgIcon('cGallery', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Home.svg'));\n        // this.matIconRegistry.addSvgIcon('cDashboard', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Dashboard.svg'));\n        // this.matIconRegistry.addSvgIcon('cFlowchart', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Flowchart.svg'));\n        // this.matIconRegistry.addSvgIcon('cEditor', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Node.svg'));\n        // this.matIconRegistry.addSvgIcon('cAdd', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/add.svg'));\n        // this.matIconRegistry.addSvgIcon('cRemove', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/remove.svg'));\n        // this.matIconRegistry.addSvgIcon('cCredits', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/Credits.svg'));\n        // this.matIconRegistry.addSvgIcon('cUpArrow', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/arrowup.svg'));\n        // this.matIconRegistry.addSvgIcon('cDnArrow', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/arrowdown.svg'));\n        this.matIconRegistry.addSvgIcon('cControlCam', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/ControlCam.svg'));\n        this.matIconRegistry.addSvgIcon('cVisibility', this.domSanitizer.bypassSecurityTrustResourceUrl('assets/Icons/visibility.svg'));\n    }\n\n    async filesDropped(files: FileHandle[]) {\n        if (files.length === 0) { return; }\n        const f = files[0];\n        try {\n            const fileReader = new FileReader();\n            fileReader.onload = (e) => {\n                this.model = _parameterTypes.newFn();\n                this.model.setJSONStr(fileReader.result);\n            };\n            fileReader.readAsText(f.file, 'json/applications');\n        } catch (ex) {\n            return;\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\n\nimport { AppComponent } from './app.component';\nimport { GIViewerComponent } from './gi-viewer/gi-viewer.component';\nimport { GIViewerModule } from './gi-viewer/gi-viewer';\nimport { DataService } from './gi-viewer/data/data.service';\nimport { DragDirective } from './directives/dragDropDirective';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DragDirective\n  ],\n  imports: [\n    HttpClientModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatIconModule,\n    GIViewerModule\n  ],\n  entryComponents: [\n    GIViewerComponent\n  ],\n  providers: [ DataService ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n","import { Directive,\r\n    HostBinding,\r\n    HostListener,\r\n    Output,\r\n    EventEmitter } from '@angular/core';\r\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\r\n\r\nexport interface FileHandle {\r\n    file: File;\r\n    url: SafeUrl;\r\n}\r\n\r\n@Directive({\r\n    selector: '[appDrag]'\r\n})\r\nexport class DragDirective {\r\n    @Output() files: EventEmitter<FileHandle[]> = new EventEmitter();\r\n\r\n    @HostBinding('style.background') private background = '#eee';\r\n\r\n    constructor(private sanitizer: DomSanitizer) { }\r\n\r\n    @HostListener('dragover', ['$event']) public onDragOver(evt: DragEvent) {\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n        this.background = '#999';\r\n    }\r\n\r\n    @HostListener('dragleave', ['$event']) public onDragLeave(evt: DragEvent) {\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n        this.background = '#eee';\r\n    }\r\n\r\n    @HostListener('drop', ['$event']) public onDrop(evt: DragEvent) {\r\n        evt.preventDefault();\r\n        evt.stopPropagation();\r\n        this.background = '#eee';\r\n\r\n        const files: FileHandle[] = [];\r\n        for (let i = 0; i < evt.dataTransfer.files.length; i++) {\r\n            const file = evt.dataTransfer.files[i];\r\n            const url = this.sanitizer.bypassSecurityTrustUrl(window.URL.createObjectURL(file));\r\n            files.push({ file, url });\r\n        }\r\n        if (files.length > 0) {\r\n            this.files.emit(files);\r\n        }\r\n    }\r\n}\r\n","export default \".table--container {\\n  overflow-y: auto;\\n  overflow-x: auto;\\n}\\n\\n.mat-table {\\n  background-color: whitesmoke;\\n  border-bottom: 1px solid #CCCCCC;\\n}\\n\\n#attribLabel {\\n  margin: 0;\\n  padding: 0;\\n}\\n\\n#attribLabel dd {\\n  float: left;\\n  margin: 0;\\n}\\n\\n#attribLabel dd span {\\n  background: #00006d;\\n  height: 5px;\\n  width: calc(100% - 1px);\\n  display: block;\\n  border-right: 1px solid #bfbfbf;\\n}\\n\\ntable {\\n  width: 100%;\\n  font-family: sans-serif;\\n  background-color: transparent;\\n}\\n\\ntable th i {\\n  color: rgba(117, 117, 117, 0.5);\\n  font-size: 16px;\\n  margin-left: 5px;\\n}\\n\\ntable th i.active {\\n  color: #00006d;\\n  background: unset;\\n}\\n\\ntable th .material-icons {\\n  color: rgba(117, 117, 117, 0.5);\\n  width: 16px;\\n  height: 16px;\\n  margin-left: 5px;\\n}\\n\\ntable th .material-icons.active {\\n  color: #00006d;\\n  background: unset;\\n}\\n\\ntable th.mat-header-cell:not(:first-of-type) {\\n  padding: 0px 5px;\\n}\\n\\ntable th.mat-header-cell {\\n  border-right: 1px solid #B3B3B3;\\n}\\n\\ntable th.mat-header-cell:first-of-type {\\n  width: 40px !important;\\n  padding-left: 12px;\\n}\\n\\ntable th:nth-child(2) {\\n  width: 100px;\\n}\\n\\ntable th:last-child {\\n  width: 2000px;\\n}\\n\\ntable tr.mat-header-row {\\n  background-color: whitesmoke;\\n  height: 27px;\\n}\\n\\ntable tr.mat-row {\\n  height: 24px;\\n}\\n\\ntable tr.mat-row.selected-row .mat-cell {\\n  background-color: #e6e6e6;\\n}\\n\\ntable tr.mat-row .mat-cell {\\n  -webkit-touch-callout: none;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  font-size: 12px;\\n  color: #373737;\\n  background-color: #fafafb;\\n  border-bottom: 1px solid #B3B3B3;\\n  border-left: 1px solid transparent;\\n  border-right: 1px solid #B3B3B3;\\n}\\n\\ntable tr.mat-row .mat-cell:not(:first-of-type) {\\n  padding: 0px 5px;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  max-width: 380px;\\n}\\n\\ntable tr.mat-row .mat-cell:first-of-type {\\n  width: 40px !important;\\n  padding-left: 12px;\\n}\\n\\ntable tr.mat-row .mat-cell:nth-child(2) {\\n  width: 100px;\\n}\\n\\ntable tr.mat-row .mat-cell:last-child {\\n  width: 2000px;\\n}\\n\\ntable tr.mat-row:last-child .mat-cell {\\n  border-bottom-color: transparent;\\n}\\n\\ntable td.mat-cell:first-of-type, table td.mat-footer-cell:first-of-type, table th.mat-header-cell:first-of-type {\\n  width: 10%;\\n}\\n\\ntable.c2 tr.mat-row .mat-cell:nth-child(2), table.c2 th:nth-child(2) {\\n  font-style: italic;\\n}\\n\\n::ng-deep table th:last-child .mat-sort-header-container {\\n  display: none;\\n}\\n\\n::ng-deep #attribTab {\\n  height: 100%;\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n\\n::ng-deep #attribTab ul {\\n  background-color: transparent;\\n  margin: 0;\\n  padding-left: 11px;\\n  white-space: nowrap;\\n  height: 20px;\\n  position: absolute;\\n  top: 1px;\\n  width: 100%;\\n  min-width: -webkit-fit-content;\\n  min-width: -moz-fit-content;\\n  min-width: fit-content;\\n  display: inline-flex;\\n}\\n\\n::ng-deep #attribTab ul li {\\n  list-style: none;\\n  float: left;\\n  width: 90px;\\n  color: #808080;\\n  overflow: visible;\\n  cursor: pointer;\\n  position: relative;\\n  height: inherit;\\n  padding: 0px;\\n}\\n\\n::ng-deep #attribTab ul li span {\\n  font-family: sans-serif;\\n  margin-right: 2px;\\n  font-weight: 550;\\n  font-size: 12px;\\n  line-height: 15px;\\n  border: 1px solid transparent;\\n  position: relative;\\n  display: block;\\n  padding: 2px;\\n  text-align: center;\\n  position: absolute;\\n  width: inherit;\\n  box-sizing: border-box;\\n  width: 100%;\\n  margin-top: -1px;\\n  height: 21px;\\n}\\n\\n::ng-deep #attribTab ul li:hover {\\n  background-color: transparent;\\n}\\n\\n::ng-deep #attribTab ul li:hover span {\\n  color: #00006d;\\n  background-color: transparent;\\n}\\n\\n::ng-deep #attribTab ul li.active {\\n  background-color: transparent;\\n}\\n\\n::ng-deep #attribTab ul li.active span {\\n  color: #00006d;\\n  cursor: default;\\n  background-color: whitesmoke;\\n  border: 1px solid #B3B3B3;\\n  border-bottom: 2px solid whitesmoke;\\n}\\n\\n::ng-deep #attribTab ul li:nth-child(2) {\\n  width: 85px;\\n}\\n\\n::ng-deep #attribTab .pane {\\n  margin-top: 20px;\\n  height: calc(100% - 31px);\\n}\\n\\n::ng-deep #attribTab .pane .mat-elevation-z1 {\\n  display: flex;\\n  flex-flow: column nowrap;\\n  height: 100%;\\n  justify-content: space-between;\\n  box-shadow: none;\\n  border-top: 1px solid #B3B3B3;\\n}\\n\\n.attrib--container {\\n  height: calc(100% - 30px);\\n}\\n\\n.attrib--container #attribTab {\\n  height: 100%;\\n}\\n\\n.attrib--container #attribTab my-tab {\\n  height: 100%;\\n}\\n\\n#emptyMessage {\\n  text-align: left;\\n  margin-top: -20px;\\n  margin-left: 10px;\\n  color: #888888;\\n}\\n\\n.btm--container {\\n  position: relative;\\n  height: 30px;\\n  position: absolute;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  justify-content: flex-end;\\n  width: 100%;\\n  bottom: 0px;\\n}\\n\\n.btm--container #displaySelected {\\n  padding-left: 10px;\\n  position: absolute;\\n  z-index: 1;\\n  bottom: 13px;\\n  left: 5px;\\n}\\n\\n.btm--container #displaySelected .container {\\n  display: block;\\n  position: relative;\\n  padding-left: 18px;\\n  cursor: pointer;\\n  font-size: 12px;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n  user-select: none;\\n  /* On mouse-over, add a grey background color */\\n  /* When the checkbox is checked, add a blue background */\\n  /* Create the checkmark/indicator (hidden when not checked) */\\n  /* Show the checkmark when checked */\\n  /* Style the checkmark/indicator */\\n}\\n\\n.btm--container #displaySelected .container input[type=checkbox] {\\n  position: absolute;\\n  opacity: 0;\\n  cursor: pointer;\\n  height: 0;\\n  width: 0;\\n}\\n\\n.btm--container #displaySelected .container .checkmark {\\n  position: absolute;\\n  top: 1;\\n  left: 0;\\n  height: 10px;\\n  width: 10px;\\n  border: 1px solid #ccc;\\n}\\n\\n.btm--container #displaySelected .container:hover input ~ .checkmark {\\n  background-color: #eee;\\n}\\n\\n.btm--container #displaySelected .container input:checked ~ .checkmark {\\n  border: 1px solid #00006d;\\n}\\n\\n.btm--container #displaySelected .container .checkmark:after {\\n  content: \\\"\\\";\\n  position: absolute;\\n  display: none;\\n}\\n\\n.btm--container #displaySelected .container input:checked ~ .checkmark:after {\\n  display: block;\\n}\\n\\n.btm--container #displaySelected .container .checkmark:after {\\n  left: 4px;\\n  top: -3px;\\n  width: 4px;\\n  height: 11px;\\n  border: solid #00006d;\\n  border-width: 0 1px 1px 0;\\n  transform: rotate(45deg);\\n}\\n\\n.btm--container .paginator--container {\\n  position: relative;\\n  width: 80%;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  justify-content: flex-end;\\n}\\n\\n.btm--container #matPaginator {\\n  position: absolute;\\n  top: -20px;\\n  background-color: transparent;\\n  width: 100%;\\n}\\n\\n.btm--container #matPaginator.hide {\\n  display: none;\\n}\\n\\n.btm--container #matPaginator .mat-paginator-outer-container .mat-paginator-container {\\n  width: inherit;\\n  min-height: 30px !important;\\n  position: absolute;\\n  bottom: 8px;\\n  height: 20px;\\n  display: flex;\\n  flex-flow: row nowrap;\\n  flex-shrink: 0;\\n  font-family: sans-serif;\\n}\\n\\n.btm--container #matPaginator .mat-paginator-outer-container .mat-paginator-container .mat-paginator-page-size, .btm--container #matPaginator .mat-paginator-outer-container .mat-paginator-container .mat-paginator-range-actions {\\n  height: inherit;\\n  align-items: baseline;\\n  padding-right: 15px;\\n}\\n\\n.btm--container #matPaginator .mat-paginator-outer-container .mat-paginator-container .mat-paginator-page-size-label, .btm--container #matPaginator .mat-paginator-outer-container .mat-paginator-container .mat-paginator-range-label {\\n  white-space: nowrap;\\n}\\n\\n.btm--container #matPaginator .mat-paginator-outer-container .mat-paginator-container .mat-paginator-page-size-select {\\n  margin: 0;\\n}\\n\\n.btm--container #matPaginator .mat-paginator-outer-container .mat-paginator-container .mat-paginator-page-size-select .mat-form-field-wrapper {\\n  padding-bottom: 0.95em;\\n}\\n\\n.btm--container #matPaginator .mat-paginator-outer-container .mat-paginator-container .mat-paginator-page-size-select .mat-form-field-wrapper .mat-form-field-flex .mat-form-field-infix .mat-select .mat-select-trigger .mat-select-value {\\n  font-family: sans-serif;\\n  color: #808080;\\n}\\n\\n.btm--container #matPaginator .mat-paginator-outer-container .mat-paginator-container .mat-icon-button:hover .mat-paginator-icon {\\n  fill: #00006d;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZ2ktdmlld2VyL2F0dHJpYnV0ZS9DOlxcVXNlcnNcXGFraWJkcHRcXERvY3VtZW50c1xcQW5ndWxhclxcbW9iaXVzLXZpZXdlci9zcmNcXGFwcFxcZ2ktdmlld2VyXFxhdHRyaWJ1dGVcXGF0dHJpYnV0ZS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvZ2ktdmlld2VyL2F0dHJpYnV0ZS9hdHRyaWJ1dGUuY29tcG9uZW50LnNjc3MiLCJzcmMvYXBwL2dpLXZpZXdlci9hdHRyaWJ1dGUvQzpcXFVzZXJzXFxha2liZHB0XFxEb2N1bWVudHNcXEFuZ3VsYXJcXG1vYml1cy12aWV3ZXIvc3JjXFxzY3NzXFxjb2xvcnMuc2NzcyIsInNyYy9hcHAvZ2ktdmlld2VyL2F0dHJpYnV0ZS9DOlxcVXNlcnNcXGFraWJkcHRcXERvY3VtZW50c1xcQW5ndWxhclxcbW9iaXVzLXZpZXdlci9zcmNcXHNjc3NcXHZhcmlhYmxlcy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBO0VBRUUsZ0JBQUE7RUFDQSxnQkFBQTtBQ0hGOztBRE1BO0VBQ0UsNEJFSlM7RUZNVCxnQ0FBQTtBQ0pGOztBRFFBO0VBQ0UsU0FBQTtFQUNBLFVBQUE7QUNMRjs7QURNRTtFQUNFLFdBQUE7RUFDQSxTQUFBO0FDSko7O0FES0k7RUFDRSxtQkVYVztFRllYLFdBQUE7RUFDQSx1QkFBQTtFQUNBLGNBQUE7RUFDQSwrQkFBQTtBQ0hOOztBRFFBO0VBQ0UsV0FBQTtFQUNBLHVCQUFBO0VBQ0EsNkJBQUE7QUNMRjs7QURPSTtFQUNFLCtCQUFBO0VBQ0EsZUFBQTtFQUNBLGdCQUFBO0FDTE47O0FETU07RUFDRSxjQUFBO0VBQ0EsaUJBQUE7QUNKUjs7QURPSTtFQUNJLCtCQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxnQkFBQTtBQ0xSOztBRE1RO0VBQ0ksY0FBQTtFQUNBLGlCQUFBO0FDSlo7O0FEUUU7RUFDRSxnQkFBQTtBQ05KOztBRFFFO0VBQ0UsK0JBQUE7QUNOSjs7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Q0EsUUFBQTtBQ3JDUjs7QUR3Q007RUFDRSxrQkFBQTtFQUNBLE1BQUE7RUFDQSxPQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7RUFDQSxzQkFBQTtBQ3RDUjs7QUR5Q007RUFDRSxzQkFBQTtBQ3ZDUjs7QUQyQ007RUFFRSx5QkFBQTtBQzFDUjs7QUQ4Q007RUFDRSxXQUFBO0VBQ0Esa0JBQUE7RUFDQSxhQUFBO0FDNUNSOztBRGdETTtFQUNFLGNBQUE7QUM5Q1I7O0FEa0RNO0VBQ0UsU0FBQTtFQUNBLFNBQUE7RUFDQSxVQUFBO0VBQ0EsWUFBQTtFQUNBLHFCQUFBO0VBQ0EseUJBQUE7RUFHQSx3QkFBQTtBQ2hEUjs7QURvREU7RUFDRSxrQkFBQTtFQUNBLFVBQUE7RUFDQSxhQUFBO0VBQ0EscUJBQUE7RUFDQSx5QkFBQTtBQ2xESjs7QURvREU7RUFJRSxrQkFBQTtFQUNBLFVBQUE7RUFDQSw2QkFBQTtFQUNBLFdBQUE7QUNyREo7O0FEK0NJO0VBQ0UsYUFBQTtBQzdDTjs7QURxRE07RUFDRSxjQUFBO0VBQ0EsMkJBQUE7RUFDQSxrQkFBQTtFQUNBLFdBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLHFCQUFBO0VBQ0EsY0FBQTtFQUNBLHVCQUFBO0FDbkRSOztBRHFEUTtFQUNFLGVBQUE7RUFDQSxxQkFBQTtFQUNBLG1CR25YTTtBRmdVaEI7O0FEcURRO0VBQ0UsbUJBQUE7QUNuRFY7O0FEdURRO0VBQ0UsU0FBQTtBQ3JEVjs7QURzRFU7RUFDRSxzQkFBQTtBQ3BEWjs7QURxRFk7RUFDRSx1QkFBQTtFQUNBLGNFaFlMO0FENlVUOztBRHlEUTtFQUNFLGFFNVhPO0FEcVVqQiIsImZpbGUiOiJzcmMvYXBwL2dpLXZpZXdlci9hdHRyaWJ1dGUvYXR0cmlidXRlLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCAnfnNjc3MvY29sb3JzJztcclxuQGltcG9ydCAnfnNjc3MvdmFyaWFibGVzJztcclxuXHJcbi50YWJsZS0tY29udGFpbmVye1xyXG4gIC8vIGhlaWdodDogMTAwJTtcclxuICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gIG92ZXJmbG93LXg6IGF1dG87XHJcbn1cclxuXHJcbi5tYXQtdGFibGV7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yNS01O1xyXG4gIC8vIGJvcmRlci10b3A6IDFweCBzb2xpZCAkY29sb3IzO1xyXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY29sb3I0O1xyXG4gIC8vIGhlaWdodDogMTAwJTtcclxufVxyXG5cclxuI2F0dHJpYkxhYmVse1xyXG4gIG1hcmdpbjogMDtcclxuICBwYWRkaW5nOiAwO1xyXG4gIGRke1xyXG4gICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBzcGFue1xyXG4gICAgICBiYWNrZ3JvdW5kOiAkc2VsZWN0ZWQtY29sb3I7XHJcbiAgICAgIGhlaWdodDogNXB4O1xyXG4gICAgICB3aWR0aDogY2FsYygxMDAlIC0gMXB4KTtcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNiZmJmYmY7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG50YWJsZSB7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgdGh7XHJcbiAgICBpIHtcclxuICAgICAgY29sb3I6IHJnYmEoMTE3LDExNywxMTcsMC41KTtcclxuICAgICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgICBtYXJnaW4tbGVmdDogNXB4O1xyXG4gICAgICAmLmFjdGl2ZXtcclxuICAgICAgICBjb2xvcjogIzAwMDA2ZDtcclxuICAgICAgICBiYWNrZ3JvdW5kOiB1bnNldDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLm1hdGVyaWFsLWljb25zIHtcclxuICAgICAgICBjb2xvcjogcmdiYSgxMTcsMTE3LDExNywwLjUpO1xyXG4gICAgICAgIHdpZHRoOiAxNnB4O1xyXG4gICAgICAgIGhlaWdodDogMTZweDtcclxuICAgICAgICBtYXJnaW4tbGVmdDogNXB4O1xyXG4gICAgICAgICYuYWN0aXZlIHtcclxuICAgICAgICAgICAgY29sb3I6ICMwMDAwNmQ7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IHVuc2V0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgdGgubWF0LWhlYWRlci1jZWxsOm5vdCg6Zmlyc3Qtb2YtdHlwZSl7XHJcbiAgICBwYWRkaW5nOiAwcHggNXB4O1xyXG4gIH1cclxuICB0aC5tYXQtaGVhZGVyLWNlbGx7XHJcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAkY29sb3IzO1xyXG4gIH1cclxuICB0aC5tYXQtaGVhZGVyLWNlbGw6Zmlyc3Qtb2YtdHlwZXtcclxuICAgIC8vIGJvcmRlci1yaWdodDogbm9uZTtcclxuICAgIHdpZHRoOiA0MHB4ICFpbXBvcnRhbnQ7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDEycHg7XHJcbiAgfVxyXG4gIHRoOm50aC1jaGlsZCgyKXtcclxuICAgIC8vIHdpZHRoOiA1NXB4ICFpbXBvcnRhbnQ7XHJcbiAgICB3aWR0aDogMTAwcHg7XHJcbiAgICAvLyBmb250LXN0eWxlOiBpdGFsaWM7XHJcbiAgfVxyXG4gIHRoOm50aC1jaGlsZChuKzMpe1xyXG4gICAgLy8gd2lkdGg6IDUwcHg7XHJcbiAgfVxyXG4gIHRoOmxhc3QtY2hpbGR7XHJcbiAgICB3aWR0aDogMjAwMHB4O1xyXG4gIH1cclxuICB0ci5tYXQtaGVhZGVyLXJvd3tcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvcjUtNTtcclxuICAgIGhlaWdodDogMjdweDtcclxuICB9XHJcbiAgdHIubWF0LXJvd3tcclxuICAgIGhlaWdodDogMjRweDtcclxuICAgICYuc2VsZWN0ZWQtcm93e1xyXG4gICAgICAubWF0LWNlbGx7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZTZlNjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLm1hdC1jZWxse1xyXG4gICAgICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XHJcbiAgICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICAgIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICAgIFxyXG4gICAgICBmb250LXNpemU6IDEycHg7XHJcbiAgICAgIGNvbG9yOiAkY29sb3I4O1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3I2O1xyXG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgJGNvbG9yMztcclxuICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgJGNvbG9yMztcclxuICAgICAgJjpub3QoOmZpcnN0LW9mLXR5cGUpe1xyXG4gICAgICAgIHBhZGRpbmc6IDBweCA1cHg7XHJcbiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG4gICAgICAgIG1heC13aWR0aDogMzgwcHg7XHJcbiAgICAgIH1cclxuICAgICAgJjpmaXJzdC1vZi10eXBle1xyXG4gICAgICAgIHdpZHRoOiA0MHB4ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAxMnB4O1xyXG4gICAgICB9XHJcbiAgICAgICY6bGFzdC1vZi10eXBle1xyXG4gICAgICAgIC8vIGJvcmRlci1yaWdodDpub25lO1xyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDIpe1xyXG4gICAgICAgIHdpZHRoOiAxMDBweDtcclxuICAgICAgICAvLyBmb250LXN0eWxlOiBpdGFsaWM7XHJcbiAgICAgIH1cclxuICAgICAgJjpudGgtY2hpbGQobiszKXtcclxuICAgICAgICAvLyB3aWR0aDogNTBweDtcclxuICAgICAgfVxyXG4gICAgICAmOmxhc3QtY2hpbGR7XHJcbiAgICAgICAgd2lkdGg6IDIwMDBweDtcclxuICAgICAgfVxyXG4gICAgICAvLyBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAvLyB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcclxuICAgICAgLy8gd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICAgIH1cclxuICAgICY6bGFzdC1jaGlsZHtcclxuICAgICAgLm1hdC1jZWxse1xyXG4gICAgICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHRkLm1hdC1jZWxsOmZpcnN0LW9mLXR5cGUsIHRkLm1hdC1mb290ZXItY2VsbDpmaXJzdC1vZi10eXBlLCB0aC5tYXQtaGVhZGVyLWNlbGw6Zmlyc3Qtb2YtdHlwZXtcclxuICAgIHdpZHRoOiAxMCU7XHJcbiAgfVxyXG59XHJcblxyXG50YWJsZXtcclxuICAmLmMye1xyXG4gICAgdHIubWF0LXJvdyAubWF0LWNlbGw6bnRoLWNoaWxkKDIpLCB0aDpudGgtY2hpbGQoMil7Zm9udC1zdHlsZTogaXRhbGljfVxyXG4gIH1cclxufVxyXG5cclxuOjpuZy1kZWVwIHRhYmxle1xyXG4gIHRoOmZpcnN0LWNoaWxke1xyXG4gICAgaXtcclxuICAgICAgLy8gZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuICB9XHJcbiAgdGg6bGFzdC1jaGlsZHtcclxuICAgIC5tYXQtc29ydC1oZWFkZXItY29udGFpbmVye1xyXG4gICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuXHJcbjo6bmctZGVlcCAjYXR0cmliVGFie1xyXG4gIGhlaWdodDogMTAwJTtcclxuICB3aWR0aDogMTAwJTtcclxuICBvdmVyZmxvdy14OiBzY3JvbGw7XHJcbiAgdWx7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIHBhZGRpbmctbGVmdDogMTFweDtcclxuICAgIC8vIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkY29sb3IzO1xyXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICAgIGhlaWdodDogMjBweDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDoxcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIG1pbi13aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcclxuICAgIGxpe1xyXG4gICAgICBsaXN0LXN0eWxlOiBub25lO1xyXG4gICAgICAvLyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgIGZsb2F0OiBsZWZ0O1xyXG4gICAgICB3aWR0aDogOTBweDtcclxuICAgICAgY29sb3I6ICRjb2xvcjE7XHJcbiAgICAgIG92ZXJmbG93OnZpc2libGU7XHJcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICBoZWlnaHQ6IGluaGVyaXQ7XHJcbiAgICAgIHBhZGRpbmc6IDBweDtcclxuICAgICAgc3BhbntcclxuICAgICAgICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcclxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDJweDtcclxuICAgICAgICBmb250LXdlaWdodDogNTUwO1xyXG4gICAgICAgIGZvbnQtc2l6ZTogJGZzaXplMjtcclxuICAgICAgICBsaW5lLWhlaWdodDogJGZzaXplMTtcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgcGFkZGluZzogMnB4O1xyXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgd2lkdGg6IGluaGVyaXQ7XHJcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBtYXJnaW4tdG9wOiAtMXB4O1xyXG4gICAgICAgIGhlaWdodDogMjFweDtcclxuICAgICAgfVxyXG4gICAgICAmOmhvdmVye1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICAgIHNwYW57XHJcbiAgICAgICAgICBjb2xvcjogJHNlbGVjdGVkLWNvbG9yO1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICYuYWN0aXZle1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICAgIHNwYW57XHJcbiAgICAgICAgICBjb2xvcjogJHNlbGVjdGVkLWNvbG9yO1xyXG4gICAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xyXG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yNS01O1xyXG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgJGNvbG9yMztcclxuICAgICAgICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAkY29sb3I1LTU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICY6bnRoLWNoaWxkKDIpe1xyXG4gICAgICAgIHdpZHRoOiA4NXB4O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIGNvbnRhaW5zIGV2ZXJ5dGhpbmdcclxuICAucGFuZXtcclxuICAgIG1hcmdpbi10b3A6IDIwcHg7XHJcbiAgICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDMxcHgpO1xyXG4gICAgLm1hdC1lbGV2YXRpb24tejF7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcclxuICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICAgIGJveC1zaGFkb3c6IG5vbmU7XHJcbiAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAkY29sb3IzO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLmF0dHJpYi0tY29udGFpbmVye1xyXG4gIGhlaWdodDogY2FsYygxMDAlIC0gMzBweCk7IC8vICRmc2l6ZTMgYnRtIGNvbnRhaW5lciBoZWlnaHRcclxuICAjYXR0cmliVGFie1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgbXktdGFie1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuI2VtcHR5TWVzc2FnZXtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gIG1hcmdpbi10b3A6IC0yMHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xyXG4gIGNvbG9yOiAjODg4ODg4O1xyXG59XHJcblxyXG4uYnRtLS1jb250YWluZXJ7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIGhlaWdodDogJGZzaXplMztcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XHJcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcclxuICB3aWR0aDogMTAwJTtcclxuICBib3R0b206IDBweDtcclxuICAjZGlzcGxheVNlbGVjdGVke1xyXG4gICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xyXG4gICAgLy8gd2lkdGg6IDMwJTtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHotaW5kZXg6IDE7XHJcbiAgICBib3R0b206IDEzcHg7XHJcbiAgICBsZWZ0OiA1cHg7XHJcbiAgICAuY29udGFpbmVyIHtcclxuICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgcGFkZGluZy1sZWZ0OiAxOHB4O1xyXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTJweDtcclxuICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgICAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xyXG4gICAgICB1c2VyLXNlbGVjdDogbm9uZTtcclxuXHJcbiAgICAgIGlucHV0W3R5cGU9Y2hlY2tib3hde1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICBoZWlnaHQ6IDA7XHJcbiAgICAgICAgd2lkdGg6IDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC5jaGVja21hcmsge1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICB0b3A6IDE7XHJcbiAgICAgICAgbGVmdDogMDtcclxuICAgICAgICBoZWlnaHQ6IDEwcHg7XHJcbiAgICAgICAgd2lkdGg6IDEwcHg7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcclxuICAgICAgfVxyXG4gICAgICAvKiBPbiBtb3VzZS1vdmVyLCBhZGQgYSBncmV5IGJhY2tncm91bmQgY29sb3IgKi9cclxuICAgICAgJjpob3ZlciBpbnB1dCB+IC5jaGVja21hcmsge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qIFdoZW4gdGhlIGNoZWNrYm94IGlzIGNoZWNrZWQsIGFkZCBhIGJsdWUgYmFja2dyb3VuZCAqL1xyXG4gICAgICBpbnB1dDpjaGVja2VkIH4gLmNoZWNrbWFyayB7XHJcbiAgICAgICAgLy8gYmFja2dyb3VuZC1jb2xvcjogIzIxOTZGMztcclxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjMDAwMDZkO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBDcmVhdGUgdGhlIGNoZWNrbWFyay9pbmRpY2F0b3IgKGhpZGRlbiB3aGVuIG5vdCBjaGVja2VkKSAqL1xyXG4gICAgICAuY2hlY2ttYXJrOmFmdGVyIHtcclxuICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvKiBTaG93IHRoZSBjaGVja21hcmsgd2hlbiBjaGVja2VkICovXHJcbiAgICAgIGlucHV0OmNoZWNrZWQgfiAuY2hlY2ttYXJrOmFmdGVyIHtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgfVxyXG5cclxuICAgICAgLyogU3R5bGUgdGhlIGNoZWNrbWFyay9pbmRpY2F0b3IgKi9cclxuICAgICAgLmNoZWNrbWFyazphZnRlciB7XHJcbiAgICAgICAgbGVmdDogNHB4O1xyXG4gICAgICAgIHRvcDogLTNweDtcclxuICAgICAgICB3aWR0aDogNHB4O1xyXG4gICAgICAgIGhlaWdodDogMTFweDtcclxuICAgICAgICBib3JkZXI6IHNvbGlkICMwMDAwNmQ7XHJcbiAgICAgICAgYm9yZGVyLXdpZHRoOiAwIDFweCAxcHggMDtcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcclxuICAgICAgICAtbXMtdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xyXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAucGFnaW5hdG9yLS1jb250YWluZXJ7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB3aWR0aDogODAlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcclxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XHJcbiAgfVxyXG4gICNtYXRQYWdpbmF0b3J7XHJcbiAgICAmLmhpZGV7XHJcbiAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IC0yMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIC8vIHBhZ2luYXRvclxyXG4gICAgLm1hdC1wYWdpbmF0b3Itb3V0ZXItY29udGFpbmVye1xyXG4gICAgICAubWF0LXBhZ2luYXRvci1jb250YWluZXJ7XHJcbiAgICAgICAgd2lkdGg6IGluaGVyaXQ7XHJcbiAgICAgICAgbWluLWhlaWdodDogJGZzaXplMyAhaW1wb3J0YW50O1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICBib3R0b206IDhweDtcclxuICAgICAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XHJcbiAgICAgICAgZmxleC1zaHJpbms6IDA7XHJcbiAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XHJcblxyXG4gICAgICAgIC5tYXQtcGFnaW5hdG9yLXBhZ2Utc2l6ZSwgLm1hdC1wYWdpbmF0b3ItcmFuZ2UtYWN0aW9uc3tcclxuICAgICAgICAgIGhlaWdodDogaW5oZXJpdDsgIFxyXG4gICAgICAgICAgYWxpZ24taXRlbXM6IGJhc2VsaW5lO1xyXG4gICAgICAgICAgcGFkZGluZy1yaWdodDogJHNtYWxsLXBhZGRpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5tYXQtcGFnaW5hdG9yLXBhZ2Utc2l6ZS1sYWJlbCwgLm1hdC1wYWdpbmF0b3ItcmFuZ2UtbGFiZWx7XHJcbiAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaXRlbXMvcGFnZSBzZWxlY3RvclxyXG4gICAgICAgIC5tYXQtcGFnaW5hdG9yLXBhZ2Utc2l6ZS1zZWxlY3R7XHJcbiAgICAgICAgICBtYXJnaW46IDA7XHJcbiAgICAgICAgICAubWF0LWZvcm0tZmllbGQtd3JhcHBlcntcclxuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDAuOTVlbTtcclxuICAgICAgICAgICAgLm1hdC1mb3JtLWZpZWxkLWZsZXggLm1hdC1mb3JtLWZpZWxkLWluZml4IC5tYXQtc2VsZWN0IC5tYXQtc2VsZWN0LXRyaWdnZXIgLm1hdC1zZWxlY3QtdmFsdWV7XHJcbiAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XHJcbiAgICAgICAgICAgICAgY29sb3I6ICRjb2xvcjE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHBhZ2UgY2hhbmdlIGljb25zXHJcbiAgICAgICAgLm1hdC1pY29uLWJ1dHRvbjpob3ZlciAubWF0LXBhZ2luYXRvci1pY29ue1xyXG4gICAgICAgICAgZmlsbDogJHNlbGVjdGVkLWNvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgfVxyXG59XHJcbiIsIi50YWJsZS0tY29udGFpbmVyIHtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgb3ZlcmZsb3cteDogYXV0bztcbn1cblxuLm1hdC10YWJsZSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlc21va2U7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjQ0NDQ0NDO1xufVxuXG4jYXR0cmliTGFiZWwge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG59XG4jYXR0cmliTGFiZWwgZGQge1xuICBmbG9hdDogbGVmdDtcbiAgbWFyZ2luOiAwO1xufVxuI2F0dHJpYkxhYmVsIGRkIHNwYW4ge1xuICBiYWNrZ3JvdW5kOiAjMDAwMDZkO1xuICBoZWlnaHQ6IDVweDtcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDFweCk7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYmZiZmJmO1xufVxuXG50YWJsZSB7XG4gIHdpZHRoOiAxMDAlO1xuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG50YWJsZSB0aCBpIHtcbiAgY29sb3I6IHJnYmEoMTE3LCAxMTcsIDExNywgMC41KTtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBtYXJnaW4tbGVmdDogNXB4O1xufVxudGFibGUgdGggaS5hY3RpdmUge1xuICBjb2xvcjogIzAwMDA2ZDtcbiAgYmFja2dyb3VuZDogdW5zZXQ7XG59XG50YWJsZSB0aCAubWF0ZXJpYWwtaWNvbnMge1xuICBjb2xvcjogcmdiYSgxMTcsIDExNywgMTE3LCAwLjUpO1xuICB3aWR0aDogMTZweDtcbiAgaGVpZ2h0OiAxNnB4O1xuICBtYXJnaW4tbGVmdDogNXB4O1xufVxudGFibGUgdGggLm1hdGVyaWFsLWljb25zLmFjdGl2ZSB7XG4gIGNvbG9yOiAjMDAwMDZkO1xuICBiYWNrZ3JvdW5kOiB1bnNldDtcbn1cbnRhYmxlIHRoLm1hdC1oZWFkZXItY2VsbDpub3QoOmZpcnN0LW9mLXR5cGUpIHtcbiAgcGFkZGluZzogMHB4IDVweDtcbn1cbnRhYmxlIHRoLm1hdC1oZWFkZXItY2VsbCB7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNCM0IzQjM7XG59XG50YWJsZSB0aC5tYXQtaGVhZGVyLWNlbGw6Zmlyc3Qtb2YtdHlwZSB7XG4gIHdpZHRoOiA0MHB4ICFpbXBvcnRhbnQ7XG4gIHBhZGRpbmctbGVmdDogMTJweDtcbn1cbnRhYmxlIHRoOm50aC1jaGlsZCgyKSB7XG4gIHdpZHRoOiAxMDBweDtcbn1cbnRhYmxlIHRoOmxhc3QtY2hpbGQge1xuICB3aWR0aDogMjAwMHB4O1xufVxudGFibGUgdHIubWF0LWhlYWRlci1yb3cge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZXNtb2tlO1xuICBoZWlnaHQ6IDI3cHg7XG59XG50YWJsZSB0ci5tYXQtcm93IHtcbiAgaGVpZ2h0OiAyNHB4O1xufVxudGFibGUgdHIubWF0LXJvdy5zZWxlY3RlZC1yb3cgLm1hdC1jZWxsIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2U2ZTZlNjtcbn1cbnRhYmxlIHRyLm1hdC1yb3cgLm1hdC1jZWxsIHtcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lO1xuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuICBmb250LXNpemU6IDEycHg7XG4gIGNvbG9yOiAjMzczNzM3O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmFmYWZiO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI0IzQjNCMztcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI0IzQjNCMztcbn1cbnRhYmxlIHRyLm1hdC1yb3cgLm1hdC1jZWxsOm5vdCg6Zmlyc3Qtb2YtdHlwZSkge1xuICBwYWRkaW5nOiAwcHggNXB4O1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgbWF4LXdpZHRoOiAzODBweDtcbn1cbnRhYmxlIHRyLm1hdC1yb3cgLm1hdC1jZWxsOmZpcnN0LW9mLXR5cGUge1xuICB3aWR0aDogNDBweCAhaW1wb3J0YW50O1xuICBwYWRkaW5nLWxlZnQ6IDEycHg7XG59XG50YWJsZSB0ci5tYXQtcm93IC5tYXQtY2VsbDpudGgtY2hpbGQoMikge1xuICB3aWR0aDogMTAwcHg7XG59XG50YWJsZSB0ci5tYXQtcm93IC5tYXQtY2VsbDpsYXN0LWNoaWxkIHtcbiAgd2lkdGg6IDIwMDBweDtcbn1cbnRhYmxlIHRyLm1hdC1yb3c6bGFzdC1jaGlsZCAubWF0LWNlbGwge1xuICBib3JkZXItYm90dG9tLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cbnRhYmxlIHRkLm1hdC1jZWxsOmZpcnN0LW9mLXR5cGUsIHRhYmxlIHRkLm1hdC1mb290ZXItY2VsbDpmaXJzdC1vZi10eXBlLCB0YWJsZSB0aC5tYXQtaGVhZGVyLWNlbGw6Zmlyc3Qtb2YtdHlwZSB7XG4gIHdpZHRoOiAxMCU7XG59XG5cbnRhYmxlLmMyIHRyLm1hdC1yb3cgLm1hdC1jZWxsOm50aC1jaGlsZCgyKSwgdGFibGUuYzIgdGg6bnRoLWNoaWxkKDIpIHtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xufVxuXG46Om5nLWRlZXAgdGFibGUgdGg6bGFzdC1jaGlsZCAubWF0LXNvcnQtaGVhZGVyLWNvbnRhaW5lciB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbjo6bmctZGVlcCAjYXR0cmliVGFiIHtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbiAgb3ZlcmZsb3cteDogc2Nyb2xsO1xufVxuOjpuZy1kZWVwICNhdHRyaWJUYWIgdWwge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nLWxlZnQ6IDExcHg7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIGhlaWdodDogMjBweDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDFweDtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi13aWR0aDogZml0LWNvbnRlbnQ7XG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xufVxuOjpuZy1kZWVwICNhdHRyaWJUYWIgdWwgbGkge1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBmbG9hdDogbGVmdDtcbiAgd2lkdGg6IDkwcHg7XG4gIGNvbG9yOiAjODA4MDgwO1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGhlaWdodDogaW5oZXJpdDtcbiAgcGFkZGluZzogMHB4O1xufVxuOjpuZy1kZWVwICNhdHRyaWJUYWIgdWwgbGkgc3BhbiB7XG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICBtYXJnaW4tcmlnaHQ6IDJweDtcbiAgZm9udC13ZWlnaHQ6IDU1MDtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBsaW5lLWhlaWdodDogMTVweDtcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBhZGRpbmc6IDJweDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiBpbmhlcml0O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3aWR0aDogMTAwJTtcbiAgbWFyZ2luLXRvcDogLTFweDtcbiAgaGVpZ2h0OiAyMXB4O1xufVxuOjpuZy1kZWVwICNhdHRyaWJUYWIgdWwgbGk6aG92ZXIge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cbjo6bmctZGVlcCAjYXR0cmliVGFiIHVsIGxpOmhvdmVyIHNwYW4ge1xuICBjb2xvcjogIzAwMDA2ZDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG46Om5nLWRlZXAgI2F0dHJpYlRhYiB1bCBsaS5hY3RpdmUge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cbjo6bmctZGVlcCAjYXR0cmliVGFiIHVsIGxpLmFjdGl2ZSBzcGFuIHtcbiAgY29sb3I6ICMwMDAwNmQ7XG4gIGN1cnNvcjogZGVmYXVsdDtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGVzbW9rZTtcbiAgYm9yZGVyOiAxcHggc29saWQgI0IzQjNCMztcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHdoaXRlc21va2U7XG59XG46Om5nLWRlZXAgI2F0dHJpYlRhYiB1bCBsaTpudGgtY2hpbGQoMikge1xuICB3aWR0aDogODVweDtcbn1cbjo6bmctZGVlcCAjYXR0cmliVGFiIC5wYW5lIHtcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAzMXB4KTtcbn1cbjo6bmctZGVlcCAjYXR0cmliVGFiIC5wYW5lIC5tYXQtZWxldmF0aW9uLXoxIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYm94LXNoYWRvdzogbm9uZTtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNCM0IzQjM7XG59XG5cbi5hdHRyaWItLWNvbnRhaW5lciB7XG4gIGhlaWdodDogY2FsYygxMDAlIC0gMzBweCk7XG59XG4uYXR0cmliLS1jb250YWluZXIgI2F0dHJpYlRhYiB7XG4gIGhlaWdodDogMTAwJTtcbn1cbi5hdHRyaWItLWNvbnRhaW5lciAjYXR0cmliVGFiIG15LXRhYiB7XG4gIGhlaWdodDogMTAwJTtcbn1cblxuI2VtcHR5TWVzc2FnZSB7XG4gIHRleHQtYWxpZ246IGxlZnQ7XG4gIG1hcmdpbi10b3A6IC0yMHB4O1xuICBtYXJnaW4tbGVmdDogMTBweDtcbiAgY29sb3I6ICM4ODg4ODg7XG59XG5cbi5idG0tLWNvbnRhaW5lciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiAzMHB4O1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZmxvdzogcm93IG5vd3JhcDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgd2lkdGg6IDEwMCU7XG4gIGJvdHRvbTogMHB4O1xufVxuLmJ0bS0tY29udGFpbmVyICNkaXNwbGF5U2VsZWN0ZWQge1xuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogMTtcbiAgYm90dG9tOiAxM3B4O1xuICBsZWZ0OiA1cHg7XG59XG4uYnRtLS1jb250YWluZXIgI2Rpc3BsYXlTZWxlY3RlZCAuY29udGFpbmVyIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgcGFkZGluZy1sZWZ0OiAxOHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xuICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgLyogT24gbW91c2Utb3ZlciwgYWRkIGEgZ3JleSBiYWNrZ3JvdW5kIGNvbG9yICovXG4gIC8qIFdoZW4gdGhlIGNoZWNrYm94IGlzIGNoZWNrZWQsIGFkZCBhIGJsdWUgYmFja2dyb3VuZCAqL1xuICAvKiBDcmVhdGUgdGhlIGNoZWNrbWFyay9pbmRpY2F0b3IgKGhpZGRlbiB3aGVuIG5vdCBjaGVja2VkKSAqL1xuICAvKiBTaG93IHRoZSBjaGVja21hcmsgd2hlbiBjaGVja2VkICovXG4gIC8qIFN0eWxlIHRoZSBjaGVja21hcmsvaW5kaWNhdG9yICovXG59XG4uYnRtLS1jb250YWluZXIgI2Rpc3BsYXlTZWxlY3RlZCAuY29udGFpbmVyIGlucHV0W3R5cGU9Y2hlY2tib3hdIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBvcGFjaXR5OiAwO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGhlaWdodDogMDtcbiAgd2lkdGg6IDA7XG59XG4uYnRtLS1jb250YWluZXIgI2Rpc3BsYXlTZWxlY3RlZCAuY29udGFpbmVyIC5jaGVja21hcmsge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogMTtcbiAgbGVmdDogMDtcbiAgaGVpZ2h0OiAxMHB4O1xuICB3aWR0aDogMTBweDtcbiAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbn1cbi5idG0tLWNvbnRhaW5lciAjZGlzcGxheVNlbGVjdGVkIC5jb250YWluZXI6aG92ZXIgaW5wdXQgfiAuY2hlY2ttYXJrIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTtcbn1cbi5idG0tLWNvbnRhaW5lciAjZGlzcGxheVNlbGVjdGVkIC5jb250YWluZXIgaW5wdXQ6Y2hlY2tlZCB+IC5jaGVja21hcmsge1xuICBib3JkZXI6IDFweCBzb2xpZCAjMDAwMDZkO1xufVxuLmJ0bS0tY29udGFpbmVyICNkaXNwbGF5U2VsZWN0ZWQgLmNvbnRhaW5lciAuY2hlY2ttYXJrOmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBkaXNwbGF5OiBub25lO1xufVxuLmJ0bS0tY29udGFpbmVyICNkaXNwbGF5U2VsZWN0ZWQgLmNvbnRhaW5lciBpbnB1dDpjaGVja2VkIH4gLmNoZWNrbWFyazphZnRlciB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuLmJ0bS0tY29udGFpbmVyICNkaXNwbGF5U2VsZWN0ZWQgLmNvbnRhaW5lciAuY2hlY2ttYXJrOmFmdGVyIHtcbiAgbGVmdDogNHB4O1xuICB0b3A6IC0zcHg7XG4gIHdpZHRoOiA0cHg7XG4gIGhlaWdodDogMTFweDtcbiAgYm9yZGVyOiBzb2xpZCAjMDAwMDZkO1xuICBib3JkZXItd2lkdGg6IDAgMXB4IDFweCAwO1xuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgLW1zLXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xufVxuLmJ0bS0tY29udGFpbmVyIC5wYWdpbmF0b3ItLWNvbnRhaW5lciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgd2lkdGg6IDgwJTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgbm93cmFwO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xufVxuLmJ0bS0tY29udGFpbmVyICNtYXRQYWdpbmF0b3Ige1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRvcDogLTIwcHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICB3aWR0aDogMTAwJTtcbn1cbi5idG0tLWNvbnRhaW5lciAjbWF0UGFnaW5hdG9yLmhpZGUge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmJ0bS0tY29udGFpbmVyICNtYXRQYWdpbmF0b3IgLm1hdC1wYWdpbmF0b3Itb3V0ZXItY29udGFpbmVyIC5tYXQtcGFnaW5hdG9yLWNvbnRhaW5lciB7XG4gIHdpZHRoOiBpbmhlcml0O1xuICBtaW4taGVpZ2h0OiAzMHB4ICFpbXBvcnRhbnQ7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiA4cHg7XG4gIGhlaWdodDogMjBweDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgbm93cmFwO1xuICBmbGV4LXNocmluazogMDtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG59XG4uYnRtLS1jb250YWluZXIgI21hdFBhZ2luYXRvciAubWF0LXBhZ2luYXRvci1vdXRlci1jb250YWluZXIgLm1hdC1wYWdpbmF0b3ItY29udGFpbmVyIC5tYXQtcGFnaW5hdG9yLXBhZ2Utc2l6ZSwgLmJ0bS0tY29udGFpbmVyICNtYXRQYWdpbmF0b3IgLm1hdC1wYWdpbmF0b3Itb3V0ZXItY29udGFpbmVyIC5tYXQtcGFnaW5hdG9yLWNvbnRhaW5lciAubWF0LXBhZ2luYXRvci1yYW5nZS1hY3Rpb25zIHtcbiAgaGVpZ2h0OiBpbmhlcml0O1xuICBhbGlnbi1pdGVtczogYmFzZWxpbmU7XG4gIHBhZGRpbmctcmlnaHQ6IDE1cHg7XG59XG4uYnRtLS1jb250YWluZXIgI21hdFBhZ2luYXRvciAubWF0LXBhZ2luYXRvci1vdXRlci1jb250YWluZXIgLm1hdC1wYWdpbmF0b3ItY29udGFpbmVyIC5tYXQtcGFnaW5hdG9yLXBhZ2Utc2l6ZS1sYWJlbCwgLmJ0bS0tY29udGFpbmVyICNtYXRQYWdpbmF0b3IgLm1hdC1wYWdpbmF0b3Itb3V0ZXItY29udGFpbmVyIC5tYXQtcGFnaW5hdG9yLWNvbnRhaW5lciAubWF0LXBhZ2luYXRvci1yYW5nZS1sYWJlbCB7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG59XG4uYnRtLS1jb250YWluZXIgI21hdFBhZ2luYXRvciAubWF0LXBhZ2luYXRvci1vdXRlci1jb250YWluZXIgLm1hdC1wYWdpbmF0b3ItY29udGFpbmVyIC5tYXQtcGFnaW5hdG9yLXBhZ2Utc2l6ZS1zZWxlY3Qge1xuICBtYXJnaW46IDA7XG59XG4uYnRtLS1jb250YWluZXIgI21hdFBhZ2luYXRvciAubWF0LXBhZ2luYXRvci1vdXRlci1jb250YWluZXIgLm1hdC1wYWdpbmF0b3ItY29udGFpbmVyIC5tYXQtcGFnaW5hdG9yLXBhZ2Utc2l6ZS1zZWxlY3QgLm1hdC1mb3JtLWZpZWxkLXdyYXBwZXIge1xuICBwYWRkaW5nLWJvdHRvbTogMC45NWVtO1xufVxuLmJ0bS0tY29udGFpbmVyICNtYXRQYWdpbmF0b3IgLm1hdC1wYWdpbmF0b3Itb3V0ZXItY29udGFpbmVyIC5tYXQtcGFnaW5hdG9yLWNvbnRhaW5lciAubWF0LXBhZ2luYXRvci1wYWdlLXNpemUtc2VsZWN0IC5tYXQtZm9ybS1maWVsZC13cmFwcGVyIC5tYXQtZm9ybS1maWVsZC1mbGV4IC5tYXQtZm9ybS1maWVsZC1pbmZpeCAubWF0LXNlbGVjdCAubWF0LXNlbGVjdC10cmlnZ2VyIC5tYXQtc2VsZWN0LXZhbHVlIHtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIGNvbG9yOiAjODA4MDgwO1xufVxuLmJ0bS0tY29udGFpbmVyICNtYXRQYWdpbmF0b3IgLm1hdC1wYWdpbmF0b3Itb3V0ZXItY29udGFpbmVyIC5tYXQtcGFnaW5hdG9yLWNvbnRhaW5lciAubWF0LWljb24tYnV0dG9uOmhvdmVyIC5tYXQtcGFnaW5hdG9yLWljb24ge1xuICBmaWxsOiAjMDAwMDZkO1xufSIsIlxyXG4kY29sb3IxOiAjODA4MDgwO1xyXG4kY29sb3IyOiAjOTk5OTk5O1xyXG4kY29sb3IzOiAjQjNCM0IzOyBcclxuJGNvbG9yNDogI0NDQ0NDQztcclxuJGNvbG9yNTogI0U2RTZFNjtcclxuJGNvbG9yNS01OiByZ2IoMjQ1LCAyNDUsIDI0NSk7XHJcbiRjb2xvcjY6IHJnYigyNTAsIDI1MCwgMjUxKTtcclxuXHJcbiRjb2xvcjc6IHdoaXRlO1xyXG4kY29sb3I4OiAjMzczNzM3O1xyXG5cclxuJHNlbGVjdGVkLWNvbG9yOiByZ2IoMCwgMCwgMTA5KTtcclxuJHNlbGVjdGVkLWNvbG9yMTogcmdiKDIyOCwgMjI4LCAyNDcpO1xyXG4kc2VsZWN0ZWQtY29sb3IyOiByZ2IoMjE1LCAyMTUsIDI1NSk7XHJcbiRob3Zlci1jb2xvcjogJGNvbG9yMjtcclxuXHJcbiRlcnJvci1jb2xvcjogI0U5NDg1ODsgLy9waW5rLXJlZFxyXG4kZXJyb3ItY29sb3ItbHQ6IHJnYigyNTUsIDIyMCwgMjI0KTtcclxuJHBjb2xvcjI6ICNGM0EzMkE7IC8vb3JhbmdlLXllbGxvd1xyXG4kcHJpbnQtY29sb3I6IHJnYigxMzAsIDE5MSwgMTEwKTsgLy9saWdodGdyZWVuXHJcbiRwcmludC1jb2xvci1sdDogcmdiKDIzMCwgMjU1LCAyMjEpO1xyXG4kcHJpbnQtY29sb3ItZGs6IHJnYig2MywgOTksIDUxKTsgLy9saWdodGdyZWVuXHJcbiRzZWxlY3RHZW9tLWNvbG9yOiByZ2IoMjU1LCAxNzQsIDApOyAvLyBsaWdodCBvcmFuZ2VcclxuJHNlbGVjdEdlb20tY29sb3ItbHQ6IHJnYigyNTUsIDIyNSwgMTYwKTtcclxuXHJcbi8vICRwcm9kLWJhY2tncm91bmQtY29sb3I6IHJnYigyNTAsMjUwLDI1MCk7XHJcbi8vICRiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjIwLDIyMCwyMjApO1xyXG4kZnVuY3Rpb24tdGV4dC1jb2xvcjogcmdiKDE5MCwgMTQwLCAzMCk7XHJcbiRmdW5jdGlvbi10ZXh0LWNvbG9yMjogcmdiKDE4LCAxMjYsIDEzNik7XHJcbiRmdW5jdGlvbi10ZXh0LWNvbG9yMzogcmdiKDE5MCwgMTQwLCAzMCk7XHJcbiRiYXNpYy1mdW5jdGlvbi10ZXh0LWNvbG9yOiByZ2IoMjAwLCA3MCwgMTUwKTtcclxuJGNvbW1lbnQtY29sb3I6IGRhcmtncmVlbjtcclxuIiwiJHBhZGRpbmc6IDQwcHg7IC8vID8gbm90IHVzZWRcclxuJHNtYWxsLXBhZGRpbmc6IDE1cHg7XHJcbiRoZWFkZXItaGVpZ2h0OiA0MHB4O1xyXG5cclxuJGZzaXplMTogMTVweDtcclxuJGZzaXplMjogMTJweDtcclxuJGZzaXplMzogMzBweDtcclxuXHJcbiRwb3J0LXNpemU6IDE1cHg7XHJcbiRkZWZhdWx0LXNpZGUtcGFkZGluZzogMTVweDtcclxuXHJcbiRkaXNhYmxlZC1vcGFjaXR5OiAwLjQ7Il19 */\"","import {\r\n    Component, Injector, Input, OnChanges, SimpleChanges,\r\n    ViewChildren, QueryList, Output, EventEmitter, ViewChild, DoCheck\r\n} from '@angular/core';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { DataService } from '../data/data.service';\r\nimport { EEntType, EEntTypeStr } from '@libs/geo-info/common';\r\nimport { GIAttribsThreejs } from '@libs/geo-info/GIAttribsThreejs';\r\nimport { ATabsComponent } from './tabs.component';\r\n\r\nenum SORT_STATE {\r\n    DEFAULT,\r\n    ASCENDING,\r\n    DESCENDING\r\n}\r\n\r\n@Component({\r\n    selector: 'attribute',\r\n    templateUrl: './attribute.component.html',\r\n    styleUrls: ['./attribute.component.scss'],\r\n})\r\n\r\nexport class AttributeComponent implements OnChanges {\r\n    @ViewChild(ATabsComponent, { static: true }) child: ATabsComponent;\r\n\r\n    @Input() model: GIModel;\r\n    @Input() refresh: Event;\r\n    @Input() reset: Event;\r\n    @Output() attrTableSelect = new EventEmitter<Object>();\r\n    @Output() selectSwitch = new EventEmitter<Boolean>();\r\n    @Output() attribLabel = new EventEmitter<string>();\r\n    showSelected = false;\r\n    currentShowingCol = '';\r\n    shiftKeyPressed = false;\r\n\r\n    tabs: { type: number, title: string }[] = [\r\n        { type: EEntType.POSI, title: 'Positions' },\r\n        { type: EEntType.VERT, title: 'Vertices' },\r\n        { type: EEntType.EDGE, title: 'Edges' },\r\n        { type: EEntType.WIRE, title: 'Wires' },\r\n        { type: EEntType.FACE, title: 'Faces' },\r\n        { type: EEntType.POINT, title: 'Points' },\r\n        { type: EEntType.PLINE, title: 'Polylines' },\r\n        { type: EEntType.PGON, title: 'Polygons' },\r\n        { type: EEntType.COLL, title: 'Collections' },\r\n        { type: EEntType.MOD, title: 'Model' }\r\n    ];\r\n    displayedColumns: string[] = [];\r\n    displayData: {}[] = [];\r\n    selected_ents = new Map();\r\n    multi_selection = new Map();\r\n    last_selected;\r\n    current_selected;\r\n\r\n    table_scroll = null;\r\n\r\n    sorting_header = null;\r\n    sorting_state: SORT_STATE = SORT_STATE.DEFAULT;\r\n\r\n    @ViewChildren(MatPaginator) paginator = new QueryList<MatPaginator>();\r\n    @ViewChildren(MatSort) sort = new QueryList<MatSort>();\r\n\r\n    dataSource: MatTableDataSource<object>;\r\n\r\n    protected dataService: DataService;\r\n\r\n    tab_map = {\r\n        0: EEntType.POSI,\r\n        1: EEntType.VERT,\r\n        2: EEntType.EDGE,\r\n        3: EEntType.WIRE,\r\n        4: EEntType.FACE,\r\n        5: EEntType.POINT,\r\n        6: EEntType.PLINE,\r\n        7: EEntType.PGON,\r\n        8: EEntType.COLL,\r\n        9: EEntType.MOD\r\n    };\r\n\r\n    tab_rev_map = {\r\n        0: 0,\r\n        2: 1,\r\n        3: 2,\r\n        4: 3,\r\n        5: 4,\r\n        6: 5, // point\r\n        7: 6, // plines\r\n        8: 7, // pgons\r\n        9: 8,\r\n        10: 9\r\n    };\r\n\r\n    columnItalic = 'c2';\r\n\r\n    constructor(injector: Injector) {\r\n        this.dataService = injector.get(DataService);\r\n        if (localStorage.getItem('mpm_attrib_current_tab') === null) {\r\n            localStorage.setItem('mpm_attrib_current_tab', '0');\r\n        }\r\n    }\r\n\r\n    // ngDoCheck() {\r\n    //     const attrib = document.getElementById('attribTable');\r\n    //     if (attrib) {\r\n    //         const paginators = document.getElementsByClassName('mat-paginator');\r\n    //         const l = paginators.length;\r\n    //         if (attrib.clientWidth < 600) {\r\n    //             let index = 0;\r\n    //             for (; index < l; index++) {\r\n    //                 const p = paginators[index];\r\n    //                 p.className = 'mat-paginator '; // hide\r\n    //             }\r\n    //         } else {\r\n    //             let index = 0;\r\n    //             for (; index < l; index++) {\r\n    //                 const p = paginators[index];\r\n    //                 p.className = 'mat-paginator';\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['data'] && this.model) {\r\n            this.refreshTable();\r\n        }\r\n        if (changes['reset']) {\r\n            this.resetTable();\r\n        }\r\n        if (changes['refresh']) {\r\n            if (document.getElementsByClassName('table--container')[this.getCurrentTab()]) {\r\n                this.table_scroll = document.getElementsByClassName('table--container')[this.getCurrentTab()].scrollTop;\r\n            }\r\n            this.refreshTable();\r\n        }\r\n    }\r\n\r\n    generateTable(tabIndex: number) {\r\n        if (this.model) {\r\n            const ThreeJSData = this.model.modeldata.attribs.threejs;\r\n            if (Number(tabIndex) === 9) {\r\n                this.displayData = ThreeJSData.getModelAttribsForTable();\r\n            } else {\r\n                const ready = this.model.modeldata.attribs.threejs instanceof GIAttribsThreejs;\r\n                this.selected_ents = this.dataService.selected_ents.get(EEntTypeStr[this.tab_map[tabIndex]]);\r\n\r\n                if (!ready) { return; }\r\n                if (this.showSelected) {\r\n                    const SelectedAttribData = ThreeJSData.getEntsVals(this.selected_ents, this.tab_map[tabIndex]);\r\n                    SelectedAttribData.map(row => {\r\n                        if (this.selected_ents.has(row._id)) {\r\n                            return row.selected = true;\r\n                        }\r\n                    });\r\n                    this.displayData = SelectedAttribData;\r\n                } else {\r\n                    const AllAttribData = ThreeJSData.getAttribsForTable(this.tab_map[tabIndex]).data;\r\n                    AllAttribData.map(row => {\r\n                        if (this.selected_ents.has(row._id)) {\r\n                            return row.selected = true;\r\n                        }\r\n                    });\r\n                    this.displayData = AllAttribData;\r\n                }\r\n            }\r\n            if (this.displayData.length > 0) {\r\n                const columns = Object.keys(this.displayData[0]).filter(e => e !== 'selected');\r\n                let new_columns;\r\n                if (Number(tabIndex) === 9) {\r\n                    new_columns = columns;\r\n                } else {\r\n                    const first = columns.shift();\r\n                    // const second = columns.shift();\r\n                    const selected = columns.find(column => column.substr(0, 1) === '_');\r\n                    const rest_of_columns = columns.filter(column => column.substr(0, 1) !== '_');\r\n                    // new_columns = selected ? [first, second, selected, ...rest_of_columns, ' ']\r\n                    // : [first, second, ...rest_of_columns, ' '];\r\n                    new_columns = selected ? [first, selected, ...rest_of_columns, ' '] : [first, ...rest_of_columns, ' '];\r\n                }\r\n                this.displayedColumns = new_columns;\r\n                this.dataSource = new MatTableDataSource<object>(this.displayData);\r\n            } else {\r\n                this.displayedColumns = [];\r\n                this.dataSource = new MatTableDataSource<object>();\r\n            }\r\n            this.dataSource.sortingDataAccessor = this._sortingDataAccessor;\r\n            this.dataSource.paginator = this.paginator.toArray()[tabIndex];\r\n            this.dataSource.sort = this.sort.toArray()[tabIndex];\r\n            if (this.table_scroll) {\r\n                setTimeout(() => {\r\n                    document.getElementsByClassName('table--container')[this.getCurrentTab()].scrollTop = this.table_scroll;\r\n                    this.table_scroll = null;\r\n                }, 0);\r\n            }\r\n        }\r\n        return tabIndex;\r\n    }\r\n\r\n    _sortingDataAccessor(data: object, headerID: string): string|number {\r\n        if (headerID === '_id') {\r\n            return Number(data[headerID].slice(2));\r\n        } else if (headerID === '_parent') {\r\n            if (data[headerID] === '') { return -1; }\r\n            return Number(data[headerID].slice(2));\r\n        }\r\n        return data[headerID];\r\n    }\r\n\r\n    _setDataSource(tabIndex: number) {\r\n        setTimeout(() => {\r\n            localStorage.setItem('mpm_attrib_current_tab', tabIndex.toString());\r\n            const settings = JSON.parse(localStorage.getItem('mpm_settings'));\r\n            if (settings !== undefined) {\r\n                if (settings.select !== undefined) {\r\n                    settings.select.tab = tabIndex.toString();\r\n                } else {\r\n                    settings.select = {selector: {id: '_f', name: 'Faces'}, tab: '0'};\r\n                }\r\n                localStorage.setItem('mpm_settings', JSON.stringify(settings));\r\n            }\r\n            if (tabIndex === 999) {\r\n                this.displayedColumns = [];\r\n                this.dataSource = new MatTableDataSource<object>();\r\n                this.dataSource.sortingDataAccessor = this._sortingDataAccessor;\r\n            } else {\r\n                this.generateTable(tabIndex);\r\n            }\r\n            this.last_selected = undefined;\r\n        });\r\n        sessionStorage.setItem('mpm_showSelected', JSON.stringify(this.showSelected));\r\n    }\r\n\r\n    getCurrentTab() {\r\n        if (localStorage.getItem('mpm_attrib_current_tab') !== null) {\r\n            return Number(localStorage.getItem('mpm_attrib_current_tab'));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    showSelectedSwitch() {\r\n        this.showSelected = !this.showSelected;\r\n        sessionStorage.setItem('mpm_showSelected', JSON.stringify(this.showSelected));\r\n        sessionStorage.setItem('mpm_changetab', 'false');\r\n        this.selectSwitch.emit(this.showSelected);\r\n        this.refreshTable();\r\n    }\r\n\r\n    public refreshTable() {\r\n        const currentTab = this.getCurrentTab();\r\n        setTimeout(() => {\r\n            if (sessionStorage.getItem('mpm_showSelected')) {\r\n                this.showSelected = JSON.parse(sessionStorage.getItem('mpm_showSelected'));\r\n            }\r\n            let changeTab;\r\n            if (sessionStorage.getItem('mpm_changetab')) {\r\n                changeTab = JSON.parse(sessionStorage.getItem('mpm_changetab'));\r\n            }\r\n            // sessionStorage.setItem('mpm_changetab', 'true');\r\n            if (changeTab) {\r\n                if (this.model) {\r\n                    if (currentTab === 0 || currentTab === 8 || currentTab === 9) {\r\n                        this.child.selectTab(this.tab_rev_map[currentTab]);\r\n                    } else if (currentTab === 1 || currentTab === 2 || currentTab === 3 || currentTab === 4) {\r\n                        this.child.selectTopology(currentTab, event);\r\n                    } else if (currentTab === 5 || currentTab === 6 || currentTab === 7) {\r\n                        this.child.selectObject(currentTab, event);\r\n                    }\r\n                }\r\n            }\r\n            this.generateTable(currentTab);\r\n        }, 0);\r\n    }\r\n\r\n    resetTable() {\r\n        const rows = document.querySelectorAll('.selected-row');\r\n        rows.forEach(row => row.classList.remove('selected-row'));\r\n        this.selected_ents.clear();\r\n        this.multi_selection.clear();\r\n    }\r\n\r\n//   selectRow(ent_id: string, event) {\r\n//     const currentTab = this.getCurrentTab();\r\n//     if (currentTab === 9) {\r\n//       return;\r\n//     }\r\n//     const id = Number(ent_id.substr(2));\r\n//     // Multiple row selection\r\n//     const ThreeJSData = this.data.attribs.threejs;\r\n//     const attrib_table_ents = ThreeJSData.getAttribsForTable(this.tab_map[currentTab]).ents;\r\n//     this.current_selected = id;\r\n//     const s = this.multi_selection;\r\n\r\n//     if (event.ctrlKey) {\r\n//       this.last_selected = this.current_selected;\r\n//       s.set(this.current_selected, this.current_selected);\r\n//     } else {\r\n//       if (!event.shiftKey) {\r\n//         s.clear();\r\n//         s.set(this.current_selected, this.current_selected);\r\n//         this.last_selected = this.current_selected;\r\n//       } else {\r\n//         if (this.last_selected === undefined) {\r\n//           this.last_selected = ThreeJSData.getAttribsForTable(this.tab_map[currentTab]).ents[0];\r\n//         }\r\n//         s.clear();\r\n//         if (this.current_selected < this.last_selected) { // select upper row\r\n//           attrib_table_ents.filter(ents => ents > this.current_selected && ents < this.last_selected).forEach(item => {\r\n//             s.set(item, item);\r\n//           });\r\n//           s.set(this.current_selected, this.current_selected);\r\n//           s.set(this.last_selected, this.last_selected);\r\n//         } else if (this.current_selected > this.last_selected) { // select lower row\r\n//           attrib_table_ents.filter(ents => ents < this.current_selected && ents > this.last_selected).forEach(item => {\r\n//             s.set(item, item);\r\n//           });\r\n//           s.set(this.current_selected, this.current_selected);\r\n//           s.set(this.last_selected, this.last_selected);\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//     const ent_type = ent_id.substr(0, 2);\r\n//     const target = event.target;\r\n//     if (s.size === 1) {\r\n//       if (this.selected_ents.has(ent_id)) {\r\n//         this.attrTableSelect.emit({ action: 'unselect', ent_type: ent_type, id: id });\r\n//         this.selected_ents.delete(ent_id);\r\n//         target.parentNode.classList.remove('selected-row');\r\n//       } else {\r\n//         this.attrTableSelect.emit({ action: 'select', ent_type: ent_type, id: id });\r\n//         this.selected_ents.set(ent_id, id);\r\n//         target.parentNode.classList.add('selected-row');\r\n//       }\r\n//     } else {\r\n//       this.attrTableSelect.emit({ action: 'select', ent_type: ent_type, id: s });\r\n//       s.forEach(_id => {\r\n//         this.selected_ents.set(ent_id, id);\r\n//       });\r\n//     }\r\n//   }\r\n\r\n    selectRow(ent_id: string, event) {\r\n        const currentTab = this.getCurrentTab();\r\n        if (currentTab === 9) {\r\n            return;\r\n        }\r\n        const id = Number(ent_id.substr(2));\r\n        // Multiple row selection\r\n        const ThreeJSData = this.model.modeldata.attribs.threejs;\r\n        const attrib_table = ThreeJSData.getAttribsForTable(this.tab_map[currentTab]);\r\n        this.current_selected = id;\r\n        const s = this.multi_selection;\r\n\r\n        // ctrl + click -> multiple selection: if already selected then deselect, if not selected then select\r\n        if (event.ctrlKey || event.metaKey) {\r\n            if (s.has(this.current_selected)) {\r\n                s.delete(this.current_selected);\r\n            } else {\r\n                this.last_selected = this.current_selected;\r\n                s.set(this.current_selected, this.current_selected);\r\n            }\r\n        // shift + click -> multiple selection, select all in between\r\n        } else if (event.shiftKey) {\r\n            // clear all selected\r\n            s.clear();\r\n            // if there is no last selected row -> select only the currently selected, set it as last selected for the next selection\r\n            if (this.last_selected === undefined) {\r\n                this.last_selected = this.current_selected;\r\n                s.set(this.current_selected, this.current_selected);\r\n            // if there is a last selected row -> select all in between current and last\r\n            } else {\r\n                // if sort state is based on \"_id\" -> filter based on table entities' index\r\n                if (this.sorting_header === null || this.sorting_header === '_id' || this.sorting_state === SORT_STATE.DEFAULT) {\r\n                    if (this.current_selected < this.last_selected) { // select upper row\r\n                    attrib_table.ents.filter(ents => ents > this.current_selected && ents < this.last_selected).forEach(item => {\r\n                        s.set(item, item);\r\n                    });\r\n                    s.set(this.current_selected, this.current_selected);\r\n                    s.set(this.last_selected, this.last_selected);\r\n                    } else if (this.current_selected > this.last_selected) { // select lower row\r\n                    attrib_table.ents.filter(ents => ents < this.current_selected && ents > this.last_selected).forEach(item => {\r\n                        s.set(item, item);\r\n                    });\r\n                    s.set(this.current_selected, this.current_selected);\r\n                    s.set(this.last_selected, this.last_selected);\r\n                    }\r\n                // if sort state is not based on \"_id\"\r\n                // -> filter based on the sorting values, if the sorting values are the same as current or last,\r\n                // base it on the entities' index according whether the sorting is ascending or descending\r\n                } else {\r\n                    const lastIndex = attrib_table.ents.indexOf(this.last_selected);\r\n                    const lastVal = attrib_table.data[lastIndex][this.sorting_header];\r\n                    const currentIndex = attrib_table.ents.indexOf(this.current_selected);\r\n                    const currentVal = attrib_table.data[currentIndex][this.sorting_header];\r\n\r\n                    // if same values between last and current, filtered values must be the same\r\n                    // while their index must be between last and current indices\r\n                    if (lastVal === currentVal) {\r\n                        if (this.current_selected < this.last_selected) { // select upper row\r\n                            for (let i = 0; i < attrib_table.data.length; i++) {\r\n                                const compare_val = attrib_table.data[i][this.sorting_header];\r\n                                if (compare_val === currentVal && i >= currentIndex && i <= lastIndex) {\r\n                                    s.set(attrib_table.ents[i], attrib_table.ents[i]);\r\n                                }\r\n                            }\r\n                        } else if (this.current_selected > this.last_selected) { // select lower row\r\n                            for (let i = 0; i < attrib_table.data.length; i++) {\r\n                                const compare_val = attrib_table.data[i][this.sorting_header];\r\n                                if (compare_val === currentVal && i >= lastIndex && i <= currentIndex) {\r\n                                    s.set(attrib_table.ents[i], attrib_table.ents[i]);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    // filter down the row (last_selected is before current_selected in ordering) if:\r\n                    //  _ descending and lastVal > currentVal\r\n                    //  _ ascending and lastVal < currentVal\r\n                    // ==> include rows with value = lastVal with index > lastIndex\r\n                    // and rows with value = currentVal with index < currentIndex\r\n                    } else if ((this.sorting_state === SORT_STATE.DESCENDING && lastVal > currentVal) ||\r\n                    (this.sorting_state === SORT_STATE.ASCENDING && lastVal < currentVal)) {\r\n                        const lowerVal = Math.min(currentVal, lastVal);\r\n                        const upperVal = Math.max(currentVal, lastVal);\r\n                        for (let i = 0; i < attrib_table.data.length; i++) {\r\n                            const compare_val = attrib_table.data[i][this.sorting_header];\r\n                            if ((compare_val > lowerVal && compare_val < upperVal)\r\n                            || (compare_val === lastVal && i >= lastIndex)\r\n                            || (compare_val === currentVal && i <= currentIndex)) {\r\n                                s.set(attrib_table.ents[i], attrib_table.ents[i]);\r\n                            }\r\n                        }\r\n                    // filter up the row (last_selected is after current_selected in ordering) if:\r\n                    //  _ descending and lastVal < currentVal\r\n                    //  _ ascending and lastVal > currentVal\r\n                    // ==> include rows with value = lastVal with index < lastIndex\r\n                    // and rows with value = currentVal with index > currentIndex\r\n                    } else {\r\n                        const lowerVal = Math.min(currentVal, lastVal);\r\n                        const upperVal = Math.max(currentVal, lastVal);\r\n                        for (let i = 0; i < attrib_table.data.length; i++) {\r\n                            const compare_val = attrib_table.data[i][this.sorting_header];\r\n                            if ((compare_val > lowerVal && compare_val < upperVal)\r\n                            || (compare_val === lastVal && i <= lastIndex)\r\n                            || (compare_val === currentVal && i >= currentIndex)) {\r\n                                s.set(attrib_table.ents[i], attrib_table.ents[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.last_selected = this.current_selected;\r\n            s.clear();\r\n            s.set(this.current_selected, this.current_selected);\r\n        }\r\n\r\n        const ent_type = ent_id.substr(0, 2);\r\n        const target = event.target;\r\n        this.selected_ents.clear();\r\n        if (s.size === 1) {\r\n            this.attrTableSelect.emit({ action: 'select', ent_type: ent_type, id: id });\r\n            this.selected_ents.set(ent_id, id);\r\n            target.parentNode.classList.add('selected-row');\r\n        } else {\r\n            this.attrTableSelect.emit({ action: 'select', ent_type: ent_type, id: s });\r\n            s.forEach(_id => {\r\n                this.selected_ents.set(ent_id, id);\r\n            });\r\n        }\r\n    }\r\n\r\n    add_remove_selected(ent_id, event) {\r\n        const ent_type = ent_id.substr(0, 2);\r\n        const id = Number(ent_id.substr(2));\r\n        const target = event.target || event.srcElement || event.currentTarget;\r\n        if (this.selected_ents.has(ent_id)) {\r\n            this.attrTableSelect.emit({ action: 'unselect', ent_type: ent_type, id: id });\r\n            this.selected_ents.delete(ent_id);\r\n            // @ts-ignore\r\n            target.parentNode.classList.remove('selected-row');\r\n        } else {\r\n            if (event.shiftKey) {\r\n                this.shiftKeyPressed = true;\r\n                // console.log(ent_id);\r\n            }\r\n            this.attrTableSelect.emit({ action: 'select', ent_type: ent_type, id: id });\r\n            this.selected_ents.set(ent_id, id);\r\n            // @ts-ignore\r\n            target.parentNode.classList.add('selected-row');\r\n        }\r\n    }\r\n\r\n    showAttribLabel($event, column) {\r\n        $event.stopPropagation();\r\n        if (column === this.currentShowingCol) {\r\n            this.currentShowingCol = '';\r\n            this.attribLabel.emit('');\r\n        } else {\r\n            this.currentShowingCol = column;\r\n            this.attribLabel.emit(column);\r\n        }\r\n    }\r\n\r\n    updateSortHeader($event, column) {\r\n        if (this.sorting_header === column) {\r\n            this.sorting_state = (this.sorting_state + 1) % 3;\r\n        } else {\r\n            this.sorting_state = SORT_STATE.ASCENDING;\r\n            this.sorting_header = column;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatPaginatorModule,\r\n    MatIconModule\r\n  ],\r\n  exports: [\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatPaginatorModule\r\n  ]\r\n})\r\nexport class AttributeModule {}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'my-tab',\r\n  styles: [\r\n    `\r\n    .pane{\r\n      padding: 0;\r\n    }\r\n  `\r\n  ],\r\n  template: `\r\n    <div [hidden]=\"!active\" class=\"pane\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `\r\n})\r\nexport class ATabComponent {\r\n    // tslint:disable-next-line: no-input-rename\r\n    @Input('tabTitle') title: string;\r\n    @Input() active = false;\r\n    // tslint:disable-next-line: no-input-rename\r\n    @Input('index') index: number;\r\n}\r\n","export default \"/* Style The Dropdown Button */\\n.dropbtn {\\n  background-color: transparent;\\n  color: #808080;\\n  border: 1px solid transparent;\\n  cursor: pointer;\\n  font-family: sans-serif;\\n  font-weight: 550;\\n  font-size: 12px;\\n  line-height: 15px;\\n  outline: none;\\n  text-align: center;\\n  width: 100%;\\n  height: 21px;\\n  margin-top: -1px;\\n  padding-right: 10px;\\n  border-bottom: 2px solid transparent;\\n}\\n.dropbtn::after {\\n  content: \\\"\\\";\\n  width: 0;\\n  height: 0;\\n  border-left: 4px solid transparent;\\n  border-right: 4px solid transparent;\\n  border-top: 4px solid #505050;\\n  border-bottom: none;\\n  position: absolute;\\n  top: 7px;\\n  right: 6px;\\n}\\n/* The container <div> - needed to position the dropdown content */\\n.dropdown {\\n  position: absolute;\\n  display: inline-block;\\n  left: 0px;\\n  width: 100%;\\n}\\n/* Dropdown Content (Hidden by Default) */\\n.dropdown-content {\\n  display: none;\\n  position: absolute;\\n  background-color: #ececec;\\n  min-width: 85px;\\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\\n  z-index: 500;\\n  top: 19px;\\n}\\n/* Links inside the dropdown */\\n.dropdown-content div {\\n  color: black;\\n  padding: 6px 8px;\\n  text-decoration: none;\\n}\\n/* Change color of dropdown links on hover */\\n.dropdown-content div:hover {\\n  background-color: #fefefe;\\n}\\n/* Show the dropdown menu on hover */\\n/* Change the background color of the dropdown button when the dropdown content is shown */\\n.dropdown:hover .dropbtn {\\n  color: #00006d;\\n}\\n.nav-tabs li.active .dropbtn {\\n  color: #00006d;\\n  background-color: whitesmoke;\\n  border: 1px solid #B3B3B3;\\n  border-bottom: 2px solid whitesmoke;\\n}\\n.nav-tabs li.open .dropbtn::after {\\n  content: \\\"\\\";\\n  border-top: none;\\n  border-bottom: 4px solid #505050;\\n}\\n#topology_dropdown, #object_dropdown {\\n  display: none;\\n  position: absolute;\\n  width: -webkit-fit-content;\\n  width: -moz-fit-content;\\n  width: fit-content;\\n  transition: display 0.4s;\\n  z-index: 99999999;\\n  background-color: #fafafb;\\n  border: 1px solid #808080;\\n  box-shadow: none;\\n}\\n#topology_dropdown div, #object_dropdown div {\\n  cursor: pointer;\\n  display: block;\\n  min-width: 100px;\\n  max-width: 300px;\\n  overflow: hidden;\\n  line-height: 20px;\\n  background-color: #fafafb;\\n  border: 0px;\\n  margin: 0px;\\n  padding: 0px 10px 0px 10px;\\n  line-height: 30px;\\n  height: 30px;\\n  font-size: 12px;\\n  color: #373737;\\n}\\n#topology_dropdown div:hover, #object_dropdown div:hover {\\n  color: #00006d;\\n  background-color: #E6E6E6;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\"","import {\r\n    Component,\r\n    ContentChildren,\r\n    QueryList,\r\n    AfterContentInit,\r\n    Output,\r\n    EventEmitter,\r\n    AfterViewInit,\r\n    OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { ATabComponent } from './tab.component';\r\n\r\n@Component({\r\n    selector: 'my-tabs',\r\n    templateUrl: `./tabs.component.html`,\r\n    styleUrls: ['./tabs.component.scss']\r\n})\r\nexport class ATabsComponent implements AfterContentInit, AfterViewInit, OnDestroy {\r\n    @Output() selectedTab = new EventEmitter<number>();\r\n    @Output() selectedTopology = new EventEmitter<number>();\r\n\r\n    @ContentChildren(ATabComponent) tabs: QueryList<ATabComponent>;\r\n\r\n    tab_active = 0;\r\n\r\n    topology_dropdown;\r\n    topology_text = 'Topology';\r\n    topologyActive = false;\r\n    topology_open = false;\r\n\r\n    topology: { tab: number, title: string }[] =\r\n        [\r\n            { tab: 1, title: 'Vertices' },\r\n            { tab: 2, title: 'Edges' },\r\n            { tab: 3, title: 'Wires' },\r\n            { tab: 4, title: 'Faces' }\r\n        ];\r\n\r\n    object_dropdown;\r\n    object_text = 'Objects';\r\n    objectActive = false;\r\n    object_open = false;\r\n\r\n    object: { tab: number, title: string }[] =\r\n        [\r\n            { tab: 5, title: 'Points' },\r\n            { tab: 6, title: 'Polylines' },\r\n            { tab: 7, title: 'Polygons' }\r\n        ];\r\n\r\n    // contentChildren are set\r\n    ngAfterContentInit() {\r\n        setTimeout(() => {// get all active tabs\r\n            const activeTabs = this.tabs.filter((tab) => tab.active);\r\n            // if there is no active tab set, activate the first\r\n            if (activeTabs.length === 0) {\r\n                this.selectTab(0);\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.topology_dropdown = document.getElementById('topology_dropdown');\r\n        this.topology_dropdown.style.display = 'none';\r\n\r\n        this.object_dropdown = document.getElementById('object_dropdown');\r\n        this.object_dropdown.style.display = 'none';\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.topology_dropdown = null;\r\n        this.object_dropdown = null;\r\n    }\r\n\r\n    selectTab(tab: number) {\r\n        // deactivate all tabs\r\n        this.tabs.toArray().forEach(_tab => _tab.active = false);\r\n        // activate the tab the user has clicked on.\r\n        this.tab_active = tab;\r\n        const tt = this.tabs.find(t => Number(t.index) === tab);\r\n        if (tt) {\r\n            tt.active = true;\r\n        }\r\n\r\n        this.selectedTab.emit(tab);\r\n        if (this.topology_dropdown) {\r\n            this.topology_dropdown.style.display = 'none';\r\n        }\r\n        this.topology_text = 'Topology';\r\n        this.topology_open = false;\r\n\r\n        if (this.object_dropdown) {\r\n            this.topology_dropdown.style.display = 'none';\r\n        }\r\n        this.object_text = 'Objects';\r\n        this.object_open = false;\r\n    }\r\n\r\n    selectTopology(tab, event: Event) {\r\n        this.tabs.toArray().forEach(_tab => _tab.active = false);\r\n        this.tab_active = 1;\r\n        const option = this.topology.find(item => item.tab === tab);\r\n        if (!option) {\r\n            return;\r\n        }\r\n        this.selectedTopology.emit(Number(tab));\r\n        this.topology_text = option.title;\r\n        this.tabs.toArray()[option.tab].active = true;\r\n        if (event !== undefined) {\r\n            // @ts-ignore\r\n            event.target.parentElement.style.display = 'none';\r\n        }\r\n        this.topology_open = false;\r\n    }\r\n\r\n    selectObject(tab, event: Event) {\r\n        this.tabs.toArray().forEach(_tab => _tab.active = false);\r\n        this.tab_active = 2;\r\n        const option = this.object.find(item => item.tab === tab);\r\n        if (!option) {\r\n            return;\r\n        }\r\n        this.selectedTopology.emit(Number(tab));\r\n        this.object_text = option.title;\r\n        this.tabs.toArray()[option.tab].active = true;\r\n        if (event !== undefined) {\r\n            // @ts-ignore\r\n            event.target.parentElement.style.display = 'none';\r\n        }\r\n        this.object_open = false;\r\n    }\r\n\r\n    showTDropdown() {\r\n        this.object_text = 'Objects';\r\n        this.object_open = false;\r\n        // this.tabs.toArray().forEach(_tab => _tab.active = false);\r\n        if (!this.topology_dropdown) { return; }\r\n        this.object_dropdown.style.display = 'none';\r\n        if (this.topology_dropdown.style.display === 'none') {\r\n            this.topology_dropdown.style.display = 'block';\r\n            this.topology_open = true;\r\n        } else {\r\n            this.topology_dropdown.style.display = 'none';\r\n            this.topology_open = false;\r\n        }\r\n    }\r\n\r\n    showODropdown() {\r\n        this.topology_text = 'Topology';\r\n        this.topology_open = false;\r\n        // this.tabs.toArray().forEach(_tab => _tab.active = false);\r\n        if (!this.object_dropdown) { return; }\r\n        this.topology_dropdown.style.display = 'none';\r\n        if (this.object_dropdown.style.display === 'none') {\r\n            this.object_dropdown.style.display = 'block';\r\n            this.object_open = true;\r\n        } else {\r\n            this.object_dropdown.style.display = 'none';\r\n            this.object_open = false;\r\n        }\r\n    }\r\n}\r\n","import { GIModel } from '@libs/geo-info/GIModel';\r\nimport { EEntType, EEntTypeStr } from '@libs/geo-info/common';\r\nimport { DataThreejs } from './data.threejs';\r\n// import @angular stuff\r\nimport { Injectable } from '@angular/core';\r\n/**\r\n * DataService\r\n * The data service for the Goe-Info viewer.\r\n */\r\n@Injectable()\r\nexport class DataService {\r\n    // GI Model\r\n    // private _model: GIModel;\r\n    private _data_threejs: DataThreejs;\r\n    private _ngSplitGutter = 20;\r\n\r\n    selecting: any = [];\r\n\r\n    // Selected Entities by Threejs Viewer for Attribute Table\r\n    selected_ents: Map<string, Map<string, number>> = new Map();\r\n    selected_positions: Map<string, string[]>;\r\n    selected_vertex: Map<string, string[]>;\r\n    selected_face_edges: Map<string, string[]>;\r\n    selected_face_wires: Map<string, string[]>;\r\n    selected_coll: Map<string, string[]>;\r\n\r\n    switch_page: boolean;\r\n    /**\r\n     * Create a data service.\r\n     */\r\n    constructor() {\r\n        this.selected_ents.set(EEntTypeStr[EEntType.POSI], new Map());\r\n        this.selected_ents.set(EEntTypeStr[EEntType.VERT], new Map());\r\n        this.selected_ents.set(EEntTypeStr[EEntType.EDGE], new Map());\r\n        this.selected_ents.set(EEntTypeStr[EEntType.FACE], new Map());\r\n        this.selected_ents.set(EEntTypeStr[EEntType.WIRE], new Map());\r\n        this.selected_ents.set(EEntTypeStr[EEntType.PGON], new Map());\r\n        this.selected_ents.set(EEntTypeStr[EEntType.PLINE], new Map());\r\n        this.selected_ents.set(EEntTypeStr[EEntType.POINT], new Map());\r\n        this.selected_ents.set(EEntTypeStr[EEntType.COLL], new Map());\r\n        this.selected_positions = new Map();\r\n        this.selected_vertex = new Map();\r\n        this.selected_face_edges = new Map();\r\n        this.selected_face_wires = new Map();\r\n        this.selected_coll = new Map();\r\n    }\r\n\r\n    /**\r\n     * Get the THreejs Scene\r\n     */\r\n    getThreejsScene(): DataThreejs {\r\n        return this._data_threejs;\r\n    }\r\n\r\n    /**\r\n     * Set the THreejs Scene\r\n     */\r\n    setThreejsScene(settings) {\r\n        this._data_threejs = new DataThreejs(settings);\r\n    }\r\n\r\n    /**\r\n     * check selected entites number\r\n     */\r\n    countSelectedEnts() {\r\n        let count = 0;\r\n        this.selected_ents.forEach(selected_ents => {\r\n            count = +selected_ents.size;\r\n        });\r\n        return count;\r\n    }\r\n\r\n    clearAll() {\r\n        this.selected_ents.forEach(selected_ents => selected_ents.clear());\r\n    }\r\n\r\n    get ngSplitGutter(): number { return this._ngSplitGutter; }\r\n    set ngSplitGutter(splitGutter: number) { this._ngSplitGutter = splitGutter; }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { IThreeJS } from '@libs/geo-info/ThreejsJSON';\r\nimport { EEntTypeStr, EEntType } from '@libs/geo-info/common';\r\nimport { Vector3 } from 'three';\r\n// import { DataService } from '@services';\r\nimport { Vector } from '@assets/core/modules/basic/calc';\r\nimport { ISettings } from './data.threejsSettings';\r\n\r\nimport { DataThreejsLookAt } from './data.threejsLookAt';\r\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\r\nimport { isArray } from 'util';\r\n\r\nenum MaterialType {\r\n    MeshBasicMaterial = 'MeshBasicMaterial',\r\n    MeshStandardMaterial = 'MeshStandardMaterial',\r\n    MeshLambertMaterial = 'MeshLambertMaterial',\r\n    MeshPhongMaterial = 'MeshPhongMaterial',\r\n    MeshPhysicalMaterial = 'MeshPhysicalMaterial'\r\n}\r\n\r\n/**\r\n * ThreejsScene Add\r\n */\r\nexport class DataThreejs extends DataThreejsLookAt {\r\n    /**\r\n     * Constructs a new data subscriber.\r\n     */\r\n    constructor(settings: ISettings) {\r\n        super(settings);\r\n        // background\r\n        if (this.settings.background.show) {\r\n            this._loadBackground(this.settings.background.background_set);\r\n        } else {\r\n            this.cameraBackgrounds = null;\r\n            this.scene.background = new THREE.Color(this.settings.colors.viewer_bg);\r\n        }\r\n\r\n        // add grid and lights\r\n        this._addGrid();\r\n        this._addAxes();\r\n        if (this.settings.ambient_light.show) {\r\n            this._addAmbientLight();\r\n        }\r\n        if (this.settings.hemisphere_light.show) {\r\n            this._addHemisphereLight();\r\n        }\r\n        if (this.settings.directional_light.show) {\r\n            this._addDirectionalLight();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param object\r\n     * @param property\r\n     */\r\n    public static disposeObjectProperty(object: THREE.Object3D, property: string): void {\r\n        if (object.hasOwnProperty(property)) {\r\n            if (object[property].constructor === [].constructor) {\r\n                object[property].forEach(prop => prop.dispose());\r\n            } else {\r\n                object[property].dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public populateScene(model: GIModel, container): void {\r\n        // if (this.dataService.viewerSettingsUpdated) {\r\n        //     this.settings = JSON.parse(localStorage.getItem('mpm_settings'));\r\n        //     this.perspCam.position.copy(this.settings.camera.pos);\r\n        //     this.perspControls.target.copy(this.settings.camera.target);\r\n        //     this.perspCam.updateProjectionMatrix();\r\n        //     this.perspControls.update();\r\n        //     this.dataService.viewerSettingsUpdated = false;\r\n        // }\r\n        while (this.scene.children.length > 0) {\r\n            DataThreejs.disposeObjectProperty(this.scene.children[0], 'geometry');\r\n            DataThreejs.disposeObjectProperty(this.scene.children[0], 'texture');\r\n            this.scene.remove(this.scene.children[0]);\r\n        }\r\n        this.scene_objs = [];\r\n\r\n        document.querySelectorAll('[id^=textLabel_]').forEach(value => {\r\n            container.removeChild(value);\r\n        });\r\n        this.ObjLabelMap.clear();\r\n        this.textLabels.clear();\r\n\r\n        this._addGeom(model);\r\n\r\n        const position_size = this.settings.positions.size;\r\n        this.raycaster.params.Points.threshold = position_size > 1 ? position_size / 3 : position_size / 4;\r\n\r\n\r\n        this._all_objs_sphere = this._getAllObjsSphere();\r\n        this.updateCameraFOV();\r\n\r\n        // add the axes, ground, lights, etc\r\n        this._addEnv();\r\n\r\n        setTimeout(() => {\r\n            let old = document.getElementById('hud');\r\n            if (old) {\r\n                container.removeChild(old);\r\n            }\r\n            // setTimeout(() => { this._getNodeSelect(); }, 10);\r\n            if (!this.model.modeldata.attribs.query.hasAttrib(EEntType.MOD, 'hud')) { return; }\r\n            const hud = this.model.modeldata.attribs.query.getModelAttribVal('hud') as string;\r\n            const element = this._createHud(hud).element;\r\n            container.appendChild(element);\r\n            old = null;\r\n        }, 0);\r\n    }\r\n\r\n    private _addGeom(model: GIModel): void {\r\n        // Add geometry\r\n        const threejs_data: IThreeJS = model.get3jsData();\r\n        this.tri_select_map = threejs_data.triangle_select_map;\r\n        this.edge_select_map = threejs_data.edge_select_map;\r\n        this.white_edge_select_map = threejs_data.white_edge_select_map;\r\n        this.point_select_map = threejs_data.point_select_map;\r\n        this.posis_map = threejs_data.posis_map;\r\n        this.vertex_map = threejs_data.vertex_map;\r\n\r\n        const material_groups = threejs_data.material_groups;\r\n        const materials = threejs_data.materials;\r\n\r\n        // Create buffers that will be used by all geometry\r\n        const verts_xyz_buffer = new THREE.Float32BufferAttribute(threejs_data.vertex_xyz, 3);\r\n        const normals_buffer = new THREE.Float32BufferAttribute(threejs_data.normals, 3);\r\n        const colors_buffer = new THREE.Float32BufferAttribute(threejs_data.colors, 3);\r\n        const posis_xyz_buffer = new THREE.Float32BufferAttribute(threejs_data.posis_xyz, 3);\r\n        this._addTris(threejs_data.triangle_indices, verts_xyz_buffer, colors_buffer, normals_buffer, material_groups, materials);\r\n        this._addLines(threejs_data.edge_indices, threejs_data.white_edge_indices, verts_xyz_buffer, colors_buffer, normals_buffer);\r\n        this._addPoints(threejs_data.point_indices, verts_xyz_buffer, colors_buffer, [255, 255, 255], this.settings.positions.size + 1);\r\n\r\n        // if (threejs_data.timeline) {\r\n        //     this.timelineEnabled = true;\r\n        //     this.timeline = threejs_data.timeline.__time_points__;\r\n        //     if (!this.current_time_point || this.timeline.indexOf(this.current_time_point) === -1) {\r\n        //         this.current_time_point = this.timeline[this.timeline.length - 1];\r\n        //     }\r\n        //     this.timeline_groups = {};\r\n        //     for (const time_point of this.timeline) {\r\n        //         const obj_group = new THREE.Group();\r\n        //         const timeline_data = threejs_data.timeline[time_point];\r\n        //         const tri = this._addTimelineTris(timeline_data.triangle_indices, verts_xyz_buffer, colors_buffer,\r\n        //                     normals_buffer, material_groups, materials);\r\n        //         const lines = this._addTimelineLines(timeline_data.edge_indices, threejs_data.white_edge_indices,\r\n        //                     verts_xyz_buffer, colors_buffer, normals_buffer);\r\n        //         const points = this._addTimelinePoints(timeline_data.point_indices, verts_xyz_buffer,\r\n        //                     colors_buffer, [255, 255, 255], this.settings.positions.size + 1);\r\n        //         obj_group.add(tri);\r\n        //         obj_group.add(lines[0]);\r\n        //         obj_group.add(lines[1]);\r\n        //         obj_group.add(points);\r\n        //         this.timeline_groups[time_point] = obj_group;\r\n        //     }\r\n        //     this.scene.add(this.timeline_groups[this.current_time_point]);\r\n        // } else {\r\n        //     this.timelineEnabled = false;\r\n        //     this.timeline = null;\r\n        //     this.timeline_groups = null;\r\n        // }\r\n\r\n        this._addPosis(threejs_data.posis_indices, posis_xyz_buffer, this.settings.colors.position, this.settings.positions.size);\r\n\r\n        this._addPointLabels(model);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Add background, grid, ground\r\n     */\r\n    private _addEnv(): void {\r\n\r\n        // background\r\n        if (this.settings.background.show) {\r\n            this._loadBackground(this.settings.background.background_set);\r\n        } else {\r\n            this.cameraBackgrounds = null;\r\n            this.scene.background = new THREE.Color(this.settings.colors.viewer_bg);\r\n        }\r\n\r\n        // add gird and axes\r\n        this._addGrid();\r\n        this._addAxes();\r\n        // const center = new THREE.Vector3(0, 0, 0); // allObjs.center;\r\n        // this.axes_pos.x = center.x;\r\n        // this.axes_pos.y = center.y;\r\n        // let grid_pos = this.settings.grid.pos;\r\n        // if (!grid_pos) {\r\n        //     grid_pos = new Vector3(0, 0, 0);\r\n        // }\r\n        // this.grid.position.set(grid_pos.x, grid_pos.y, -0.01);\r\n        // this.axesHelper.position.set(grid_pos.x, grid_pos.y, 0);\r\n\r\n        // // settings\r\n        // // if (num_posis !== 0) {\r\n        //     if (this.dataService.newFlowchart) {\r\n        //         this.dataService.newFlowchart = false;\r\n        //         this.origin = new THREE.Vector3(center.x, center.y, 0);\r\n        //         this.settings.camera.target = this.origin ;\r\n        //         localStorage.setItem('mpm_settings', JSON.stringify(this.settings));\r\n        //         this.axesHelper.position.set(center.x, center.y, 0.05);\r\n        //     } else {\r\n        //         this.axesHelper.position.set(this.origin.x, this.origin.y, 0.05);\r\n        //     }\r\n        // // }\r\n\r\n        // ground\r\n        const ground = this.settings.ground;\r\n        if (ground.show) {\r\n            const planeGeometry = new THREE.PlaneBufferGeometry(ground.width, ground.length, 32, 32);\r\n            const planeMaterial = new THREE.MeshPhongMaterial({\r\n                color: new THREE.Color(parseInt(ground.color.replace('#', '0x'), 16)),\r\n                shininess: ground.shininess,\r\n                side: THREE.DoubleSide\r\n            });\r\n            this.groundObj = new THREE.Mesh(planeGeometry, planeMaterial);\r\n            this.groundObj.position.setZ(ground.height);\r\n            this.groundObj.receiveShadow = true;\r\n            this.scene.add(this.groundObj);\r\n        }\r\n\r\n        if (this.settings.ambient_light.show) {\r\n            this._addAmbientLight();\r\n        }\r\n        if (this.settings.hemisphere_light.show) {\r\n            this._addHemisphereLight();\r\n        }\r\n        if (this.settings.directional_light.show) {\r\n            this._addDirectionalLight();\r\n        }\r\n    }\r\n    // private _getNodeSelect(): void {\r\n    //     const select_node: any = this.model.modeldata.attribs.query.getModelAttribVal('select_node');\r\n    //     this.timelineEnabled = null;\r\n    //     if (!select_node || !select_node.nodes) { return; }\r\n    //     this.timeline_groups = select_node.nodes;\r\n    //     const currentIndex = this.timeline_groups.indexOf(this.dataService.node.name);\r\n    //     if (currentIndex !== -1) {\r\n    //         this.timelineEnabled = 1;\r\n    //         this.timelineIndex = currentIndex.toString();\r\n    //         this.timelineValue = this.dataService.node.name;\r\n    //         if (select_node.widget === 'dropdown') {\r\n    //             this.timelineEnabled = 2;\r\n    //         }\r\n    //     }\r\n    //     if (this.dataService.timelineDefault && select_node.default) {\r\n    //         const nodeSelInput = <HTMLInputElement> document.getElementById('hidden_node_selection');\r\n    //         nodeSelInput.value = select_node.default;\r\n    //         (<HTMLButtonElement> document.getElementById('hidden_node_selection_button')).click();\r\n    //         this.dataService.timelineDefault = false;\r\n    //     }\r\n    // }\r\n    /**\r\n     *\r\n     * @param scale\r\n     * @param azimuth\r\n     * @param altitude\r\n     */\r\n    public getDLPosition(scale = null, azimuth = null, altitude = null): void {\r\n        if (!scale && scale !== 0) {\r\n            scale = this.directional_light_settings.distance;\r\n        }\r\n        if (!azimuth && azimuth !== 0) {\r\n            azimuth = this.directional_light_settings.azimuth;\r\n        }\r\n        if (!altitude && altitude !== 0) {\r\n            altitude = this.directional_light_settings.altitude;\r\n        }\r\n        if (this.model && this.model.modeldata.attribs && this.model.modeldata.attribs.query\r\n        && this.model.modeldata.attribs.query.hasModelAttrib('directional_light')) {\r\n            const model_light_settings: any = this.model.modeldata.attribs.query.getModelAttribVal('directional_light');\r\n            if (model_light_settings.constructor === {}.constructor) {\r\n                if (model_light_settings.hasOwnProperty('altitude')) {\r\n                    altitude = model_light_settings.altitude;\r\n                }\r\n                if (model_light_settings.hasOwnProperty('azimuth')) {\r\n                    azimuth = model_light_settings.azimuth;\r\n                }\r\n            }\r\n        }\r\n        if (scale === 0) { scale = 10000; }\r\n        let azimuth_calc = 90 - azimuth;\r\n        if (this.model && this.model.modeldata.attribs && this.model.modeldata.attribs.query\r\n        && this.model.modeldata.attribs.query.hasModelAttrib('north')) {\r\n            const north_attr: number[] = this.model.modeldata.attribs.query.getModelAttribVal('north') as number[];\r\n            const north_vec = new THREE.Vector3(north_attr[0], north_attr[1], 0);\r\n            const y_vec = new THREE.Vector3(0, 1, 0);\r\n            const angle = north_vec.angleTo(y_vec) * 180 / Math.PI;\r\n            if (north_attr[0] > 0) {\r\n                azimuth_calc -= angle;\r\n            } else {\r\n                azimuth_calc += angle;\r\n            }\r\n        }\r\n        let posX = Math.cos(altitude * Math.PI * 2 / 360) * Math.cos(azimuth_calc * Math.PI * 2 / 360) * scale * 2,\r\n            posY = Math.cos(altitude * Math.PI * 2 / 360) * Math.sin(azimuth_calc * Math.PI * 2 / 360) * scale * 2,\r\n            posZ = Math.sin(altitude * Math.PI * 2 / 360) * scale * 2;\r\n\r\n        if (this._all_objs_sphere) {\r\n            posX += this._all_objs_sphere.center.x;\r\n            posY += this._all_objs_sphere.center.y;\r\n            posZ += this._all_objs_sphere.center.z;\r\n        }\r\n        this.directional_light.position.set(posX, posY, posZ);\r\n    }\r\n\r\n    /**\r\n     * Add axes\r\n     * @param size\r\n     */\r\n    public _addAxes(size: number = this.settings.axes.size) {\r\n        let i = 0;\r\n        const length = this.scene.children.length;\r\n        if (length !== 0) {\r\n            for (; i < length; i++) {\r\n                if (this.scene.children[i]) {\r\n                    if (this.scene.children[i].name === 'AxesHelper') {\r\n                        this.scene.children[i]['dispose']();\r\n                        this.scene.remove(this.scene.children[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.axesHelper = new THREE.AxesHelper(size);\r\n        this.axesHelper.geometry['attributes'].color = new THREE.Int16BufferAttribute(\r\n            [1, 0, 0, 1, 0, 0,\r\n             0, 1, 0, 0, 1, 0,\r\n             0, 0, 1, 0, 0, 1], 3 );\r\n        this.axesHelper.visible = this.settings.axes.show;\r\n        if (this.axesHelper.visible) {\r\n            this.axesHelper.name = 'AxesHelper';\r\n            this.axesHelper.position.set(this.axes_pos.x, this.axes_pos.y, this.axes_pos.z);\r\n            this.axesHelper.position.set(0, 0, 0);\r\n            this.scene.add(this.axesHelper);\r\n        }\r\n    }\r\n    /**\r\n     * Draws a grid on the XY plane.\r\n     * @param size\r\n     */\r\n    public _addGrid(size: number = this.settings.grid.size) {\r\n        let i = 0;\r\n        const length = this.scene.children.length;\r\n        for (; i < length; i++) {\r\n            if (this.scene.children[i]) {\r\n                if (this.scene.children[i].name === 'GridHelper') {\r\n                    if (this.scene.children[i]['dispose']) {\r\n                        this.scene.children[i]['dispose']();\r\n                    }\r\n                    this.scene.remove(this.scene.children[i]);\r\n                }\r\n            }\r\n        }\r\n        this.grid = new THREE.GridHelper(size, size / 10, 0x888888, 0x888888);\r\n        this.grid.visible = this.settings.grid.show;\r\n        // todo: change grid -> grid_value\r\n        if (this.grid.visible) {\r\n            this.grid.name = 'GridHelper';\r\n            const vector = new THREE.Vector3(0, 1, 0);\r\n            this.grid.lookAt(vector);\r\n            let pos = this.settings.grid.pos;\r\n            if (!pos) {\r\n                pos = new THREE.Vector3();\r\n            }\r\n            if (!pos.z) {\r\n                this.grid.position.set(pos.x, pos.y, -0.01);\r\n            } else {\r\n                this.grid.position.set(pos.x, pos.y, pos.z);\r\n            }\r\n            this.scene.add(this.grid);\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    public getGridPos() {\r\n        if (this._all_objs_sphere) {\r\n            const grd_pos = new THREE.Vector3(this._all_objs_sphere.center.x, this._all_objs_sphere.center.y, 0);\r\n            this.grid.position.set(grd_pos.x, grd_pos.y, -0.01);\r\n            return grd_pos;\r\n        }\r\n        const grid_pos = new THREE.Vector3(0, 0, 0);\r\n        this.grid.position.set(0, 0, -0.01);\r\n        return grid_pos;\r\n    }\r\n\r\n    // ============================================================================\r\n    // ============================================================================\r\n    // Private methods\r\n    // ============================================================================\r\n    // ============================================================================\r\n    /**\r\n     * Create the buffer for threejs triangles\r\n     */\r\n    private _createTrisBuffGeom(\r\n            tris_i_buff_attrib: THREE.BufferAttribute,\r\n            coords_buff_attrib: THREE.BufferAttribute,\r\n            colors_buff_attrib: THREE.BufferAttribute,\r\n            normals_buff_attrib: THREE.BufferAttribute,\r\n            material_groups: Uint32Array): THREE.BufferGeometry {\r\n        const tris_geom_buff = new THREE.BufferGeometry();\r\n        tris_geom_buff.setIndex( tris_i_buff_attrib );\r\n        tris_geom_buff.setAttribute('position', coords_buff_attrib );\r\n        tris_geom_buff.setAttribute('color', colors_buff_attrib );\r\n        if (normals_buff_attrib !== null) { tris_geom_buff.setAttribute('normal', normals_buff_attrib ); }\r\n        tris_geom_buff.clearGroups();\r\n        for (let i = 0; i < material_groups.length; i = i + 3) {\r\n            tris_geom_buff.addGroup(material_groups[i], material_groups[i + 1], material_groups[i + 2]);\r\n        }\r\n        return tris_geom_buff;\r\n    }\r\n\r\n\r\n    /**\r\n     * Add threejs triangles to the scene\r\n     */\r\n    private _addTris(tris_i: number[], posis_buffer: THREE.Float32BufferAttribute,\r\n                     colors_buffer: THREE.Float32BufferAttribute,\r\n                     normals_buffer: THREE.Float32BufferAttribute,\r\n                     material_groups, materials): void {\r\n        const geom = new THREE.BufferGeometry();\r\n        geom.setIndex(tris_i);\r\n        geom.setAttribute('position', posis_buffer);\r\n        if (normals_buffer.count > 0) {\r\n            geom.setAttribute('normal', normals_buffer);\r\n        }\r\n        geom.setAttribute('color', colors_buffer);\r\n        const colorf = new THREE.Color(parseInt(this.settings.colors.face_f.replace('#', '0x'), 16));\r\n        const colorb = new THREE.Color(parseInt(this.settings.colors.face_b.replace('#', '0x'), 16));\r\n        geom.clearGroups();\r\n        material_groups.forEach(element => {\r\n            geom.addGroup(element[0], element[1], element[2]);\r\n        });\r\n        this._buffer_geoms.push(geom);\r\n\r\n        const material_arr = [];\r\n        let index = 0;\r\n        const l = materials.length;\r\n        for (; index < l; index++) {\r\n            const element = materials[index];\r\n            // if (this.settings.background.show) {\r\n            //     element.envMap = this.scene.background;\r\n            //     // element.refractionRatio = 1;\r\n            //     // element.envMap.mapping = THREE.CubeRefractionMapping;\r\n            // }\r\n            let mat;\r\n            if (index === 0) {\r\n                delete element.type; element.color = colorf;\r\n                mat = new THREE.MeshPhongMaterial(element);\r\n            } else if (index === 1) {\r\n                delete element.type;\r\n                element.color = colorb;\r\n                mat = new THREE.MeshPhongMaterial(element);\r\n            } else {\r\n                if (element.type === MaterialType.MeshBasicMaterial) {\r\n                    delete element.type;\r\n                    mat = new THREE.MeshBasicMaterial(element);\r\n                } else if (element.type === MaterialType.MeshPhongMaterial) {\r\n                    delete element.type;\r\n                    mat = new THREE.MeshPhongMaterial(element);\r\n                } else if (element.type === MaterialType.MeshPhysicalMaterial) {\r\n                    delete element.type;\r\n                    if (this.settings.background.show) {\r\n                        element.envMap = this.scene.background;\r\n                    }\r\n                    mat = new THREE.MeshPhysicalMaterial(element);\r\n                } else if (element.type === MaterialType.MeshLambertMaterial) {\r\n                    delete element.type;\r\n                    mat = new THREE.MeshLambertMaterial(element);\r\n                } else if (element.type === MaterialType.MeshStandardMaterial) {\r\n                    delete element.type;\r\n                    mat = new THREE.MeshStandardMaterial(element);\r\n                }\r\n            }\r\n            material_arr.push(mat);\r\n        }\r\n        const mesh = new THREE.Mesh(geom, material_arr);\r\n\r\n        mesh.geometry.computeBoundingSphere();\r\n        if (normals_buffer.count === 0) {\r\n            mesh.geometry.computeVertexNormals();\r\n        }\r\n        mesh.castShadow = true;\r\n        mesh.receiveShadow = true;\r\n\r\n        // show vertex normals\r\n        this.vnh = new THREE.VertexNormalsHelper(mesh, this.settings.normals.size, 0x0000ff);\r\n        this.vnh.visible = this.settings.normals.show;\r\n        this.scene.add(this.vnh);\r\n        this.scene_objs.push(mesh);\r\n        // add mesh to scene\r\n        this.scene.add(mesh);\r\n        this.threejs_nums[2] = tris_i.length / 3;\r\n    }\r\n\r\n    // ============================================================================\r\n    /**\r\n     * Add threejs lines to the scene\r\n     */\r\n    private _addLines(lines_i: number[], white_line_i: number[],\r\n                    posis_buffer: THREE.Float32BufferAttribute,\r\n                    color_buffer: THREE.Float32BufferAttribute,\r\n                    normals_buffer: THREE.Float32BufferAttribute,\r\n                    size: number = 1): void {\r\n        const geom = new THREE.BufferGeometry();\r\n        geom.setIndex(lines_i);\r\n        geom.setAttribute('position', posis_buffer);\r\n        geom.setAttribute('color', color_buffer);\r\n        this._buffer_geoms.push(geom);\r\n\r\n        // // geom.addAttribute( 'color', new THREE.Float32BufferAttribute( colors_flat, 3 ) );\r\n        const mat = new THREE.LineDashedMaterial({\r\n            color: 0x000000,\r\n            vertexColors: THREE.VertexColors,\r\n            gapSize: 0\r\n        });\r\n        const line = new THREE.LineSegments(geom, mat);\r\n        this.scene_objs.push(line);\r\n        this.scene.add(line);\r\n\r\n        const geom_white = new THREE.BufferGeometry();\r\n        geom_white.setIndex(white_line_i);\r\n        geom_white.setAttribute('position', posis_buffer);\r\n        geom_white.setAttribute('color', color_buffer);\r\n        this._buffer_geoms.push(geom_white);\r\n\r\n        // // geom.addAttribute( 'color', new THREE.Float32BufferAttribute( colors_flat, 3 ) );\r\n        const mat_white = new THREE.LineDashedMaterial({\r\n            color: 0xFFFFFF,\r\n            vertexColors: THREE.VertexColors,\r\n            gapSize: 0\r\n        });\r\n        const line_white = new THREE.LineSegments(geom_white, mat_white);\r\n        this.scene_objs.push(line_white);\r\n        this.scene.add(line_white);\r\n\r\n        this.threejs_nums[1] = (lines_i.length + white_line_i.length) / 2;\r\n    }\r\n    // ============================================================================\r\n    /**\r\n     * Add threejs points to the scene\r\n     */\r\n    private _addPoints(points_i: number[],\r\n                        posis_buffer: THREE.Float32BufferAttribute,\r\n                        colors_buffer: THREE.Float32BufferAttribute,\r\n                        color: [number, number, number],\r\n                        size: number = 1): void {\r\n        const geom = new THREE.BufferGeometry();\r\n        geom.setIndex(points_i);\r\n        geom.setAttribute('position', posis_buffer);\r\n        geom.setAttribute('color', colors_buffer);\r\n\r\n        this._buffer_geoms.push(geom);\r\n        // geom.computeBoundingSphere();\r\n        const rgb = `rgb(${color.toString()})`;\r\n        const mat = new THREE.PointsMaterial({\r\n            // color: new THREE.Color(rgb),\r\n            size: size,\r\n            vertexColors: THREE.VertexColors,\r\n            sizeAttenuation: false\r\n        });\r\n        const point = new THREE.Points(geom, mat);\r\n        this.scene_objs.push(point);\r\n        this.scene.add(point);\r\n        this.threejs_nums[0] = points_i.length;\r\n    }\r\n    // ============================================================================\r\n    /**\r\n     * Add threejs points to the scene\r\n     */\r\n    private _addPointLabels(model: GIModel): void {\r\n        const labels = model.modeldata.attribs.query.getModelAttribVal('labels');\r\n        if (!labels || !isArray(labels) || labels.length === 0) {\r\n            return;\r\n        }\r\n        const loader = new THREE.FontLoader();\r\n        loader.load( 'assets/fonts/helvetiker_regular.typeface.json', font => {\r\n            const matLite = new THREE.MeshBasicMaterial( {\r\n                transparent: false,\r\n                side: THREE.DoubleSide,\r\n                vertexColors: THREE.VertexColors\r\n            } );\r\n            const shapes = [];\r\n\r\n            const fromVec = new THREE.Vector3(0, 0, 1);\r\n            const checkVecFrom = new THREE.Vector3(1, 0, 0);\r\n\r\n            for (const label of labels) {\r\n                const labelText = label.text;\r\n                const labelOrient = label.position || label.location;\r\n                if (!labelText || !labelOrient || !isArray(labelOrient)) { continue; }\r\n                const labelSize = label.size || 20;\r\n\r\n                const shape = font.generateShapes( labelText, labelSize , 1);\r\n                const geom = new THREE.ShapeBufferGeometry(shape);\r\n\r\n                let labelPos = labelOrient[0];\r\n\r\n                if (!isArray(labelPos)) {\r\n                    labelPos = labelOrient;\r\n                } else {\r\n                    let toVec = new THREE.Vector3(...labelOrient[1]);\r\n                    const pVec2 = new THREE.Vector3(...labelOrient[2]);\r\n                    toVec = toVec.cross(pVec2).normalize();\r\n\r\n                    if (labelOrient[1][0] !== 0 || labelOrient[1][1] !== 0) {\r\n                        const checkVecTo = new THREE.Vector3(labelOrient[1][0], labelOrient[1][1], 0).normalize();\r\n                        const rotateQuat = new THREE.Quaternion();\r\n                        rotateQuat.setFromUnitVectors(checkVecFrom, checkVecTo);\r\n                        const rotateMat = new THREE.Matrix4(); // create one and reuse it\r\n                        rotateMat.makeRotationFromQuaternion(rotateQuat);\r\n                        geom.applyMatrix(rotateMat);\r\n                    }\r\n\r\n                    const quaternion = new THREE.Quaternion();\r\n                    quaternion.setFromUnitVectors(fromVec, toVec);\r\n                    const matrix = new THREE.Matrix4(); // create one and reuse it\r\n                    matrix.makeRotationFromQuaternion(quaternion);\r\n                    geom.applyMatrix(matrix);\r\n                }\r\n                geom.translate( labelPos[0], labelPos[1], labelPos[2]);\r\n\r\n                let color = new THREE.Color(0);\r\n                if (label.color  && label.color.length === 3) {\r\n                    color = new THREE.Color(`rgb(${label.color[0]}, ${label.color[1]}, ${label.color[2]})`);\r\n                }\r\n                const colors_buffer = new THREE.Float32BufferAttribute(geom.attributes.position.count * 3, 3);\r\n                if (label.color && label.color.length === 3) {\r\n                    for (let i = 0; i < colors_buffer.count; i++) {\r\n                        colors_buffer.setXYZ(i, label.color[0], label.color[1], label.color[2]);\r\n                    }\r\n                }\r\n                geom.setAttribute('color', colors_buffer);\r\n                shapes.push(geom);\r\n            }\r\n            if (shapes.length === 0) { return; }\r\n            const mergedGeom = BufferGeometryUtils.mergeBufferGeometries(shapes);\r\n            const text = new THREE.Mesh(mergedGeom , matLite);\r\n            this.scene.add(text);\r\n            // this.renderer.render(this.scene, this.camera);\r\n            this.renderer.render(this.scene, this.camera);\r\n        });\r\n    }\r\n\r\n\r\n    // ============================================================================\r\n    /**\r\n     * Add threejs positions to the scene\r\n     */\r\n    private _addPosis(points_i: number[],\r\n        posis_buffer: THREE.Float32BufferAttribute,\r\n        color: string,\r\n        size: number = 1): void {\r\n        const geom = new THREE.BufferGeometry();\r\n        geom.setIndex(points_i);\r\n        // geom.addAttribute('position', posis_buffer);\r\n        geom.setAttribute('position', posis_buffer);\r\n        this._buffer_geoms.push(geom);\r\n        // geom.computeBoundingSphere();\r\n        const mat = new THREE.PointsMaterial({\r\n            color: new THREE.Color(parseInt(color.replace('#', '0x'), 16)),\r\n            size: size,\r\n            sizeAttenuation: false\r\n            // vertexColors: THREE.VertexColors\r\n        });\r\n        const point = new THREE.Points(geom, mat);\r\n        this.scene_objs.push(point);\r\n        this.scene.add(point);\r\n        this.positions.push(point);\r\n        this.positions.map(p => p.visible = this.settings.positions.show);\r\n    }\r\n    // ============================================================================\r\n    /**\r\n     *\r\n     * @param text\r\n     */\r\n    private _createHud(text: string) {\r\n        const div = document.createElement('div');\r\n        div.id = `hud`;\r\n        div.style.position = 'absolute';\r\n        div.style.background = 'rgba(255, 255, 255, 0.3)';\r\n        div.style.padding = '5px';\r\n        div.innerHTML = text;\r\n        div.style.top = '40px';\r\n        div.style.left = '5px';\r\n        div.style.maxWidth = '200px';\r\n        div.style.whiteSpace = 'pre-wrap';\r\n        div.style.fontSize = '14px';\r\n        return {\r\n            element: div\r\n        };\r\n    }\r\n    /**\r\n     *\r\n     * @param background_set\r\n     */\r\n    private _loadBackground(background_set: number) {\r\n        const path = 'assets/img/background/bg' + background_set + '/';\r\n        const format = '.jpg';\r\n        const urls = [\r\n            path + 'px' + format, path + 'nx' + format,\r\n            path + 'py' + format, path + 'ny' + format,\r\n            path + 'pz' + format, path + 'nz' + format\r\n        ];\r\n        this.cameraBackgrounds = {};\r\n        new THREE.CubeTextureLoader().load(urls, texture => {\r\n            this.renderer.render(this.scene, this.camera);\r\n            texture.format = THREE.RGBFormat;\r\n            this.cameraBackgrounds['Persp'] = texture;\r\n            this.scene.background = this.cameraBackgrounds[this.currentCamera];\r\n        });\r\n        new THREE.TextureLoader().load(path + 'nz' + format, texture => {\r\n            this.renderer.render(this.scene, this.camera);\r\n            texture.format = THREE.RGBFormat;\r\n            this.cameraBackgrounds['Top'] = texture;\r\n            this.scene.background = this.cameraBackgrounds[this.currentCamera];\r\n        });\r\n        new THREE.TextureLoader().load(path + 'left' + format, texture => {\r\n            this.renderer.render(this.scene, this.camera);\r\n            texture.format = THREE.RGBFormat;\r\n            this.cameraBackgrounds['Left'] = texture;\r\n            this.scene.background = this.cameraBackgrounds[this.currentCamera];\r\n        });\r\n        new THREE.TextureLoader().load(path + 'front' + format, texture => {\r\n            this.renderer.render(this.scene, this.camera);\r\n            texture.format = THREE.RGBFormat;\r\n            this.cameraBackgrounds['Front'] = texture;\r\n            this.scene.background = this.cameraBackgrounds[this.currentCamera];\r\n        });\r\n\r\n        // this._renderer.render(this._scene, this._camera);\r\n    }\r\n\r\n    /**\r\n     * Create ambient light\r\n     */\r\n    private _addAmbientLight() {\r\n        const color = new THREE.Color(parseInt(this.settings.ambient_light.color.replace('#', '0x'), 16));\r\n        const intensity = this.settings.ambient_light.intensity;\r\n        this.ambient_light = new THREE.AmbientLight(color, intensity); // soft white light\r\n        this.ambient_light.castShadow = false;\r\n        this.scene.add(this.ambient_light);\r\n    }\r\n\r\n    /**\r\n     * Create hemisphere light\r\n     */\r\n    private _addHemisphereLight() {\r\n        const skyColor = new THREE.Color(parseInt(this.settings.hemisphere_light.skyColor.replace('#', '0x'), 16));\r\n        const groundColor = new THREE.Color(parseInt(this.settings.hemisphere_light.groundColor.replace('#', '0x'), 16));\r\n        const intensity = this.settings.hemisphere_light.intensity;\r\n        this.hemisphere_light = new THREE.HemisphereLight(\r\n            skyColor, // skyColor\r\n            groundColor, // groundColor\r\n            intensity // intensity\r\n        );\r\n        this.scene.add(this.hemisphere_light);\r\n        const helper = new THREE.HemisphereLightHelper(this.hemisphere_light, 10);\r\n        helper.visible = this.settings.hemisphere_light.helper;\r\n        this.scene.add(helper);\r\n    }\r\n\r\n    // Create Directional Light\r\n    private _addDirectionalLight(): void {\r\n        this.directional_light_settings = JSON.parse(JSON.stringify(this.settings.directional_light));\r\n        if (this.model\r\n        && this.model.modeldata.attribs\r\n        && this.model.modeldata.attribs.query\r\n        && this.model.modeldata.attribs.query.hasModelAttrib('directional_light')) {\r\n            const model_light_settings: any = this.model.modeldata.attribs.query.getModelAttribVal('directional_light');\r\n            if (model_light_settings.constructor === {}.constructor) {\r\n                for (const i in model_light_settings) {\r\n                    if (model_light_settings[i]) {\r\n                        this.directional_light_settings[i] = model_light_settings[i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.directional_light = new THREE.DirectionalLight(this.directional_light_settings.color,\r\n            this.directional_light_settings.intensity);\r\n\r\n        // if (this.directional_light_settings.type === 'directional') {\r\n        //     this.directional_light = new THREE.DirectionalLight(this.directional_light_settings.color,\r\n        //         this.directional_light_settings.intensity);\r\n        // } else {\r\n        //     this.directional_light = new THREE.PointLight(this.directional_light_settings.color,\r\n        //         this.directional_light_settings.intensity);\r\n        // }\r\n        let distance = 0;\r\n\r\n        if (this._all_objs_sphere) {\r\n            distance = Math.round(this._all_objs_sphere.radius);\r\n            // if (distance < 10000) { distance = 10000; }\r\n        }\r\n        this.directional_light_settings.distance = distance;\r\n        // this.getDLPosition(distance);\r\n        this.directional_light.castShadow = this.directional_light_settings.shadow;\r\n        this.directional_light.visible = this.directional_light_settings.show;\r\n        // this.directional_light_settings.shadowSize = 2;\r\n        // const shadowMapSize = this.directional_light_settings.shadowSize;\r\n        if (this.directional_light_settings.shadowSize <= 10) {\r\n            this.directional_light_settings.shadowSize = this.directional_light_settings.shadowSize * 512;\r\n        }\r\n        if (this.directional_light_settings.shadowSize < 1024) {\r\n            this.directional_light_settings.shadowSize = 2048;\r\n        }\r\n        this.directional_light.shadow.mapSize.width = this.directional_light_settings.shadowSize;  // default\r\n        this.directional_light.shadow.mapSize.height = this.directional_light_settings.shadowSize; // default\r\n        // this.directional_light.shadow.camera.visible = true;\r\n\r\n        this._setDLDistance(distance);\r\n        this.scene.add(this.directional_light);\r\n    }\r\n\r\n    /**\r\n     * Get the bounding sphere of all objects\r\n     */\r\n    private _getAllObjsSphere() {\r\n        if (this.scene_objs.length !== 0) {\r\n            const objs = new THREE.Object3D();\r\n            this.scene_objs.map(obj => objs.children.push(obj));\r\n            const boxHelper = new THREE.BoxHelper(objs);\r\n            boxHelper.geometry.computeBoundingSphere();\r\n            const boundingSphere = boxHelper.geometry.boundingSphere;\r\n            return boundingSphere;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param size\r\n     */\r\n    private _setDLDistance(size = null): void {\r\n        let scale;\r\n        if (size) {\r\n            scale = size;\r\n        } else {\r\n            scale = 10000;\r\n        }\r\n        if (this.directional_light) {\r\n            let i = 0;\r\n            const length = this.scene.children.length;\r\n            if (length !== 0) {\r\n                for (; i < length; i++) {\r\n                    if (this.scene.children[i]) {\r\n                        if (this.scene.children[i].name === 'DLHelper' || this.scene.children[i].name === 'lightTarget') {\r\n                            this.scene.children[i]['dispose']();\r\n                            this.scene.remove(this.scene.children[i]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            this.directional_light.shadow.camera.near = 0.5;\r\n\r\n            // let altitude = this.directional_light_settings.altitude;\r\n            // if (altitude < 3) { altitude = 3; }\r\n            // const altitudeOffset = Math.sin(altitude * Math.PI / 180);\r\n            this.directional_light.shadow.camera.far = scale * 20;\r\n            this.directional_light.shadow.bias = -0.0001;\r\n\r\n            let helper;\r\n\r\n            const cam = <THREE.OrthographicCamera> this.directional_light.shadow.camera;\r\n            cam.up.set(0, 0, 1);\r\n            cam.left = -scale;\r\n            cam.right = scale;\r\n            cam.top = scale;\r\n            cam.bottom = -scale;\r\n            if (this._all_objs_sphere) {\r\n                const lightTarget = new THREE.Object3D();\r\n                lightTarget.position.set(\r\n                    this._all_objs_sphere.center.x, this._all_objs_sphere.center.y, this._all_objs_sphere.center.z);\r\n                lightTarget.name = 'lightTarget';\r\n                this.scene.add(lightTarget);\r\n                (<THREE.DirectionalLight>this.directional_light).target = lightTarget;\r\n            }\r\n            helper = new THREE.CameraHelper(this.directional_light.shadow.camera);\r\n\r\n            // if (this.directional_light_settings.type === 'directional') {\r\n            //     const cam = <THREE.OrthographicCamera> this.directional_light.shadow.camera;\r\n            //     cam.left = -scale;\r\n            //     cam.right = scale;\r\n            //     cam.top = scale;\r\n            //     cam.bottom = -scale;\r\n            //     if (this._all_objs_sphere) {\r\n            //         const lightTarget = new THREE.Object3D();\r\n            //         lightTarget.position.set(\r\n            //             this._all_objs_sphere.center.x, this._all_objs_sphere.center.y, this._all_objs_sphere.center.z);\r\n            //         lightTarget.name = 'lightTarget';\r\n            //         this.scene.add(lightTarget);\r\n            //         (<THREE.DirectionalLight>this.directional_light).target = lightTarget;\r\n            //     }\r\n            //     helper = new THREE.CameraHelper(this.directional_light.shadow.camera);\r\n            // } else {\r\n            //     helper = new THREE.PointLightHelper( <THREE.PointLight>this.directional_light );\r\n            // }\r\n            helper.visible = this.directional_light_settings.helper;\r\n            helper.name = 'DLHelper';\r\n            if (size) { this.scene.add(helper); }\r\n            this.getDLPosition(scale);\r\n        }\r\n    }\r\n\r\n\r\n    // ============================================================================\r\n    // ============================================================================\r\n    // Some old stuff\r\n    // ============================================================================\r\n    // ============================================================================\r\n\r\n    // public disposeWebGL() {\r\n    //     console.log('this._renderer.info', this._renderer.info.memory.geometries);\r\n    //     this.sceneObjs.forEach(obj => {\r\n    //         if (obj['dispose']) { obj['dispose'](); }\r\n    //         this._scene.remove(obj);\r\n    //     });\r\n    //     const BufferGeoms = this.BufferGeoms;\r\n    //     BufferGeoms.forEach(geom => {\r\n    //         geom.dispose();\r\n    //     });\r\n    //     this.BufferGeoms = [];\r\n    //     console.log('this._renderer.info', this._renderer.info.memory.geometries);\r\n    // }\r\n\r\n    // private cameraLookat(center, radius = 100) {\r\n    //     const fov = this._camera.fov * (Math.PI / 180);\r\n    //     const vec_centre_to_pos: THREE.Vector3 = new THREE.Vector3();\r\n    //     vec_centre_to_pos.subVectors(this._camera.position, vec_centre_to_pos);\r\n    //     const tmp_vec = new THREE.Vector3(Math.abs(radius / Math.sin(fov / 2)),\r\n    //         Math.abs(radius / Math.sin(fov / 2)),\r\n    //         Math.abs(radius / Math.sin(fov / 2)));\r\n    //     vec_centre_to_pos.setLength(tmp_vec.length());\r\n    //     const perspectiveNewPos: THREE.Vector3 = new THREE.Vector3();\r\n    //     perspectiveNewPos.addVectors(center, vec_centre_to_pos);\r\n    //     const newLookAt = this._camera.getWorldDirection(center);\r\n    //     // this._camera.position.copy(perspectiveNewPos);\r\n    //     this._camera.lookAt(newLookAt);\r\n    //     this._camera.updateProjectionMatrix();\r\n    //     this._controls.target.set(center.x, center.y, center.z);\r\n    //     this._controls.update();\r\n    //     const textLabels = this._textLabels;\r\n    //     if (textLabels.size !== 0) {\r\n    //         textLabels.forEach((label) => {\r\n    //             label.updatePosition();\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n    // public DLMapSize(size = null): void {\r\n    //     let _size;\r\n    //     if (size) {\r\n    //         _size = 1024 * size;\r\n    //     } else {\r\n    //         _size = 8192;\r\n    //     }\r\n    //     if (this.directional_light) {\r\n    //         this.directional_light.shadow.mapSize.width = _size;\r\n    //         this.directional_light.shadow.mapSize.width = _size;\r\n    //     }\r\n    //     // this._renderer.render(this._scene, this._camera);\r\n    // }\r\n\r\n    // public onWindowKeyPress(event: KeyboardEvent): boolean {\r\n    //     const nodeName = (<Element>event.target).nodeName;\r\n    //     if (nodeName === 'TEXTAREA' || nodeName === 'INPUT') { return false; }\r\n    //     const segment_str = window.location.pathname;\r\n    //     const segment_array = segment_str.split('/');\r\n    //     const last_segment = segment_array[segment_array.length - 1];\r\n    //     if (last_segment === 'editor') {\r\n    //         return false;\r\n    //     }\r\n    //     if (event.ctrlKey || event.metaKey) {\r\n    //         return false;\r\n    //     }\r\n    //     const keyCode = event.which;\r\n    //     // console.log(keyCode);\r\n    //     const positionDelta = 10;\r\n    //     const rotationDelta = 0.02;\r\n    //     const xp = this._camera.position.x;\r\n    //     const yp = this._camera.position.y;\r\n    //     switch (keyCode) {\r\n    //         case 65: // A: move left\r\n    //             this._camera.position.x -= positionDelta;\r\n    //             break;\r\n    //         case 68: // D: move right\r\n    //             this._camera.position.x += positionDelta;\r\n    //             break;\r\n    //         case 87: // W: move forward\r\n    //             this._camera.position.y += positionDelta;\r\n    //             break;\r\n    //         case 83: // S: move backward\r\n    //             this._camera.position.y -= positionDelta;\r\n    //             break;\r\n    //         case 90: // Z: move up\r\n    //             this._camera.position.z += positionDelta;\r\n    //             break;\r\n    //         case 88: // X: move down\r\n    //             this._camera.position.z -= positionDelta;\r\n    //             break;\r\n    //         case 81: // Q: rotate clockwise\r\n    //             this._camera.position.x = xp * Math.cos(rotationDelta) + yp * Math.sin(rotationDelta);\r\n    //             this._camera.position.y = yp * Math.cos(rotationDelta) - xp * Math.sin(rotationDelta);\r\n    //             this._camera.lookAt(this._scene.position);\r\n    //             break;\r\n    //         case 69: // E: rotate anticlockwise\r\n    //             this._camera.position.x = xp * Math.cos(rotationDelta) - yp * Math.sin(rotationDelta);\r\n    //             this._camera.position.y = yp * Math.cos(rotationDelta) + xp * Math.sin(rotationDelta);\r\n    //             this._camera.lookAt(this._scene.position);\r\n    //             break;\r\n    //         case 84: // T\r\n    //             this._camera.rotation.x += rotationDelta;\r\n    //             break;\r\n    //         case 71: // G\r\n    //             this._camera.rotation.x -= rotationDelta;\r\n    //             break;\r\n    //         case 70: // F\r\n    //             this._camera.rotation.y += rotationDelta;\r\n    //             break;\r\n    //         case 72: // H\r\n    //             this._camera.rotation.y -= rotationDelta;\r\n    //             break;\r\n    //         default:\r\n    //             break;\r\n    //     }\r\n    //     return true;\r\n    // }\r\n}\r\n\r\n","import * as THREE from 'three';\r\n// import * as OrbitControls from 'three-orbit-controls';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { ISettings } from './data.threejsSettings';\r\n// import { WEBVR } from 'three/examples/jsm/vr/WebVR.js';\r\n\r\n/**\r\n * ThreejsScene\r\n */\r\nexport class DataThreejsBase {\r\n\r\n    // threeJS objects\r\n    public scene: THREE.Scene;\r\n\r\n    // public basic_scene: THREE.Scene;\r\n    public renderer: THREE.WebGLRenderer;\r\n    public camera;\r\n    public perspCam: THREE.PerspectiveCamera;\r\n    public orthoCam: THREE.OrthographicCamera;\r\n    public controls: OrbitControls;\r\n    public perspControls: OrbitControls;\r\n    public orthoControls: OrbitControls;\r\n    public orthoCamPos;\r\n    public cameraBackgrounds;\r\n\r\n    public currentCamera: string;\r\n\r\n    public raycaster: THREE.Raycaster;\r\n    public mouse: THREE.Vector2;\r\n\r\n    // interaction and selection\r\n    public tri_select_map: Map<number, number>;\r\n    public edge_select_map: Map<number, number>;\r\n    public white_edge_select_map: Map<number, number>;\r\n    public point_select_map: Map<number, number>;\r\n    public point_label: any[];\r\n    public posis_map: Map<number, number>;\r\n    public vertex_map: Map<number, number>;\r\n\r\n    public selected_geoms: Map<string, number> = new Map();\r\n    public selected_positions: Map<string, Map<string, number>> = new Map();\r\n    public selected_vertex: Map<string, Map<string, number>> = new Map();\r\n    public selected_face_edges: Map<string, Map<string, number>> = new Map();\r\n    public selected_face_wires: Map<string, Map<string, number>> = new Map();\r\n    public text: string;\r\n\r\n    // public vrEnabled: boolean = true;\r\n    // public vr;\r\n\r\n    // text labels\r\n    public ObjLabelMap: Map<string, any> = new Map();\r\n    public textLabels: Map<string, any> = new Map();\r\n\r\n    // number of threejs points, lines, triangles\r\n    public threejs_nums: [number, number, number] = [0, 0, 0];\r\n\r\n    // grid\r\n    public grid: THREE.GridHelper;\r\n\r\n    // axes\r\n    public axesHelper: THREE.AxesHelper;\r\n    protected axes_pos: THREE.Vector3 = new THREE.Vector3();\r\n    public directional_light: THREE.DirectionalLight|THREE.PointLight;\r\n    public directional_light_settings: ISettings['directional_light'];\r\n    public ambient_light: THREE.AmbientLight;\r\n    public hemisphere_light: THREE.HemisphereLight;\r\n    public groundObj: THREE.Mesh;\r\n\r\n    // the model to display\r\n    public model: GIModel;\r\n    public scene_objs: THREE.Object3D[] = [];\r\n    public scene_objs_selected: Map<string, THREE.Object3D> = new Map();\r\n    public positions: THREE.Object3D[] = [];\r\n\r\n    public timelineEnabled = null;\r\n    public timelineIndex = null;\r\n    public timelineValue = null;\r\n    public current_time_point = null;\r\n    public timeline_groups = null;\r\n\r\n    // Show Normals\r\n    public vnh: THREE.VertexNormalsHelper;\r\n\r\n    // Settings\r\n    public settings: ISettings;\r\n\r\n    // initial origin\r\n    protected origin: THREE.Vector3 = new THREE.Vector3(0, 1, 0);\r\n\r\n    // BufferGeoms\r\n    protected _buffer_geoms: THREE.BufferGeometry[] = [];\r\n    protected _all_objs_sphere: THREE.Sphere;\r\n\r\n    /**\r\n     * Constructs a new data subscriber.\r\n     */\r\n    constructor(settings: ISettings) {\r\n        this.settings = settings;\r\n        if (!this.settings.directional_light.type) {\r\n            this.settings.directional_light.type = 'directional';\r\n            localStorage.setItem('mpm_settings', JSON.stringify(this.settings));\r\n        }\r\n        // scene\r\n        this.scene = new THREE.Scene();\r\n        // renderer\r\n        this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true, logarithmicDepthBuffer: true });\r\n        this.renderer.autoClear = false;\r\n        // this._renderer.setClearColor(0xcccccc, 0);\r\n        this.renderer.setPixelRatio(window.devicePixelRatio);\r\n        this.renderer.setSize(window.innerWidth / 1.8, window.innerHeight);\r\n        this.renderer.shadowMap.enabled = true;\r\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        // this.renderer.shadowMap.type = THREE.VSMShadowMap;\r\n        // camera settings\r\n        this.perspCam = new THREE.PerspectiveCamera(50, 1, 0.01, 1000000);\r\n        this.perspCam.position.x = -80;\r\n        this.perspCam.position.y = -80;\r\n        this.perspCam.position.z = 80;\r\n        this.perspCam.aspect = 1;\r\n        this.perspCam.up.set(0, 0, 1);\r\n        this.perspCam.lookAt(this.scene.position);\r\n        this.perspCam.updateProjectionMatrix();\r\n\r\n        this.orthoCam = new THREE.OrthographicCamera(0, 600, 600, 0, 0.1, 2000);\r\n        this.orthoCam.position.x = -300;\r\n        this.orthoCam.position.y = 0;\r\n        this.orthoCam.position.z = 0;\r\n        this.orthoCam.up.set(0, 0, 1);\r\n        this.orthoCam.lookAt(this.scene.position);\r\n        this.orthoCam.updateProjectionMatrix();\r\n        this.orthoCamPos = {};\r\n\r\n        this.currentCamera = 'Persp';\r\n\r\n        // orbit controls\r\n        // const orbit_controls = OrbitControls(THREE);\r\n        // this.controls = new orbit_controls(this.camera, this.renderer.domElement);\r\n        this.perspControls = new OrbitControls(this.perspCam, this.renderer.domElement);\r\n        this.perspControls.enableKeys = false;\r\n        this.perspControls.update();\r\n\r\n        this.orthoControls = new OrbitControls(this.orthoCam, this.renderer.domElement);\r\n        this.orthoControls.enableKeys = false;\r\n        // this.orthoControls.screenSpacePanning = false;\r\n        this.orthoControls.screenSpacePanning = true;\r\n        this.orthoControls.enableRotate = false;\r\n        this.orthoControls.enabled = false;\r\n        this.orthoControls.update();\r\n\r\n        this.camera = this.perspCam;\r\n        this.controls = this.perspControls;\r\n\r\n        // mouse\r\n        this.mouse = new THREE.Vector2();\r\n        // selecting\r\n        this.raycaster = new THREE.Raycaster();\r\n        this.raycaster.params.Line.threshold = 0.3; // TODO this need to be set dynamically based on model size and view zoom\r\n        this.raycaster.params.Points.threshold = 0.3; // TODO this need to be set dynamically based on model size and view zoom\r\n\r\n        // this.vr = WEBVR.createButton(this.renderer);\r\n\r\n        setTimeout(() => {\r\n            const threeContainer = document.getElementById('threejs-container');\r\n            const aspect = (threeContainer.clientWidth / threeContainer.clientHeight + 1) / 2;\r\n            this.orthoCam.left = aspect * -300;\r\n            this.orthoCam.right = aspect * 300;\r\n            this.orthoCam.updateProjectionMatrix();\r\n            this.orthoControls.update();\r\n        }, 0);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { ISettings } from './data.threejsSettings';\r\nimport { DataThreejsSelect } from './data.threejsSelect';\r\n\r\n/**\r\n * ThreejsScene Look At\r\n */\r\nexport class DataThreejsLookAt extends DataThreejsSelect {\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(settings: ISettings) {\r\n        super(settings);\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    public lookAtObj() {\r\n        const selectedObjs = this._getSelectedObjs();\r\n        let center = null;\r\n        let radius = null;\r\n        if (selectedObjs) {\r\n            center = selectedObjs.center;\r\n            radius = selectedObjs.radius;\r\n            if (radius === 0) {\r\n                radius = 50;\r\n            }\r\n        } else if (this._all_objs_sphere) {\r\n            center = this._all_objs_sphere.center;\r\n            radius = this._all_objs_sphere.radius;\r\n            if (radius === 0) {\r\n                radius = 50;\r\n            }\r\n        } else {\r\n            center = this.scene.position;\r\n            radius = 50;\r\n        }\r\n\r\n        this._cameraLookat(center, radius);\r\n    }\r\n    // ============================================================================\r\n    // Private methods\r\n    // ============================================================================\r\n    /**\r\n     *\r\n     */\r\n    private _getSelectedObjs() {\r\n        if (this.scene_objs_selected.size !== 0) {\r\n            const objs = new THREE.Object3D();\r\n            this.scene_objs_selected.forEach(obj => objs.children.push(obj));\r\n            const boxHelper = new THREE.BoxHelper(objs);\r\n            boxHelper.geometry.computeBoundingSphere();\r\n            const boundingSphere = boxHelper.geometry.boundingSphere;\r\n            return boundingSphere;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param center\r\n     * @param radius\r\n     */\r\n    private _cameraLookat(center, radius = 100) {\r\n        const fov = this.perspCam.fov * (Math.PI / 180);\r\n        const perspectiveNewPos: THREE.Vector3 = new THREE.Vector3();\r\n        // Find looking direction: current camera position - current control target\r\n        // Scale looking direction to be of length: radius / sin(fov/2)\r\n        // New camera position: scaled looking direction + center\r\n        perspectiveNewPos.subVectors(this.perspCam.position, this.perspControls.target);\r\n        perspectiveNewPos.setLength(radius / Math.sin(fov / 2));\r\n        perspectiveNewPos.add(center);\r\n\r\n        this.perspCam.position.copy(perspectiveNewPos);\r\n        this.perspControls.target.set(center.x, center.y, center.z);\r\n        this.perspCam.updateProjectionMatrix();\r\n        this.perspControls.update();\r\n\r\n        const textLabels = this.textLabels;\r\n        if (textLabels.size !== 0) {\r\n            textLabels.forEach((label) => {\r\n                label.updatePosition();\r\n            });\r\n        }\r\n    }\r\n\r\n    public orthoLookatObj() {\r\n        if (this.currentCamera === 'Top') {\r\n            this._orthoLookat(0, 0, 1);\r\n        } else if (this.currentCamera === 'Left') {\r\n            this._orthoLookat(-1, 0, 0);\r\n        } else if (this.currentCamera === 'Front') {\r\n            this._orthoLookat(0, -1, 0);\r\n        }\r\n    }\r\n\r\n    private _orthoLookat(dirX: number, dirY: number, dirZ: number) {\r\n        const selectedObjs = this._getSelectedObjs();\r\n        let center = null;\r\n        let radius = null;\r\n        if (selectedObjs) {\r\n            center = selectedObjs.center;\r\n            radius = selectedObjs.radius;\r\n            if (radius === 0) {\r\n                radius = 50;\r\n            }\r\n        } else if (this._all_objs_sphere) {\r\n            center = this._all_objs_sphere.center;\r\n            radius = this._all_objs_sphere.radius;\r\n            if (radius === 0) {\r\n                radius = 50;\r\n            }\r\n        } else {\r\n            center = new THREE.Vector3();\r\n            radius = 50;\r\n        }\r\n\r\n        const posVec = new THREE.Vector3(center.x + 1.5 * dirX * radius,\r\n                                         center.y + 1.5 * dirY * radius,\r\n                                         center.z + 1.5 * dirZ * radius);\r\n        this.orthoCam.left = - radius * this.orthoCam.right / this.orthoCam.top;\r\n        this.orthoCam.right = radius * this.orthoCam.right / this.orthoCam.top;\r\n        this.orthoCam.top = radius;\r\n        this.orthoCam.bottom = -radius;\r\n        this.orthoCam.zoom = 1;\r\n\r\n        this.orthoCam.position.copy(posVec);\r\n        this.orthoControls.target.copy(new THREE.Vector3(posVec.x * (1 - Math.abs(dirX)),\r\n                                    posVec.y * (1 - Math.abs(dirY)),\r\n                                    posVec.z * (1 - Math.abs(dirZ))));\r\n        this.orthoCam.updateProjectionMatrix();\r\n        this.orthoControls.update();\r\n    }\r\n\r\n    updateCameraFOV() {\r\n        const selectedObjs = this._getSelectedObjs();\r\n        let center = null;\r\n        let radius = null;\r\n        if (selectedObjs) {\r\n            center = selectedObjs.center;\r\n            radius = selectedObjs.radius;\r\n            if (radius === 0) {\r\n                radius = 50;\r\n            }\r\n        } else if (this._all_objs_sphere) {\r\n            center = this._all_objs_sphere.center;\r\n            radius = this._all_objs_sphere.radius;\r\n            if (radius === 0) {\r\n                radius = 50;\r\n            }\r\n        } else {\r\n            center = new THREE.Vector3();\r\n            radius = 50;\r\n        }\r\n        this.orthoCam.left = - radius * this.orthoCam.right / this.orthoCam.top;\r\n        this.orthoCam.right = radius * this.orthoCam.right / this.orthoCam.top;\r\n        this.orthoCam.top = radius;\r\n        this.orthoCam.bottom = -radius;\r\n\r\n        if (this.currentCamera === 'Top') {\r\n            this.orthoCam.position.z = center.z + 1.5 * radius;\r\n        } else if (this.currentCamera === 'Left') {\r\n            this.orthoCam.position.x =  center.x - 1.5 * radius;\r\n        } else if (this.currentCamera === 'Front') {\r\n            this.orthoCam.position.y =  center.y - 1.5 * radius;\r\n        }\r\n\r\n    }\r\n\r\n    switchCamera(switchCam = true) {\r\n        if (switchCam) {\r\n            if (this.currentCamera !== 'Persp') {\r\n                this.orthoCamPos[this.currentCamera] = {\r\n                    position: new THREE.Vector3().copy(this.orthoCam.position),\r\n                    target: new THREE.Vector3().copy(this.orthoControls.target),\r\n                    zoom: this.orthoCam.zoom,\r\n                };\r\n            }\r\n            if (this.currentCamera === 'Persp') {\r\n                this.currentCamera = 'Top';\r\n            } else if (this.currentCamera === 'Top') {\r\n                this.currentCamera = 'Left';\r\n            } else if (this.currentCamera === 'Left') {\r\n                this.currentCamera = 'Front';\r\n            } else if (this.currentCamera === 'Front') {\r\n                this.currentCamera = 'Persp';\r\n            }\r\n            if (this.cameraBackgrounds) {\r\n                this.scene.background = this.cameraBackgrounds[this.currentCamera];\r\n            }\r\n        }\r\n        if (this.currentCamera === 'Persp') {\r\n            this.orthoControls.enabled = false;\r\n            this.perspControls.enabled = true;\r\n            this.camera = this.perspCam;\r\n            this.controls = this.perspControls;\r\n            this.perspControls.update();\r\n            this.orthoControls.update();\r\n        } else {\r\n            this.perspControls.enabled = false;\r\n            this.orthoControls.enabled = true;\r\n            this.camera = this.orthoCam;\r\n            this.controls = this.orthoControls;\r\n            if (this.orthoCamPos[this.currentCamera]) {\r\n                const camPos = this.orthoCamPos[this.currentCamera];\r\n                this.orthoCam.position.copy(camPos.position);\r\n                this.orthoCam.zoom = camPos.zoom;\r\n                this.orthoControls.target.copy(camPos.target);\r\n                this.updateCameraFOV();\r\n                this.orthoCam.updateProjectionMatrix();\r\n            } else {\r\n                if (this.currentCamera === 'Top') {\r\n                    this._orthoLookat(0, 0, 1);\r\n                } else if (this.currentCamera === 'Left') {\r\n                    this._orthoLookat(-1, 0, 0);\r\n                } else if (this.currentCamera === 'Front') {\r\n                    this._orthoLookat(0, -1, 0);\r\n                }\r\n            }\r\n            this.perspControls.update();\r\n            this.orthoControls.update();\r\n        }\r\n    }\r\n}\r\n\r\n","import * as THREE from 'three';\r\nimport { ISettings } from './data.threejsSettings';\r\nimport { DataThreejsBase } from './data.threejsBase';\r\n\r\nenum objType {\r\n    point = 'point',\r\n    line = 'line',\r\n    face = 'face'\r\n}\r\n\r\n/**\r\n * ThreejsScene Select\r\n */\r\nexport class DataThreejsSelect extends DataThreejsBase {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(settings: ISettings) {\r\n        super(settings);\r\n    }\r\n    /**\r\n     *\r\n     * @param ent_id\r\n     * @param triangle_i\r\n     * @param positions\r\n     * @param container\r\n     * @param label\r\n     */\r\n    public selectObjFace(ent_id: string,\r\n        tris_i: number[],\r\n        positions: number[],\r\n        container,\r\n        labelText = null) {\r\n\r\n        if (this.selected_geoms.has(ent_id)) {\r\n            return;\r\n        }\r\n        const geom = new THREE.BufferGeometry();\r\n        geom.setIndex(tris_i);\r\n        geom.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        geom.setAttribute('normal', new THREE.Float32BufferAttribute(Array(positions.length).fill(0), 3));\r\n        geom.setAttribute('color', new THREE.Float32BufferAttribute(Array(positions.length).fill(0), 3));\r\n        geom.clearGroups();\r\n        geom.addGroup(0, tris_i.length, 0);\r\n        geom.addGroup(0, tris_i.length, 1);\r\n        const colorf = new THREE.Color(parseInt(this.settings.colors.face_f_s.replace('#', '0x'), 16));\r\n        const colorb = new THREE.Color(parseInt(this.settings.colors.face_b_s.replace('#', '0x'), 16));\r\n        const matf = new THREE.MeshPhongMaterial({\r\n            specular: 0x000000,\r\n            emissive: 0x000000,\r\n            color: colorf,\r\n            shininess: 0,\r\n            side: THREE.FrontSide\r\n        });\r\n        const matb = new THREE.MeshPhongMaterial({\r\n            specular: 0x000000,\r\n            emissive: 0x000000,\r\n            color: colorb,\r\n            shininess: 0,\r\n            side: THREE.BackSide\r\n        });\r\n        const mesh = new THREE.Mesh(geom, [matf, matb]);\r\n        mesh.geometry.computeBoundingSphere();\r\n        mesh.geometry.computeVertexNormals();\r\n        this.scene.add(mesh);\r\n        this.selected_geoms.set(ent_id, mesh.id);\r\n        this.scene_objs_selected.set(ent_id, mesh);\r\n        if (labelText) {\r\n            const obj: { entity: THREE.Mesh, type: string, text: string } = { entity: mesh, type: objType.face, text: labelText };\r\n            this.createLabelforObj(container, obj.entity, obj.type, labelText, ent_id);\r\n            this.ObjLabelMap.set(ent_id, obj);\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param ent_id\r\n     * @param indices\r\n     * @param positions\r\n     * @param container\r\n     * @param labelText\r\n     */\r\n    public selectObjLine(ent_id: string, indices, positions, container, labelText = null) {\r\n        if (this.selected_geoms.has(ent_id)) {\r\n            return;\r\n        }\r\n        const bg = this.initBufferLine(positions, indices, [255, 0, 0]);\r\n        const line = new THREE.LineSegments(bg.geom, bg.mat);\r\n        this.scene.add(line);\r\n        this.selected_geoms.set(ent_id, line.id);\r\n        this.scene_objs_selected.set(ent_id, line);\r\n\r\n        if (labelText) {\r\n            const obj: { entity: THREE.LineSegments, type: string, text: string } = { entity: line, type: objType.line, text: labelText };\r\n            this.createLabelforObj(container, obj.entity, obj.type, labelText, ent_id);\r\n            this.ObjLabelMap.set(ent_id, obj);\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param parent_ent_id\r\n     * @param ent_id\r\n     * @param indices\r\n     * @param positions\r\n     * @param container\r\n     * @param labelText\r\n     */\r\n    public selectEdgeByFace(parent_ent_id: string, ent_id: string, indices, positions, container, labelText = null) {\r\n        const bg = this.initBufferLine(positions, indices, [255, 0, 0]);\r\n        if (this.selected_face_edges.get(parent_ent_id) === undefined) {\r\n            this.selected_face_edges.set(parent_ent_id, new Map());\r\n        }\r\n\r\n        const check_exist: string[] = [];\r\n        this.selected_face_edges.forEach(v => {\r\n            v.forEach((vv, k) => {\r\n                check_exist.push(k);\r\n            });\r\n        });\r\n\r\n        this.selected_geoms.forEach((v, k) => {\r\n            check_exist.push(k);\r\n        });\r\n\r\n        if (!check_exist.includes(ent_id)) {\r\n            const line = new THREE.LineSegments(bg.geom, bg.mat);\r\n            this.scene.add(line);\r\n            this.selected_face_edges.get(parent_ent_id).set(ent_id, line.id);\r\n            this.selected_geoms.set(ent_id, line.id);\r\n            this.scene_objs_selected.set(ent_id, line);\r\n            if (labelText) {\r\n                const obj: {\r\n                    entity: THREE.LineSegments,\r\n                    type: string,\r\n                    text: string\r\n                } = {\r\n                    entity: line,\r\n                    type: objType.line,\r\n                    text: labelText\r\n                };\r\n                this.createLabelforObj(container, obj.entity, obj.type, labelText, ent_id);\r\n                this.ObjLabelMap.set(ent_id, obj);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param parent_ent_id\r\n     * @param ent_id\r\n     * @param indices\r\n     * @param positions\r\n     * @param container\r\n     * @param labelText\r\n     */\r\n    public selectWireByFace(parent_ent_id: string, ent_id: string, indices, positions, container, labelText = null) {\r\n        const bg = this.initBufferLine(positions, indices, [255, 0, 0]);\r\n        if (this.selected_face_wires.get(parent_ent_id) === undefined) {\r\n            this.selected_face_wires.set(parent_ent_id, new Map());\r\n        }\r\n\r\n        const check_exist: string[] = [];\r\n        this.selected_face_wires.forEach(v => {\r\n            v.forEach((vv, k) => {\r\n                check_exist.push(k);\r\n            });\r\n        });\r\n\r\n        this.selected_geoms.forEach((v, k) => {\r\n            check_exist.push(k);\r\n        });\r\n\r\n        if (!check_exist.includes(ent_id)) {\r\n            const line = new THREE.LineSegments(bg.geom, bg.mat);\r\n            this.scene.add(line);\r\n            this.selected_face_wires.get(parent_ent_id).set(ent_id, line.id);\r\n            this.selected_geoms.set(ent_id, line.id);\r\n            this.scene_objs_selected.set(ent_id, line);\r\n            if (labelText) {\r\n                const obj: {\r\n                    entity: THREE.LineSegments,\r\n                    type: string,\r\n                    text: string\r\n                } = {\r\n                    entity: line,\r\n                    type: objType.line,\r\n                    text: labelText\r\n                };\r\n                this.createLabelforObj(container, obj.entity, obj.type, labelText, ent_id);\r\n                this.ObjLabelMap.set(ent_id, obj);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param ent_id\r\n     * @param point_indices\r\n     * @param positions\r\n     * @param container\r\n     * @param labelText\r\n     */\r\n    public selectObjPoint(ent_id: string = null, point_indices, positions, container, labelText = null) {\r\n        if (this.selected_geoms.has(ent_id)) {\r\n            return;\r\n        }\r\n        const bg = this.initBufferPoint(positions, point_indices, null, '#ff0000');\r\n        const point = new THREE.Points(bg.geom, bg.mat);\r\n        this.scene.add(point);\r\n        this.selected_geoms.set(ent_id, point.id);\r\n        this.scene_objs_selected.set(ent_id, point);\r\n        if (labelText) {\r\n            const obj: { entity: THREE.Points, type: string, text: string } = { entity: point, type: objType.point, text: labelText };\r\n            this.createLabelforObj(container, obj.entity, obj.type, labelText, ent_id);\r\n            this.ObjLabelMap.set(ent_id, obj);\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param parent_ent_id\r\n     * @param ent_id\r\n     * @param positions\r\n     * @param container\r\n     * @param labelText\r\n     */\r\n    public selectObjPosition(parent_ent_id: string, ent_id: string, positions, container, labelText = null) {\r\n        const bg = this.initBufferPoint(positions, null, null, this.settings.colors.position_s, this.settings.positions.size + 0.1);\r\n        if (parent_ent_id === null) {\r\n            const point = new THREE.Points(bg.geom, bg.mat);\r\n            this.scene.add(point);\r\n            this.selected_geoms.set(ent_id, point.id);\r\n            this.scene_objs_selected.set(ent_id, point);\r\n            if (labelText) {\r\n                const obj: {\r\n                    entity: THREE.Points,\r\n                    type: string,\r\n                    text: string\r\n                } = {\r\n                    entity: point,\r\n                    type: objType.point,\r\n                    text: labelText\r\n                };\r\n                this.createLabelforObj(container, obj.entity, obj.type, labelText, ent_id);\r\n                this.ObjLabelMap.set(ent_id, obj);\r\n            }\r\n        } else {\r\n            if (this.selected_positions.get(parent_ent_id) === undefined) {\r\n                this.selected_positions.set(parent_ent_id, new Map());\r\n            }\r\n\r\n            const check_exist: string[] = [];\r\n            this.selected_positions.forEach(v => {\r\n                v.forEach((vv, k) => {\r\n                    check_exist.push(k);\r\n                });\r\n            });\r\n\r\n            if (!check_exist.includes(ent_id)) {\r\n                const point = new THREE.Points(bg.geom, bg.mat);\r\n                this.scene.add(point);\r\n                this.selected_positions.get(parent_ent_id).set(ent_id, point.id);\r\n                this.selected_geoms.set(ent_id, point.id);\r\n                this.scene_objs_selected.set(ent_id, point);\r\n                if (labelText) {\r\n                    const obj: {\r\n                        entity: THREE.Points,\r\n                        type: string,\r\n                        text: string\r\n                    } = {\r\n                        entity: point,\r\n                        type: objType.point,\r\n                        text: labelText\r\n                    };\r\n                    this.createLabelforObj(container, obj.entity, obj.type, labelText, ent_id);\r\n                    this.ObjLabelMap.set(ent_id, obj);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param parent_ent_id\r\n     * @param ent_id\r\n     * @param positions\r\n     * @param container\r\n     * @param labelText\r\n     */\r\n    public selectObjvertex(parent_ent_id: string, ent_id: string, positions, container, labelText = null) {\r\n        const bg = this.initBufferPoint(positions, null, null, this.settings.colors.vertex_s, this.settings.positions.size + 0.1);\r\n        if (parent_ent_id === null) {\r\n            const point = new THREE.Points(bg.geom, bg.mat);\r\n            this.scene.add(point);\r\n            this.scene_objs_selected.set(ent_id, point);\r\n            this.selected_geoms.set(ent_id, point.id);\r\n            if (labelText) {\r\n                const obj: {\r\n                    entity: THREE.Points,\r\n                    type: string,\r\n                    text: string\r\n                } = {\r\n                    entity: point,\r\n                    type: objType.point,\r\n                    text: labelText\r\n                };\r\n                this.createLabelforObj(container, obj.entity, obj.type, labelText, ent_id);\r\n                this.ObjLabelMap.set(ent_id, obj);\r\n            }\r\n        } else {\r\n            if (this.selected_vertex.get(parent_ent_id) === undefined) {\r\n                this.selected_vertex.set(parent_ent_id, new Map());\r\n            }\r\n\r\n            const check_exist: string[] = [];\r\n            this.selected_vertex.forEach(v => {\r\n                v.forEach((vv, k) => {\r\n                    check_exist.push(k);\r\n                });\r\n            });\r\n\r\n            if (!check_exist.includes(ent_id)) {\r\n                const point = new THREE.Points(bg.geom, bg.mat);\r\n                this.scene.add(point);\r\n                this.selected_vertex.get(parent_ent_id).set(ent_id, point.id);\r\n                this.scene_objs_selected.set(ent_id, point);\r\n                this.selected_geoms.set(ent_id, point.id);\r\n                if (labelText) {\r\n                    const obj: {\r\n                        entity: THREE.Points,\r\n                        type: string,\r\n                        text: string\r\n                    } = {\r\n                        entity: point,\r\n                        type: objType.point,\r\n                        text: labelText\r\n                    };\r\n                    this.createLabelforObj(container, obj.entity, obj.type, labelText, ent_id);\r\n                    this.ObjLabelMap.set(ent_id, obj);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param container\r\n     * @param obj\r\n     * @param type\r\n     * @param labelText\r\n     * @param ent_id\r\n     */\r\n    public createLabelforObj(container, obj, type: string, labelText: string, ent_id: string) {\r\n        const label = this._createTextLabel(container, type, labelText, ent_id);\r\n        label.setHTML(labelText);\r\n        label.setParent(obj);\r\n        this.textLabels.set(label.element.id, label);\r\n        container.appendChild(label.element);\r\n        label.updatePosition();\r\n    }\r\n    /**\r\n     *\r\n     * @param ent_id\r\n     * @param container\r\n     */\r\n    public unselectObj(ent_id, container) {\r\n        const removing = this.scene.getObjectById(this.selected_geoms.get(ent_id)) ;\r\n        // remove Geom from scene\r\n        if (removing && removing.hasOwnProperty('dispose')) { removing['dispose'](); }\r\n        this.scene.remove(removing);\r\n        this.selected_geoms.delete(ent_id);\r\n        // remove Geom from selected Objs Map\r\n        this.scene_objs_selected.delete(ent_id);\r\n\r\n        this.ObjLabelMap.delete(ent_id);\r\n        if (document.getElementById(`textLabel_${ent_id}`)) {\r\n            container.removeChild(document.getElementById(`textLabel_${ent_id}`));\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param parent_ent_id\r\n     * @param container\r\n     * @param group\r\n     */\r\n    public unselectObjGroup(parent_ent_id, container, group) {\r\n        let removing;\r\n        if (group === 'positions') {\r\n            removing = this.selected_positions.get(parent_ent_id);\r\n        } else if (group === 'vertex') {\r\n            removing = this.selected_vertex.get(parent_ent_id);\r\n        } else if (group === 'face_edges') {\r\n            // get the removing first\r\n            removing = this.selected_face_edges.get(parent_ent_id);\r\n        } else if (group === 'face_wires') {\r\n            removing = this.selected_face_wires.get(parent_ent_id);\r\n        }\r\n        // remove positions from scene\r\n        removing.forEach((v, k) => {\r\n            this.scene.remove(this.scene.getObjectById(v));\r\n            this.ObjLabelMap.delete(k);\r\n            if (document.getElementById(`textLabel_${k}`)) {\r\n                container.removeChild(document.getElementById(`textLabel_${k}`));\r\n            }\r\n        });\r\n        if (group === 'positions') {\r\n            // then delete\r\n            this.selected_positions.delete(parent_ent_id);\r\n        } else if (group === 'vertex') {\r\n            this.selected_vertex.delete(parent_ent_id);\r\n        } else if (group === 'face_edges') {\r\n            this.selected_face_edges.delete(parent_ent_id);\r\n        } else if (group === 'face_wires') {\r\n            this.selected_face_wires.delete(parent_ent_id);\r\n        }\r\n    }\r\n\r\n    // ============================================================================\r\n    // ============================================================================\r\n    // Private methods\r\n    // ============================================================================\r\n    // ============================================================================\r\n    /**\r\n     *\r\n     * @param positions\r\n     * @param indices\r\n     * @param colors\r\n     */\r\n    private initBufferLine(positions, indices: number[], colors: [number, number, number]) {\r\n        const geom = new THREE.BufferGeometry();\r\n        if (indices.length > 2) {\r\n            geom.setIndex(indices);\r\n        } else {\r\n            geom.setIndex([0, 1]);\r\n        }\r\n        // geom.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        // geom.addAttribute('normal', new THREE.Float32BufferAttribute(Array(positions.length).fill(0), 3));\r\n        geom.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        geom.setAttribute('normal', new THREE.Float32BufferAttribute(Array(positions.length).fill(0), 3));\r\n        const rgb = `rgb(${colors.toString()})`;\r\n        const mat = new THREE.LineBasicMaterial({\r\n            color: new THREE.Color(rgb),\r\n            linewidth: 5,\r\n            linecap: 'round', // ignored by WebGLRenderer\r\n            linejoin: 'round' // ignored by WebGLRenderer\r\n        });\r\n        const bg = { geom, mat };\r\n        return bg;\r\n    }\r\n    /**\r\n     *\r\n     * @param positions\r\n     * @param point_indices\r\n     * @param colors\r\n     * @param color\r\n     * @param size\r\n     */\r\n    private initBufferPoint(positions: number[],\r\n        point_indices = null,\r\n        colors: number[] = null,\r\n        color: string,\r\n        size: number = 1) {\r\n        // TODO check color and colors\r\n        const geom = new THREE.BufferGeometry();\r\n        if (point_indices) {\r\n            geom.setIndex(point_indices);\r\n        }\r\n        // geom.addAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        geom.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\r\n        const color_rgb = new THREE.Color(parseInt(color.replace('#', '0x'), 16));\r\n        if (colors) {\r\n            // geom.addAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n            geom.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\r\n        } else {\r\n            let color_data;\r\n            if (positions) {\r\n                if (positions && positions.length < 3) {\r\n                    color_data = [color_rgb.r, color_rgb.g, color_rgb.b];\r\n                } else {\r\n                    // @ts-ignore\r\n                    color_data = Array(positions.length / 3).fill([color_rgb.r, color_rgb.g, color_rgb.b]).flat(1);\r\n                }\r\n            }\r\n            const color_buffer = new Uint8Array(color_data);\r\n            // geom.addAttribute('color', new THREE.BufferAttribute(color_buffer, 3, true));\r\n            geom.setAttribute('color', new THREE.BufferAttribute(color_buffer, 3, true));\r\n        }\r\n        geom.computeBoundingSphere();\r\n        const mat = new THREE.PointsMaterial({\r\n            color: color_rgb,\r\n            size: size,\r\n            sizeAttenuation: false\r\n            // vertexColors: THREE.VertexColors\r\n        });\r\n        const bg = { geom, mat };\r\n        return bg;\r\n    }\r\n\r\n    /**\r\n     * Text labels\r\n     * @param container\r\n     * @param type\r\n     * @param labelText\r\n     * @param ent_id\r\n     */\r\n    private _createTextLabel(container, type: string, labelText: string, ent_id: string) {\r\n        const div = document.createElement('div');\r\n        div.id = `textLabel_${ent_id}`;\r\n        div.title = ent_id;\r\n        div.setAttribute('data-index', ent_id.substr(2));\r\n        div.className = `text-label${ent_id.substr(0, 2)}`;\r\n        div.style.position = 'absolute';\r\n        div.style.background = 'rgba(255, 255, 255, 0.3)';\r\n        div.style.padding = '1px';\r\n        div.style.pointerEvents = 'none';\r\n        div.innerHTML = labelText;\r\n        div.style.top = '-1000';\r\n        div.style.left = '-1000';\r\n        div.style.whiteSpace = 'pre-line';\r\n        const _this = this;\r\n        return {\r\n            element: div,\r\n            parent: false,\r\n            position: new THREE.Vector3(0, 0, 0),\r\n            setHTML: function (html) {\r\n                this.element.innerHTML = html;\r\n            },\r\n            setParent: function (threejsobj) {\r\n                this.parent = threejsobj;\r\n            },\r\n            updatePosition: function () {\r\n                if (this.parent) {\r\n                    if (type === objType.point || type === objType.face) {\r\n                        const center = this.parent.geometry.boundingSphere.center;\r\n                        this.position.copy(center);\r\n                    } else if (type === objType.line) {\r\n                        const p = this.parent.geometry.getAttribute('position').array;\r\n                        const x = (p[0] + p[3]) / 2, y = (p[1] + p[4]) / 2, z = (p[2] + p[5]) / 2;\r\n                        const center = new THREE.Vector3(x, y, z);\r\n                        this.position.copy(center);\r\n                    }\r\n                }\r\n                const coords2d = this.get2DCoords(this.position, _this.camera);\r\n                this.element.style.left = coords2d.x - div.clientWidth * 0.5 + 'px';\r\n                this.element.style.top = coords2d.y + 'px';\r\n            },\r\n            get2DCoords: function (position, camera) {\r\n                const vector = position.project(camera);\r\n                vector.x = (vector.x + 1) / 2 * container.offsetWidth;\r\n                vector.y = -(vector.y - 1) / 2 * container.offsetHeight;\r\n                return vector;\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n","export default \"#gi-viewer-container {\\n  width: 100%;\\n  height: 100%;\\n  overflow: hidden;\\n}\\n\\n.mat-tab-group {\\n  margin-bottom: 0px;\\n}\\n\\nas-split-area {\\n  position: relative;\\n  overflow: hidden auto !important;\\n}\\n\\n#settings_button {\\n  outline: none;\\n  width: 40px;\\n  height: 30px;\\n  font-size: 15px;\\n  position: absolute;\\n  top: 0px;\\n  right: 0px;\\n  text-align: center;\\n  color: #808080;\\n  background-color: transparent;\\n  border: 0;\\n  cursor: pointer;\\n}\\n\\n#settings_button:hover {\\n  color: #00006d;\\n}\\n\\n#attrib {\\n  overflow: hidden !important;\\n}\\n\\n#attrib attribute {\\n  height: calc(100% - 10px);\\n  display: flex;\\n  flex-flow: column nowrap;\\n  justify-content: space-between;\\n}\\n\\nmodal-window {\\n  display: none;\\n}\\n\\nmodal-window h1 {\\n  font-size: 14px;\\n  font-weight: 700;\\n  line-height: 35px;\\n}\\n\\nmodal-window dl {\\n  margin: 20px 0;\\n  padding: 0;\\n  background-color: transparent;\\n}\\n\\nmodal-window dl dd {\\n  list-style: none;\\n  padding: 8px 0;\\n  margin-left: 20px;\\n  background-color: inherit;\\n  min-height: 12px;\\n  box-sizing: content-box;\\n  color: #373737;\\n  font-size: 12px;\\n  font-style: normal;\\n}\\n\\nmodal-window dl dd .label {\\n  float: left;\\n  line-height: 15px;\\n  width: 120px;\\n}\\n\\nmodal-window dl dd .label + div {\\n  float: left;\\n}\\n\\nmodal-window dl dd .label, modal-window dl dd input {\\n  color: #373737;\\n  font-size: 12px;\\n  font-style: normal;\\n}\\n\\nmodal-window dl dd .label:hover, modal-window dl dd input:hover {\\n  background-color: inherit;\\n}\\n\\nmodal-window dl dd.colors hr {\\n  margin: 20px 0px 0px;\\n}\\n\\nmodal-window dl dd.colors .label {\\n  line-height: 20px;\\n}\\n\\nmodal-window dl dd.colors input {\\n  padding-left: 5px;\\n  margin-left: 0px !important;\\n  border: 1px solid #E6E6E6;\\n  width: 120px;\\n  vertical-align: top;\\n  text-transform: uppercase;\\n}\\n\\nmodal-window dl dd.colors input.light {\\n  color: #ffffff !important;\\n}\\n\\nmodal-window .save {\\n  cursor: pointer;\\n  background: #00006d;\\n  color: #ffffff;\\n  height: 20px;\\n}\\n\\nmodal-window .closebtn {\\n  cursor: pointer;\\n  background: white;\\n  border: 1px solid #CCCCCC;\\n  box-sizing: border-box;\\n  margin-left: 10px;\\n  height: 20px;\\n}\\n\\nmodal-window .getbtn {\\n  cursor: pointer;\\n  background: white;\\n  border: 1px solid #CCCCCC;\\n  box-sizing: border-box;\\n  margin-left: 10px;\\n  height: 20px;\\n  width: 50px;\\n}\\n\\nbody.modal-open {\\n  overflow: hidden;\\n}\\n\\n#settings_modal {\\n  /* The slider itself */\\n  /* Mouse-over effects */\\n  /* The slider handle (use -webkit- (Chrome, Opera, Safari, Edge) and -moz- (Firefox) to override default look) */\\n}\\n\\n#settings_modal .filebtn.setting {\\n  margin-top: 20px;\\n}\\n\\n#settings_modal ::ng-deep .modal-window .modal-body {\\n  background: #fafafb;\\n}\\n\\n#settings_modal .onoffswitch {\\n  position: relative;\\n  width: 17px;\\n  height: 6px;\\n  top: 4px;\\n  box-sizing: border-box;\\n  vertical-align: middle;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  -ms-user-select: none;\\n}\\n\\n#settings_modal .onoffswitch-checkbox {\\n  display: none;\\n}\\n\\n#settings_modal .onoffswitch-label {\\n  display: block;\\n  overflow: hidden;\\n  height: inherit;\\n  background-color: #dedede;\\n  cursor: pointer;\\n}\\n\\n#settings_modal .onoffswitch-switch {\\n  position: absolute;\\n  top: -4px;\\n  left: 0px;\\n  width: 3px;\\n  height: 12px;\\n  background: #ccc;\\n  border: 1px solid #ccc;\\n}\\n\\n#settings_modal .onoffswitch-checkbox:hover:not(:checked) + .onoffswitch-label {\\n  background-color: rgba(0, 0, 109, 0.4);\\n}\\n\\n#settings_modal .onoffswitch-checkbox:disabled + .onoffswitch-label {\\n  background-color: #dedede !important;\\n}\\n\\n#settings_modal .onoffswitch-checkbox:disabled + .onoffswitch-label .onoffswitch-switch {\\n  box-shadow: none !important;\\n}\\n\\n#settings_modal .onoffswitch-checkbox:checked + .onoffswitch-label {\\n  background-color: #00006d;\\n}\\n\\n#settings_modal .onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-switch {\\n  right: 0px;\\n  left: calc(100% + 1px);\\n  transform: translateX(-100%);\\n}\\n\\n#settings_modal .onoffswitch-checkbox:disabled:checked + .onoffswitch-label .onoffswitch-inner,\\n#settings_modal .onoffswitch-checkbox:disabled:checked + .onoffswitch-label .onoffswitch-switch {\\n  cursor: help;\\n}\\n\\n#settings_modal .slidecontainer {\\n  width: 100%;\\n  /* Width of the outside container */\\n  height: 15px;\\n}\\n\\n#settings_modal .slidecontainer:hover {\\n  background-color: transparent;\\n}\\n\\n#settings_modal .slidecontainer.light {\\n  width: calc(100% - 120px);\\n}\\n\\n#settings_modal .slidecontainer.light .slider {\\n  margin-left: 0px !important;\\n  width: calc(100% - 80px);\\n}\\n\\n#settings_modal .slidecontainer.light .slider + input[type=text] {\\n  margin-left: 15px !important;\\n}\\n\\n#settings_modal .slider {\\n  -webkit-appearance: none;\\n  /* Override default CSS styles */\\n  -moz-appearance: none;\\n       appearance: none;\\n  width: 210px;\\n  max-width: 500px;\\n  height: 15px;\\n  /* Specified height */\\n  background: whitesmoke;\\n  /* Grey background */\\n  box-sizing: border-box;\\n  border: 2px solid #E6E6E6;\\n  outline: none;\\n  /* Remove outline */\\n  opacity: 0.7;\\n  /* Set transparency (for mouse-over effects on hover) */\\n  /* 0.2 seconds transition on hover */\\n  transition: opacity 0.2s;\\n  margin: 0;\\n  margin-left: 10px !important;\\n}\\n\\n#settings_modal .slider:hover {\\n  opacity: 1;\\n  /* Fully shown on mouse-over */\\n}\\n\\n#settings_modal .slider::-webkit-slider-thumb {\\n  -webkit-appearance: none;\\n  appearance: none;\\n  width: 5px;\\n  height: 15px;\\n  background: #CCCCCC;\\n  border: 1px solid #808080;\\n  cursor: pointer;\\n}\\n\\n#settings_modal .slider::-webkit-slider-thumb:hover, #settings_modal .slider::-webkit-slider-thumb:active {\\n  background: #00006d;\\n}\\n\\n#settings_modal .slider::-moz-range-thumb {\\n  width: 5px;\\n  height: 15px;\\n  background: #CCCCCC;\\n  cursor: pointer;\\n}\\n\\n#settings_modal .slider:disabled::-webkit-slider-thumb {\\n  background: white;\\n}\\n\\n#settings_modal .slider:disabled::-moz-range-thumb {\\n  background: white;\\n}\\n\\n#settings_modal .slider:disabled {\\n  cursor: help;\\n}\\n\\n#settings_modal input + input {\\n  vertical-align: top;\\n  border: none;\\n  line-height: 20px;\\n  background: transparent;\\n  width: 55px;\\n  margin-left: 10px !important;\\n  height: 14px;\\n}\\n\\n#settings_modal .number {\\n  width: 100px;\\n  padding-left: 5px;\\n  border: 1px solid #dddddd;\\n}\\n\\n#settings_modal .light-shadow {\\n  width: 120px;\\n  float: left;\\n}\\n\\n#settings_modal #camera input, #settings_modal #camera_target input, #settings_modal #grid_pos input {\\n  width: 65px;\\n  border: 1px solid #bdbdbd;\\n  height: 16px;\\n  margin-right: 3px;\\n  text-align: right;\\n  padding-right: 3px;\\n}\\n\\n::ng-deep #settingsTab {\\n  height: 100%;\\n  width: 100%;\\n  overflow-x: scroll;\\n}\\n\\n::ng-deep #settingsTab ul {\\n  background-color: transparent;\\n  margin: 0;\\n  padding-left: 0px;\\n  white-space: nowrap;\\n  width: 100%;\\n  min-width: -webkit-fit-content;\\n  min-width: -moz-fit-content;\\n  min-width: fit-content;\\n  display: inline-flex;\\n}\\n\\n::ng-deep #settingsTab ul li {\\n  list-style: none;\\n  float: left;\\n  min-width: 75px;\\n  color: #808080;\\n  overflow: visible;\\n  cursor: pointer;\\n  position: relative;\\n  height: inherit;\\n  padding: 0px;\\n}\\n\\n::ng-deep #settingsTab ul li span {\\n  font-family: sans-serif;\\n  margin-right: 2px;\\n  font-weight: 550;\\n  font-size: 12px;\\n  line-height: 15px;\\n  border: 1px solid transparent;\\n  position: relative;\\n  display: block;\\n  padding: 2px 7px;\\n  text-align: center;\\n  width: inherit;\\n  box-sizing: border-box;\\n  width: 100%;\\n  margin-top: -1px;\\n  height: 21px;\\n}\\n\\n::ng-deep #settingsTab ul li:hover {\\n  background-color: transparent;\\n}\\n\\n::ng-deep #settingsTab ul li:hover span {\\n  color: #00006d;\\n  background-color: transparent;\\n}\\n\\n::ng-deep #settingsTab ul li.active {\\n  background-color: transparent;\\n}\\n\\n::ng-deep #settingsTab ul li.active span {\\n  color: #00006d;\\n  cursor: default;\\n  background-color: #fafafb;\\n  border: 1px solid #B3B3B3;\\n  border-bottom: 0px;\\n}\\n\\n::ng-deep #settingsTab .pane {\\n  margin-top: -1px;\\n  border: 1px solid #B3B3B3;\\n}\\n\\n::ng-deep #settingsTab .pane .mat-elevation-z1 {\\n  display: flex;\\n  flex-flow: column nowrap;\\n  justify-content: space-between;\\n  box-shadow: none;\\n}\\n\\n::ng-deep #settingsTab hr {\\n  border: 1px solid #dfdfdf;\\n  background: #dfdfdf;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { GIModel } from '@libs/geo-info/GIModel';\r\nimport { isDevMode, ViewChild, HostListener } from '@angular/core';\r\nimport { DefaultSettings, SettingsColorMap, Locale } from './gi-viewer.settings';\r\n// import @angular stuff\r\nimport { Component, Input, OnInit } from '@angular/core';\r\n// import app services\r\nimport { DataService } from './data/data.service';\r\nimport { ModalService } from './html/modal-window.service';\r\nimport { ColorPickerService } from 'ngx-color-picker';\r\nimport { ThreejsViewerComponent } from './threejs/threejs-viewer.component';\r\nimport { Vector3, GridHelper } from 'three';\r\nimport { SplitComponent } from 'angular-split';\r\nimport { ISettings } from './data/data.threejsSettings';\r\n// import others\r\n// import { ThreejsViewerComponent } from './threejs/threejs-viewer.component';\r\n\r\n/**\r\n * GIViewerComponent\r\n * This component is used in /app/model-viewers/model-viewers-container.component.html\r\n */\r\n@Component({\r\n    selector: 'gi-viewer',\r\n    templateUrl: './gi-viewer.component.html',\r\n    styleUrls: ['./gi-viewer.component.scss'],\r\n})\r\nexport class GIViewerComponent implements OnInit {\r\n    dataservice: DataService;\r\n    // model data passed to the viewer\r\n    @Input() data: GIModel;\r\n\r\n    settings: ISettings = DefaultSettings;\r\n\r\n    setting_colors = SettingsColorMap;\r\n\r\n    normalsEnabled = false;\r\n\r\n    temp_camera_pos = new Vector3(-80, -80, 80);\r\n    temp_target_pos = new Vector3(0, 0, 0);\r\n    temp_grid_pos = new Vector3(0, 0, 0);\r\n\r\n    public clickedEvent: Event;\r\n    public attrTableSelect: Event;\r\n    public attrTableReset: number;\r\n    public selectSwitchOnOff: Boolean;\r\n    public attribLabelVal: String;\r\n\r\n    @ViewChild(ThreejsViewerComponent, { static: true }) threejs: ThreejsViewerComponent;\r\n    @ViewChild(SplitComponent, { static: true }) viewerSplit: SplitComponent;\r\n    /**\r\n     * constructor\r\n     * @param dataService\r\n     */\r\n    constructor(private dataService: DataService,\r\n        private modalService: ModalService,\r\n        private cpService: ColorPickerService) {\r\n\r\n        const previous_settings = JSON.parse(localStorage.getItem('mpm_settings'));\r\n        // const devMode = isDevMode();\r\n        const devMode = false;\r\n        if (previous_settings === null) {\r\n            localStorage.setItem('mpm_settings', JSON.stringify(this.settings));\r\n        } else {\r\n            this.propCheck(previous_settings, this.settings);\r\n            localStorage.setItem('mpm_settings', JSON.stringify(previous_settings));\r\n        }\r\n        // if (previous_settings === null || this.hasDiffProps(previous_settings, this.settings)) {\r\n        //     localStorage.setItem('mpm_settings', JSON.stringify(this.settings));\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * Check whether the current settings has same structure with\r\n     * the previous settings saved in local storage. If not, replace the local storage.\r\n     * @param obj1\r\n     * @param obj2\r\n     */\r\n    hasDiffProps(obj1, obj2) {\r\n        return !Object.keys(obj2).every(e => Object.keys(obj1).includes(e));\r\n    }\r\n\r\n    /**\r\n     * Check whether the current settings has same structure with\r\n     * the previous settings saved in local storage. If not, replace the local storage.\r\n     * @param obj1\r\n     * @param obj2\r\n     */\r\n    propCheck(obj1, obj2, checkChildren = true) {\r\n        for (const i in obj2) {\r\n            if (!obj1.hasOwnProperty(i)) {\r\n                obj1[i] = JSON.parse(JSON.stringify(obj2[i]));\r\n            } else if (checkChildren && obj1[i].constructor === {}.constructor && obj2[i].constructor === {}.constructor) {\r\n                this.propCheck(obj1[i], obj2[i], false);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * ngOnInit\r\n     */\r\n    ngOnInit() {\r\n        this.getSettings();\r\n        if (this.dataService.getThreejsScene() === undefined) {\r\n            this.dataService.setThreejsScene(this.settings);\r\n        }\r\n        localStorage.setItem('mpm_default_settings', JSON.stringify(DefaultSettings));\r\n        this.temp_camera_pos = this.dataService.getThreejsScene().perspCam.position;\r\n    }\r\n\r\n    private getSettings() {\r\n        if (localStorage.getItem('mpm_settings') !== null) {\r\n            this.settings = JSON.parse(localStorage.getItem('mpm_settings'));\r\n        }\r\n    }\r\n\r\n    threejsAction(action: {'type': string, 'event': any}) {\r\n        // <threejs-viewer [model]='data'\r\n        // (eventClicked)=\"childEventClicked($event)\"\r\n        // [attr_table_select]='attrTableSelect'\r\n        // [selectSwitch] = 'selectSwitchOnOff'\r\n        // [attribLabel] = 'attribLabelVal'\r\n        // (resetTableEvent) = \"resetTable()\"\r\n        // ></threejs-viewer>\r\n        if (action.type === 'resetTableEvent') {\r\n            this.resetTable();\r\n        } else if (action.type === 'eventClicked') {\r\n            this.childEventClicked(action.event);\r\n        }\r\n    }\r\n\r\n    childEventClicked(event: Event) {\r\n        this.clickedEvent = event;\r\n    }\r\n\r\n    attribTableSelected(event: Event) {\r\n        this.attrTableSelect = event;\r\n    }\r\n\r\n    selectSwitch(event: Boolean) {\r\n        this.selectSwitchOnOff = event;\r\n    }\r\n\r\n    attribLabel(event: String) {\r\n        this.attribLabelVal = event;\r\n    }\r\n\r\n    resetTable() {\r\n        this.attrTableReset = Date.now();\r\n    }\r\n\r\n    openModal(id: string) {\r\n        this.getSettings();\r\n        if (document.body.className === 'modal-open') {\r\n            this.modalService.close(id);\r\n        } else {\r\n            this.modalService.open(id);\r\n            const scene = this.dataService.getThreejsScene();\r\n            if (scene.threejs_nums.reduce((a, b) => a + b, 0) !== 0) {\r\n                scene.vnh !== undefined ? this.normalsEnabled = true : this.normalsEnabled = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    closeModal(id: string, save = false) {\r\n        this.modalService.close(id);\r\n        if (save) {\r\n            const _selector = JSON.parse(localStorage.getItem('mpm_selecting_entity_type'));\r\n            const _tab = Number(JSON.parse(localStorage.getItem('mpm_attrib_current_tab')));\r\n            // this.settings.select = {selector: _selector, tab: _tab, };\r\n            this.settings.select.selector = _selector;\r\n            this.settings.select.tab = _tab;\r\n            this.settings.camera = {\r\n                pos: this.temp_camera_pos,\r\n                target: this.temp_target_pos,\r\n                ortho: false\r\n            };\r\n            this.dataService.getThreejsScene().settings = this.settings;\r\n            localStorage.setItem('mpm_settings', JSON.stringify(this.settings));\r\n            this.threejs.updateModel(this.data);\r\n        } else {\r\n            // tslint:disable-next-line: forin\r\n            for (const setting in this.dataService.getThreejsScene().settings) {\r\n                this.settings[setting] = this.dataService.getThreejsScene().settings[setting];\r\n            }\r\n            this.threejs.updateModel(this.data);\r\n        }\r\n        setTimeout(() => {\r\n            this.threejs.activateRender();\r\n        }, 100);\r\n    }\r\n\r\n    onCloseModal() {\r\n        // tslint:disable-next-line: forin\r\n        for (const setting in this.dataService.getThreejsScene().settings) {\r\n            this.settings[setting] = this.dataService.getThreejsScene().settings[setting];\r\n        }\r\n        this.threejs.updateModel(this.data);\r\n    }\r\n\r\n    settingOnChange(setting: string, value?: number) {\r\n        const scene = this.dataService.getThreejsScene();\r\n        switch (setting) {\r\n            case 'normals.show':\r\n                this.settings.normals.show = !this.settings.normals.show;\r\n                scene.vnh.visible = this.settings.normals.show;\r\n                break;\r\n            case 'normals.size':\r\n                this.settings.normals.size = Number(value);\r\n                break;\r\n            case 'axes.show':\r\n                this.settings.axes.show = !this.settings.axes.show;\r\n                scene.axesHelper.visible = this.settings.axes.show;\r\n                break;\r\n            case 'axes.size':\r\n                this.settings.axes.size = Number(value);\r\n                scene._addAxes(Number(value));\r\n                break;\r\n            case 'grid.show':\r\n                this.settings.grid.show = !this.settings.grid.show;\r\n                scene.grid.visible = this.settings.grid.show;\r\n                break;\r\n            case 'grid.size':\r\n                this.settings.grid.size = Number(value);\r\n                scene._addGrid(this.settings.grid.size);\r\n                break;\r\n            case 'grid.update_pos':\r\n                this.temp_grid_pos = this.dataService.getThreejsScene().getGridPos();\r\n                if (this.temp_grid_pos) {\r\n                    this.settings.grid.pos = this.temp_grid_pos;\r\n                    this.settings.grid.pos_x = this.temp_grid_pos.x;\r\n                    this.settings.grid.pos_y = this.temp_grid_pos.y;\r\n                }\r\n                break;\r\n            case 'grid.update_pos_x':\r\n                if (isNaN(value)) {\r\n                    return;\r\n                }\r\n                this.settings.grid.pos_x = Number(value);\r\n                this.settings.grid.pos.x = Number(value);\r\n                break;\r\n            case 'grid.update_pos_y':\r\n                if (isNaN(value)) {\r\n                    return;\r\n                }\r\n                this.settings.grid.pos_y = Number(value);\r\n                this.settings.grid.pos.y = Number(value);\r\n                break;\r\n            case 'grid.update_pos_z':\r\n                if (isNaN(value)) {\r\n                    return;\r\n                }\r\n                this.settings.grid.pos_z = Number(value);\r\n                this.settings.grid.pos.z = Number(value);\r\n                break;\r\n            case 'positions.show':\r\n                this.settings.positions.show = !this.settings.positions.show;\r\n                scene.positions.map(p => p.visible = this.settings.positions.show);\r\n                break;\r\n            case 'positions.size':\r\n                this.settings.positions.size = Number(value);\r\n                break;\r\n            case 'background.show':\r\n                this.settings.background.show = !this.settings.background.show;\r\n                break;\r\n            case 'background.set':\r\n                this.settings.background.background_set = Number(value);\r\n                break;\r\n            case 'tjs_summary.show':\r\n                this.settings.gi_summary.show = false;\r\n                this.settings.tjs_summary.show = !this.settings.tjs_summary.show;\r\n                break;\r\n            case 'gi_summary.show':\r\n                this.settings.tjs_summary.show = false;\r\n                this.settings.gi_summary.show = !this.settings.gi_summary.show;\r\n                break;\r\n            case 'wireframe.show':\r\n                this.wireframeToggle();\r\n                break;\r\n            case 'camera.pos_x':\r\n                if (isNaN(value)) {\r\n                    return;\r\n                }\r\n                this.temp_camera_pos.x = Math.round(value);\r\n                break;\r\n            case 'camera.pos_y':\r\n                if (isNaN(value)) {\r\n                    return;\r\n                }\r\n                this.temp_camera_pos.y = Math.round(value);\r\n                break;\r\n            case 'camera.pos_z':\r\n                if (isNaN(value)) {\r\n                    return;\r\n                }\r\n                this.temp_camera_pos.z = Math.round(value);\r\n                break;\r\n            case 'camera.get_camera_pos':\r\n                this.temp_camera_pos = this.dataService.getThreejsScene().camera.position;\r\n                this.settings.camera.pos = this.temp_camera_pos;\r\n                break;\r\n            case 'camera.target_x':\r\n                if (isNaN(value)) {\r\n                    return;\r\n                }\r\n                this.temp_target_pos.x = Math.round(value);\r\n                break;\r\n            case 'camera.target_y':\r\n                if (isNaN(value)) {\r\n                    return;\r\n                }\r\n                this.temp_target_pos.y = Math.round(value);\r\n                break;\r\n            case 'camera.target_z':\r\n                if (isNaN(value)) {\r\n                    return;\r\n                }\r\n                this.temp_target_pos.z = Math.round(value);\r\n                break;\r\n            case 'camera.get_target_pos':\r\n                this.temp_target_pos = this.dataService.getThreejsScene().perspControls.target;\r\n                this.settings.camera.target = this.temp_target_pos;\r\n                break;\r\n            case 'ambient_light.show': // Ambient Light\r\n                this.settings.ambient_light.show = !this.settings.ambient_light.show;\r\n                if (scene.ambient_light) {\r\n                    scene.ambient_light.visible = this.settings.ambient_light.show;\r\n                }\r\n                break;\r\n            case 'ambient_light.intensity':\r\n                this.settings.ambient_light.intensity = Number(value);\r\n                scene.ambient_light.intensity = this.settings.ambient_light.intensity;\r\n                break;\r\n            case 'hemisphere_light.show': // Hemisphere Light\r\n                this.settings.hemisphere_light.show = !this.settings.hemisphere_light.show;\r\n                if (scene.hemisphere_light) {\r\n                    scene.hemisphere_light.visible = this.settings.hemisphere_light.show;\r\n                }\r\n                break;\r\n            case 'hemisphere_light.helper':\r\n                this.settings.hemisphere_light.helper = !this.settings.hemisphere_light.helper;\r\n                break;\r\n            case 'hemisphere_light.intensity':\r\n                this.settings.hemisphere_light.intensity = Number(value);\r\n                scene.hemisphere_light.intensity = this.settings.hemisphere_light.intensity;\r\n                break;\r\n            case 'directional_light.show': // Directional Light\r\n                this.settings.directional_light.show = !this.settings.directional_light.show;\r\n                if (scene.directional_light) {\r\n                    scene.directional_light.visible = this.settings.directional_light.show;\r\n                }\r\n                if (this.settings.directional_light.show) {\r\n                    this.settings.ambient_light.intensity = 0.15;\r\n                    this.settings.hemisphere_light.intensity = 0.15;\r\n                } else {\r\n                    this.settings.ambient_light.intensity = 0.5;\r\n                    this.settings.hemisphere_light.intensity = 0.5;\r\n                }\r\n                break;\r\n            // case 'directional_light.type': // Directional Light\r\n            //     if (this.settings.directional_light.type === 'directional') {\r\n            //         this.settings.directional_light.type = 'point';\r\n            //     } else {\r\n            //         this.settings.directional_light.type = 'directional';\r\n            //     }\r\n            //     this.threejs.updateModel(this.data);\r\n            //     break;\r\n            case 'directional_light.helper':\r\n                this.settings.directional_light.helper = !this.settings.directional_light.helper;\r\n                break;\r\n            case 'directional_light.intensity':\r\n                this.settings.directional_light.intensity = Number(value);\r\n                scene.directional_light.intensity = this.settings.directional_light.intensity;\r\n                break;\r\n            case 'directional_light.shadow':\r\n                this.settings.directional_light.shadow = !this.settings.directional_light.shadow;\r\n                break;\r\n            case 'directional_light.shadowSize':\r\n                this.settings.directional_light.shadowSize = Number(value);\r\n                break;\r\n            case 'directional_light.azimuth':\r\n                this.settings.directional_light.azimuth = Number(value);\r\n                scene.getDLPosition(null, this.settings.directional_light.azimuth, this.settings.directional_light.altitude);\r\n                setTimeout(() => { this.threejs.activateRender(); }, 0);\r\n                break;\r\n            case 'directional_light.altitude':\r\n                this.settings.directional_light.altitude = Number(value);\r\n                scene.getDLPosition(null, this.settings.directional_light.azimuth, this.settings.directional_light.altitude);\r\n                break;\r\n            // case 'directional_light.distance':\r\n            //     this.settings.directional_light.distance = Number(value);\r\n            //     scene.DLDistance(this.settings.directional_light.distance);\r\n            //     break;\r\n            case 'ground.show':\r\n                this.settings.ground.show = !this.settings.ground.show;\r\n                // scene.directional_light.visible = this.settings.directional_light.show;\r\n                break;\r\n            case 'ground.width':\r\n                this.settings.ground.width = Number(value);\r\n                break;\r\n            case 'ground.length':\r\n                this.settings.ground.length = Number(value);\r\n                break;\r\n            case 'ground.height':\r\n                this.settings.ground.height = Number(value);\r\n                if (scene.groundObj) {\r\n                    scene.groundObj.position.setZ(this.settings.ground.height);\r\n                }\r\n                break;\r\n            case 'ground.shininess':\r\n                this.settings.ground.shininess = Number(value);\r\n                break;\r\n            case 'select.ps':\r\n                this.settings.select.enabledselector.ps = !this.settings.select.enabledselector.ps;\r\n                break;\r\n            case 'select._v':\r\n                this.settings.select.enabledselector._v = !this.settings.select.enabledselector._v;\r\n                break;\r\n            case 'select._e':\r\n                this.settings.select.enabledselector._e = !this.settings.select.enabledselector._e;\r\n                break;\r\n            case 'select._w':\r\n                this.settings.select.enabledselector._w = !this.settings.select.enabledselector._w;\r\n                break;\r\n            case 'select._f':\r\n                this.settings.select.enabledselector._f = !this.settings.select.enabledselector._f;\r\n                break;\r\n            case 'select.pt':\r\n                this.settings.select.enabledselector.pt = !this.settings.select.enabledselector.pt;\r\n                break;\r\n            case 'select.pl':\r\n                this.settings.select.enabledselector.pl = !this.settings.select.enabledselector.pl;\r\n                break;\r\n            case 'select.pg':\r\n                this.settings.select.enabledselector.pg = !this.settings.select.enabledselector.pg;\r\n                break;\r\n            case 'select.co':\r\n                this.settings.select.enabledselector.co = !this.settings.select.enabledselector.co;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.threejs.activateRender();\r\n    }\r\n\r\n    // resetDefault(setting, value) {\r\n    //     const seg = setting.split('.');\r\n    //     this.settings[seg[0]][seg[1]] = value;\r\n    // }\r\n\r\n    resetToDefault() {\r\n        const default_settings = JSON.parse(localStorage.getItem('mpm_default_settings'));\r\n        this.settings = default_settings;\r\n    }\r\n\r\n    checkColor(color) {\r\n        const _color = this.cpService.hsvaToRgba(this.cpService.stringToHsva(color));\r\n        if ((_color.r + _color.g + _color.b) / _color.a < 1.5) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    wireframeToggle() {\r\n        const scene = this.dataService.getThreejsScene();\r\n        scene.scene_objs.forEach(obj => {\r\n            if (obj.type === 'Mesh') {\r\n                this.settings.wireframe.show = !this.settings.wireframe.show;\r\n                // @ts-ignore\r\n                obj.material.wireframe = this.settings.wireframe.show;\r\n            }\r\n        });\r\n    }\r\n    dragSplitEnd(e) {\r\n        this.dataService.ngSplitGutter = e.sizes[1];\r\n    }\r\n    getSplit() {\r\n        return this.dataService.ngSplitGutter;\r\n    }\r\n\r\n    checkPublish() {\r\n        const d = document.getElementById('published');\r\n        return d !== null;\r\n    }\r\n\r\n    setCamera(x = null, y = null, z = null) {\r\n        const scene = this.dataService.getThreejsScene();\r\n        if (x) {\r\n            scene.perspCam.position.x = x;\r\n        }\r\n        if (y) {\r\n            scene.perspCam.position.y = y;\r\n        }\r\n        if (z) {\r\n            scene.perspCam.position.z = z;\r\n        }\r\n        scene.perspCam.lookAt(scene.scene.position);\r\n        scene.perspCam.updateProjectionMatrix();\r\n    }\r\n    formatNumber(value) {\r\n        if (!value) { value = 0; }\r\n        return Math.round(value * 100) / 100;\r\n    }\r\n\r\n    @HostListener('mouseleave', [])\r\n    onmouseleave() {\r\n        this.viewerSplit.notify('end');\r\n    }\r\n}\r\n\r\n// interface Settings {\r\n//     normals: { show: boolean, size: number };\r\n//     axes: { show: boolean, size: number };\r\n//     grid: {\r\n//         show: boolean,\r\n//         size: number,\r\n//         pos: Vector3,\r\n//         pos_x: number,\r\n//         pos_y: number,\r\n//         pos_z: number,\r\n//     };\r\n//     background: {\r\n//         show: boolean,\r\n//         background_set: number\r\n//     };\r\n//     positions: { show: boolean, size: number };\r\n//     wireframe: { show: boolean };\r\n//     tjs_summary: { show: boolean };\r\n//     gi_summary: { show: boolean };\r\n//     camera: {\r\n//         pos: Vector3,\r\n//         pos_x: number,\r\n//         pos_y: number,\r\n//         pos_z: number,\r\n//         target: Vector3\r\n//     };\r\n//     colors: {\r\n//         viewer_bg: string,\r\n//         position: string,\r\n//         position_s: string,\r\n//         vertex_s: string,\r\n//         face_f: string,\r\n//         face_f_s: string,\r\n//         face_b: string,\r\n//         face_b_s: string\r\n//     };\r\n//     ambient_light: {\r\n//         show: boolean,\r\n//         color: string,\r\n//         intensity: number\r\n//     };\r\n//     hemisphere_light: {\r\n//         show: boolean,\r\n//         helper: boolean,\r\n//         skyColor: string,\r\n//         groundColor: string,\r\n//         intensity: number\r\n//     };\r\n//     directional_light: {\r\n//         show: boolean,\r\n//         helper: boolean,\r\n//         color: string,\r\n//         intensity: number,\r\n//         shadow: boolean,\r\n//         azimuth: number,\r\n//         altitude: number,\r\n//         distance: number,\r\n//         type: string,\r\n//         shadowSize: number\r\n//     };\r\n//     ground: {\r\n//         show: boolean,\r\n//         width: number,\r\n//         length: number,\r\n//         height: number,\r\n//         color: string,\r\n//         shininess: number\r\n//     };\r\n//     select: {\r\n//         selector: object,\r\n//         tab: number,\r\n//         ps: boolean,\r\n//         _v: boolean,\r\n//         _e: boolean,\r\n//         _w: boolean,\r\n//         _f: boolean,\r\n//         pt: boolean,\r\n//         pl: boolean,\r\n//         pg: boolean,\r\n//         co: boolean\r\n//     };\r\n//     version: string;\r\n// }\r\n","import { AngularSplitModule } from 'angular-split';\r\nimport { NgxPaginationModule} from 'ngx-pagination';\r\n// import @angular stuff\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatTooltipModule} from '@angular/material/tooltip';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatExpansionModule} from '@angular/material/expansion';\r\nimport { ColorPickerModule } from 'ngx-color-picker';\r\n\r\nimport { AttributeModule } from './attribute/attribute.module';\r\n\r\n// import app components\r\nimport { GIViewerComponent } from './gi-viewer.component';\r\nimport { ThreejsViewerComponent } from './threejs/threejs-viewer.component';\r\nimport { AttributeComponent } from './attribute/attribute.component';\r\n\r\nimport { ATabComponent } from './attribute/tab.component';\r\nimport { ATabsComponent } from './attribute/tabs.component';\r\nimport { TabComponent } from './html/tab.component';\r\nimport { TabsComponent } from './html/tabs.component';\r\nimport { DropdownMenuComponent } from './html/dropdown-menu.component';\r\nimport { ModalWindowComponent } from './html/modal-window.component';\r\nimport { ModalService } from './html/modal-window.service';\r\nimport { ThreeJSViewerService } from './threejs/threejs-viewer.service';\r\n\r\n/**\r\n * GIViewer\r\n * A viewer for Geo-Info models.\r\n */\r\n@NgModule({\r\n    declarations: [\r\n        GIViewerComponent,\r\n        ThreejsViewerComponent,\r\n        AttributeComponent,\r\n        ATabComponent,\r\n        ATabsComponent,\r\n        TabComponent,\r\n        TabsComponent,\r\n        DropdownMenuComponent,\r\n        ModalWindowComponent\r\n    ],\r\n    exports: [\r\n        GIViewerComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        AngularSplitModule,\r\n        MatSliderModule,\r\n        MatIconModule,\r\n        NgxPaginationModule,\r\n        MatExpansionModule,\r\n        MatTooltipModule,\r\n        AttributeModule,\r\n        FormsModule,\r\n        ColorPickerModule\r\n    ],\r\n    providers: [\r\n        ModalService,\r\n        ThreeJSViewerService\r\n    ]\r\n})\r\nexport class GIViewerModule {\r\n     static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: GIViewerModule\r\n        };\r\n    }\r\n}\r\n","import { Vector3 } from 'three';\r\nexport const DefaultSettings = {\r\n    normals: { show: false, size: 5 },\r\n    axes: { show: true, size: 50 },\r\n    grid: {\r\n        show: true,\r\n        size: 500,\r\n        pos_x: 0,\r\n        pos_y: 0,\r\n        pos_z: 0,\r\n        pos: new Vector3(0, 0, 0)\r\n    },\r\n    background: {\r\n        show: false,\r\n        background_set: 0\r\n    },\r\n    positions: { show: true, size: 0.5 },\r\n    tjs_summary: { show: false },\r\n    gi_summary: { show: false },\r\n    wireframe: { show: false },\r\n    camera: {\r\n        pos: new Vector3(-80, -80, 80),\r\n        target: new Vector3(0, 0, 0),\r\n        ortho: false\r\n    },\r\n    colors: {\r\n        viewer_bg: '#E6E6E6',\r\n        position: '#000000',\r\n        position_s: '#0033FF',\r\n        vertex_s: '#FFCC00',\r\n        face_f: '#FFFFFF',\r\n        face_f_s: '#4949BD',\r\n        face_b: '#DDDDDD',\r\n        face_b_s: '#00006D'\r\n    },\r\n    ambient_light: {\r\n        show: true,\r\n        color: '#FFFFFF',\r\n        intensity: 0.5\r\n    },\r\n    hemisphere_light: {\r\n        show: true,\r\n        helper: false,\r\n        skyColor: '#FFFFFF',\r\n        groundColor: '#FFFFFF',\r\n        intensity: 0.5\r\n    },\r\n    directional_light: {\r\n        show: false,\r\n        helper: false,\r\n        color: '#FFFFFF',\r\n        intensity: 1,\r\n        shadow: true,\r\n        azimuth: 90,\r\n        altitude: 45,\r\n        distance: 10,\r\n        type: 'directional',\r\n        shadowSize: 2048\r\n    },\r\n    ground: {\r\n        show: false,\r\n        width: 1000,\r\n        length: 1000,\r\n        height: -0.5,\r\n        color: '#FFFFFF',\r\n        shininess: 0\r\n    },\r\n    select: {\r\n        selector: {id: 5, name: 'Faces'},\r\n        tab: 0,\r\n        enabledselector: {\r\n            ps: true,\r\n            _v: true,\r\n            _e: true,\r\n            _w: true,\r\n            _f: true,\r\n            pt: true,\r\n            pl: true,\r\n            pg: true,\r\n            co: true\r\n        }\r\n    },\r\n};\r\n\r\n\r\nexport const SettingsColorMap = [{\r\n    label: 'Viewer Background',\r\n    setting: 'viewer_bg',\r\n    default: '#E6E6E6'\r\n}, {\r\n    label: 'Position',\r\n    setting: 'position'\r\n}, {\r\n    label: 'Position Selected',\r\n    setting: 'position_s'\r\n}, {\r\n    label: 'Face Front',\r\n    setting: 'face_f'\r\n}, {\r\n    label: 'Face Front Selected',\r\n    setting: 'face_f_s'\r\n}, {\r\n    label: 'Face Back',\r\n    setting: 'face_b'\r\n}, {\r\n    label: 'Face Back Selected',\r\n    setting: 'face_b_s'\r\n}, {\r\n    label: 'Vertices Selected',\r\n    setting: 'vertex_s'\r\n}];\r\n\r\nexport const Locale = [{\r\n    name: 'Singapore',\r\n    zone: 'Asia/Singapore',\r\n    lat: '1.35',\r\n    long: '103.8'\r\n}];\r\n","export * from './gi-viewer.module';\r\n","export default \"div {\\n  position: absolute;\\n}\\ndiv ul {\\n  padding: 0;\\n  border: 1px solid #eeeeee;\\n  box-shadow: 1px 1px 3px 0px #bbbbbb;\\n}\\ndiv ul ol {\\n  cursor: pointer;\\n  list-style: none;\\n  background: #ffffff;\\n  min-width: 20px;\\n  padding: 5px 10px;\\n}\\ndiv ul ol:hover {\\n  background: #eeeeee;\\n}\\ndiv ul:first-child {\\n  background: #f9f9f9;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZ2ktdmlld2VyL2h0bWwvQzpcXFVzZXJzXFxha2liZHB0XFxEb2N1bWVudHNcXEFuZ3VsYXJcXG1vYml1cy12aWV3ZXIvc3JjXFxhcHBcXGdpLXZpZXdlclxcaHRtbFxcZHJvcGRvd24tbWVudS5jb21wb25lbnQuc2NzcyIsInNyYy9hcHAvZ2ktdmlld2VyL2h0bWwvZHJvcGRvd24tbWVudS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGtCQUFBO0FDQ0o7QURBSTtFQUNJLFVBQUE7RUFDQSx5QkFBQTtFQUNBLG1DQUFBO0FDRVI7QUREUTtFQUNJLGVBQUE7RUFDQSxnQkFBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtFQUNBLGlCQUFBO0FDR1o7QURGWTtFQUNJLG1CQUFBO0FDSWhCO0FERFE7RUFDSSxtQkFBQTtBQ0daIiwiZmlsZSI6InNyYy9hcHAvZ2ktdmlld2VyL2h0bWwvZHJvcGRvd24tbWVudS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImRpdntcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHVse1xyXG4gICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2VlZWVlZTtcclxuICAgICAgICBib3gtc2hhZG93OiAxcHggMXB4IDNweCAwcHggI2JiYmJiYjtcclxuICAgICAgICBvbHtcclxuICAgICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgICAgICAgICBsaXN0LXN0eWxlOiBub25lO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xyXG4gICAgICAgICAgICBtaW4td2lkdGg6IDIwcHg7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgICAgICAgICAmOmhvdmVye1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogI2VlZWVlZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAmOmZpcnN0LWNoaWxke1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZjlmOWY5O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImRpdiB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cbmRpdiB1bCB7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNlZWVlZWU7XG4gIGJveC1zaGFkb3c6IDFweCAxcHggM3B4IDBweCAjYmJiYmJiO1xufVxuZGl2IHVsIG9sIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBiYWNrZ3JvdW5kOiAjZmZmZmZmO1xuICBtaW4td2lkdGg6IDIwcHg7XG4gIHBhZGRpbmc6IDVweCAxMHB4O1xufVxuZGl2IHVsIG9sOmhvdmVyIHtcbiAgYmFja2dyb3VuZDogI2VlZWVlZTtcbn1cbmRpdiB1bDpmaXJzdC1jaGlsZCB7XG4gIGJhY2tncm91bmQ6ICNmOWY5Zjk7XG59Il19 */\"","import { Component, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'dropdown-menu',\r\n    styleUrls: ['./dropdown-menu.component.scss'],\r\n    templateUrl: './dropdown-menu.component.html'\r\n})\r\nexport class DropdownMenuComponent {\r\n    @Output() selected = new EventEmitter<number>();\r\n    items: { id: number, label: string }[];\r\n    position: {x: number, y: number};\r\n    visible: boolean;\r\n\r\n    setItems(items: number[], label: string) {\r\n        const dropdownMenu = [];\r\n        items.map(item => dropdownMenu.push({ id: item, label: `${label}${item}` }));\r\n        // console.log('dropdownMenu', dropdownMenu);\r\n        this.items = dropdownMenu;\r\n    }\r\n    selectItem(item: {id: number, label: string}) {\r\n        this.visible = false;\r\n        this.selected.emit(item.id);\r\n    }\r\n}\r\n","export default \"@charset \\\"UTF-8\\\";\\n.modal-window {\\n  border-right: 1px solid #bdbdbd;\\n  max-width: 777px;\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  z-index: 1000;\\n  overflow: auto;\\n  -webkit-transition: transform 1s ease;\\n}\\n.modal-window.open {\\n  -webkit-animation: slide 0.5s forwards;\\n  animation: slide 0.5s forwards;\\n}\\n.modal-window     .modal-body {\\n  padding: 20px;\\n  background: #fff;\\n  margin: 0;\\n  min-height: calc(100% - 40px);\\n  position: relative;\\n}\\n@-webkit-keyframes slide {\\n  100% {\\n    left: 0;\\n  }\\n}\\n@keyframes slide {\\n  100% {\\n    left: 0;\\n  }\\n}\\n.modal-background {\\n  position: fixed;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  background-color: transparent;\\n  opacity: 0.5;\\n  z-index: 900;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvZ2ktdmlld2VyL2h0bWwvbW9kYWwtd2luZG93LmNvbXBvbmVudC5zY3NzIiwic3JjL2FwcC9naS12aWV3ZXIvaHRtbC9DOlxcVXNlcnNcXGFraWJkcHRcXERvY3VtZW50c1xcQW5ndWxhclxcbW9iaXVzLXZpZXdlci9zcmNcXGFwcFxcZ2ktdmlld2VyXFxodG1sXFxtb2RhbC13aW5kb3cuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCO0FDQWhCO0VBQ0ksK0JBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0VBQ0EsTUFBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0VBRUEsYUFBQTtFQUNBLGNBQUE7RUFDQSxxQ0FBQTtBRENKO0FDQUk7RUFDSSxzQ0FBQTtFQUNBLDhCQUFBO0FERVI7QUNDQTtFQUNRLGFBQUE7RUFDQSxnQkFBQTtFQUNBLFNBQUE7RUFDQSw2QkFBQTtFQUlBLGtCQUFBO0FERlI7QUNPQTtFQUNJO0lBQU8sT0FBQTtFREhUO0FBQ0Y7QUNLQTtFQUNJO0lBQU8sT0FBQTtFREZUO0FBQ0Y7QUNJQTtFQUNJLGVBQUE7RUFDQSxNQUFBO0VBQ0EsUUFBQTtFQUNBLFNBQUE7RUFDQSxPQUFBO0VBQ0EsNkJBQUE7RUFDQSxZQUFBO0VBQ0EsWUFBQTtBREZKIiwiZmlsZSI6InNyYy9hcHAvZ2ktdmlld2VyL2h0bWwvbW9kYWwtd2luZG93LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGNoYXJzZXQgXCJVVEYtOFwiO1xuLm1vZGFsLXdpbmRvdyB7XG4gIGJvcmRlci1yaWdodDogMXB4IHNvbGlkICNiZGJkYmQ7XG4gIG1heC13aWR0aDogNzc3cHg7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICB6LWluZGV4OiAxMDAwO1xuICBvdmVyZmxvdzogYXV0bztcbiAgLXdlYmtpdC10cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMXMgZWFzZTtcbn1cbi5tb2RhbC13aW5kb3cub3BlbiB7XG4gIC13ZWJraXQtYW5pbWF0aW9uOiBzbGlkZSAwLjVzIGZvcndhcmRzO1xuICBhbmltYXRpb246IHNsaWRlIDAuNXMgZm9yd2FyZHM7XG59XG4ubW9kYWwtd2luZG93IMKgwqDCoMKgLm1vZGFsLWJvZHkge1xuICBwYWRkaW5nOiAyMHB4O1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICBtYXJnaW46IDA7XG4gIG1pbi1oZWlnaHQ6IGNhbGMoMTAwJSAtIDQwcHgpO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbkAtd2Via2l0LWtleWZyYW1lcyBzbGlkZSB7XG4gIDEwMCUge1xuICAgIGxlZnQ6IDA7XG4gIH1cbn1cbkBrZXlmcmFtZXMgc2xpZGUge1xuICAxMDAlIHtcbiAgICBsZWZ0OiAwO1xuICB9XG59XG4ubW9kYWwtYmFja2dyb3VuZCB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICBsZWZ0OiAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgb3BhY2l0eTogMC41O1xuICB6LWluZGV4OiA5MDA7XG59IiwiLm1vZGFsLXdpbmRvdyB7XHJcbiAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjYmRiZGJkO1xyXG4gICAgbWF4LXdpZHRoOiA3NzdweDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIHJpZ2h0OiAwO1xyXG4gICAgYm90dG9tOiAwO1xyXG4gICAgLy8gbGVmdDogMDtcclxuICAgIHotaW5kZXg6IDEwMDA7XHJcbiAgICBvdmVyZmxvdzogYXV0bztcclxuICAgIC13ZWJraXQtdHJhbnNpdGlvbjogdHJhbnNmb3JtIDFzIGVhc2U7XHJcbiAgICAmLm9wZW57XHJcbiAgICAgICAgLXdlYmtpdC1hbmltYXRpb246IHNsaWRlIDAuNXMgZm9yd2FyZHM7XHJcbiAgICAgICAgYW5pbWF0aW9uOiBzbGlkZSAwLjVzIGZvcndhcmRzO1xyXG4gICAgfVxyXG5cclxuwqDCoMKgwqAubW9kYWwtYm9keSB7XHJcbiAgICAgICAgcGFkZGluZzogMjBweDtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xyXG4gICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICBtaW4taGVpZ2h0OiBjYWxjKDEwMCUgLSA0MHB4KTtcclxuICAgICAgICAvLyB3aWR0aDogNTAlO1xyXG4gICAgICAgIC8vIG1hcmdpbi1sZWZ0OiA1MCU7XHJcbiAgICAgICAgLy8gbGVmdDogLTI1JTtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5ALXdlYmtpdC1rZXlmcmFtZXMgc2xpZGUge1xyXG4gICAgMTAwJSB7IGxlZnQ6IDA7IH1cclxufVxyXG5cclxuQGtleWZyYW1lcyBzbGlkZSB7XHJcbiAgICAxMDAlIHsgbGVmdDogMDsgfVxyXG59XHJcblxyXG4ubW9kYWwtYmFja2dyb3VuZCB7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICB0b3A6IDA7XHJcbiAgICByaWdodDogMDtcclxuICAgIGJvdHRvbTogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgIG9wYWNpdHk6IDAuNTtcclxuICAgIHotaW5kZXg6IDkwMDtcclxufSJdfQ== */\"","import { Component, Input, OnInit, OnDestroy, ElementRef, Output, EventEmitter } from '@angular/core';\r\nimport { ModalService } from './modal-window.service';\r\n\r\n@Component({\r\n    selector: 'modal-window',\r\n    styleUrls: ['./modal-window.component.scss'],\r\n    templateUrl: './modal-window.component.html'\r\n})\r\n\r\nexport class ModalWindowComponent implements OnInit, OnDestroy {\r\n    @Input() id: string;\r\n    @Output() closeModal = new EventEmitter<void>();\r\n    private element: any;\r\n    private containerWidth: number;\r\n\r\n    constructor(private modalService: ModalService, private el: ElementRef) {\r\n        this.element = el.nativeElement;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        const modal = this;\r\n\r\n        // ensure id attribute exists\r\n        if (!this.id) {\r\n            console.error('modal must have an id');\r\n            return;\r\n        }\r\n\r\n        let leftContent = document.getElementsByClassName('content__panel')[0];\r\n        this.containerWidth = leftContent.clientWidth;\r\n        let modalWindow = this.element.querySelector('.modal-window');\r\n        // modalWindow.style.width = `${this.containerWidth + 11}px`;\r\n        // modalWindow.style.left = `${-this.containerWidth - 11}px`;\r\n\r\n        modalWindow.style.width  = '500px';\r\n        modalWindow.style.left = '-500px';\r\n\r\n        // move element to bottom of page (just before </body>) so it can be displayed above everything else\r\n        document.body.appendChild(this.element);\r\n\r\n        const closeModal = this.closeModal;\r\n        // close modal on background click\r\n        this.element.addEventListener('click', function (e: any) {\r\n            if (e.target.className === 'modal-background') {\r\n                modal.close();\r\n                closeModal.emit()\r\n            }\r\n        });\r\n\r\n        // add self (this modal instance) to the modal service so it's accessible from controllers\r\n        this.modalService.add(this);\r\n\r\n        leftContent = null;\r\n        modalWindow = null;\r\n    }\r\n\r\n    // remove self from modal service when directive is destroyed\r\n    ngOnDestroy(): void {\r\n        this.modalService.remove(this.id);\r\n        this.element.remove();\r\n        this.element = null;\r\n    }\r\n\r\n    // open modal\r\n    open(): void {\r\n        let modalWindow = document.getElementById('modal-window');\r\n        // modalWindow.style.left = 0;\r\n        modalWindow.classList.add('open');\r\n        this.element.style.display = 'block';\r\n        document.body.classList.add('modal-open');\r\n        modalWindow = null;\r\n    }\r\n\r\n    // close modal\r\n    close(): void {\r\n        this.element.style.display = 'none';\r\n        const modalWindow = this.element.querySelector('.modal-window');\r\n        // modalWindow.style.left = `${-this.containerWidth - 11}px`;\r\n        modalWindow.classList.remove('open');\r\n        document.body.classList.remove('modal-open');\r\n    }\r\n}\r\n","export class ModalService {\r\n    private modals: any[] = [];\r\n\r\n    add(modal: any) {\r\n        // add modal to array of active modals\r\n        this.modals.push(modal);\r\n    }\r\n\r\n    remove(id: string) {\r\n        // remove modal from array of active modals\r\n        this.modals = this.modals.filter(x => x.id !== id);\r\n    }\r\n\r\n    open(id: string) {\r\n        const modal: any = this.modals.filter(x => x.id === id)[0];\r\n        modal.open();\r\n    }\r\n\r\n    close(id: string) {\r\n        // close modal specified by id\r\n        const modal: any = this.modals.filter(x => x.id === id)[0];\r\n        modal.close();\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'tab',\r\n  styles: [\r\n    `\r\n    .pane{\r\n      padding: 0;\r\n    }\r\n  `\r\n  ],\r\n  template: `\r\n    <div [hidden]=\"!active\" class=\"pane\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `\r\n})\r\nexport class TabComponent {\r\n    // tslint:disable-next-line: no-input-rename\r\n    @Input('tabTitle') title: string;\r\n    @Input() active = false;\r\n    // tslint:disable-next-line: no-input-rename\r\n    @Input('index') index: number;\r\n}\r\n","export default \"/* Style The Dropdown Button */\\n.dropbtn {\\n  background-color: transparent;\\n  color: #808080;\\n  border: 1px solid transparent;\\n  cursor: pointer;\\n  font-family: sans-serif;\\n  font-weight: 550;\\n  font-size: 12px;\\n  line-height: 15px;\\n  outline: none;\\n  text-align: center;\\n  width: 100%;\\n  height: 21px;\\n  margin-top: -1px;\\n  padding-right: 10px;\\n  border-bottom: 2px solid transparent;\\n}\\n.dropbtn::after {\\n  content: \\\"\\\";\\n  width: 0;\\n  height: 0;\\n  border-left: 4px solid transparent;\\n  border-right: 4px solid transparent;\\n  border-top: 4px solid #505050;\\n  border-bottom: none;\\n  position: absolute;\\n  top: 7px;\\n  right: 6px;\\n}\\n/* The container <div> - needed to position the dropdown content */\\n.dropdown {\\n  position: absolute;\\n  display: inline-block;\\n  left: 0px;\\n  width: 100%;\\n}\\n/* Dropdown Content (Hidden by Default) */\\n.dropdown-content {\\n  display: none;\\n  position: absolute;\\n  background-color: #ececec;\\n  min-width: 85px;\\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\\n  z-index: 500;\\n  top: 19px;\\n}\\n/* Links inside the dropdown */\\n.dropdown-content div {\\n  color: black;\\n  padding: 6px 8px;\\n  text-decoration: none;\\n}\\n/* Change color of dropdown links on hover */\\n.dropdown-content div:hover {\\n  background-color: #fefefe;\\n}\\n/* Show the dropdown menu on hover */\\n/* Change the background color of the dropdown button when the dropdown content is shown */\\n.dropdown:hover .dropbtn {\\n  color: #00006d;\\n}\\n.nav-tabs li.active .dropbtn {\\n  color: #00006d;\\n  background-color: whitesmoke;\\n  border: 1px solid #B3B3B3;\\n  border-bottom: 2px solid whitesmoke;\\n}\\n.nav-tabs li.open .dropbtn::after {\\n  content: \\\"\\\";\\n  border-top: none;\\n  border-bottom: 4px solid #505050;\\n}\\n#topology_dropdown, #object_dropdown {\\n  display: none;\\n  position: absolute;\\n  width: -webkit-fit-content;\\n  width: -moz-fit-content;\\n  width: fit-content;\\n  transition: display 0.4s;\\n  z-index: 99999999;\\n  background-color: #fafafb;\\n  border: 1px solid #808080;\\n  box-shadow: none;\\n}\\n#topology_dropdown div, #object_dropdown div {\\n  cursor: pointer;\\n  display: block;\\n  min-width: 100px;\\n  max-width: 300px;\\n  overflow: hidden;\\n  line-height: 20px;\\n  background-color: #fafafb;\\n  border: 0px;\\n  margin: 0px;\\n  padding: 0px 10px 0px 10px;\\n  line-height: 30px;\\n  height: 30px;\\n  font-size: 12px;\\n  color: #373737;\\n}\\n#topology_dropdown div:hover, #object_dropdown div:hover {\\n  color: #00006d;\\n  background-color: #E6E6E6;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\"","import {\r\n    Component,\r\n    ContentChildren,\r\n    QueryList,\r\n    AfterContentInit\r\n} from '@angular/core';\r\n\r\nimport { TabComponent } from './tab.component';\r\n\r\n@Component({\r\n    selector: 'tabs',\r\n    templateUrl: `./tabs.component.html`,\r\n    styleUrls: ['./tabs.component.scss']\r\n})\r\nexport class TabsComponent implements AfterContentInit {\r\n    @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\r\n    ngAfterContentInit() {\r\n        setTimeout(() => {// get all active tabs\r\n            const activeTabs = this.tabs.filter((tab) => tab.active);\r\n            // if there is no active tab set, activate the first\r\n            if (activeTabs.length === 0) {\r\n                this.selectTab(this.tabs.first);\r\n            }\r\n        }, 0);\r\n    }\r\n    selectTab(tab: TabComponent) {\r\n        // deactivate all tabs\r\n        this.tabs.toArray().forEach(_tab => _tab.active = false);\r\n        tab.active = true;\r\n    }\r\n}\r\n","export default \"button {\\n  cursor: pointer;\\n}\\nbutton:focus {\\n  outline: none;\\n}\\n:host {\\n  width: 100%;\\n  height: 100%;\\n  background-color: green;\\n  overflow: hidden;\\n}\\n#threejs-container {\\n  position: relative;\\n  height: 100%;\\n  width: 100%;\\n  margin: 0px;\\n  overflow: hidden;\\n  font-family: sans-serif;\\n}\\n#container-top-right-resize {\\n  top: 0px;\\n  right: 0px;\\n}\\n#giSummary, #tjsSummary {\\n  position: absolute;\\n  bottom: 5px;\\n  left: 5px;\\n  background: rgba(255, 255, 255, 0.3);\\n  padding: 10px;\\n  color: #2a8ac5;\\n}\\n#giSummary td, #tjsSummary td {\\n  height: 17px;\\n}\\n#nodeSelect_slider {\\n  position: absolute;\\n  bottom: 5px;\\n  right: 50px;\\n  background: rgba(255, 255, 255, 0.3);\\n  padding: 10px 25px 10px 10px;\\n  color: #808080;\\n}\\n#nodeSelect_slider datalist {\\n  width: 121%;\\n  display: flex;\\n}\\n#nodeSelect_slider datalist option {\\n  width: 15px;\\n  padding: none;\\n  flex-grow: 1;\\n  right: 1px;\\n}\\n#nodeSelect_dropdown {\\n  position: absolute;\\n  bottom: 5px;\\n  right: 50px;\\n  background: rgba(255, 255, 255, 0.3);\\n  padding: 10px 25px 10px 10px;\\n  color: #808080;\\n}\\n#nodeSelect_dropdown datalist {\\n  width: 121%;\\n  display: flex;\\n}\\n#nodeSelect_dropdown datalist option {\\n  width: 15px;\\n  padding: none;\\n  flex-grow: 1;\\n  right: 1px;\\n}\\n/*#rotating{\\n    width: 30px;\\n    height: 25px;\\n    font-size:15px;\\n    right:0px; \\n    text-align:center;\\n    position: absolute;\\n    top: 0px;\\n    background-color:transparent;\\n    border:0;\\n}\\n\\n#paning{\\n    width: 30px;\\n    height: 25px;\\n    font-size:15px;\\n    right:0px; \\n    text-align:center;\\n    position: absolute;\\n    top: 25px;\\n    background-color:transparent;\\n    border:0;\\n}\\n\\n#zooming{\\n    width: 30px;\\n    height: 25px;\\n    font-size:15px;\\n    right:0px; \\n    text-align:center;\\n    position: absolute;\\n    margin-top: 50px;\\n    background-color:transparent;\\n    border:0;\\n}*/\\n/*#imagery{\\n    width: 30px;\\n    height: 25px;\\n    font-size:14px;\\n    right:0px; \\n    text-align:center;\\n    position: absolute;\\n    margin-top: 10px;\\n    background-color:transparent;\\n    border:0;\\n}*/\\n.messages {\\n  position: absolute;\\n  color: orange;\\n  margin-top: 50px;\\n  left: 40%;\\n  padding: 10px;\\n  text-align: center;\\n  font-family: sans-serif;\\n  font-size: 14px;\\n  background-color: white;\\n  box-shadow: 2px 2px 5px 0px #505050;\\n}\\n#zoomingfit {\\n  width: 40px;\\n  height: 30px;\\n  font-size: 15px;\\n  position: absolute;\\n  top: 30px;\\n  right: 0px;\\n  text-align: center;\\n  color: #808080;\\n  background-color: transparent;\\n  border: 0;\\n}\\n#zoomingfit:hover {\\n  color: #00006d;\\n}\\n#EntitySelection {\\n  width: 40px;\\n  height: 30px;\\n  font-size: 15px;\\n  position: absolute;\\n  top: 60px;\\n  right: 0px;\\n  text-align: center;\\n  color: #808080;\\n  background-color: transparent;\\n  border: 0;\\n}\\n#EntitySelection:hover {\\n  color: #00006d;\\n}\\n#SelectingEntityType {\\n  width: 40px;\\n  font-size: 15px;\\n  position: absolute;\\n  text-align: center;\\n  color: #505050;\\n  top: 90px;\\n  right: 0px;\\n  cursor: pointer;\\n}\\n#selectDropdown {\\n  position: absolute;\\n  top: 85px;\\n  right: 5px;\\n}\\n#selectDropdown button {\\n  width: 30px;\\n  height: 25px;\\n  font: 15px bolder;\\n  display: block;\\n  background-color: transparent;\\n  border: 1px solid transparent;\\n  font-family: sans-serif;\\n  color: #505050;\\n  cursor: pointer;\\n}\\n#selectDropdown button.active {\\n  background-color: #f3f3f3;\\n}\\n#selectDropdown button:hover {\\n  background-color: #f9f9f9;\\n  border-color: #bbbbbb;\\n}\\n#setting {\\n  width: 30px;\\n  height: 25px;\\n  font-size: 15px;\\n  right: 0px;\\n  text-align: center;\\n  position: absolute;\\n  top: 10px;\\n  background-color: transparent;\\n  border: 0;\\n}\\n.switchCameraButton {\\n  cursor: pointer;\\n  font-size: 15px;\\n  position: absolute;\\n  width: 40px;\\n  bottom: 2px;\\n  right: 2px;\\n  text-align: center;\\n  color: #808080;\\n  background-color: transparent;\\n  border: 0;\\n  -webkit-user-select: none;\\n     -moz-user-select: none;\\n      -ms-user-select: none;\\n          user-select: none;\\n}\\n.switchCameraButton:hover {\\n  color: #00006d;\\n}\\n.visible {\\n  color: grey;\\n}\\n.selectvisible {\\n  background-color: white !important;\\n  color: #395d73;\\n}\\n#mouse_label {\\n  display: none;\\n  position: fixed;\\n  overflow: hidden;\\n  font-style: italic;\\n  background: rgba(255, 255, 255, 0.5);\\n  padding: 5px;\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\"","import { GIModel } from '@libs/geo-info/GIModel';\r\n// import @angular stuff\r\nimport {\r\n    Component, OnInit, Input, Output, EventEmitter,\r\n    Injector, ElementRef, DoCheck, OnChanges, SimpleChanges, ViewChild, OnDestroy, HostListener\r\n} from '@angular/core';\r\nimport { DataThreejs } from '../data/data.threejs';\r\n// import { IModel } from 'gs-json';\r\nimport { DataService } from '../data/data.service';\r\nimport { EEntType, EEntTypeStr, Txyz } from '@libs/geo-info/common';\r\nimport { DropdownMenuComponent } from '../html/dropdown-menu.component';\r\nimport { ModalService } from '../html/modal-window.service';\r\nimport { ThreeJSViewerService } from './threejs-viewer.service';\r\nimport { sortByKey } from '@libs/util/maps';\r\n\r\nlet renderCheck = true;\r\n\r\n/**\r\n * A threejs viewer for viewing geo-info (GI) models.\r\n * This component gets used in /app/model-viewers/all-viewers/gi-viewer/gi-viewer.component.html\r\n */\r\n@Component({\r\n    selector: 'threejs-viewer',\r\n    templateUrl: './threejs-viewer.component.html',\r\n    styleUrls: ['./threejs-viewer.component.scss']\r\n})\r\nexport class ThreejsViewerComponent implements OnInit, DoCheck, OnChanges, OnDestroy {\r\n    @Output() action = new EventEmitter<{'type': string, 'event': Event}>();\r\n    // @Output() eventClicked = new EventEmitter<Event>();\r\n    // @Output() resetTableEvent = new EventEmitter<number>();\r\n    @Input() model: GIModel;\r\n    @Input() attr_table_select: { action: string, ent_type: string, id: number | number[] };\r\n    @Input() selectSwitch: Boolean;\r\n    @Input() attribLabel: string;\r\n    @ViewChild(DropdownMenuComponent, { static: true }) dropdown = new DropdownMenuComponent();\r\n\r\n    protected modalWindow: ModalService;\r\n    // protected keyboardService: KeyboardService;\r\n    // private keyboardServiceSub: Subscription;\r\n    public container = null;\r\n    public _elem;\r\n    // viewer size\r\n    public _width: number;\r\n    public _height: number;\r\n    // DataService\r\n    protected dataService: DataService;\r\n    // threeJS scene data\r\n    public _data_threejs: DataThreejs;\r\n    // num of positions, edges, triangles in threejs\r\n    public _threejs_nums: [number, number, number];\r\n    // flags for displayinhg text in viewer, see html\r\n    public _no_model = false;\r\n    public _model_error = false;\r\n    public messageVisible = false;\r\n    public message: string;\r\n    // the selectable type of entity by user, depends on the Attribute Tab\r\n    public selectable: number;\r\n\r\n    // right selection dropdown\r\n    // public needSelect = false;\r\n    // current entity type enabled for selection\r\n    public SelectingEntityType: { id: number, name: string } = { id: EEntType.FACE, name: 'Faces' };\r\n    public selectDropdownVisible = false;\r\n    public selections = [\r\n        { id: EEntType.POSI, name: 'Positions' }, { id: EEntType.VERT, name: 'Vertex' },\r\n        { id: EEntType.EDGE, name: 'Edges' }, { id: EEntType.WIRE, name: 'Wires' },\r\n        { id: EEntType.FACE, name: 'Faces' }, { id: EEntType.POINT, name: 'Points' },\r\n        { id: EEntType.PLINE, name: 'Polylines' }, { id: EEntType.PGON, name: 'Polygons' },\r\n        { id: EEntType.COLL, name: 'Collections' }];\r\n    public default_selections = {\r\n        ps: { id: EEntType.POSI, name: 'Positions' },\r\n        _v: { id: EEntType.VERT, name: 'Vertex' },\r\n        _e: { id: EEntType.EDGE, name: 'Edges' },\r\n        _w: { id: EEntType.WIRE, name: 'Wires' },\r\n        _f: { id: EEntType.FACE, name: 'Faces' },\r\n        pt: { id: EEntType.POINT, name: 'Points' },\r\n        pl: { id: EEntType.PLINE, name: 'Polylines' },\r\n        pg: { id: EEntType.PGON, name: 'Polygons' },\r\n        co: { id: EEntType.COLL, name: 'Collections' }\r\n    };\r\n\r\n    public dropdownPosition = { x: 0, y: 0 };\r\n\r\n    private renderInterval;\r\n    // private isDown = false;\r\n    private lastX: number;\r\n    private lastY: number;\r\n    private dragHash: number;\r\n    private shiftKeyPressed = false;\r\n    public giSummary = [];\r\n    private currentAttribLabel = '';\r\n\r\n    tab_map = {\r\n        0: EEntType.POSI,\r\n        1: EEntType.VERT,\r\n        2: EEntType.EDGE,\r\n        3: EEntType.WIRE,\r\n        4: EEntType.FACE,\r\n        5: EEntType.POINT,\r\n        6: EEntType.PLINE,\r\n        7: EEntType.PGON,\r\n        8: EEntType.COLL,\r\n        9: EEntType.MOD\r\n    };\r\n\r\n    tab_rev_map = {\r\n        0: 0,\r\n        2: 1,\r\n        3: 2,\r\n        4: 3,\r\n        5: 4,\r\n        6: 5, // point\r\n        7: 6, // plines\r\n        8: 7, // pgons\r\n        9: 8,\r\n        10: 9\r\n    };\r\n\r\n    /**\r\n     * Creates a new viewer,\r\n     * @param injector\r\n     * @param elem\r\n     */\r\n    constructor(injector: Injector, elem: ElementRef, private threeJSViewerService: ThreeJSViewerService) {\r\n        this._elem = elem;\r\n        this.dataService = injector.get(DataService);\r\n        this.modalWindow = injector.get(ModalService);\r\n        // this.keyboardService = injector.get(KeyboardService);\r\n        // this.keyboardServiceSub = this.keyboardService.viewerControl$.subscribe(event => {\r\n        //     this._data_threejs.onWindowKeyPress(event);\r\n        // });\r\n    }\r\n    /**\r\n     * Called when the viewer is initialised.\r\n     */\r\n    ngOnInit() {\r\n        this.dropdown.items = [];\r\n        this.dropdown.visible = false;\r\n        this.dropdown.position = { x: 0, y: 0 };\r\n        this.container = this._elem.nativeElement.children.namedItem('threejs-container');\r\n        // check for container\r\n        if (!this.container) {\r\n            console.error('No container in Three Viewer');\r\n            return;\r\n        }\r\n        // size of window\r\n        this._width = this.container.offsetWidth; // container.client_width;\r\n        this._height = this.container.offsetHeight; // container.client_height;\r\n\r\n        this._data_threejs = this.dataService.getThreejsScene();\r\n        this.threeJSViewerService.DataThreejs = this._data_threejs;\r\n        this.container.appendChild(this._data_threejs.renderer.domElement);\r\n        this._data_threejs.renderer.domElement.style.outline = 'none';\r\n        // this.container.appendChild(this._data_threejs.vr);\r\n        // console.log(this._data_threejs.vr)\r\n        // set the numbers of entities\r\n        this._threejs_nums = this._data_threejs.threejs_nums;\r\n        // ??? What is happening here?\r\n        this._data_threejs.perspControls.addEventListener('change', this.activateRender);\r\n        this._data_threejs.orthoControls.addEventListener('change', this.activateRender);\r\n        this._data_threejs.renderer.render(this._data_threejs.scene, this._data_threejs.camera);\r\n\r\n        if (this._data_threejs.ObjLabelMap.size !== 0) {\r\n            this._data_threejs.ObjLabelMap.forEach((obj, label) => {\r\n                this._data_threejs.createLabelforObj(this.container, obj.entity, obj.type, obj.text, label);\r\n            });\r\n        }\r\n\r\n        this.getSelectingEntityType();\r\n\r\n        this._data_threejs.switchCamera(false);\r\n\r\n        for (let i = 1; i < 10; i++) {\r\n            setTimeout(() => {\r\n                this.activateRender();\r\n            }, i * 100);\r\n        }\r\n\r\n        this.renderInterval = setInterval(() => {\r\n            // this.render();\r\n            if (renderCheck) {\r\n                this.render();\r\n                renderCheck = false;\r\n            }\r\n        }, 20);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Called when anything changes\r\n     */\r\n    ngDoCheck() {\r\n        if (!this.container) {\r\n            console.error('No container in Three Viewer');\r\n            return;\r\n        }\r\n        const width: number = this.container.offsetWidth;\r\n        const height: number = this.container.offsetHeight;\r\n\r\n        // this is when dimensions change\r\n        if (width !== this._width || height !== this._height) {\r\n            this._width = width;\r\n            this._height = height;\r\n            setTimeout(() => {\r\n                const aspect = this._width / this._height;\r\n                this._data_threejs.perspCam.aspect = this._width / this._height;\r\n                this._data_threejs.perspCam.updateProjectionMatrix();\r\n                this._data_threejs.renderer.setSize(this._width, this._height);\r\n\r\n                this._data_threejs.orthoCam.left = -this._data_threejs.orthoCam.top * aspect;\r\n                this._data_threejs.orthoCam.right = this._data_threejs.orthoCam.top * aspect;\r\n                this._data_threejs.orthoCam.updateProjectionMatrix();\r\n\r\n                this.activateRender();\r\n            }, 10);\r\n        }\r\n\r\n        if (renderCheck) {\r\n            this.render();\r\n            renderCheck = false;\r\n        }\r\n        // this.render();\r\n\r\n    }\r\n\r\n    // receive data -> model from gi-viewer component and update model in the scene\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['model']) {\r\n            if (this.model) {\r\n                // if (this.dataService.switch_page) {\r\n                //     this.dataService.switch_page = false;\r\n                //     return;\r\n                // }\r\n                if (!this.container) { return; }\r\n                this.updateModel(this.model);\r\n            }\r\n        }\r\n        if (changes['attr_table_select']) {\r\n            if (this.attr_table_select) {\r\n                this.attrTableSelect(this.attr_table_select);\r\n            }\r\n        }\r\n        if (changes['selectSwitch']) {\r\n            if (this.selectSwitch !== undefined) {\r\n                const ent_type = this.tab_map[this.getCurrentTab()];\r\n                this.refreshLabels(ent_type);\r\n            }\r\n        }\r\n        if (changes['attribLabel']) {\r\n            if (this.attribLabel !== undefined) {\r\n                const ent_type = this.tab_map[this.getCurrentTab()];\r\n                this.currentAttribLabel = this.attribLabel;\r\n                this.refreshLabels(ent_type);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this._elem = null;\r\n        this.container = null;\r\n        this.dataService.switch_page = true;\r\n        this.model = null;\r\n        clearInterval(this.renderInterval);\r\n        this.renderInterval = null;\r\n        this._data_threejs.perspControls.removeEventListener('change', this.activateRender);\r\n        this._data_threejs.orthoControls.removeEventListener('change', this.activateRender);\r\n        // this.keyboardServiceSub.unsubscribe();\r\n    }\r\n\r\n    public activateRender() {\r\n        renderCheck = true;\r\n    }\r\n\r\n    /**\r\n     * @param self\r\n     */\r\n    public render() {\r\n        const textLabels = this._data_threejs.textLabels;\r\n        if (textLabels.size !== 0) {\r\n            textLabels.forEach((label) => {\r\n                label.updatePosition();\r\n            });\r\n        }\r\n        this._data_threejs.renderer.render(this._data_threejs.scene, this._data_threejs.camera);\r\n    }\r\n\r\n\r\n    getCurrentTab() {\r\n        if (localStorage.getItem('mpm_attrib_current_tab') !== null) {\r\n            return Number(localStorage.getItem('mpm_attrib_current_tab'));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n\r\n    refreshLabels(ent_type): void {\r\n        if (!this.SelectingEntityType.id) { return; }\r\n        const allLabels = document.getElementsByClassName(`text-label${EEntTypeStr[ent_type]}`);\r\n        const unSorted = this.dataService.selected_ents.get(EEntTypeStr[ent_type]);\r\n        if (unSorted === undefined) {\r\n            return;\r\n        }\r\n        const sorted = sortByKey(unSorted);\r\n        const arr = Array.from(sorted.values());\r\n        const showSelected = JSON.parse(sessionStorage.getItem('mpm_showSelected'));\r\n        const attr_names = this._data_threejs.model.modeldata.attribs.query.getAttribNames(ent_type);\r\n\r\n        let attr_name = this.currentAttribLabel, isArr = false, key;\r\n        if (attr_name.match(/\\[.*?\\]/g)) {\r\n            isArr = true;\r\n            const _key = String(attr_name.match(/\\[.*?\\]/g));\r\n            const _attr_name = attr_name.replace(_key, '');\r\n            key = Number(_key.replace('[', '').replace(']', ''));\r\n            attr_name = _attr_name;\r\n        } else {\r\n            isArr = false;\r\n        }\r\n        if (attr_name !== '') {\r\n            if (attr_names.includes(attr_name)) {\r\n                for (let i = 0; i < allLabels.length; i++) {\r\n                    const element = allLabels[i];\r\n                    const attr = Number(element.getAttribute('data-index'));\r\n                    const attr_val = this._data_threejs.model.modeldata.attribs.query.getAttribVal(ent_type, attr_name, attr);\r\n                    const _attr_val = attr_val !== undefined ? attr_val : '';\r\n                    if (isArr && _attr_val !== '') {\r\n                        const val = String(_attr_val).split(',')[key];\r\n                        const _val = val !== undefined ? val : '';\r\n                        element.innerHTML = _val;\r\n                    } else {\r\n                        element.innerHTML = String(_attr_val);\r\n                    }\r\n                }\r\n            } else if (attr_name === '#') {\r\n                    this.labelforindex(showSelected, allLabels, arr);\r\n            } else if (attr_name === '_id') {\r\n                for (let i = 0; i < allLabels.length; i++) {\r\n                    const element = allLabels[i];\r\n                    const val = element.getAttribute('title');\r\n                    element.innerHTML = String(val);\r\n                }\r\n            }\r\n        } else {\r\n            this.labelforindex(showSelected, allLabels, arr);\r\n            for (let i = 0; i < allLabels.length; i++) {\r\n                const element = allLabels[i];\r\n                element.innerHTML = String('');\r\n            }\r\n        }\r\n        this.activateRender();\r\n        setTimeout(() => {\r\n            this.activateRender();\r\n        }, 50);\r\n\r\n        // this.render();\r\n    }\r\n\r\n    labelforindex(showSelected, allLabels, arr) {\r\n        if (showSelected) {\r\n            for (let i = 0; i < allLabels.length; i++) {\r\n                const element = allLabels[i];\r\n                const val = Number(element.getAttribute('data-index'));\r\n                const index = arr.findIndex(l => l === val);\r\n                element.innerHTML = String(index);\r\n            }\r\n        } else {\r\n            const ent_arr = this.model.modeldata.geom.query.getEnts(this.SelectingEntityType.id);\r\n            for (let i = 0; i < allLabels.length; i++) {\r\n                const element = allLabels[i];\r\n                const val = Number(element.getAttribute('data-index'));\r\n                const index = ent_arr.findIndex(l => l === val);\r\n                element.innerHTML = String(index);\r\n            }\r\n        }\r\n    }\r\n\r\n    attrTableSelect(attrib: { action: string, ent_type: string, id: number | number[] }, flowchart = false) {\r\n        sessionStorage.setItem('mpm_changetab', 'false');\r\n        if (attrib.action === 'select') {\r\n            if (!flowchart) {this.unselectAll(); } // If select from Flowchart, don't unselect all.\r\n            switch (attrib.ent_type) {\r\n                case EEntTypeStr[EEntType.POSI]:\r\n                    if (typeof attrib.id === 'number') {\r\n                        this.selectPositions(attrib.id, null, null, attrib.ent_type + attrib.id);\r\n                    } else {\r\n                        attrib.id.forEach((_id) => {\r\n                            this.selectPositions(_id, null, null, attrib.ent_type + _id);\r\n                        });\r\n                    }\r\n                    break;\r\n                case EEntTypeStr[EEntType.VERT]:\r\n                    if (typeof attrib.id === 'number') {\r\n                        this.selectVertex(attrib.id, null, null, attrib.ent_type + attrib.id);\r\n                    } else {\r\n                        attrib.id.forEach((_id) => {\r\n                            this.selectVertex(_id, null, null, attrib.ent_type + _id);\r\n                        });\r\n                    }\r\n                    break;\r\n                case EEntTypeStr[EEntType.EDGE]:\r\n                    if (typeof attrib.id === 'number') {\r\n                        this.selectEdge(attrib.id);\r\n                    } else {\r\n                        attrib.id.forEach((_id) => {\r\n                            this.selectEdge(_id);\r\n                        });\r\n                    }\r\n                    break;\r\n                case EEntTypeStr[EEntType.WIRE]:\r\n                    if (typeof attrib.id === 'number') {\r\n                        this.selectWire(attrib.id);\r\n                    } else {\r\n                        attrib.id.forEach((_id) => {\r\n                            this.selectWire(_id);\r\n                        });\r\n                    }\r\n                    break;\r\n                case EEntTypeStr[EEntType.FACE]:\r\n                    if (typeof attrib.id === 'number') {\r\n                        this.selectFace(attrib.id);\r\n                    } else {\r\n                        attrib.id.forEach((_id) => {\r\n                            this.selectFace(_id);\r\n                        });\r\n                    }\r\n                    break;\r\n                case EEntTypeStr[EEntType.PGON]:\r\n                    if (typeof attrib.id === 'number') {\r\n                        this.selectPGon(attrib.id);\r\n                    } else {\r\n                        attrib.id.forEach((_id) => {\r\n                            this.selectPGon(_id);\r\n                        });\r\n                    }\r\n                    break;\r\n                case EEntTypeStr[EEntType.PLINE]:\r\n                    if (typeof attrib.id === 'number') {\r\n                        this.selectPLine(attrib.id);\r\n                    } else {\r\n                        attrib.id.forEach((_id) => {\r\n                            this.selectPLine(_id);\r\n                        });\r\n                    }\r\n                    break;\r\n                case EEntTypeStr[EEntType.POINT]:\r\n                    if (typeof attrib.id === 'number') {\r\n                        this.selectPoint(attrib.id);\r\n                    } else {\r\n                        attrib.id.forEach((_id) => {\r\n                            this.selectPoint(_id);\r\n                        });\r\n                    }\r\n                    break;\r\n                case EEntTypeStr[EEntType.COLL]:\r\n                    if (typeof attrib.id === 'number') {\r\n                        // const coll_parents = this.model.modeldata.geom.query.getCollParents(attrib.id);\r\n                        // if (coll_parents[0] === -1) { // no parent\r\n                        //     this.chooseColl(attrib.id);\r\n                        // } else {\r\n                        //     coll_parents.forEach(element => {\r\n                        //         this.chooseColl(element);\r\n                        //     });\r\n                        // }\r\n                        this.chooseColl(attrib.id);\r\n                        // const parent_coll_i: number = this.model.modeldata.geom.query.getCollParent(attrib.id);\r\n                        // if (parent_coll_i === -1) { // no parent\r\n                        //     this.chooseColl(attrib.id);\r\n                        // }\r\n                    } else {\r\n                        attrib.id.forEach((_id) => {\r\n                            this.chooseColl(_id);\r\n                        });\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } else if (attrib.action === 'unselect') {\r\n            if (attrib.ent_type === EEntTypeStr[EEntType.COLL]) {\r\n                const coll_children = this.dataService.selected_coll.get(attrib.ent_type + attrib.id);\r\n                if (coll_children && coll_children.length) {\r\n                    coll_children.forEach(child => {\r\n                        this.unselectGeom(child, attrib.ent_type, true);\r\n                    });\r\n                    this.dataService.selected_ents.get(EEntTypeStr[EEntType.COLL]).delete(attrib.ent_type + attrib.id);\r\n                }\r\n            } else {\r\n                this.unselectGeom(attrib.ent_type + attrib.id, attrib.ent_type, true);\r\n            }\r\n        }\r\n        this.refreshLabels(this.tab_map[this.getCurrentTab()]);\r\n    }\r\n\r\n    getGISummary(model: GIModel) {\r\n        let colls = 0, pgons = 0, plines = 0, points = 0, faces = 0, wires = 0, edges = 0, vertices = 0, positions = 0;\r\n        if (this) {\r\n            colls = model.modeldata.geom.query.numEnts(EEntType.COLL);\r\n            pgons = model.modeldata.geom.query.numEnts(EEntType.PGON);\r\n            plines = model.modeldata.geom.query.numEnts(EEntType.PLINE);\r\n            points = model.modeldata.geom.query.numEnts(EEntType.POINT);\r\n            faces = model.modeldata.geom.query.numEnts(EEntType.FACE);\r\n            wires = model.modeldata.geom.query.numEnts(EEntType.WIRE);\r\n            edges = model.modeldata.geom.query.numEnts(EEntType.EDGE);\r\n            vertices = model.modeldata.geom.query.numEnts(EEntType.VERT);\r\n            positions = model.modeldata.geom.query.numEnts(EEntType.POSI);\r\n        }\r\n        const gi_summary = [{title: 'Collections', val: colls},\r\n        {title: 'Polygons', val: pgons},\r\n        {title: 'Polylines', val: plines},\r\n        {title: 'Points', val: points},\r\n        {title: 'Faces', val: faces},\r\n        {title: 'Wires', val: wires},\r\n        {title: 'Edges', val: edges},\r\n        {title: 'Vertices', val: vertices},\r\n        {title: 'Positions', val: positions}];\r\n        localStorage.setItem('gi_summary', JSON.stringify(gi_summary));\r\n    }\r\n\r\n    /**\r\n     * Update the model in the viewer.\r\n     */\r\n    public async updateModel(model: GIModel) {\r\n        this._data_threejs = this.dataService.getThreejsScene();\r\n        if (!model) {\r\n            console.warn('Model or Scene not defined.');\r\n            this._no_model = true;\r\n            return;\r\n        } else {\r\n            this._data_threejs.model = model;\r\n            try {\r\n                // add geometry to the scene\r\n                this._data_threejs.populateScene(model, this.container);\r\n                // this.resetTable();\r\n                this.getGISummary(model);\r\n                if (localStorage.getItem('gi_summary')) {\r\n                    this.giSummary = JSON.parse(localStorage.getItem('gi_summary'));\r\n                }\r\n                this._model_error = false;\r\n                this._no_model = false;\r\n\r\n                // Show Flowchart Selected Entities\r\n                const selected = this.model.modeldata.geom.selected;\r\n                this.dataService.clearAll();\r\n                if (selected !== undefined && selected.length) {\r\n                    let selectingType;\r\n                    this._data_threejs.selected_geoms.clear();\r\n                    const select_groups = {};\r\n                    selected.forEach(s => {\r\n                        const type = EEntTypeStr[s[0]], id = Number(s[1]);\r\n                        let idList;\r\n                        if (!select_groups[type]) {\r\n                            idList = [];\r\n                        } else {\r\n                            idList = select_groups[type];\r\n                        }\r\n                        if (this.model.modeldata.geom.query.entExists(s[0], id)) {\r\n                            this.dataService.selected_ents.get(type).set(`${type}${id}`, id);\r\n                            idList.push(id);\r\n                            // this.attrTableSelect({ action: 'select', ent_type: type, id: id }, true);\r\n                        }\r\n                        select_groups[type] = idList;\r\n                        selectingType = s[0];\r\n                    });\r\n                    for (const type in select_groups) {\r\n                        if (!select_groups[type]) { continue; }\r\n                        this.attrTableSelect({ action: 'select', ent_type: type, id: select_groups[type] }, true);\r\n                    }\r\n\r\n                    sessionStorage.setItem('mpm_showSelected', 'true');\r\n\r\n                    sessionStorage.setItem('mpm_changetab', 'true');\r\n                    localStorage.setItem('mpm_attrib_current_tab', this.tab_rev_map[selectingType]);\r\n                    this.selectEntityType(this.selections.find(selection => selection.id === selectingType));\r\n                } else {\r\n                    sessionStorage.setItem('mpm_showSelected', 'false');\r\n                    sessionStorage.setItem('mpm_changetab', 'false');\r\n                }\r\n                this.getSelectingEntityType();\r\n                this.refreshTable(event);\r\n\r\n            } catch (ex) {\r\n                console.error('Error displaying model:', ex);\r\n                this._model_error = true;\r\n                this._data_threejs.text = ex;\r\n            }\r\n        }\r\n    }\r\n\r\n    onClick(event) {\r\n        if (event.target.tagName !== 'CANVAS') {\r\n            return null;\r\n        } else {\r\n            this.onUserAction(event);\r\n            this.refreshLabels(this.tab_map[this.getCurrentTab()]);\r\n        }\r\n    }\r\n    onMouseUp(event) {\r\n        if (event.target.tagName !== 'CANVAS' || !this.lastX || !this.model) {\r\n            return null;\r\n        }\r\n        for (const htmlElement of this.container.children) {\r\n            if (htmlElement.id.startsWith('textLabel')) {\r\n                htmlElement.style.display = '';\r\n            }\r\n        }\r\n        const distX = event.clientX - event.target.getBoundingClientRect().left - this.lastX;\r\n        const distY = event.clientY - event.target.getBoundingClientRect().top - this.lastY;\r\n        const distSqr = distX * distX + distY * distY;\r\n        if (performance.now() - this.dragHash < 500 && distSqr < 500) {\r\n            this.onUserAction(event);\r\n            this.refreshLabels(this.tab_map[this.getCurrentTab()]);\r\n        } else {\r\n            // this._data_threejs._controls.enabled = true;\r\n        }\r\n        this.lastX = null;\r\n        this.lastY = null;\r\n        // this.isDown = false;\r\n    }\r\n\r\n    // public onMouseMove(event) {\r\n    //     const body = document.getElementsByTagName('body');\r\n\r\n    //     if (event.target.tagName !== 'CANVAS') {\r\n    //         // body[0].style.cursor = 'default';\r\n    //         return null;\r\n    //     } else {\r\n    //         if (!this.isDown) {\r\n    //             // const intersects = this.threeJSViewerService.initRaycaster(event);\r\n    //             // if (intersects && intersects.length > 0) {\r\n    //             //     body[0].style.cursor = 'pointer';\r\n    //             // } else {\r\n    //             //     body[0].style.cursor = 'default';\r\n    //             // }\r\n    //             return;\r\n    //         }\r\n\r\n    //         const mouseX = event.clientX - event.target.getBoundingClientRect().left;\r\n    //         const mouseY = event.clientY - event.target.getBoundingClientRect().top;\r\n    //         const dx = mouseX - this.lastX;\r\n    //         const dy = mouseY - this.lastY;\r\n    //         this.lastX = mouseX;\r\n    //         this.lastY = mouseY;\r\n\r\n    //         this.dragHash += Math.abs(dx) + Math.abs(dy);\r\n    //         if (this.dragHash > 4) {\r\n    //             // dragging\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    onMouseDown(event) {\r\n        if (event.target.tagName !== 'CANVAS' || !this.model) {\r\n            return null;\r\n        } else {\r\n            event.stopPropagation();\r\n            this.lastX = event.clientX - event.target.getBoundingClientRect().left;\r\n            this.lastY = event.clientY - event.target.getBoundingClientRect().top;\r\n\r\n            for (const htmlElement of this.container.children){\r\n                if (htmlElement.id.startsWith('textLabel')) {\r\n                    htmlElement.style.display = 'none';\r\n                }\r\n            }\r\n\r\n            // Put your mousedown stuff here\r\n            this.dragHash = performance.now();\r\n            // this.isDown = true;\r\n        }\r\n    }\r\n\r\n    onKeyDown(event) {\r\n    }\r\n\r\n    onKeyUp(event) {\r\n    }\r\n\r\n    public onUserAction(event) {\r\n        // get entities for mouse event\r\n        const intersects = this.threeJSViewerService.initRaycaster(event);\r\n        if (event.shiftKey || event.ctrlKey || event.metaKey) {\r\n            this.shiftKeyPressed = true;\r\n        }\r\n\r\n        // check intersect exist\r\n        if (intersects.length > 0) {\r\n            if (event.which === 1) {\r\n                // check mouse event triggered in THREE viewer, then enable dropdown menu\r\n                if (event.target.tagName === 'CANVAS') {\r\n                    const pos_x = event.clientX - event.target.getBoundingClientRect().left;\r\n                    const pos_y = event.clientY - event.target.getBoundingClientRect().top;\r\n                    this.dropdownPosition = { x: pos_x, y: pos_y };\r\n                }\r\n                let intsType = '';\r\n                switch (this.SelectingEntityType.id) {\r\n                    case EEntType.POSI:\r\n                    case EEntType.POINT:\r\n                    case EEntType.VERT:\r\n                        intsType = 'Points';\r\n                        break;\r\n                    case EEntType.EDGE:\r\n                    case EEntType.WIRE:\r\n                    case EEntType.PLINE:\r\n                        intsType = 'LineSegments';\r\n                        break;\r\n                    case EEntType.FACE:\r\n                    case EEntType.PGON:\r\n                        intsType = 'Mesh';\r\n                        break;\r\n                }\r\n\r\n                let intsObj = intersects[0];\r\n                for (const inst of intersects) {\r\n                    if (inst.object.type === intsType) {\r\n                        intsObj = inst;\r\n                        break;\r\n                    }\r\n                }\r\n                this.selectObj(intsObj);\r\n                // setTimeout(() => {\r\n                //     this.activateRender();\r\n                // }, 50);\r\n            }\r\n        } else {\r\n            if (event.target.tagName === 'CANVAS') {\r\n                this.unselectAll();\r\n                this.resetTable();\r\n                if (event.target.tagName !== 'OL') {\r\n                    // not clicking on Menu item, hide dropdown menu\r\n                    this.dropdown.visible = false;\r\n                    // return;\r\n                }\r\n            }\r\n        }\r\n        this.shiftKeyPressed = false;\r\n\r\n        this.refreshTable(event);\r\n    }\r\n\r\n    private refreshTable(event: Event) {\r\n        this.action.emit({'type': 'eventClicked', 'event': event});\r\n        setTimeout(() => {\r\n            this.activateRender();\r\n        }, 0);\r\n    }\r\n\r\n    private resetTable() {\r\n        this.action.emit({'type': 'resetTableEvent', 'event': null});\r\n    }\r\n\r\n    private unselectAll() {\r\n        const scene = this._data_threejs;\r\n        const selectings = Array.from(scene.selected_geoms.keys());\r\n        for (const selecting of selectings) {\r\n            scene.unselectObj(selecting, this.container);\r\n        }\r\n        document.querySelectorAll('[id^=textLabel_]').forEach(value => {\r\n            this.container.removeChild(value);\r\n        });\r\n        this._data_threejs.textLabels.clear();\r\n\r\n        this.dataService.selected_ents.forEach(map => {\r\n            map.clear();\r\n        });\r\n        this.refreshTable(event);\r\n        scene.scene_objs_selected.clear();\r\n        // if (this.SelectingEntityType.id === EEntTypeStr[EEntType.COLL]) {\r\n        //     document.getElementById('executeButton').click();\r\n        // }\r\n        const positions = Array.from(scene.selected_positions.keys());\r\n        for (const posi of positions) {\r\n            scene.unselectObjGroup(posi, this.container, 'positions');\r\n        }\r\n\r\n        const vertex = Array.from(scene.selected_vertex.keys());\r\n        for (const vert of vertex) {\r\n            scene.unselectObjGroup(vert, this.container, 'vertex');\r\n        }\r\n\r\n        const edges = Array.from(scene.selected_face_edges.keys());\r\n        for (const edge of edges) {\r\n            scene.unselectObjGroup(edge, this.container, 'face_edges');\r\n        }\r\n\r\n        const wires = Array.from(scene.selected_face_wires.keys());\r\n        for (const wire of wires) {\r\n            scene.unselectObjGroup(wire, this.container, 'face_wires');\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.activateRender();\r\n        }, 0);\r\n    }\r\n\r\n    private getSelectingEntityType() {\r\n        const select = JSON.parse(localStorage.getItem('mpm_settings'))['select'];\r\n        const default_selector = {id: EEntType.FACE, name: 'Faces'};\r\n        if (select && select.enabledselector) {\r\n            this.selections = [];\r\n            for (const i in select.enabledselector) {\r\n                if (select.enabledselector[i]) { this.selections.push( this.default_selections[i]); }\r\n            }\r\n        }\r\n        if (select !== undefined && select.selector && this.selections.indexOf(select.selector) !== -1) {\r\n            this.SelectingEntityType = select.selector;\r\n        } else if (this.selections.indexOf(default_selector) !== -1) {\r\n            this.SelectingEntityType = default_selector;\r\n        } else if (this.selections.length > 0) {\r\n            this.SelectingEntityType = this.selections[0];\r\n        } else {\r\n            this.SelectingEntityType =  {id: null, name: null};\r\n        }\r\n        // if (localStorage.getItem('mpm_selecting_entity_type') != null) {\r\n        //     this.SelectingEntityType = JSON.parse(localStorage.getItem('mpm_selecting_entity_type'));\r\n        // }\r\n    }\r\n\r\n    private selectObj(intersect0: THREE.Intersection) {\r\n        const scene = this._data_threejs;\r\n        // this.getSelectingEntityType();\r\n        switch (this.SelectingEntityType.id) {\r\n            case EEntType.POSI:\r\n\r\n                if (intersect0.object.type === 'Points') {\r\n                    let posi = 0;\r\n                    for (const m of scene.posis_map) {\r\n                        if (m[1] === intersect0.index) {\r\n                            posi = m[0];\r\n                            break;\r\n                        }\r\n                    }\r\n                    // const posi = scene.posis_map.get(intersect0.index);\r\n                    // const posi = scene.posis_idx_to_i[intersect0.index];\r\n                    const ent_id = `${EEntTypeStr[EEntType.POSI]}${posi}`;\r\n                    if (scene.selected_geoms.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.POSI], true);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectPositions(posi, null, null, ent_id);\r\n                    }\r\n                } else if (intersect0.object.type === 'LineSegments') {\r\n                    let edge;\r\n                    const edge_color = (<THREE.LineDashedMaterial>(<THREE.LineSegments> intersect0.object).material).color;\r\n                    if (edge_color['r'] === 1 && edge_color['b'] === 1 && edge_color['g'] === 1) {\r\n                        edge = scene.white_edge_select_map.get(intersect0.index / 2);\r\n                    } else {\r\n                        edge = scene.edge_select_map.get(intersect0.index / 2);\r\n                    }\r\n\r\n                    // const edge = scene.edge_select_map.get(intersect0.index / 2);\r\n                    const ent_id = `_e_posi${edge}`;\r\n                    if (scene.selected_positions.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.POSI]);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectPositions(null, edge, null, ent_id);\r\n                    }\r\n                } else if (intersect0.object.type === 'Mesh') {\r\n                    // const tri = scene.tris_select_idx_to_i[intersect0.faceIndex];\r\n                    const tri = scene.tri_select_map.get(intersect0.faceIndex);\r\n                    const face = this.model.modeldata.geom.nav.navTriToFace(tri);\r\n                    const ent_id = `_f_posi${face}`;\r\n                    if (scene.selected_positions.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.POSI]);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectPositions(null, null, face, ent_id);\r\n                    }\r\n                }\r\n                break;\r\n            case EEntType.VERT:\r\n                if (intersect0.object.type === 'Points') {\r\n                    let posi = 0;\r\n                    for (const m of scene.posis_map) {\r\n                        if (m[1] === intersect0.index) {\r\n                            posi = m[0];\r\n                            break;\r\n                        }\r\n                    }\r\n                    // const vert = scene.verts_idx_to_i[intersect0.index];\r\n                    // const vert = scene.vertex_map.get(intersect0.index);\r\n                    const verts = this.model.modeldata.geom.nav.navPosiToVert(posi);\r\n                    let point: number;\r\n                    if (verts.length > 1) {\r\n                        this.dropdown.setItems(verts, EEntTypeStr[EEntType.VERT]);\r\n                        this.dropdown.visible = true;\r\n                        this.dropdown.position = this.dropdownPosition;\r\n                    } else {\r\n                        let vert = 0;\r\n                        for (const m of scene.vertex_map) {\r\n                            if (m[1] === intersect0.index) {\r\n                                vert = m[0];\r\n                                break;\r\n                            }\r\n                        }\r\n                        point = vert;\r\n                    }\r\n                    const ent_id = `${EEntTypeStr[EEntType.VERT]}${point}`;\r\n                    if (scene.selected_geoms.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.VERT], true);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectVertex(point, null, null, ent_id);\r\n                    }\r\n                } else if (intersect0.object.type === 'LineSegments') {\r\n                    let edge;\r\n                    const edge_color = (<THREE.LineDashedMaterial>(<THREE.LineSegments> intersect0.object).material).color;\r\n                    if (edge_color['r'] === 1 && edge_color['b'] === 1 && edge_color['g'] === 1) {\r\n                        edge = scene.white_edge_select_map.get(intersect0.index / 2);\r\n                    } else {\r\n                        edge = scene.edge_select_map.get(intersect0.index / 2);\r\n                    }\r\n                    // const edge = scene.edge_select_map.get(intersect0.index / 2);\r\n                    const ent_id = `_e_v${edge}`;\r\n                    if (scene.selected_vertex.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.VERT]);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectVertex(null, edge, null, ent_id);\r\n                    }\r\n                } else if (intersect0.object.type === 'Mesh') {\r\n                    const tri = scene.tri_select_map.get(intersect0.faceIndex);\r\n                    const face = this.model.modeldata.geom.nav.navTriToFace(tri);\r\n                    // // const tri = scene.tri_select_map.get(intersect0.faceIndex);\r\n                    // const tri = scene.tris_select_idx_to_i[intersect0.faceIndex];\r\n                    const ent_id = `_f_v${face}`;\r\n                    if (scene.selected_vertex.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.VERT]);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectVertex(null, null, face, ent_id);\r\n                    }\r\n                }\r\n                break;\r\n            case EEntType.COLL:\r\n                if (!this.shiftKeyPressed) {\r\n                    this.unselectAll();\r\n                }\r\n                this.selectColl(intersect0, intersect0.object.type);\r\n                break;\r\n            case EEntType.FACE:\r\n                if (intersect0.object.type === 'Mesh') {\r\n                    const tri = scene.tri_select_map.get(intersect0.faceIndex);\r\n                    const face = this.model.modeldata.geom.nav.navTriToFace(tri);\r\n                    // // const tri = scene.tri_select_map.get(intersect0.faceIndex);\r\n                    // const tri = scene.tris_select_idx_to_i[intersect0.faceIndex];\r\n                    const ent_id = `${EEntTypeStr[EEntType.FACE]}${face}`;\r\n                    if (scene.selected_geoms.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.FACE], true);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectFace(face);\r\n                    }\r\n                } else {\r\n                    this.showMessages('Faces');\r\n                }\r\n                break;\r\n            case EEntType.PGON:\r\n                if (intersect0.object.type === 'Mesh') {\r\n                    const tri = scene.tri_select_map.get(intersect0.faceIndex);\r\n                    const face = this.model.modeldata.geom.nav.navTriToFace(tri);\r\n                    const pgon = this.model.modeldata.geom.nav.navFaceToPgon(face);\r\n                    // const tri = scene.tris_select_idx_to_i[intersect0.faceIndex];\r\n                    const ent_id = `${EEntTypeStr[EEntType.PGON]}${pgon}`;\r\n                    if (scene.selected_geoms.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.PGON], true);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectPGon(face);\r\n                    }\r\n                } else {\r\n                    this.showMessages('Polygons');\r\n                }\r\n                break;\r\n            case EEntType.EDGE:\r\n                if (intersect0.object.type === 'LineSegments') {\r\n                    let edge;\r\n                    const edge_color = (<THREE.LineDashedMaterial>(<THREE.LineSegments> intersect0.object).material).color;\r\n                    if (edge_color['r'] === 1 && edge_color['b'] === 1 && edge_color['g'] === 1) {\r\n                        edge = scene.white_edge_select_map.get(intersect0.index / 2);\r\n                    } else {\r\n                        edge = scene.edge_select_map.get(intersect0.index / 2);\r\n                    }\r\n                    // const edge = scene.edge_select_map.get(intersect0.index / 2);\r\n                    const ent_id = `${EEntTypeStr[EEntType.EDGE]}${edge}`;\r\n                    if (scene.selected_geoms.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.EDGE], true);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectEdge(edge);\r\n                    }\r\n                } else if (intersect0.object.type === 'Mesh') {\r\n                    const tri = scene.tri_select_map.get(intersect0.faceIndex);\r\n                    const face = this.model.modeldata.geom.nav.navTriToFace(tri);\r\n                    // const tri = scene.tris_select_idx_to_i[intersect0.faceIndex];\r\n                    const ent_id = `${EEntTypeStr[EEntType.FACE]}${face}`;\r\n                    if (scene.selected_face_edges.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, 'face_edges');\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectEdgeByFace(face, ent_id);\r\n                    }\r\n                } else {\r\n                    this.showMessages('Edges');\r\n                }\r\n                break;\r\n            case EEntType.WIRE:\r\n                if (intersect0.object.type === 'LineSegments') {\r\n                    let edge;\r\n                    const edge_color = (<THREE.LineDashedMaterial>(<THREE.LineSegments> intersect0.object).material).color;\r\n                    if (edge_color['r'] === 1 && edge_color['b'] === 1 && edge_color['g'] === 1) {\r\n                        edge = scene.white_edge_select_map.get(intersect0.index / 2);\r\n                    } else {\r\n                        edge = scene.edge_select_map.get(intersect0.index / 2);\r\n                    }\r\n                    const wire = this.model.modeldata.geom.nav.navEdgeToWire(edge);\r\n                    // const edge = scene.edge_select_map.get(intersect0.index / 2)\r\n                    // const edge = scene.edges_select_idx_to_i[intersect0.index / 2],\r\n                    const ent_id = `${EEntTypeStr[EEntType.WIRE]}${edge}`;\r\n                    if (scene.selected_geoms.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.WIRE], true);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectWire(wire);\r\n                    }\r\n                } else if (intersect0.object.type === 'Mesh') {\r\n                    const tri = scene.tri_select_map.get(intersect0.faceIndex);\r\n                    const face = this.model.modeldata.geom.nav.navTriToFace(tri);\r\n                    // const tri = scene.tris_select_idx_to_i[intersect0.faceIndex];\r\n                    const ent_id = `${EEntTypeStr[EEntType.FACE]}${face}`;\r\n                    if (scene.selected_face_wires.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, 'face_wires');\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        this.selectWireByFace(face, ent_id);\r\n                    }\r\n                } else {\r\n                    this.showMessages('Wires');\r\n                }\r\n                break;\r\n            case EEntType.PLINE:\r\n                if (intersect0.object.type === 'LineSegments') {\r\n                    let edge;\r\n                    const edge_color = (<THREE.LineDashedMaterial>(<THREE.LineSegments> intersect0.object).material).color;\r\n                    if (edge_color['r'] === 1 && edge_color['b'] === 1 && edge_color['g'] === 1) {\r\n                        edge = scene.white_edge_select_map.get(intersect0.index / 2);\r\n                    } else {\r\n                        edge = scene.edge_select_map.get(intersect0.index / 2);\r\n                    }\r\n                    // const edge = scene.edge_select_map.get(intersect0.index / 2);\r\n                    const wire = this.model.modeldata.geom.nav.navEdgeToWire(edge);\r\n                    const pline = this.model.modeldata.geom.nav.navWireToPline(wire);\r\n                    // const edge = scene.edges_select_idx_to_i[intersect0.index / 2];\r\n                    const ent_id = `${EEntTypeStr[EEntType.PLINE]}${pline}`;\r\n                    if (scene.selected_geoms.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.PLINE], true);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        if (pline !== undefined && pline !== null) {\r\n                            this.selectPLine(pline);\r\n                        } else {\r\n                            this.showMessages('Selection is not a Polyline', 'custom');\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.showMessages('Polylines');\r\n                }\r\n                break;\r\n            case EEntType.POINT:\r\n                if (intersect0.object.type === 'Points') {\r\n                    const vert = this.model.modeldata.geom.nav.navPosiToVert(intersect0.index);\r\n                    const _point = this.model.modeldata.geom.nav.navVertToPoint(vert[0]);\r\n                    const point = scene.point_select_map.get(_point);\r\n                    // const point = scene.points_select_idx_to_i[_point];\r\n                    const ent_id = `${EEntTypeStr[EEntType.POINT]}${point}`;\r\n                    if (scene.selected_geoms.has(ent_id)) {\r\n                        this.unselectGeom(ent_id, EEntTypeStr[EEntType.POINT], true);\r\n                    } else {\r\n                        if (!this.shiftKeyPressed) {\r\n                            this.unselectAll();\r\n                        }\r\n                        if (point !== undefined && point !== null) {\r\n                            this.selectPoint(point);\r\n                        } else {\r\n                            this.showMessages('Selection is not a Point', 'custom');\r\n                        }\r\n                    }\r\n                } else {\r\n                    this.showMessages('Points');\r\n                }\r\n                break;\r\n            default:\r\n                return;\r\n                this.showMessages('Please choose an Entity type.', 'custom');\r\n                break;\r\n        }\r\n        // this.activateRender();\r\n        // this.render();\r\n    }\r\n\r\n    private showMessages(msg: string, mode: string = 'notice') {\r\n        switch (mode) {\r\n            case 'custom':\r\n                this.message = msg;\r\n                break;\r\n            case 'notice':\r\n                this.message = `Please Select ${msg}`;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.messageVisible = true;\r\n        setTimeout(() => {\r\n            this.messageVisible = false;\r\n        }, 3000);\r\n    }\r\n\r\n    private selectPositions(point: number = null, edge: number = null, face: number = null, parent_ent_id: string) {\r\n        const ent_type_str = EEntTypeStr[EEntType.POSI];\r\n        const scene = this._data_threejs;\r\n        const posi_ent = this.dataService.selected_ents.get(ent_type_str);\r\n        if (point !== null) {\r\n            const position = this.model.modeldata.attribs.query.getPosiCoords(point);\r\n            const ent_id = parent_ent_id;\r\n            posi_ent.set(ent_id, point);\r\n            const labelText = this.indexAsLabel(ent_type_str, ent_id, point, EEntType.POSI);\r\n            scene.selectObjPosition(null, ent_id, position, this.container, labelText);\r\n            this.dataService.selected_positions.set(`${parent_ent_id}`, [ent_id]);\r\n        } else if (edge !== null) {\r\n            const verts = this.model.modeldata.geom.nav.navEdgeToVert(edge);\r\n            const posis = verts.map(v => this.model.modeldata.geom.nav.navVertToPosi(v));\r\n            const children = [];\r\n            posis.map(posi => {\r\n                const ent_id = `${ent_type_str}${posi}`;\r\n                const position = this.model.modeldata.attribs.query.getPosiCoords(posi);\r\n                posi_ent.set(ent_id, posi);\r\n                const labelText = this.indexAsLabel(ent_type_str, ent_id, posi, EEntType.POSI);\r\n                scene.selectObjPosition(parent_ent_id, ent_id, position, this.container, labelText);\r\n                children.push(ent_id);\r\n            });\r\n            this.dataService.selected_positions.set(`${parent_ent_id}`, children);\r\n        } else if (face !== null) {\r\n            const tris = this.model.modeldata.geom.nav.navFaceToTri(face),\r\n                posis = tris.map(tri => this.model.modeldata.geom.nav.navAnyToPosi(EEntType.TRI, tri)),\r\n                posi_flat = [].concat(...posis);\r\n\r\n            const uniqPositions = this.uniq(posi_flat);\r\n            const children = [];\r\n            uniqPositions.map(posi => {\r\n                const ent_id = `${ent_type_str}${posi}`;\r\n                const position = this.model.modeldata.attribs.query.getPosiCoords(posi);\r\n                posi_ent.set(ent_id, posi);\r\n                const labelText = this.indexAsLabel(ent_type_str, ent_id, posi, EEntType.POSI);\r\n                scene.selectObjPosition(parent_ent_id, ent_id, position, this.container, labelText);\r\n                children.push(ent_id);\r\n            });\r\n            this.dataService.selected_positions.set(`${parent_ent_id}`, children);\r\n        }\r\n    }\r\n\r\n    private uniq(a) {\r\n        const seen = {};\r\n        return a.filter(function (item) {\r\n            return seen.hasOwnProperty(item) ? false : (seen[item] = true);\r\n        });\r\n    }\r\n\r\n    private selectVertex(point: number = null, edge: number = null, face: number = null, parent_ent_id: string) {\r\n        const ent_type_str = EEntTypeStr[EEntType.VERT];\r\n        const posi_ent = this.dataService.selected_ents.get(ent_type_str);\r\n        const scene = this._data_threejs;\r\n        if (point !== null) {\r\n            const position = this.model.modeldata.attribs.query.getVertCoords(point);\r\n            const ent_id = parent_ent_id;\r\n            posi_ent.set(ent_id, point);\r\n            const labelText = this.indexAsLabel(ent_type_str, ent_id, point, EEntType.VERT);\r\n            scene.selectObjvertex(null, ent_id, position, this.container, labelText);\r\n            this.dataService.selected_vertex.set(`${parent_ent_id}`, [ent_id]);\r\n        } else if (edge !== null) {\r\n            const verts = this.model.modeldata.geom.nav.navEdgeToVert(edge);\r\n            const children = [];\r\n            verts.map(vert => {\r\n                const ent_id = `${ent_type_str}${vert}`;\r\n                const position = this.model.modeldata.attribs.query.getVertCoords(vert);\r\n                posi_ent.set(ent_id, vert);\r\n                const labelText = this.indexAsLabel(ent_type_str, ent_id, vert, EEntType.VERT);\r\n                scene.selectObjvertex(parent_ent_id, ent_id, position, this.container, labelText);\r\n                children.push(ent_id);\r\n            });\r\n            this.dataService.selected_vertex.set(`${parent_ent_id}`, children);\r\n\r\n        } else if (face !== null) {\r\n            const tris = this.model.modeldata.geom.nav.navFaceToTri(face),\r\n                verts = tris.map(tri => this.model.modeldata.geom.nav.navTriToVert(tri)),\r\n                verts_flat = [].concat(...verts);\r\n\r\n            const uniqVerts = this.uniq(verts_flat);\r\n            const children = [];\r\n            uniqVerts.map(vert => {\r\n                const ent_id = `${ent_type_str}${vert}`;\r\n                const position = this.model.modeldata.attribs.query.getVertCoords(vert);\r\n                posi_ent.set(ent_id, vert);\r\n                const labelText = this.indexAsLabel(ent_type_str, ent_id, vert, EEntType.VERT);\r\n                scene.selectObjvertex(parent_ent_id, ent_id, position, this.container, labelText);\r\n                children.push(ent_id);\r\n            });\r\n            this.dataService.selected_vertex.set(`${parent_ent_id}`, children);\r\n        }\r\n    }\r\n\r\n    private unselectGeom(ent_id: string, ent_type_str: string, direct = false) {\r\n        const scene = this._data_threejs;\r\n        if (!direct) {\r\n            if (ent_type_str === EEntTypeStr[EEntType.POSI]) {\r\n                this.unselectLabel(ent_id, ent_type_str);\r\n                scene.unselectObjGroup(ent_id, this.container, 'positions');\r\n                const children = this.dataService.selected_positions.get(ent_id);\r\n                children.forEach(c => {\r\n                    this.dataService.selected_ents.get(EEntTypeStr[EEntType.POSI]).delete(c);\r\n                });\r\n                this.dataService.selected_positions.delete(ent_id);\r\n\r\n            } else if (ent_type_str === EEntTypeStr[EEntType.VERT]) {\r\n                this.unselectLabel(ent_id, ent_type_str);\r\n                scene.unselectObjGroup(ent_id, this.container, 'vertex');\r\n                const children = this.dataService.selected_vertex.get(ent_id);\r\n                children.forEach(c => {\r\n                    this.dataService.selected_ents.get(EEntTypeStr[EEntType.VERT]).delete(c);\r\n                });\r\n                this.dataService.selected_vertex.delete(ent_id);\r\n\r\n            } else if (ent_type_str === 'face_edges') {\r\n                scene.unselectObjGroup(ent_id, this.container, 'face_edges');\r\n                const children = this.dataService.selected_face_edges.get(ent_id);\r\n                children.forEach(c => {\r\n                    this.dataService.selected_ents.get(EEntTypeStr[EEntType.EDGE]).delete(c);\r\n                });\r\n                this.dataService.selected_face_edges.delete(ent_id);\r\n\r\n            } else if (ent_type_str === 'face_wires') {\r\n                scene.unselectObjGroup(ent_id, this.container, 'face_wires');\r\n                const children = this.dataService.selected_face_wires.get(ent_id);\r\n                children.forEach(c => {\r\n                    this.dataService.selected_ents.get(EEntTypeStr[EEntType.WIRE]).delete(c);\r\n                });\r\n                this.dataService.selected_face_wires.delete(ent_id);\r\n            }\r\n        } else {\r\n            scene.unselectObj(ent_id, this.container);\r\n            this.dataService.selected_ents.get(ent_type_str).delete(ent_id);\r\n            this.unselectLabel(ent_id, ent_type_str);\r\n        }\r\n        this.refreshTable(event);\r\n    }\r\n\r\n    private unselectLabel(ent_id, ent_type_str) {\r\n        let arr = Array.from(this.dataService.selected_ents.get(ent_type_str).values());\r\n        arr = arr.filter(item => {\r\n            return item !== Number(ent_id.substr(2));\r\n        });\r\n        this.refreshLabels(ent_type_str);\r\n    }\r\n\r\n    private selectEdge(line: number) {\r\n        const ent_type_str = EEntTypeStr[EEntType.EDGE],\r\n            verts = this.model.modeldata.geom.nav.navEdgeToVert(line),\r\n            positions = verts.map(v => this.model.modeldata.attribs.query.getVertCoords(v)),\r\n            posi_flat = [].concat(...positions),\r\n            ent_id = `${ent_type_str}${line}`;\r\n        this.dataService.selected_ents.get(ent_type_str).set(ent_id, line);\r\n        const labelText = this.indexAsLabel(ent_type_str, ent_id, line, EEntType.EDGE);\r\n        this._data_threejs.selectObjLine(ent_id, [], posi_flat, this.container, labelText);\r\n    }\r\n\r\n    private selectEdgeByFace(face: number, parent_ent_id: string) {\r\n        const ent_type_str = EEntTypeStr[EEntType.EDGE],\r\n            edges = this.model.modeldata.geom.nav.navAnyToAny(EEntType.FACE, EEntType.EDGE, face);\r\n        const children = [];\r\n        edges.map(edge => {\r\n            const ent_id = `${ent_type_str}${edge}`;\r\n            children.push(ent_id);\r\n            const vert = this.model.modeldata.geom.nav.navEdgeToVert(edge);\r\n            const position = [];\r\n            const indices = [];\r\n            vert.map((v, i) => {\r\n                position.push(this.model.modeldata.attribs.query.getVertCoords(v));\r\n                indices.push(i);\r\n            });\r\n            const posi_flat = [].concat(...position);\r\n            this.dataService.selected_ents.get(ent_type_str).set(ent_id, edge);\r\n            const labelText = this.indexAsLabel(ent_type_str, ent_id, edge, EEntType.EDGE);\r\n            this._data_threejs.selectEdgeByFace(parent_ent_id, ent_id, indices, posi_flat, this.container, labelText);\r\n        });\r\n        this.dataService.selected_face_edges.set(`${parent_ent_id}`, children);\r\n    }\r\n\r\n    private selectWire(wire: number) {\r\n        const ent_type_str = EEntTypeStr[EEntType.WIRE],\r\n            edges = this.model.modeldata.geom.nav.navWireToEdge(wire),\r\n            verts = edges.map(e => this.model.modeldata.geom.nav.navEdgeToVert(e)),\r\n            verts_flat = [].concat(...[].concat(...verts)),\r\n            indices = [],\r\n            positions = [];\r\n        verts_flat.map((v, i) => {\r\n            positions.push(this.model.modeldata.attribs.query.getVertCoords(v));\r\n            indices.push(i);\r\n        });\r\n        const posi_flat = [].concat(...positions),\r\n            ent_id = `${ent_type_str}${wire}`;\r\n        this.dataService.selected_ents.get(ent_type_str).set(ent_id, wire);\r\n        const labelText = this.indexAsLabel(ent_type_str, ent_id, wire, EEntType.WIRE);\r\n        this._data_threejs.selectObjLine(ent_id, indices, posi_flat, this.container, labelText);\r\n    }\r\n\r\n    private selectWireByFace(face: number, parent_ent_id: string) {\r\n        const ent_type_str = EEntTypeStr[EEntType.WIRE],\r\n            wires = this.model.modeldata.geom.nav.navFaceToWire(face);\r\n        const children = [];\r\n        wires.map(wire => {\r\n            const ent_id = `${ent_type_str}${wire}`;\r\n            children.push(ent_id);\r\n            const edges = this.model.modeldata.geom.nav.navWireToEdge(wire),\r\n                verts = edges.map(e => this.model.modeldata.geom.nav.navEdgeToVert(e));\r\n            // @ts-ignore\r\n            const verts_flat = verts.flat(1),\r\n                indices = [],\r\n                positions = [];\r\n            verts_flat.map((v, i) => {\r\n                positions.push(this.model.modeldata.attribs.query.getVertCoords(v));\r\n                indices.push(i);\r\n            });\r\n            const posi_flat = [].concat(...positions);\r\n            this.dataService.selected_ents.get(ent_type_str).set(ent_id, wire);\r\n            const labelText = this.indexAsLabel(ent_type_str, ent_id, wire, EEntType.WIRE);\r\n            this._data_threejs.selectWireByFace(parent_ent_id, ent_id, indices, posi_flat, this.container, labelText);\r\n        });\r\n        this.dataService.selected_face_wires.set(`${parent_ent_id}`, children);\r\n    }\r\n\r\n    private selectFace(face: number) {\r\n        const ent_type_str = EEntTypeStr[EEntType.FACE],\r\n            tri = this.model.modeldata.geom.nav.navFaceToTri(face),\r\n            verts = tri.map(index => this.model.modeldata.geom.nav.navTriToVert(index)),\r\n            verts_flat = [].concat(...verts),\r\n            posis = verts_flat.map(v => this.model.modeldata.geom.nav.navAnyToPosi(EEntType.VERT, v)),\r\n            posis_flat = [].concat(...posis),\r\n            tri_indices = [],\r\n            positions = [];\r\n        posis_flat.map((posi, index) => {\r\n            positions.push(this.model.modeldata.attribs.query.getPosiCoords(posi));\r\n            tri_indices.push(index);\r\n        });\r\n        const posi_flat = [].concat(...positions),\r\n            ent_id = `${ent_type_str}${face}`;\r\n        this.dataService.selected_ents.get(ent_type_str).set(ent_id, face);\r\n        const labelText = this.indexAsLabel(ent_type_str, ent_id, face, EEntType.FACE);\r\n        this._data_threejs.selectObjFace(ent_id, tri_indices, posi_flat, this.container, labelText);\r\n    }\r\n\r\n    private indexAsLabel(ent_type_str: string, ent_id: string, id: number, type: EEntType) {\r\n        let indexAsLabel;\r\n        const showSelected = JSON.parse(sessionStorage.getItem('mpm_showSelected'));\r\n        if (showSelected) {\r\n            const sorted = sortByKey(this.dataService.selected_ents.get(ent_type_str));\r\n            const arr = Array.from(sorted.values());\r\n            indexAsLabel = String(arr.findIndex(ent => ent === id));\r\n        } else {\r\n            indexAsLabel = ent_id;\r\n            // indexAsLabel = String(this._data_threejs._model.modeldata.attribs.threejs.getIdIndex(type, id));\r\n        }\r\n        return indexAsLabel;\r\n    }\r\n\r\n    private selectPoint(point: number) {\r\n        const ent_type_str = EEntTypeStr[EEntType.POINT];\r\n        const result = this.getPointPosis(point, null);\r\n        if (result) {\r\n            const point_indices = result.point_indices;\r\n            const point_posi = result.posi_flat;\r\n            const ent_id = `${ent_type_str}${point}`;\r\n            this.dataService.selected_ents.get(ent_type_str).set(ent_id, point);\r\n            const labelText = this.indexAsLabel(ent_type_str, ent_id, point, EEntType.POINT);\r\n            this._data_threejs.selectObjPoint(ent_id, point_indices, point_posi, this.container, labelText);\r\n        }\r\n    }\r\n\r\n    private selectPLine(pline: number) {\r\n        const ent_type_str = EEntTypeStr[EEntType.PLINE];\r\n        const result = this.getPLinePosis(pline);\r\n        const ent_id = `${ent_type_str}${pline}`;\r\n        if (result) {\r\n            const posi_flat = result.posi_flat;\r\n            const indices = result.indices;\r\n            this.dataService.selected_ents.get(ent_type_str).set(ent_id, pline);\r\n            const labelText = this.indexAsLabel(ent_type_str, ent_id, pline, EEntType.PLINE);\r\n            this._data_threejs.selectObjLine(ent_id, indices, posi_flat, this.container, labelText);\r\n        } else {\r\n            this.showMessages('Please Select a Polyline', 'custom');\r\n        }\r\n    }\r\n\r\n    private selectPGon(face: number) {\r\n        const ent_type_str = EEntTypeStr[EEntType.PGON];\r\n        const result = this.getPGonPosis(face);\r\n        if (result) {\r\n            const posi_flat = result.posi_flat;\r\n            const tri_indices = result.indices;\r\n\r\n            const ent_id = `${ent_type_str}${face}`;\r\n            this.dataService.selected_ents.get(ent_type_str).set(ent_id, face);\r\n            const labelText = this.indexAsLabel(ent_type_str, ent_id, face, EEntType.PGON);\r\n            this._data_threejs.selectObjFace(ent_id, tri_indices, posi_flat, this.container, labelText);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get point positions for collections\r\n     * @param points\r\n     */\r\n\r\n    private getPointPosis(point1: number = null, points: number[] = null) {\r\n        let verts_flat: number[] = null;\r\n        if (point1 !== null) {\r\n            verts_flat = [this.model.modeldata.geom.nav.navPointToVert(point1)];\r\n        }\r\n        if (points !== null) {\r\n            const verts = points.map(p => this.model.modeldata.geom.nav.navPointToVert(p));\r\n            verts_flat = [].concat(...verts);\r\n        }\r\n\r\n        const point_indices: number[] = [];\r\n        const positions: Txyz[] = [];\r\n        verts_flat.map((v, i) => {\r\n            positions.push(this.model.modeldata.attribs.query.getPosiCoords(v));\r\n            point_indices.push(i);\r\n        });\r\n        const posi_flat = [].concat(...positions);\r\n        const result = { posi_flat, point_indices };\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * get pline positions for selectPLine or collections\r\n     * @param wire1\r\n     * @param plines\r\n     */\r\n\r\n    private getPLinePosis(pline1: number = null, plines: number[] = null) {\r\n        let wires_flat: number[] = null;\r\n        if (pline1 !== null) {\r\n            wires_flat = [this.model.modeldata.geom.nav.navPlineToWire(pline1)];\r\n        }\r\n        if (plines !== null) {\r\n            const wires = plines.map(pl => this.model.modeldata.geom.nav.navPlineToWire(pl));\r\n            wires_flat = [].concat(...wires);\r\n        }\r\n\r\n        const edges = wires_flat.map(w => this.model.modeldata.geom.nav.navWireToEdge(w));\r\n        const edges_flat = [].concat(...edges);\r\n        const verts = edges_flat.map(e => this.model.modeldata.geom.nav.navEdgeToVert(e));\r\n        const verts_flat = [].concat(...[].concat(...verts));\r\n        const indices = [];\r\n        const positions = [];\r\n        verts_flat.map((v, i) => {\r\n            positions.push(this.model.modeldata.attribs.query.getVertCoords(v));\r\n            indices.push(i);\r\n        });\r\n        const posi_flat = [].concat(...positions);\r\n        const result = { posi_flat, indices };\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * get pgon positions for selectPGon or collections\r\n     * @param face1\r\n     * @param pgons\r\n     */\r\n\r\n    private getPGonPosis(face1: number = null, pgons: number[] = null) {\r\n        let faces_flat: number[] = null;\r\n        if (face1 !== null) {\r\n            const _pgon = this.model.modeldata.geom.nav.navFaceToPgon(face1);\r\n            if (_pgon === undefined) {\r\n                return null;\r\n            }\r\n            faces_flat = [this.model.modeldata.geom.nav.navPgonToFace(_pgon)];\r\n        }\r\n        if (pgons !== null) {\r\n            const faces = pgons.map(pgon => this.model.modeldata.geom.nav.navPgonToFace(pgon));\r\n            faces_flat = [].concat(...faces);\r\n        }\r\n        const tris = faces_flat.map(face => this.model.modeldata.geom.nav.navFaceToTri(face));\r\n        const tris_flat = [].concat(...tris);\r\n        const verts = tris_flat.map(tri => this.model.modeldata.geom.nav.navTriToVert(tri));\r\n        const verts_flat = [].concat(...verts);\r\n        const posis = verts_flat.map(v => this.model.modeldata.geom.nav.navAnyToPosi(EEntType.VERT, v));\r\n        const posis_flat = [].concat(...posis);\r\n        const indices = [];\r\n        const positions = [];\r\n        posis_flat.map((posi, index) => {\r\n            positions.push(this.model.modeldata.attribs.query.getPosiCoords(posi));\r\n            indices.push(index);\r\n        });\r\n        const posi_flat = [].concat(...positions);\r\n        const result = { posi_flat, indices };\r\n        return result;\r\n    }\r\n\r\n    private selectColl(object: THREE.Intersection, type) {\r\n        let colls = [];\r\n        if (type === 'Mesh') {\r\n            const tri = this._data_threejs.tri_select_map.get(object.faceIndex);\r\n            colls = this.model.modeldata.geom.nav.navAnyToColl(EEntType.TRI, tri);\r\n        } else if (type === 'LineSegments') {\r\n            let edge;\r\n            const edge_color = (<THREE.LineDashedMaterial>(<THREE.LineSegments> object.object).material).color;\r\n            if (edge_color['r'] === 1 && edge_color['b'] === 1 && edge_color['g'] === 1) {\r\n                edge = this._data_threejs.white_edge_select_map.get(object.index / 2);\r\n            } else {\r\n                edge = this._data_threejs.edge_select_map.get(object.index / 2);\r\n            }\r\n            colls = this.model.modeldata.geom.nav.navAnyToColl(EEntType.EDGE, edge);\r\n        } else if (type === 'Points') {\r\n            const vert = this.model.modeldata.geom.nav.navPosiToVert(object.index);\r\n            const point = this.model.modeldata.geom.nav.navVertToPoint(vert[0]);\r\n            colls = this.model.modeldata.geom.nav.navAnyToColl(EEntType.POINT, point);\r\n        }\r\n        /**\r\n         * Show dropdown menu only when Entity belongs to more than 1 Collection.\r\n         */\r\n        if (this.dataService.selected_ents.get(EEntTypeStr[EEntType.COLL]).size === 0 && colls.length > 1) {\r\n            this.dropdown.setItems(colls, 'co');\r\n            this.dropdown.visible = true;\r\n            this.dropdown.position = this.dropdownPosition;\r\n        } else if (colls && colls.length === 1) {\r\n            this.chooseColl(colls[0]);\r\n        } else {\r\n            this.showMessages('No Collections Available', 'custom');\r\n        }\r\n    }\r\n\r\n    private chooseColl(id: number) {\r\n        const scene = this._data_threejs;\r\n        const coll_id = `${EEntTypeStr[EEntType.COLL]}${id}`;\r\n        const children = [];\r\n        const pgons = this.model.modeldata.geom.nav.navCollToPgon(id);\r\n        const pgons_flat = [].concat(...pgons);\r\n        let labelText = this.indexAsLabel(EEntTypeStr[EEntType.COLL], coll_id, id, EEntType.COLL);\r\n\r\n        if (pgons_flat.length) {\r\n            const pgonResult = this.getPGonPosis(null, pgons_flat);\r\n            const pgons_posi = pgonResult.posi_flat;\r\n            const pgons_indices = pgonResult.indices;\r\n\r\n            if (pgons_indices.length !== 0) {\r\n                // const attrib_val = this.model.modeldata.attribs.query.getAttribValue(EEntType.COLL, EAttribNames.NAME, id);\r\n                // const selecting = attrib_val ? attrib_val.toString() : `${EEntType.COLL}${id}`;\r\n                const pgon_id = `${EEntTypeStr[EEntType.COLL]}_pg_${id}`;\r\n                scene.selectObjFace(coll_id, pgons_indices, pgons_posi, this.container, labelText);\r\n                children.push(pgon_id);\r\n                labelText = false;\r\n            }\r\n        }\r\n\r\n        const plines = this.model.modeldata.geom.nav.navCollToPline(id);\r\n        const plines_flat = [].concat(...plines);\r\n        if (plines_flat.length) {\r\n            const plineResult = this.getPLinePosis(null, plines_flat);\r\n            const plines_posi = plineResult.posi_flat;\r\n            const plines_indices = plineResult.indices;\r\n            if (plines_indices.length !== 0) {\r\n                const pline_id = `${EEntTypeStr[EEntType.COLL]}_pl_${id}`;\r\n                scene.selectObjLine(coll_id, plines_indices, plines_posi, this.container, labelText);\r\n                children.push(pline_id);\r\n                labelText = false;\r\n            }\r\n        }\r\n\r\n        const points = this.model.modeldata.geom.nav.navCollToPoint(id);\r\n        const points_flat = [].concat(...points);\r\n        if (points_flat.length) {\r\n            const pointResult = this.getPointPosis(null, points_flat);\r\n            const point_posi = pointResult.posi_flat;\r\n            const point_indices = pointResult.point_indices;\r\n            if (point_indices.length !== 0) {\r\n                const point_id = `${EEntTypeStr[EEntType.COLL]}_pt_${id}`;\r\n                scene.selectObjPoint(coll_id, point_indices, point_posi, this.container, labelText);\r\n                children.push(point_id);\r\n                labelText = false;\r\n            }\r\n        }\r\n\r\n        this.dataService.selected_ents.get(EEntTypeStr[EEntType.COLL]).set(coll_id, id);\r\n        this.dataService.selected_coll.set(coll_id, children);\r\n        // this.refreshTable(null);\r\n    }\r\n\r\n    private chooseVertex(id: number) {\r\n        const ent_type_str = EEntTypeStr[EEntType.VERT];\r\n        const posi_ent = this.dataService.selected_ents.get(ent_type_str);\r\n        const scene = this._data_threejs;\r\n        const date = new Date(), timestamp = date.getTime();\r\n        const position = this.model.modeldata.attribs.query.getVertCoords(id);\r\n        const ent_id = `${ent_type_str}${id}`;\r\n        const labelText = this.indexAsLabel(ent_type_str, ent_id, id, EEntType.VERT);\r\n        scene.selectObjvertex(`_single_v${timestamp}`, ent_id, position, this.container, labelText);\r\n        posi_ent.set(ent_id, id);\r\n        this.dataService.selected_vertex.set(`_single_v${timestamp}`, [ent_id]);\r\n        this.refreshTable(null);\r\n    }\r\n\r\n    public zoomfit() {\r\n        // if (JSON.stringify(this._data_threejs._threejs_nums) === JSON.stringify([0, 0, 0])) {\r\n        //     return;\r\n        // }\r\n        if (this._data_threejs.currentCamera === 'Persp') {\r\n            this._data_threejs.lookAtObj();\r\n        } else {\r\n            this._data_threejs.orthoLookatObj();\r\n        }\r\n    }\r\n\r\n    private EntTypeToStr(ent_type: EEntType) {\r\n        return EEntTypeStr[ent_type];\r\n    }\r\n\r\n    enableSelect() {\r\n        return this.selections.length > 1;\r\n    }\r\n\r\n    private selectEntityType(selection: { id: number, name: string }) {\r\n        this.SelectingEntityType = selection;\r\n        localStorage.setItem('mpm_selecting_entity_type', JSON.stringify(selection));\r\n\r\n        const settings = JSON.parse(localStorage.getItem('mpm_settings'));\r\n        if (settings !== undefined && selection) {\r\n            settings.select.selector = selection;\r\n            localStorage.setItem('mpm_settings', JSON.stringify(settings));\r\n        }\r\n        this.selectDropdownVisible = false;\r\n    }\r\n\r\n    public openCredits(event) {\r\n        event.stopPropagation();\r\n        const el = document.getElementById('openCredits');\r\n        if (el) {\r\n            el.click();\r\n        }\r\n    }\r\n\r\n    switchCamera() {\r\n        this._data_threejs.switchCamera();\r\n        setTimeout(() => {\r\n            this.activateRender();\r\n        }, 0);\r\n    }\r\n\r\n    selectEntity(id: number) {\r\n        if (this.SelectingEntityType.id === EEntType.COLL) {\r\n            this.chooseColl(id);\r\n        } else if (this.SelectingEntityType.id === EEntType.VERT) {\r\n            this.chooseVertex(id);\r\n        }\r\n        // not sure why but this has to be done\r\n        for (let i = 0; i < 5; i++) {\r\n            setTimeout(() => {\r\n                this.activateRender();\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    getMaxNodeSelect() {\r\n        if (this._data_threejs.timeline_groups) {\r\n            return this._data_threejs.timeline_groups.length - 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    getSliderWidth() {\r\n        let width = 10;\r\n        for (const g of this._data_threejs.timeline_groups) {\r\n            width += g.length * 7 + 5;\r\n        }\r\n        return width + 'px';\r\n    }\r\n\r\n    changeNodeSlider(event: Event) {\r\n        const nodeSelInput = <HTMLInputElement> document.getElementById('hidden_node_selection');\r\n        nodeSelInput.value = this._data_threejs.timeline_groups[(<HTMLInputElement> event.target).value];\r\n        (<HTMLButtonElement> document.getElementById('hidden_node_selection_button')).click();\r\n    }\r\n\r\n    changeNodeDropdown(event: Event) {\r\n        const nodeSelInput = <HTMLInputElement> document.getElementById('hidden_node_selection');\r\n        nodeSelInput.value = (<HTMLInputElement> event.target).value;\r\n        (<HTMLButtonElement> document.getElementById('hidden_node_selection_button')).click();\r\n    }\r\n\r\n\r\n    @HostListener('document:mouseleave', [])\r\n    onmouseleave() {\r\n        this._data_threejs.controls.saveState();\r\n        this._data_threejs.controls.reset();\r\n    }\r\n\r\n}\r\n\r\nenum mouseLabel {\r\n    Mesh = 'Polygon',\r\n    LineSegments = 'Polyline/',\r\n    Points = 'Point/Position'\r\n}\r\n","import { DataThreejs } from '../data/data.threejs';\r\nexport class ThreeJSViewerService {\r\n    DataThreejs: DataThreejs;\r\n    initRaycaster(event) {\r\n        const scene = this.DataThreejs;\r\n        const rect = scene.renderer.domElement.getBoundingClientRect();\r\n        scene.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n        scene.mouse.y = - ((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n        scene.raycaster.setFromCamera(scene.mouse, scene.camera);\r\n        const precision = 0.01 * scene.controls.target.distanceTo( scene.controls.object.position );\r\n        scene.raycaster.params.Line.threshold = precision;\r\n        scene.raycaster.params.Points.threshold = precision;\r\n        return scene.raycaster.intersectObjects(scene.scene_objs);\r\n    }\r\n}\r\n","import {__new__, __merge__} from './modules/_model';\r\nimport { GIMetaData } from '@assets/libs/geo-info/GIMetaData';\r\n\r\nexport const _parameterTypes = {\r\n    constList: '__constList__',\r\n    model: '__model__',\r\n    input: '__input__',\r\n    console: '__console__',\r\n    fileName: '__fileName__',\r\n\r\n    new: '_model.__new__',\r\n    newFn: __new__,\r\n\r\n    newMeta: GIMetaData,\r\n\r\n    merge: '_model.__merge__',\r\n    mergeFn: __merge__,\r\n\r\n    addData: '_model.addGiData',\r\n\r\n    preprocess: '_model.__preprocess__',\r\n    postprocess: '_model.__postprocess__',\r\n\r\n    setattrib: 'attrib.Set',\r\n    getattrib: 'attrib.Get',\r\n    queryGet: 'query.Get',\r\n    queryFilter: 'query.Filter',\r\n\r\n    select: '_model.__select__',\r\n\r\n    return: '_Output.Return',\r\n\r\n    asyncFuncs: ['util.ModelCompare',\r\n                'io.Write', 'io.Read',\r\n                'io.Import', 'io.Export']\r\n};\r\n\r\nexport const _varString = `\r\nPI = Math.PI;\r\nXY = __modules__._constants.XY;\r\nYZ = __modules__._constants.YZ;\r\nZX = __modules__._constants.ZX;\r\nYX = __modules__._constants.YX;\r\nZY = __modules__._constants.ZY;\r\nXZ = __modules__._constants.XZ;\r\nisNum = __modules__._types.isNum;\r\nisInt = __modules__._types.isInt;\r\nisFlt = __modules__._types.isFlt;\r\nisBool = __modules__._types.isBool;\r\nisStr = __modules__._types.isStr;\r\nisList = __modules__._types.isList;\r\nisDict = __modules__._types.isDict;\r\nisVec2 = __modules__._types.isVec2;\r\nisVec3 = __modules__._types.isVec3;\r\nisCol = __modules__._types.isCol;\r\nisRay = __modules__._types.isRay;\r\nisPln = __modules__._types.isPln;\r\nisNaN = __modules__._types.isNaN;\r\nisNull = __modules__._types.isNull;\r\nisUndef = __modules__._types.isUndef;\r\nstrRepl = __modules__._strs.strRepl;\r\nstrUpp = __modules__._strs.strUpp;\r\nstrLow = __modules__._strs.strLow;\r\nstrTrim = __modules__._strs.strTrim;\r\nstrTrimR = __modules__._strs.strTrimR;\r\nstrTrimL = __modules__._strs.strTrimL;\r\nstrSub = __modules__._strs.strSub;\r\nstrStarts = __modules__._strs.strStarts;\r\nstrEnds = __modules__._strs.strEnds;\r\nstrPadL = __modules__._strs.strPadL;\r\nstrPadR = __modules__._strs.strPadR;\r\nisApprox = __modules__._util.isApprox;\r\nisIn = __modules__._util.isIn;\r\nisWithin = __modules__._util.isWithin;\r\nmin = __modules__._math.min;\r\nmax = __modules__._math.max;\r\npow = Math.pow;\r\nsqrt = Math.sqrt;\r\nexp = Math.exp;\r\nlog = Math.log;\r\nround = __modules__._math.round;\r\nsigFig = __modules__._math.sigFig;\r\nceil = Math.ceil;\r\nfloor = Math.floor;\r\nabs = Math.abs;\r\nsin = Math.sin;\r\nasin = Math.asin;\r\nsinh = Math.sinh;\r\nasinh = Math.asinh;\r\ncos = Math.cos;\r\nacos = Math.acos;\r\ncosh = Math.cosh;\r\nacosh = Math.acosh;\r\ntan = Math.tan;\r\natan = Math.atan;\r\ntanh = Math.tanh;\r\natanh = Math.atanh;\r\natan2 = Math.atan2;\r\nboolean = __modules__._mathjs.boolean;\r\nnumber = __modules__._mathjs.number;\r\nstring = __modules__._mathjs.string;\r\nmad = __modules__._mathjs.mad;\r\nmean = __modules__._mathjs.mean;\r\nmedian = __modules__._mathjs.median;\r\nmode = __modules__._mathjs.mode;\r\nprod = __modules__._mathjs.prod;\r\nstd = __modules__._mathjs.std;\r\nvari = __modules__._mathjs.var;\r\nsum = __modules__._mathjs.sum;\r\nhypot = __modules__._mathjs.hypot;\r\nnorm = __modules__._mathjs.norm;\r\nmod = __modules__._mathjs.mod;\r\nsquare = __modules__._mathjs.square;\r\ncube = __modules__._mathjs.cube;\r\nremap = __modules__._arithmetic.remap;\r\ndistance = __modules__._geometry.distance;\r\ndistanceM = __modules__._geometry.distanceM;\r\ndistanceMS = __modules__._geometry.distanceMS;\r\nintersect = __modules__._geometry.intersect;\r\nproject = __modules__._geometry.project;\r\nrange = __modules__._list.range;\r\nisList = __modules__._list.isList;\r\nlen = __modules__._list.listLen;\r\nlistLen = __modules__._list.listLen;\r\nlistCount = __modules__._list.listCount;\r\nlistCopy = __modules__._list.listCopy;\r\nlistRep = __modules__._list.listRep;\r\nlistLast = __modules__._list.listLast;\r\nlistGet = __modules__._list.listGet;\r\nlistFind = __modules__._list.listFind;\r\nlistHas = __modules__._list.listHas;\r\nlistJoin = __modules__._list.listJoin;\r\nlistFlat = __modules__._list.listFlat;\r\nlistSlice = __modules__._list.listSlice;\r\nlistCull = __modules__._list.listCull;\r\nlistZip = __modules__._list.listZip;\r\nlistZip2 = __modules__._list.listZip2;\r\nsetMake = __modules__._set.setMake;\r\nsetUni = __modules__._set.setUni;\r\nsetInt = __modules__._set.setInt;\r\nsetDif = __modules__._set.setDif;\r\nlength = __modules__._list.length;\r\nshuffle = __modules__._list.shuffle;\r\nconcat = __modules__._list.concat;\r\nzip = __modules__._list.zip;\r\nzip2 = __modules__._list.zip2;\r\nvecAdd = __modules__._vec.vecAdd;\r\nvecSub = __modules__._vec.vecSub;\r\nvecDiv = __modules__._vec.vecDiv;\r\nvecMult = __modules__._vec.vecMult;\r\nvecSum = __modules__._vec.vecSum;\r\nvecLen = __modules__._vec.vecLen;\r\nvecSetLen = __modules__._vec.vecSetLen;\r\nvecNorm = __modules__._vec.vecNorm;\r\nvecRev = __modules__._vec.vecRev;\r\nvecFromTo = __modules__._vec.vecFromTo;\r\nvecAng = __modules__._vec.vecAng;\r\nvecAng2 = __modules__._vec.vecAng2;\r\nvecDot = __modules__._vec.vecDot;\r\nvecCross = __modules__._vec.vecCross;\r\nvecEqual = __modules__._vec.vecEqual;\r\nvecLtoG = __modules__._vec.vecLtoG;\r\nvecGtoL = __modules__._vec.vecGtoL;\r\nplnMake = __modules__._plane.plnMake;\r\nplnCopy = __modules__._plane.plnCopy;\r\nplnMove = __modules__._plane.plnMove;\r\nplnRot = __modules__._plane.plnRot;\r\nplnLMove = __modules__._plane.plnLMove;\r\nplnLRotX = __modules__._plane.plnLRotX;\r\nplnLRotY = __modules__._plane.plnLRotY;\r\nplnLRotZ = __modules__._plane.plnLRotZ;\r\nrayMake = __modules__._ray.rayMake;\r\nrayCopy = __modules__._ray.rayCopy;\r\nrayMove = __modules__._ray.rayMove;\r\nrayRot = __modules__._ray.rayRot;\r\nrayLMove = __modules__._ray.rayLMove;\r\nrayFromPln = __modules__._ray.rayFromPln;\r\nrayLtoG = __modules__._ray.rayLtoG;\r\nrayGtoL = __modules__._ray.rayGtoL;\r\ncolFalse = __modules__._colors.colFalse;\r\ncolScale = __modules__._colors.colScale;\r\nradToDeg = __modules__._conversion.radToDeg;\r\ndegToRad = __modules__._conversion.degToRad;\r\nnumToStr = __modules__._conversion.numToStr;\r\nrand = __modules__._rand.rand;\r\nrandInt = __modules__._rand.randInt;\r\nrandPick = __modules__._rand.randPick;\r\nsetattr = __modules__._model.__setAttrib__;\r\ngetattr = __modules__._model.__getAttrib__;\r\n`;\r\n","export function remap(num: number|number[], d1: number[], d2: number[]): number|number[] {\r\n    if (Array.isArray(num)) { return num.map(num_val => remap(num_val, d1, d2)) as number[]; }\r\n    return ( d2[0] +\r\n        (\r\n            ((num - d1[0]) / (d1[1] - d1[0])) * (d2[1] - d2[0])\r\n        )\r\n    );\r\n}\r\n","import * as ch from 'chroma-js';\r\nimport { TColor } from '@libs/geo-info/common';\r\n\r\nconst false_col  = ch.scale(['blue', 'cyan', 'green', 'yellow', 'red']);\r\n\r\nexport function colFalse(vals: number|number[], min: number, max: number): TColor|TColor[] {\r\n    const col_domain  = false_col.domain([min, max]);\r\n    if (!Array.isArray(vals)) {\r\n        const col = col_domain(vals).gl();\r\n        return [col[0], col[1], col[2]];\r\n    } else {\r\n        const cols: TColor[] = [];\r\n        for (const val of vals) {\r\n            const col = col_domain(val).gl();\r\n            cols.push( [col[0], col[1], col[2]] );\r\n        }\r\n        return cols;\r\n    }\r\n}\r\n\r\nexport function colScale(vals: number|number[], min: number, max: number, scale: any): TColor|TColor[] {\r\n    const col_scale  = ch.scale(scale);\r\n    const col_domain  = col_scale.domain([min, max]);\r\n    if (!Array.isArray(vals)) {\r\n        const col = col_domain(vals).gl();\r\n        return [col[0], col[1], col[2]];\r\n    } else {\r\n        const cols: TColor[] = [];\r\n        for (const val of vals) {\r\n            const col = col_domain(val).gl();\r\n            cols.push( [col[0], col[1], col[2]] );\r\n        }\r\n        return cols;\r\n    }\r\n}\r\n","import {XYPLANE, YZPLANE, ZXPLANE, YXPLANE, ZYPLANE, XZPLANE } from '@libs/geo-info/common';\r\n\r\nexport const XY = XYPLANE;\r\nexport const YZ = YZPLANE;\r\nexport const ZX = ZXPLANE;\r\n\r\nexport const YX = YXPLANE;\r\nexport const ZY = ZYPLANE;\r\nexport const XZ = XZPLANE;\r\n","import { getArrDepth2 } from '@assets/libs/util/arrs';\r\n\r\nexport function radToDeg(rad: number|number[]): number|number[] {\r\n    if (Array.isArray(rad)) { return rad.map(a_rad => radToDeg(a_rad)) as number[]; }\r\n    return rad * (180 / Math.PI);\r\n}\r\nexport function degToRad(deg: number|number[]): number|number[] {\r\n    if (Array.isArray(deg)) { return deg.map(a_deg => degToRad(a_deg)) as number[]; }\r\n    return deg * (Math.PI / 180);\r\n}\r\nexport function numToStr(num: number|number[], frac_digits?: number, locale?: string): string|string[] {\r\n    if (Array.isArray(num)) {\r\n        for (let i = 0; i < num.length; i++) {\r\n            num[i] = typeof num === 'number' ? num : Number(num);\r\n        }\r\n    } else {\r\n        num = typeof num === 'number' ? num : Number(num);\r\n    }\r\n    const options = {};\r\n    if (frac_digits !== undefined) { options['maximumFractionDigits'] = frac_digits; options['minimumFractionDigits'] = frac_digits; }\r\n    locale = locale === undefined ? 'en-GB' : locale;\r\n    if (Array.isArray(num)) { return num.map(a_num => a_num.toLocaleString(locale, options)) as string[]; }\r\n    return num.toLocaleString(locale, options) as string;\r\n}\r\nexport function numToCurr(num: number|number[], currency: string, locale?: string): string|string[] {\r\n    if (Array.isArray(num)) {\r\n        for (let i = 0; i < num.length; i++) {\r\n            num[i] = typeof num === 'number' ? num : Number(num);\r\n        }\r\n    } else {\r\n        num = typeof num === 'number' ? num : Number(num);\r\n    }\r\n    const options = {};\r\n    options['style'] = 'currency';\r\n    options['currency'] = currency;\r\n    locale = locale === undefined ? 'en-GB' : locale;\r\n    if (Array.isArray(num)) { return num.map(a_num => a_num.toLocaleString(locale, options)) as string[]; }\r\n    return num.toLocaleString(locale, options) as string;\r\n}\r\n","import * as isect from '@libs/geom/intersect';\r\nimport * as dist from '@libs/geom/distance';\r\n\r\nexport const intersect = isect.intersect;\r\nexport const project = isect.project;\r\nexport const distance = dist.distance;\r\nexport const distanceM = dist.distanceManhattan;\r\nexport const distanceMS = dist.distanceManhattanSq;","/**\r\n * list functions that obtain and return information from an input list. Does not modify input list.\r\n */\r\nimport { arrMakeFlat } from '@libs/util/arrs';\r\n\r\nexport function range(start: number, end?: number, step?: number): number[] {\r\n    if (start === undefined) { throw new Error('Invalid inline arg: min must be defined.'); }\r\n    if (end === undefined) { end = start; start = 0; }\r\n    if (step === 0) { throw new Error('Invalid inline arg: step must not be 0.'); }\r\n    const len: number = end - start;\r\n    if (step === undefined) {\r\n        step = len > 0 ? 1 : -1;\r\n    }\r\n    const negStep = step < 0;\r\n    if (len > 0 !== step > 0) { return []; }\r\n    const list: number[] = [];\r\n    let current: number = start;\r\n    while (current !== end && (current < end) !== negStep) {\r\n        list.push(current);\r\n        current += step;\r\n    }\r\n    return list;\r\n}\r\n\r\nexport function isList(list: any): boolean {\r\n    return Array.isArray(list);\r\n}\r\n\r\nexport function listLen(list: any[]): number {\r\n    return list.length;\r\n}\r\n\r\nexport function listCount(list: any[], val: any): number {\r\n    let count = 0;\r\n    for (let i = 0; i < list.length; i++) {\r\n        if (list[i] === val) {\r\n            count += 1;\r\n        }\r\n    }\r\n    return count;\r\n}\r\n\r\nexport function listCopy(list: any[]): any[] {\r\n    return list.slice();\r\n}\r\n\r\nexport function listRep(list: any[], n: number): any[] {\r\n    list = Array.isArray(list) ? list : [list];\r\n    const result: any[] = [];\r\n    for (let i = 0; i < n; i++) {\r\n        for (let j = 0; j < list.length; j++) {\r\n            result.push(list[j]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function listLast(list: any[]): number {\r\n    return list[list.length - 1];\r\n}\r\n\r\nexport function listGet(list: any[], index: number|number[]): any|any[] {\r\n    if (Array.isArray(index)) { return index.map( i => listGet(list, i)) as any[]; }\r\n    if (index < 0) { index = list.length + index; }\r\n    return list[index] as any;\r\n}\r\n\r\nexport function listFind(list: any[], val: any): number {\r\n    const index = list.indexOf(val);\r\n    if (index === -1) {\r\n        return null;\r\n    }\r\n    return index;\r\n}\r\n\r\nexport function listHas(list: any[], val: any): boolean {\r\n    for (let i = list.length - 1; i >= 0; i--) {\r\n        if (list[i] === val) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function listJoin(list1: any[], list2: any[]): any[] {\r\n    if (!Array.isArray(list1)) { list1 = [list1]; }\r\n    if (!Array.isArray(list2)) { list2 = [list2]; }\r\n    return list1.concat(list2);\r\n}\r\n\r\nexport function listFlat(list: any[], depth?: number): any[] {\r\n    if (depth !== undefined) {\r\n        // @ts-ignore\r\n        return list.flat(depth);\r\n    }\r\n    return arrMakeFlat(list);\r\n}\r\n\r\nexport function listSlice(list: any[], start: number, end?: number): any[] {\r\n    return list.slice(start, end);\r\n}\r\n\r\nexport function listCull(list: any[], list2?: any[]): any[] {\r\n    list2 = list2 ? list2 : list;\r\n    const result: any[] = [];\r\n    const list2_len =  list2.length;\r\n    for (let i = 0; i < list.length; i++) {\r\n        const val = (i < list2_len) ? list2[i] : list2[i % list2_len];\r\n        if (val) {\r\n            result.push(list[i]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function listZip(lists: any[][]): any[] {\r\n    const shortest = lists.length === 0 ? [] : lists.reduce((a, b) => {\r\n        return a.length < b.length ? a : b;\r\n    });\r\n    return shortest.map((_, i) => lists.map(array => array[i] ));\r\n}\r\n\r\nexport function listZip2(lists: any[][]): any[] {\r\n    const longest = lists.length === 0 ? [] : lists.reduce((a, b) => {\r\n        return a.length > b.length ? a : b;\r\n    });\r\n    return longest.map((_, i) => lists.map(array => array[i] ));\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// =============================== DEPRECATED\r\n\r\nexport function shuffle(list: any[]): any[] {\r\n    console.log('WARNING: This function has been deprecated. Please use the list.Sort() function, and select random.');\r\n    const new_list: any[] = list.slice();\r\n    new_list.sort(() => .5 - Math.random());\r\n    return new_list;\r\n}\r\n\r\nexport function zip(lists: any[][]): any[] {\r\n    console.log('WARNING: This function has been deprecated. Please use the inline listZip() function.');\r\n    return listZip(lists);\r\n}\r\n\r\nexport function zip2(lists: any[][]): any[] {\r\n    console.log('WARNING: This function has been deprecated. Please use the inline listZip2() function.');\r\n    return listZip2(lists);\r\n}\r\n\r\nexport function length(list: any[]): number {\r\n    if (list === undefined) { throw new Error('Invalid inline arg: list must be defined.'); }\r\n    return list.length;\r\n}\r\n","export function min(list: any): any {\r\n    const args = Array.prototype.slice.call (arguments, min.length);\r\n    if (args.length === 0) {\r\n        if (list.constructor === [].constructor) {\r\n            return Math.min.apply(Math, list);\r\n        }\r\n        return list;\r\n    }\r\n    args.push(list);\r\n    return Math.min.apply(Math, args);\r\n}\r\n// max(1,2,3)\r\n// max([1,2,3])\r\nexport function max(list: any): any {\r\n    const args = Array.prototype.slice.call (arguments, min.length);\r\n    if (args.length === 0) {\r\n        if (list.constructor === [].constructor) {\r\n            return Math.max.apply(Math, list);\r\n        }\r\n        return list;\r\n    }\r\n    args.push(list);\r\n    return Math.max.apply(Math, args);\r\n}\r\nexport function round(num: number|number[], decimal_places = 0): number|number[] {\r\n    if (Array.isArray(num)) {\r\n        return num.map( a_num => round(a_num, decimal_places) ) as number[];\r\n    }\r\n    num = num as number;\r\n    if (decimal_places === 0) { return Math.round(num); }\r\n    if (decimal_places > 0) {\r\n        const dec: number = Math.pow(10, decimal_places);\r\n        return Math.round(num * dec) / dec;\r\n    } else {\r\n        const dec: number = Math.pow(10, Math.abs(decimal_places));\r\n        return Math.round(num / dec) * dec;\r\n    }\r\n}\r\nexport function sigFig(num: number|number[], sig_figs: number): number|number[] {\r\n    if (Array.isArray(num)) {\r\n        return num.map( a_num => sigFig(a_num, sig_figs) ) as number[];\r\n    }\r\n    if (num === 0) { return 0; }\r\n    num = num as number;\r\n    const round_val: number = sig_figs - 1 - Math.floor(Math.log10(Math.abs(num)));\r\n    return round(num, round_val) as number;\r\n    // return parseFloat(num.toPrecision(sig_figs));\r\n}\r\n","import * as Mathjs from 'mathjs';\r\n\r\nexport const boolean = Mathjs.boolean;\r\nexport const number = Mathjs.number;\r\nexport const string = Mathjs.string;\r\nexport const mad = Mathjs.mad;\r\nexport const mean = Mathjs.mean;\r\nexport const median = Mathjs.median;\r\nexport const mode = Mathjs.mode;\r\nexport const prod = Mathjs.prod;\r\nexport const std = Mathjs.std;\r\nexport const vari = Mathjs.var;\r\nexport const sum = Mathjs.sum;\r\nexport const hypot = Mathjs.hypot;\r\nexport const norm = Mathjs.norm;\r\nexport const mod = Mathjs.mod;\r\nexport const square = Mathjs.square;\r\nexport const cube = Mathjs.cube;\r\nexport const distance = Mathjs.distance;\r\nexport const intersect = Mathjs.intersect;\r\nexport const random = Mathjs.random;\r\nexport const randomInt = Mathjs.randomInt;\r\nexport const pickRandom = Mathjs.pickRandom;\r\n","import { TPlane, TRay, Txyz, Txy } from '@assets/libs/geo-info/common';\r\nimport { vecCross, vecMult, vecsAdd, vecRot, vecNorm, vecMakeOrtho, vecAdd, vecFromTo, vecDot } from '@assets/libs/geom/vectors';\r\nimport { getArrDepth2 } from '@assets/libs/util/arrs';\r\n\r\n/**\r\n * Plane functions that modify planes. These functions do not modify input plane.\r\n *\r\n * Overloaded:\r\n * - origin[], x_vec,   xy_vec\r\n * - origin,   x_vec[], xy_vec[]\r\n * - origin[], x_vec[], xy_vec[]\r\n */\r\n\r\nexport function plnMake(origin: Txyz|Txyz[], x_vec: Txyz|Txyz[], xy_vec: Txyz|Txyz[]): TPlane|TPlane[] {\r\n    // overloaded case\r\n    const origin_dep: number = getArrDepth2(origin);\r\n    const x_vec_dep: number = getArrDepth2(x_vec);\r\n    const xy_vec_dep: number = getArrDepth2(xy_vec);\r\n    if (origin_dep === 2 || x_vec_dep === 2) {\r\n        if (x_vec_dep === 1) {\r\n            // only origin is Txyz[]\r\n            return (origin as Txyz[]).map( origin_val => plnMake(origin_val as Txyz, x_vec as Txyz, xy_vec as Txyz) as TPlane);\r\n        } else if (origin_dep === 1) {\r\n            // only x_vec and xy_vec are Txyz[], they must be equal length\r\n            if (xy_vec_dep === 2 && x_vec.length === xy_vec.length) {\r\n                const vecs: TPlane[] = [];\r\n                for (let i = 0; i < origin.length; i++) {\r\n                    vecs.push( plnMake(origin as Txyz, x_vec[i] as Txyz, xy_vec[i] as Txyz) as TPlane );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error('Error making planes with lists of vectors: The x_vec and xy_vec lists must be of equal length.');\r\n            }\r\n        } else {\r\n            // all origin, x_vec and xy_vec are Txyz[], they must be equal length\r\n            if (origin.length === x_vec.length && origin.length === xy_vec.length) {\r\n                const vecs: TPlane[] = [];\r\n                for (let i = 0; i < origin.length; i++) {\r\n                    vecs.push( plnMake(origin[i] as Txyz, x_vec[i] as Txyz, xy_vec[i] as Txyz) as TPlane );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error('Error making planes with lists of vectors: The three lists must be of equal length.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, both origin and x_vec and xy_vec are Txyz\r\n    const x_axis: Txyz = vecNorm(x_vec as Txyz);\r\n    const y_axis: Txyz = vecNorm(vecMakeOrtho(xy_vec as Txyz, x_vec as Txyz));\r\n    return [origin.slice() as Txyz, x_axis, y_axis] as TPlane;\r\n}\r\n\r\nexport function plnCopy(pln: TPlane|TPlane[]): TPlane|TPlane[] {\r\n    // overloaded case\r\n    const pln_dep: number = getArrDepth2(pln);\r\n    if (pln_dep === 3) { return (pln as TPlane[]).map(pln_one => plnCopy(pln_one)) as TPlane[]; }\r\n    // normal case\r\n    pln = pln as TPlane;\r\n    return [pln[0].slice() as Txyz, pln[1].slice() as Txyz, pln[2].slice() as Txyz];\r\n}\r\n\r\nexport function plnMove(pln: TPlane|TPlane[], vec: Txyz|Txyz[]): TPlane|TPlane[] {\r\n    // overloaded case\r\n    const pln_dep: number = getArrDepth2(pln);\r\n    const vec_dep: number = getArrDepth2(vec);\r\n    if (pln_dep === 3) {\r\n        pln = pln as TPlane[];\r\n        if (vec_dep === 1) {\r\n            vec = vec as Txyz;\r\n            return pln.map(pln_one => plnMove(pln_one, vec)) as TPlane[];\r\n        } else if (vec_dep === 2 && pln.length === vec.length) {\r\n            vec = vec as Txyz[];\r\n            const planes: TPlane[] = [];\r\n            for (let i = 0; i < pln.length; i++) {\r\n                planes.push( plnMove(pln[i], vec[i]) as TPlane );\r\n            }\r\n        } else {\r\n            throw new Error('Error moving a list planes with a list of vectors: The two lists must be of equal length.');\r\n        }\r\n    }\r\n    // normal case\r\n    pln = pln as TPlane;\r\n    vec = vec as Txyz;\r\n    return [vecAdd(pln[0], vec), pln[1].slice() as Txyz, pln[2].slice() as Txyz];\r\n}\r\n\r\nexport function plnRot(pln: TPlane|TPlane[], ray: TRay|TRay[], ang: number|number[]): TPlane|TPlane[] {\r\n    // overloaded case\r\n    const pln_dep: number = getArrDepth2(pln);\r\n    const ray_dep: number = getArrDepth2(ray);\r\n    const ang_dep: number = getArrDepth2(ang);\r\n    if (pln_dep === 3) {\r\n        pln = pln as TPlane[];\r\n        if (ray_dep === 2 && ang_dep === 0) {\r\n            ray = ray as TRay;\r\n            ang = ang as number;\r\n            return pln.map(pln_one => plnRot(pln_one, ray, ang)) as TPlane[];\r\n        } else if (ray_dep === 3 && ang_dep === 1 && pln.length === ray.length && pln.length === (ang as number[]).length) {\r\n            ray = ray as TRay[];\r\n            ang = ang as number[];\r\n            const planes: TPlane[] = [];\r\n            for (let i = 0; i < pln.length; i++) {\r\n                planes.push( plnRot(pln[i], ray[i], ang[i]) as TPlane );\r\n            }\r\n            return planes as TPlane[];\r\n        } else {\r\n            throw new Error('Error rotating a list planes with a list of rays and angles: The three lists must be of equal length.');\r\n        }\r\n    }\r\n    // normal case\r\n    pln = pln as TPlane;\r\n    ray = ray as TRay;\r\n    ang = ang as number;\r\n    const from_ray_o_to_pln_o: Txyz = vecFromTo(ray[0], pln[0]);\r\n    const rot_pln_origin: Txyz = vecAdd(ray[0], vecRot(from_ray_o_to_pln_o, ray[1], ang));\r\n    return [rot_pln_origin, vecRot(pln[1], ray[1], ang), vecRot(pln[2], ray[1], ang)];\r\n}\r\n\r\nexport function plnLMove(pln: TPlane|TPlane[], vec: Txyz|Txyz[]): TPlane|TPlane[] {\r\n    // overloaded case\r\n    const pln_dep: number = getArrDepth2(pln);\r\n    const vec_dep: number = getArrDepth2(vec);\r\n    if (pln_dep === 3) {\r\n        pln = pln as TPlane[];\r\n        if (vec_dep === 1) {\r\n            vec = vec as Txyz;\r\n            return pln.map(pln_one => plnMove(pln_one, vec)) as TPlane[];\r\n        } else if (vec_dep === 2 && pln.length === vec.length) {\r\n            vec = vec as Txyz[];\r\n            const planes: TPlane[] = [];\r\n            for (let i = 0; i < pln.length; i++) {\r\n                planes.push( plnMove(pln[i], vec[i]) as TPlane );\r\n            }\r\n        } else {\r\n            throw new Error('Error moving a list planes with a list of vectors: The two lists must be of equal length.');\r\n        }\r\n    }\r\n    // normal case\r\n    pln = pln as TPlane;\r\n    vec = vec as Txyz;\r\n    const z_vec: Txyz = vecCross(pln[1], pln[2]);\r\n    const x_move_vec: Txyz = vecMult(pln[1], vec[0]);\r\n    const y_move_vec: Txyz = vecMult(pln[2], vec[1]);\r\n    const z_move_vec: Txyz = vecMult(z_vec, vec[2]);\r\n    const origin: Txyz = vecsAdd([pln[0], x_move_vec, y_move_vec, z_move_vec], false);\r\n    return [origin, pln[1].slice() as Txyz, pln[2].slice() as Txyz];\r\n}\r\n\r\nexport function plnLRotX(pln: TPlane|TPlane[], ang: number|number[]): TPlane|TPlane[] {\r\n    // overloaded case\r\n    const pln_dep: number = getArrDepth2(pln);\r\n    const ang_dep: number = getArrDepth2(ang);\r\n    if (pln_dep === 3) {\r\n        pln = pln as TPlane[];\r\n        if (ang_dep === 0) {\r\n            // many pln, one ang\r\n            ang = ang as number;\r\n            return pln.map(pln_one => plnLRotX(pln_one, ang)) as TPlane[];\r\n        } else if (ang_dep === 12 && pln.length === (ang as number[]).length) {\r\n            // many pln, many ang\r\n            ang = ang as number[];\r\n            const planes: TPlane[] = [];\r\n            for (let i = 0; i < pln.length; i++) {\r\n                planes.push( plnLRotX(pln[i], ang[i]) as TPlane );\r\n            }\r\n            return planes as TPlane[];\r\n        } else {\r\n            throw new Error('Error rotating a list planes with a list of angles: The two lists must be of equal length.');\r\n        }\r\n    }\r\n    // normal case\r\n    pln = pln as TPlane;\r\n    ang = ang as number;\r\n    const y_axis: Txyz = vecRot(pln[2], pln[1], ang);\r\n    return [pln[0].slice() as Txyz, pln[1].slice() as Txyz, y_axis];\r\n}\r\n\r\nexport function plnLRotY(pln: TPlane|TPlane[], ang: number|number[]): TPlane|TPlane[] {\r\n    // overloaded case\r\n    const pln_dep: number = getArrDepth2(pln);\r\n    const ang_dep: number = getArrDepth2(ang);\r\n    if (pln_dep === 3) {\r\n        pln = pln as TPlane[];\r\n        if (ang_dep === 0) {\r\n            // many pln, one ang\r\n            ang = ang as number;\r\n            return pln.map(pln_one => plnLRotY(pln_one, ang)) as TPlane[];\r\n        } else if (ang_dep === 1 && pln.length === (ang as number[]).length) {\r\n            // many pln, many ang\r\n            ang = ang as number[];\r\n            const planes: TPlane[] = [];\r\n            for (let i = 0; i < pln.length; i++) {\r\n                planes.push( plnLRotY(pln[i], ang[i]) as TPlane );\r\n            }\r\n            return planes as TPlane[];\r\n        } else {\r\n            throw new Error('Error rotating a list planes with a list of angles: The two lists must be of equal length.');\r\n        }\r\n    }\r\n    // normal case\r\n    pln = pln as TPlane;\r\n    ang = ang as number;\r\n    const x_axis: Txyz = vecRot(pln[1], pln[2], ang);\r\n    return [pln[0].slice() as Txyz, x_axis, pln[2].slice() as Txyz];\r\n}\r\n\r\nexport function plnLRotZ(pln: TPlane|TPlane[], ang: number|number[]): TPlane|TPlane[] {\r\n    // overloaded case\r\n    const pln_dep: number = getArrDepth2(pln);\r\n    const ang_dep: number = getArrDepth2(ang);\r\n    if (pln_dep === 3) {\r\n        pln = pln as TPlane[];\r\n        if (ang_dep === 0) {\r\n            // many pln, one ang\r\n            ang = ang as number;\r\n            return pln.map(pln_one => plnLRotZ(pln_one, ang)) as TPlane[];\r\n        } else if (ang_dep === 1 && pln.length === (ang as number[]).length) {\r\n            // many pln, many ang\r\n            ang = ang as number[];\r\n            const planes: TPlane[] = [];\r\n            for (let i = 0; i < pln.length; i++) {\r\n                planes.push( plnLRotZ(pln[i], ang[i]) as TPlane );\r\n            }\r\n            return planes as TPlane[];\r\n        } else {\r\n            throw new Error('Error rotating a list planes with a list of angles: The two lists must be of equal length.');\r\n        }\r\n    }\r\n    // normal case\r\n    pln = pln as TPlane;\r\n    ang = ang as number;\r\n    const z_vec: Txyz = vecCross(pln[1], pln[2]);\r\n    const x_axis: Txyz = vecRot(pln[1], z_vec, ang);\r\n    const y_axis: Txyz = vecRot(pln[2], z_vec, ang);\r\n    return [pln[0].slice() as Txyz, x_axis, y_axis];\r\n}\r\n\r\nexport function plnFromRay(ray: TRay|TRay[]): TPlane|TPlane[] {\r\n    // overloaded case\r\n    const ray_dep: number = getArrDepth2(ray);\r\n    if (ray_dep === 3) { return (ray as TRay[]).map( ray_one => plnFromRay(ray_one) ) as TPlane[]; }\r\n    // normal case\r\n    ray = ray as TRay;\r\n    const z_vec: Txyz = vecNorm(ray[1]);\r\n    let vec: Txyz = [0, 0, 1];\r\n    if (vecDot(vec, z_vec) === 1) {\r\n        vec = [1, 0, 0];\r\n    }\r\n    const x_axis: Txyz = vecCross(vec, z_vec);\r\n    const y_axis: Txyz = vecCross(x_axis, z_vec);\r\n    return [ray[0].slice() as Txyz, x_axis, y_axis];\r\n}\r\n","import * as mathjs from 'mathjs';\r\n\r\nexport function rand(min: number, max: number, seed?: number): number {\r\n    if (seed !== undefined) {\r\n        return min + (_randWithSeed(seed) * (max - min));\r\n    } else {\r\n        return mathjs.random(min, max);\r\n    }\r\n}\r\nexport function randInt(min: number, max: number, seed?: number): number {\r\n    if (seed !== undefined) {\r\n        return Math.floor(min + (_randWithSeed(seed) * (max - min)));\r\n    } else {\r\n        return mathjs.randomInt(min, max);\r\n    }\r\n}\r\nexport function randPick(list: any[], num: number, seed?: number): number[] {\r\n    const list_copy: any[] = list.slice();\r\n    _randShuffleWithSeed(list_copy, seed);\r\n    return list_copy.slice(0, num);\r\n}\r\n// TODO is there a better random function than this?\r\nfunction _randWithSeed(s: number): number {\r\n    // const x = (Math.sin(s) + Math.sin(s * Math.E / 2) + Math.sin((s + 1) * (Math.PI / 3))) * 10000;\r\n    // return x - Math.floor(x);\r\n\r\n    // return (Math.sin(s / 2 + 1) + Math.cos(s + 2) * 5) * 10000 % 1;\r\n    // https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript\r\n    /* tslint:disable */\r\n    var x = Math.sin(s++) * 10000;\r\n    return x - Math.floor(x);\r\n    //return (2**31-1&(s=Math.imul(48271,s)))/2**31;\r\n    /* tslint:enable */\r\n}\r\nfunction _randShuffleWithSeed(arr: any[], s?: number) {\r\n    let ctr = arr.length;\r\n    while (ctr > 0) {\r\n        const r: number = (s === undefined) ? Math.random() : _randWithSeed(ctr + s);\r\n        const index: number = Math.floor(r * ctr);\r\n        ctr--;\r\n        const temp: number = arr[ctr];\r\n        arr[ctr] = arr[index];\r\n        arr[index] = temp;\r\n    }\r\n    return arr;\r\n}\r\n\r\n","import { TRay, TPlane, Txyz } from '@assets/libs/geo-info/common';\r\nimport { vecCross, vecMult, vecsAdd, vecSetLen, vecNorm, vecAdd, vecRot, vecFromTo, vecSub } from '@assets/libs/geom/vectors';\r\nimport { getArrDepth2 } from '@assets/libs/util/arrs';\r\nimport { multMatrix, xformMatrix } from '@assets/libs/geom/matrix';\r\n\r\n/**\r\n * Ray functions that modify rays. These functions do not modify input ray.\r\n *\r\n * The function is overloaded.\r\n */\r\nexport function rayMake(origin: Txyz|Txyz[], dir: Txyz|Txyz[], len?: number): TRay|TRay[] {\r\n    // overloaded case\r\n    const origin_dep: number = getArrDepth2(origin);\r\n    const dir_dep: number = getArrDepth2(dir);\r\n    if (origin_dep === 2 || dir_dep === 2) {\r\n        if (dir_dep === 1) {\r\n            // only origin is Txyz[]\r\n            return (origin as Txyz[]).map( origin_val => rayMake(origin_val as Txyz, dir as Txyz, len) as TRay);\r\n        } else if (origin_dep === 1) {\r\n            // only dir is Txyz[]\r\n            return (dir as Txyz[]).map( dir_val => rayMake(origin as Txyz, dir_val as Txyz, len) as TRay);\r\n        } else {\r\n            // both origin and dir are Txyz[], they must be equal length\r\n            if (origin.length === dir.length) {\r\n                const vecs: TRay[] = [];\r\n                for (let i = 0; i < origin.length; i++) {\r\n                    vecs.push( rayMake(origin[i] as Txyz, dir[i] as Txyz, len) as TRay );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error('Error making rays with lists of vectors: The two lists must be of equal length.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, both origin and dir are Txyz\r\n    const ray_vec: Txyz = len ? vecSetLen(dir as Txyz, len) : dir as Txyz;\r\n    return [origin.slice() as Txyz, ray_vec];\r\n}\r\n\r\nexport function rayCopy(ray: TRay|TRay[]): TRay|TRay[] {\r\n    // overloaded case\r\n    const ray_dep: number = getArrDepth2(ray);\r\n    if (ray_dep === 3) { return (ray as TRay[]).map(ray_one => rayCopy(ray_one)) as TRay[]; }\r\n    // normal case\r\n    return [ray[0].slice() as Txyz, ray[1].slice() as Txyz];\r\n}\r\n\r\nexport function rayMove(ray: TRay|TRay[], vec: Txyz|Txyz[]): TRay|TRay[] {\r\n    // overloaded case\r\n    const ray_dep: number = getArrDepth2(ray);\r\n    const vec_dep: number = getArrDepth2(vec);\r\n    if (ray_dep === 3) {\r\n        ray = ray as TRay[];\r\n        if (vec_dep === 1) {\r\n            vec = vec as Txyz;\r\n            return ray.map(ray_one => rayMove(ray_one, vec)) as TRay[];\r\n        } else if (vec_dep === 2 && ray.length === vec.length) {\r\n            vec = vec as Txyz[];\r\n            const rays: TRay[] = [];\r\n            for (let i = 0; i < ray.length; i++) {\r\n                rays.push( rayMove(ray[i], vec[i]) as TRay );\r\n            }\r\n        } else {\r\n            throw new Error('Error moving a list rays with a list of vectors: The two lists must be of equal length.');\r\n        }\r\n    }\r\n    // normal case\r\n    ray = ray as TRay;\r\n    vec = vec as Txyz;\r\n    return [vecAdd(ray[0], vec), ray[1].slice() as Txyz];\r\n}\r\n\r\nexport function rayRot(ray1: TRay|TRay[], ray2: TRay|TRay[], ang: number|number[]): TRay|TRay[] {\r\n    // overloaded case\r\n    const ray1_dep: number = getArrDepth2(ray1);\r\n    const ray2_dep: number = getArrDepth2(ray2);\r\n    const ang_dep: number = getArrDepth2(ang);\r\n    if (ray1_dep === 3) {\r\n        ray1 = ray1 as TRay[];\r\n        if (ray2_dep === 2 && ang_dep === 0) {\r\n            ray2 = ray2 as TRay;\r\n            ang = ang as number;\r\n            return ray1.map(ray1_one => rayRot(ray1_one, ray2, ang)) as TRay[];\r\n        } else if (ray2_dep === 3 && ang_dep === 1 && ray1.length === ray2.length && ray1.length === (ang as number[]).length) {\r\n            ray2 = ray2 as TRay[];\r\n            ang = ang as number[];\r\n            const rays: TRay[] = [];\r\n            for (let i = 0; i < ray1.length; i++) {\r\n                rays.push( rayRot(ray1[i], ray2[i], ang[i]) as TRay );\r\n            }\r\n            return rays as TRay[];\r\n        } else {\r\n            throw new Error('Error rotating a list planes with a list of ray2s and angles: The three lists must be of equal length.');\r\n        }\r\n    }\r\n    // normal case\r\n    ray1 = ray1 as TRay;\r\n    ray2 = ray2 as TRay;\r\n    ang = ang as number;\r\n    const from_ray2_o_to_ray1_o: Txyz = vecFromTo(ray2[0], ray1[0]);\r\n    const rot_ray1_origin: Txyz = vecAdd(ray2[0], vecRot(from_ray2_o_to_ray1_o, ray2[1], ang));\r\n    return [rot_ray1_origin, vecRot(ray1[1], ray2[1], ang)];\r\n}\r\n\r\nexport function rayLMove(ray: TRay|TRay[], dist: number|number[]): TRay|TRay[] {\r\n    // overloaded case\r\n    const ray_dep: number = getArrDepth2(ray);\r\n    const dist_dep: number = getArrDepth2(dist);\r\n    if (ray_dep === 3) {\r\n        ray = ray as TRay[];\r\n        if (dist_dep === 0) {\r\n            dist = dist as number;\r\n            return ray.map(ray_one => rayLMove(ray_one, dist)) as TRay[];\r\n        } else if (dist_dep === 1 && ray.length === (dist as number[]).length) {\r\n            dist = dist as number[];\r\n            const rays: TRay[] = [];\r\n            for (let i = 0; i < ray.length; i++) {\r\n                rays.push( rayLMove(ray[i], dist[i]) as TRay );\r\n            }\r\n        } else {\r\n            throw new Error('Error moving a list rays with a list of distances: The two lists must be of equal length.');\r\n        }\r\n    }\r\n    // normal case\r\n    ray = ray as TRay;\r\n    dist = dist as number;\r\n    const vec: Txyz = vecMult(vecNorm(ray[1]), dist);\r\n    return [vecAdd(ray[0], vec), ray[1].slice() as Txyz];\r\n}\r\n\r\nexport function rayFromPln(pln: TPlane|TPlane[]): TRay|TRay[] {\r\n    // overloaded case\r\n    const pln_dep: number = getArrDepth2(pln);\r\n    if (pln_dep === 3) { return (pln as TPlane[]).map( pln_one => rayFromPln(pln_one) ) as TRay[]; }\r\n    // normal case\r\n    pln = pln as TPlane;\r\n    return [pln[0].slice() as Txyz, vecCross(pln[1], pln[2])];\r\n}\r\n// ================================================================================================\r\nexport function rayLtoG(r: TRay|TRay[], p: TPlane|TPlane[]): TRay|TRay[] {\r\n    return rayXForm(r, p, true);\r\n}\r\nexport function rayGtoL(r: TRay|TRay[], p: TPlane|TPlane[]): TRay|TRay[] {\r\n    return rayXForm(r, p, false);\r\n}\r\nfunction rayXForm(r: TRay|TRay[], p: TPlane|TPlane[], to_global: boolean): TRay|TRay[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(r);\r\n    const depth2: number = getArrDepth2(p);\r\n    if (depth1 === 2 && depth2 === 2) {\r\n        // r is TRay and p is TPlane\r\n        r = r as TRay;\r\n        p = p as TPlane;\r\n        const p2: TPlane = [[0, 0, 0], p[1], p[2]];\r\n        const origin: Txyz = multMatrix(r[0], xformMatrix(p, to_global));\r\n        const dir: Txyz = multMatrix(r[1], xformMatrix(p2, to_global));\r\n        return [origin, dir] as TRay;\r\n    } else if (depth1 === 3 && depth2 === 2) {\r\n        // r is TRay[] and p is TPlane\r\n        r = r as TRay[];\r\n        p = p as TPlane;\r\n        const p2: TPlane = [[0, 0, 0], p[1], p[2]];\r\n        const m = xformMatrix(p as TPlane, to_global);\r\n        const m2 = xformMatrix(p2 as TPlane, to_global);\r\n        const result: TRay[] = [];\r\n        for (const a_r of r) {\r\n            const origin: Txyz = multMatrix(a_r[0], m);\r\n            const dir: Txyz = multMatrix(a_r[1], m2);\r\n            result.push([origin, dir]);\r\n        }\r\n        return result;\r\n    } else if (depth1 === 2 && depth2 === 3) {\r\n        // r is TRay and p is TPlane[]\r\n        r = r as TRay;\r\n        p = p as TPlane[];\r\n        const result: TRay[] = [];\r\n        for (const a_p of p) {\r\n            const p2: TPlane = [[0, 0, 0], a_p[1], a_p[2]];\r\n            const origin: Txyz = multMatrix(r[0], xformMatrix(a_p, to_global));\r\n            const dir: Txyz = multMatrix(r[1], xformMatrix(p2, to_global));\r\n            result.push([origin, dir]);\r\n        }\r\n        return result;\r\n    } else if (depth1 === 3 && depth2 === 3) {\r\n        // r is TRay[] p is TPlane[], they must be equal length\r\n        r = r as TRay[];\r\n        p = p as TPlane[];\r\n        if (r.length !== p.length) {\r\n            throw new Error(\r\n                'Error transforming rays: The list of rays and list of planes must be of equal length.');\r\n        }\r\n        const result: TRay[] = [];\r\n        for (let i = 0; i < r.length; i++) {\r\n            const p2: TPlane = [[0, 0, 0], p[i][1], p[i][2]];\r\n            const origin: Txyz = multMatrix(r[i][0], xformMatrix(p[i], to_global));\r\n            const dir: Txyz = multMatrix(r[i][1], xformMatrix(p2, to_global));\r\n            result.push([origin, dir]);\r\n        }\r\n        return result;\r\n    }\r\n    throw new Error(\r\n        'Error transforming rays: Cannot process the input lists.');\r\n}\r\n","/**\r\n * Set functions for working with sets, using lists as a data structure. Does not modify input list.\r\n */\r\n\r\nimport * as Mathjs from 'mathjs';\r\n\r\nexport function setMake(list: any[]): any[] {\r\n    return Array.from(new Set(list));\r\n}\r\n\r\nexport function setUni(list1: any[], list2: any[]): any[] {\r\n    return Mathjs.setUnion(list1, list2);\r\n}\r\n\r\nexport function setInt(list1: any[], list2: any[]): any[] {\r\n    return Mathjs.setIntersect(list1, list2);\r\n}\r\n\r\nexport function setDif(list1: any[], list2: any[]): any[] {\r\n    return Mathjs.setDifference(list1, list2);\r\n}\r\n","/**\r\n * Functions to work with strings.\r\n */\r\n\r\nimport { getArrDepth2 } from \"@assets/libs/util/arrs\";\r\n\r\n// ['strRepl(s,search,new)', 'Replace all instances of specified search string with a new string.'],\r\n// ['strUpp(s), 'Converts all the alphabetic characters in a string to uppercase.']\r\n// ['strLow(s), 'Converts all the alphabetic characters in a string to lowercase.']\r\n// ['strTrim(s), 'Removes the leading and trailing white space and line terminator characters from a string.\r\n// ['strTrimL(s), 'Removes whitespace from the left end of a string.\r\n// ['strTrimR(s), 'Removes whitespace from the right end of a string.\r\n// ['strPadL(s1, m), 'Pads the start of the s1 string with white spaces so that the resulting string reaches a given length.\r\n// ['strPadL(s1, m, s2), 'Pads the start of the s1 string with the s2 string so that the resulting string reaches a given length.\r\n// ['strPadR(s1, m), 'Pads the end of the s1 string with white spaces so that the resulting string reaches a given length.\r\n// ['strPadR(s1, m, s2), 'Pads the end of the s1 string with the s2 string so that the resulting string reaches a given length.\r\n// ['strSub(s, from), 'Gets a substring beginning at the specified location.\r\n// ['strSub(s, from, length), 'Gets a substring beginning at the specified location and having the specified length.\r\n// ['strStarts(s1, s2), 'Returns true if the string s1 starts with s3, false otherwise.\r\n// ['strEnds(s1, s2), 'Returns true if the string s1 ends with s3, false otherwise.\r\n\r\n\r\nexport function strRepl(str: string|string[], search_str: string, new_str: string): string|string[] {\r\n    if (Array.isArray(str)) { return str.map(a_str => a_str.replace(search_str, new_str)); }\r\n    return str.replace(search_str, new_str);\r\n}\r\nexport function strUpp(str: string|string[]): string|string[] {\r\n    if (Array.isArray(str)) { return str.map(a_str => a_str.toUpperCase()); }\r\n    return str.toUpperCase();\r\n}\r\nexport function strLow(str: string|string[]): string|string[] {\r\n    if (Array.isArray(str)) { return str.map(a_str => a_str.toLowerCase()); }\r\n    return str.toLowerCase();\r\n}\r\nexport function strTrim(str: string|string[]): string|string[] {\r\n    if (Array.isArray(str)) { return str.map(a_str => a_str.trim()); }\r\n    return str.trim();\r\n}\r\nexport function strTrimR(str: string|string[]): string|string[] {\r\n    if (Array.isArray(str)) { return str.map(a_str => a_str.trimRight()); }\r\n    return str.trimRight();\r\n}\r\nexport function strTrimL(str: string|string[]): string|string[] {\r\n    if (Array.isArray(str)) { return str.map(a_str => a_str.trimLeft()); }\r\n    return str.trimLeft();\r\n}\r\nexport function strPadL(str: string|string[], max: number, fill?: string): string|string[] {\r\n    if (Array.isArray(str)) { return str.map(a_str => a_str.padStart(max, fill)); }\r\n    return str.padStart(max, fill);\r\n}\r\nexport function strPadR(str: string|string[], max: number, fill?: string): string|string[] {\r\n    if (Array.isArray(str)) { return str.map(a_str => a_str.padEnd(max, fill)); }\r\n    return str.padEnd(max, fill);\r\n}\r\nexport function strSub(str: string|string[], from: number, length?: number): string|string[] {\r\n    if (Array.isArray(str)) { return str.map(a_str => a_str.substr(from, length)); }\r\n    return str.substr(from, length);\r\n}\r\nexport function strStarts(str: string|string[], starts: string): boolean|boolean[] {\r\n    if (Array.isArray(str)) { return str.map(a_str => a_str.startsWith(starts)); }\r\n    return str.startsWith(starts);\r\n}\r\nexport function strEnds(str: string|string[], ends: string): boolean|boolean[] {\r\n    if (Array.isArray(str)) { return str.map(a_str => a_str.endsWith(ends)); }\r\n    return str.endsWith(ends);\r\n}\r\n","/**\r\n * Functions to check types.\r\n */\r\n\r\n// ['isNum(v)', 'Returns true if the value is a number, false otherwise.'],\r\n// ['isInt(v)', 'Returns true if the value is a integer, false otherwise.'],\r\n// ['isFlt(v)', 'Returns true if the value is a floating point number, false otherwise.'],\r\n// ['isBool(v)', 'Returns true if the value is a boolean, false otherwise.'],\r\n// ['isStr(v)', 'Returns true if the value is a string, false otherwise.'],\r\n// ['isList(v)', 'Returns true if the value is a list, false otherwise.'],\r\n// ['isDict(v)', 'Returns true if the value is a dictionary, false otherwise.'],\r\n// ['isVec2(v)', 'Returns true if the value is a list of two numbers, false otherwise.'],\r\n// ['isVec3(v)', 'Returns true if the value is a list of three numbers, false otherwise.'],\r\n// ['isCol(v)', 'Returns true if the value is a list of three numbers in the range [0, 1], false otherwise.'],\r\n// ['isRay(v)', 'Returns true if the value is a ray, false otherwise.'],\r\n// ['isPln(v)', 'Returns true if the value is a plane, false otherwise.'],\r\n// ['isNaN(v)', 'Returns true is the value is not a number (NaN), false otherwise.'],\r\n// ['isNull(v)', 'Returns true is the value is null, false otherwise.'],\r\n// ['isUndef(v)', 'Returns true is the value is undefined, false otherwise.'],\r\n\r\nexport function isNum(v: any): boolean {\r\n    return typeof v === 'number';\r\n}\r\nexport function isInt(v: any): boolean {\r\n    return Number.isInteger(v);\r\n}\r\nexport function isFlt(v: any): boolean {\r\n    // return !Number.isNaN(v) && v % 1 > 0;\r\n    return typeof v === 'number';\r\n}\r\nexport function isBool(v: any): boolean {\r\n    return typeof v === 'boolean';\r\n}\r\nexport function isStr(v: any): boolean {\r\n    return typeof v === 'string';\r\n}\r\nexport function isList(v: any): boolean {\r\n    return Array.isArray(v);\r\n}\r\nexport function isDict(v: any): boolean {\r\n    // return typeof v === 'object' && !Array.isArray(v);\r\n    return v.constructor === Object;\r\n}\r\nexport function isVec2(v: any): boolean {\r\n    return Array.isArray(v) && v.length === 2 &&\r\n        typeof v[0] === 'number' && typeof v[1] === 'number';\r\n}\r\nexport function isVec3(v: any): boolean {\r\n    return Array.isArray(v) && v.length === 3 &&\r\n        typeof v[0] === 'number' && typeof v[1] === 'number' && typeof v[2] === 'number';\r\n}\r\nexport function isCol(v: any): boolean {\r\n    return isVec3(v) && isWithin(0, v[0], 1) && isWithin(0, v[1], 1) && isWithin(0, v[2], 1);\r\n}\r\nexport function isRay(v: any): boolean {\r\n    return Array.isArray(v) && v.length === 2 && isVec3(v[0]) && isVec3(v[1]);\r\n}\r\nexport function isPln(v: any): boolean {\r\n    return Array.isArray(v) && v.length === 3 && isVec3(v[0]) && isVec3(v[1]) && isVec3(v[2]);\r\n}\r\nexport function isNaN(v: any): boolean {\r\n    return Number.isNaN(v);\r\n}\r\nexport function isNull(v: any): boolean {\r\n    return v === null;\r\n}\r\nexport function isUndef(v: any): boolean {\r\n    return v === undefined;\r\n}\r\nexport function isIn(v1: any, v2: any, v3: any): boolean {\r\n    return typeof v1 === 'number' && typeof v2 === 'number' && typeof v3 === 'number' &&\r\n    v1 < v2 && v2 < v3;\r\n}\r\nexport function isWithin(v1: any, v2: any, v3: any): boolean {\r\n    return typeof v1 === 'number' && typeof v2 === 'number' && typeof v3 === 'number' &&\r\n    v1 <= v2 && v2 <= v3;\r\n}\r\n","export function isApprox(n1: number, n2: number, t: number) {\r\n    return Math.abs(n1 - n2) < t;\r\n}\r\nexport function isIn(v1: any, v2: any, v3: any): boolean {\r\n    return typeof v1 === 'number' && typeof v2 === 'number' && typeof v3 === 'number' &&\r\n    v1 < v2 && v2 < v3;\r\n}\r\nexport function isWithin(v1: any, v2: any, v3: any): boolean {\r\n    return typeof v1 === 'number' && typeof v2 === 'number' && typeof v3 === 'number' &&\r\n    v1 <= v2 && v2 <= v3;\r\n}\r\n","import * as vec from '@libs/geom/vectors';\r\nimport { Txyz, TPlane } from '@assets/libs/geo-info/common';\r\nimport { getArrDepth2 } from '@assets/libs/util/arrs';\r\nimport { xformMatrix, multMatrix } from '@assets/libs/geom/matrix';\r\n\r\n// export const vecAdd = vec.vecAdd;\r\n// export const vecSub = vec.vecSub;\r\n// export const vecDiv = vec.vecDiv;\r\n// export const vecMult = vec.vecMult;\r\n// export const vecSetLen = vec.vecSetLen;\r\n// export const vecDot = vec.vecDot;\r\n// export const vecCross = vec.vecCross;\r\n// export const vecAng = vec.vecAng;\r\n// export const vecFromTo = vec.vecFromTo;\r\n// export const vecEqual = vec.vecEqual;\r\n// export const vecAng2 = vec.vecAng2;\r\n// export const vecRot = vec.vecRot;\r\n// export const vecLen = vec.vecLen;\r\n// export const vecNorm = vec.vecNorm;\r\n// export const vecRev = vec.vecRev;\r\n\r\n// Overloaded vector functions\r\n// ================================================================================================\r\nexport function vecSum(...v: Txyz[]): Txyz {\r\n    const depth1: number = getArrDepth2(v);\r\n    if (depth1 > 2) {\r\n        // @ts-ignore\r\n        v = v.slice().flat(depth1 - 2);\r\n    } else if (depth1 < 2) {\r\n        throw new Error('Error summing vectors: The vectors are bad.' + JSON.stringify(v));\r\n    }\r\n    // return the sum\r\n    return vec.vecSum(v, false) as Txyz;\r\n}\r\n// ================================================================================================\r\nexport function vecAdd(v1: Txyz|Txyz[], v2: Txyz|Txyz[], norm: boolean = false): Txyz|Txyz[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v1);\r\n    const depth2: number = getArrDepth2(v2);\r\n    if (depth1 === 2 || depth2 === 2) {\r\n        if (depth2 === 1) {\r\n            // only v1 is Txyz[]\r\n            return (v1 as Txyz[]).map( v1_val => vec.vecAdd(v1_val as Txyz, v2 as Txyz, norm) as Txyz);\r\n        } else if (depth1 === 1) {\r\n            // only v2 is Txyz[]\r\n            return (v2 as Txyz[]).map( v2_val => vec.vecAdd(v1 as Txyz, v2_val as Txyz, norm) as Txyz);\r\n        } else {\r\n            // both v1 and v2 are Txyz[], they must be equal length\r\n            if (v1.length === v2.length) {\r\n                const vecs: Txyz[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    vecs.push( vec.vecAdd(v1[i] as Txyz, v2[i] as Txyz, norm) as Txyz );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error adding lists of vectors: The two lists must be of equal length.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, both v1 and v2 are Txyz\r\n    return vec.vecAdd(v1 as Txyz, v2 as Txyz, norm) as Txyz;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecSub(v1: Txyz|Txyz[], v2: Txyz|Txyz[], norm: boolean = false): Txyz|Txyz[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v1);\r\n    const depth2: number = getArrDepth2(v2);\r\n    if (depth1 === 2 || depth2 === 2) {\r\n        if (depth2 === 1) {\r\n            // only v1 is Txyz[]\r\n            return (v1 as Txyz[]).map( v1_val => vec.vecSub(v1_val as Txyz, v2 as Txyz, norm) as Txyz);\r\n        } else if (depth1 === 1) {\r\n            // only v2 is Txyz[]\r\n            return (v2 as Txyz[]).map( v2_val => vec.vecSub(v1 as Txyz, v2_val as Txyz, norm) as Txyz);\r\n        } else {\r\n            // both v1 and v2 are Txyz[], they must be equal length\r\n            if (v1.length === v2.length) {\r\n                const vecs: Txyz[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    vecs.push( vec.vecSub(v1[i] as Txyz, v2[i] as Txyz, norm) as Txyz );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error adding lists of vectors: The two lists must be of equal length.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, both v1 and v2 are Txyz\r\n    return vec.vecSub(v1 as Txyz, v2 as Txyz, norm) as Txyz;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecDiv(v: Txyz|Txyz[], num: number|number[]): Txyz|Txyz[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v);\r\n    const depth2: number = getArrDepth2(num);\r\n    if (depth1 === 2 || depth2 === 1) {\r\n        if (depth2 === 0) {\r\n            // only vec is Txyz[]\r\n            return (v as Txyz[]).map( v_val => vec.vecDiv(v_val as Txyz, num as number) as Txyz);\r\n        } else if (depth1 === 1) {\r\n            // only num is number[]\r\n            return (num as number[]).map( num_val => vec.vecDiv(v as Txyz, num_val as number) as Txyz);\r\n        } else {\r\n            // vec is Txyz and num is number[], they must be equal length\r\n            num = num as number[];\r\n            if (v.length === num.length) {\r\n                const vecs: Txyz[] = [];\r\n                for (let i = 0; i < v.length; i++) {\r\n                    vecs.push( vec.vecDiv(vec[i] as Txyz, num[i] as number) as Txyz );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error dividing a lists of vectors: The list of divisors must be the same length as the list of vectors.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, vec is Txyz and num is number\r\n    return vec.vecDiv(v as Txyz, num as number) as Txyz;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecMult(v: Txyz|Txyz[], num: number|number[]): Txyz|Txyz[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v);\r\n    const depth2: number = getArrDepth2(num);\r\n    if (depth1 === 2 || depth2 === 1) {\r\n        if (depth2 === 0) {\r\n            // only vec is Txyz[]\r\n            return (v as Txyz[]).map( v_val => vec.vecMult(v_val as Txyz, num as number) as Txyz);\r\n        } else if (depth1 === 1) {\r\n            // only num is number[]\r\n            return (num as number[]).map( num_val => vec.vecMult(v as Txyz, num_val as number) as Txyz);\r\n        } else {\r\n            // vec is Txyz and num is number[], they must be equal length\r\n            num = num as number[];\r\n            if (v.length === num.length) {\r\n                const vecs: Txyz[] = [];\r\n                for (let i = 0; i < v.length; i++) {\r\n                    vecs.push( vec.vecMult(v[i] as Txyz, num[i] as number) as Txyz );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error dividing a lists of vectors: The list of multipliers must be the same length as the list of vectors.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, vec is Txyz and num is number\r\n    return vec.vecMult(v as Txyz, num as number) as Txyz;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecSetLen(v: Txyz|Txyz[], num: number|number[]): Txyz|Txyz[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v);\r\n    const depth2: number = getArrDepth2(num);\r\n    if (depth1 === 2 || depth2 === 1) {\r\n        if (depth2 === 0) {\r\n            // only vec is Txyz[]\r\n            return (v as Txyz[]).map( v_val => vec.vecSetLen(v_val as Txyz, num as number) as Txyz);\r\n        } else if (depth1 === 1) {\r\n            // only num is number[]\r\n            return (num as number[]).map( num_val => vec.vecSetLen(v as Txyz, num_val as number) as Txyz);\r\n        } else {\r\n            // vec is Txyz and num is number[], they must be equal length\r\n            num = num as number[];\r\n            if (v.length === num.length) {\r\n                const vecs: Txyz[] = [];\r\n                for (let i = 0; i < v.length; i++) {\r\n                    vecs.push( vec.vecSetLen(v[i] as Txyz, num[i] as number) as Txyz );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error setting lengths for a lists of vectors: The list of vector lengths must be the same length as the list of vectors.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, vec is Txyz and num is number\r\n    return vec.vecSetLen(v as Txyz, num as number) as Txyz;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecDot(v1: Txyz|Txyz[], v2: Txyz|Txyz[]): number|number[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v1);\r\n    const depth2: number = getArrDepth2(v2);\r\n    if (depth1 === 2 || depth2 === 2) {\r\n        if (depth2 === 1) {\r\n            // only v1 is Txyz[]\r\n            return (v1 as Txyz[]).map( v1_val => vec.vecDot(v1_val as Txyz, v2 as Txyz) as number);\r\n        } else if (depth1 === 1) {\r\n            // only v2 is Txyz[]\r\n            return (v2 as Txyz[]).map( v2_val => vec.vecDot(v1 as Txyz, v2_val as Txyz) as number);\r\n        } else {\r\n            // both v1 and v2 are Txyz[], they must be equal length\r\n            if (v1.length === v2.length) {\r\n                const vals: number[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    vals.push( vec.vecDot(v1[i] as Txyz, v2[i] as Txyz) as number );\r\n                }\r\n                return vals;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating dot product of two lists of vectors: The two lists must be of equal length.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, both v1 and v2 are Txyz\r\n    return vec.vecDot(v1 as Txyz, v2 as Txyz) as number;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecCross(v1: Txyz|Txyz[], v2: Txyz|Txyz[]): Txyz|Txyz[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v1);\r\n    const depth2: number = getArrDepth2(v2);\r\n    if (depth1 === 2 || depth2 === 2) {\r\n        if (depth2 === 1) {\r\n            // only v1 is Txyz[]\r\n            return (v1 as Txyz[]).map( v1_val => vec.vecCross(v1_val as Txyz, v2 as Txyz) as Txyz);\r\n        } else if (depth1 === 1) {\r\n            // only v2 is Txyz[]\r\n            return (v2 as Txyz[]).map( v2_val => vec.vecCross(v1 as Txyz, v2_val as Txyz) as Txyz);\r\n        } else {\r\n            // both v1 and v2 are Txyz[], they must be equal length\r\n            if (v1.length === v2.length) {\r\n                const vecs: Txyz[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    vecs.push( vec.vecCross(v1[i] as Txyz, v2[i] as Txyz) as Txyz );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating cross product of two lists of vectors: The two lists must be of equal length.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, both v1 and v2 are Txyz\r\n    return vec.vecCross(v1 as Txyz, v2 as Txyz) as Txyz;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecAng(v1: Txyz|Txyz[], v2: Txyz|Txyz[]): number|number[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v1);\r\n    const depth2: number = getArrDepth2(v2);\r\n    if (depth1 === 2 || depth2 === 2) {\r\n        if (depth2 === 1) {\r\n            // only v1 is Txyz[]\r\n            return (v1 as Txyz[]).map( v1_val => vec.vecAng(v1_val as Txyz, v2 as Txyz) as number);\r\n        } else if (depth1 === 1) {\r\n            // only v2 is Txyz[]\r\n            return (v2 as Txyz[]).map( v2_val => vec.vecAng(v1 as Txyz, v2_val as Txyz) as number);\r\n        } else {\r\n            // both v1 and v2 are Txyz[], they must be equal length\r\n            if (v1.length === v2.length) {\r\n                const angs: number[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    angs.push( vec.vecAng(v1[i] as Txyz, v2[i] as Txyz) as number );\r\n                }\r\n                return angs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating angle between two lists of vectors: The two lists must be of equal length.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, both v1 and v2 are Txyz\r\n    return vec.vecAng(v1 as Txyz, v2 as Txyz) as number;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecFromTo(v1: Txyz|Txyz[], v2: Txyz|Txyz[]): Txyz|Txyz[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v1);\r\n    const depth2: number = getArrDepth2(v2);\r\n    if (depth1 === 2 || depth2 === 2) {\r\n        if (depth2 === 1) {\r\n            // only v1 is Txyz[]\r\n            return (v1 as Txyz[]).map( v1_val => vec.vecFromTo(v1_val as Txyz, v2 as Txyz) as Txyz);\r\n        } else if (depth1 === 1) {\r\n            // only v2 is Txyz[]\r\n            return (v2 as Txyz[]).map( v2_val => vec.vecFromTo(v1 as Txyz, v2_val as Txyz) as Txyz);\r\n        } else {\r\n            // both v1 and v2 are Txyz[], they must be equal length\r\n            if (v1.length === v2.length) {\r\n                const vecs: Txyz[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    vecs.push( vec.vecFromTo(v1[i] as Txyz, v2[i] as Txyz) as Txyz );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating vectors between two between lists of coordinates: The two lists must be of equal length.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, both v1 and v2 are Txyz\r\n    return vec.vecFromTo(v1 as Txyz, v2 as Txyz) as Txyz;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecEqual(v1: Txyz|Txyz[], v2: Txyz|Txyz[], tol: number): boolean|boolean[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v1);\r\n    const depth2: number = getArrDepth2(v2);\r\n    if (depth1 === 2 || depth2 === 2) {\r\n        if (depth2 === 1 || depth2 === 1) {\r\n            throw new Error(\r\n                'Error calculating vector equality between multiple vectors: The two lists must be of equal length.');\r\n        } else {\r\n            // both v1 and v2 are Txyz[], they must be equal length\r\n            if (v1.length === v2.length) {\r\n                const eq: boolean[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    eq.push( vec.vecEqual(v1[i] as Txyz, v2[i] as Txyz, tol) as boolean );\r\n                }\r\n                return eq;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating vectors between two between lists of coordinates: The two lists must be of equal length.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, both v1 and v2 are Txyz\r\n    return vec.vecEqual(v1 as Txyz, v2 as Txyz, tol) as boolean;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecAng2(v1: Txyz|Txyz[], v2: Txyz|Txyz[], v3: Txyz|Txyz[]): number|number[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v1);\r\n    const depth2: number = getArrDepth2(v2);\r\n    const depth3: number = getArrDepth2(v3);\r\n    if (depth1 === 2 || depth2 === 2 || depth3 === 2) {\r\n        if (depth2 === 1 && depth3 === 1) {\r\n            // only v1 is Txyz[]\r\n            return (v1 as Txyz[]).map( v1_val => vec.vecAng2(v1_val as Txyz, v2 as Txyz, v3 as Txyz) as number);\r\n        } else if (depth1 === 1 && depth3 === 1) {\r\n            // only v2 is Txyz[]\r\n            return (v2 as Txyz[]).map( v2_val => vec.vecAng2(v1 as Txyz, v2_val as Txyz, v3 as Txyz) as number);\r\n        } else if (depth1 === 1 && depth2 === 1) {\r\n            // only v3 is Txyz[]\r\n            return (v3 as Txyz[]).map( v3_val => vec.vecAng2(v1 as Txyz, v2 as Txyz, v3_val as Txyz) as number);\r\n        } else if (depth1 === 1) {\r\n            // v2 and v3 are Txyz[], they must be equal length\r\n            if (v2.length === v3.length) {\r\n                const angs: number[] = [];\r\n                for (let i = 0; i < v2.length; i++) {\r\n                    angs.push( vec.vecAng2(v1 as Txyz, v2[i] as Txyz, v3[i] as Txyz) as number );\r\n                }\r\n                return angs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating angles between two between lists of vectors: The two lists must be of equal length.');\r\n            }\r\n        } else if (depth2 === 1) {\r\n            // v1 and v3 are Txyz[], they must be equal length\r\n            if (v1.length === v3.length) {\r\n                const angs: number[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    angs.push( vec.vecAng2(v1[i] as Txyz, v2 as Txyz, v3[i] as Txyz) as number );\r\n                }\r\n                return angs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating angles between between lists of vectors: The two lists must be of equal length.');\r\n            }\r\n        } else if (depth3 === 1) {\r\n            // v1 and v2 are Txyz[], they must be equal length\r\n            if (v1.length === v2.length) {\r\n                const angs: number[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    angs.push( vec.vecAng2(v1[i] as Txyz, v2[i] as Txyz, v3 as Txyz) as number );\r\n                }\r\n                return angs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating angles between two between lists of vectors and normals: The two lists must be of equal length.');\r\n            }\r\n        } else {\r\n            // all three v1 and v2 and v3 are Txyz[], they must be all equal length\r\n            if (v1.length === v2.length && v2.length === v3.length) {\r\n                const angs: number[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    angs.push( vec.vecAng2(v1[i] as Txyz, v2[i] as Txyz, v3[i] as Txyz) as number );\r\n                }\r\n                return angs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating vectors between two between lists of vectors and normals: The two lists must be of equal length.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, v1 and v2 and v3 are Txyz\r\n    return vec.vecAng2(v1 as Txyz, v2 as Txyz, v3 as Txyz) as number;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecRot(v1: Txyz|Txyz[], v2: Txyz|Txyz[], ang: number|number[]): Txyz|Txyz[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v1);\r\n    const depth2: number = getArrDepth2(v2);\r\n    const depth3: number = getArrDepth2(ang);\r\n    if (depth1 === 2 || depth2 === 2 || depth3 === 2) {\r\n        if (depth2 === 1 && depth3 === 1) {\r\n            // only v1 is Txyz[]\r\n            return (v1 as Txyz[]).map( v1_val => vec.vecRot(v1_val as Txyz, v2 as Txyz, ang as number) as Txyz);\r\n        } else if (depth1 === 1 && depth3 === 1) {\r\n            // only v2 is Txyz[]\r\n            return (v2 as Txyz[]).map( v2_val => vec.vecRot(v1 as Txyz, v2_val as Txyz, ang as number) as Txyz);\r\n        } else if (depth1 === 1 && depth2 === 1) {\r\n            // only ang is number[]\r\n            return (ang as number[]).map( ang_val => vec.vecRot(v1 as Txyz, v2 as Txyz, ang_val as number) as Txyz);\r\n        } else if (depth1 === 1) {\r\n            // v2 is Txyz[] and ang is number[], they must be equal length\r\n            ang = ang as number[];\r\n            if (v2.length === ang.length) {\r\n                const vecs: Txyz[] = [];\r\n                for (let i = 0; i < v2.length; i++) {\r\n                    vecs.push( vec.vecRot(v1 as Txyz, v2[i] as Txyz, ang[i] as number) as Txyz );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating angles between two between lists of vectors: The two lists must be of equal length.');\r\n            }\r\n        } else if (depth2 === 1) {\r\n            // v1 is Txyz[] and ang is number[], they must be equal length\r\n            ang = ang as number[];\r\n            if (v1.length === ang.length) {\r\n                const vecs: Txyz[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    vecs.push( vec.vecRot(v1[i] as Txyz, v2 as Txyz, ang[i] as number) as Txyz );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating angles between between lists of vectors: The two lists must be of equal length.');\r\n            }\r\n        } else if (depth3 === 1) {\r\n            // v1 and v2 are Txyz[], they must be equal length\r\n            if (v1.length === v2.length) {\r\n                const vecs: Txyz[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    vecs.push( vec.vecRot(v1[i] as Txyz, v2[i] as Txyz, ang as number) as Txyz );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating angles between two between lists of vectors and normals: The two lists must be of equal length.');\r\n            }\r\n        } else {\r\n            // all three v1 and v2 are Txyz[] and ang is number[], they must be all equal length\r\n            ang = ang as number[];\r\n            if (v1.length === v2.length && v2.length === ang.length) {\r\n                const vecs: Txyz[] = [];\r\n                for (let i = 0; i < v1.length; i++) {\r\n                    vecs.push( vec.vecRot(v1[i] as Txyz, v2[i] as Txyz, ang[i] as number) as Txyz );\r\n                }\r\n                return vecs;\r\n            } else {\r\n                throw new Error(\r\n                    'Error calculating vectors between two between lists of vectors and normals: The two lists must be of equal length.');\r\n            }\r\n        }\r\n    }\r\n    // normal case, v1 and v2 and ang are Txyz\r\n    return vec.vecRot(v1 as Txyz, v2 as Txyz, ang as number) as Txyz;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecLen(v: Txyz|Txyz[]): number|number[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v);\r\n    if (depth1 === 2) {\r\n        return (v as Txyz[]).map( v_val => vec.vecLen(v_val as Txyz) as number);\r\n    }\r\n    // normal case, vec is Txyz\r\n    return vec.vecLen(v as Txyz) as number;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecNorm(v: Txyz|Txyz[]): Txyz|Txyz[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v);\r\n    if (depth1 === 2) {\r\n        return (v as Txyz[]).map( v_val => vec.vecNorm(v_val as Txyz) as Txyz);\r\n    }\r\n    // normal case, vec is Txyz\r\n    return vec.vecNorm(v as Txyz) as Txyz;\r\n}\r\n\r\n// ================================================================================================\r\nexport function vecRev(v: Txyz|Txyz[]): Txyz|Txyz[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v);\r\n    if (depth1 === 2) {\r\n        return (v as Txyz[]).map( v_val => vec.vecRev(v_val as Txyz) as Txyz);\r\n    }\r\n    // normal case, vec is Txyz\r\n    return vec.vecRev(v as Txyz) as Txyz;\r\n}\r\n// ================================================================================================\r\nexport function vecLtoG(v: Txyz|Txyz[], p: TPlane|TPlane[]): Txyz|Txyz[] {\r\n    return vecXForm(v, p, true);\r\n}\r\nexport function vecGtoL(v: Txyz|Txyz[], p: TPlane|TPlane[]): Txyz|Txyz[] {\r\n    return vecXForm(v, p, false);\r\n}\r\nfunction vecXForm(v: Txyz|Txyz[], p: TPlane|TPlane[], to_global: boolean): Txyz|Txyz[] {\r\n    // overloaded case\r\n    const depth1: number = getArrDepth2(v);\r\n    const depth2: number = getArrDepth2(p);\r\n    if (depth1 === 1 && depth2 === 2) {\r\n        // v is Txyz and p is TPlane\r\n        return multMatrix(v as Txyz, xformMatrix(p as TPlane, to_global));\r\n    } else if (depth1 === 2 && depth2 === 2) {\r\n         // v is Txyz[] and p is TPlane\r\n        const matrix = xformMatrix(p as TPlane, to_global);\r\n        return (v as Txyz[]).map( a_v => multMatrix(a_v, matrix));\r\n    } else if (depth1 === 1 && depth2 === 3) {\r\n        // v is Txyz and p is TPlane[]\r\n        const result: Txyz[] = [];\r\n        for (const a_p of p) {\r\n            const matrix = xformMatrix(a_p as TPlane, to_global);\r\n            result.push(multMatrix(v as Txyz, matrix));\r\n        }\r\n        return result;\r\n    } else if (depth1 === 2 && depth2 === 3) {\r\n        // v is Txyz[] p is TPlane[], they must be equal length\r\n        if (v.length === p.length) {\r\n            const result: Txyz[] = [];\r\n            for (let i = 0; i < v.length; i++) {\r\n                const matrix = xformMatrix(p[i] as TPlane, to_global);\r\n                result.push(multMatrix(v[i] as Txyz, matrix));\r\n            }\r\n            return result;\r\n        } else {\r\n            throw new Error(\r\n                'Error transforming vectors: The list of vectors and list of planes must be of equal length.');\r\n        }\r\n    }\r\n    throw new Error(\r\n        'Error transforming vectors: Cannot process the input lists.');\r\n}\r\n\r\n\r\n","import { TEntTypeIdx, TRay, TBBox, TPlane, Txyz, TColor, Txy } from '@libs/geo-info/common';\r\nimport * as check_types from './_check_types';\r\n\r\nexport class ArgCh {\r\n    static isAny(fn_name: string, arg_name: string, arg: string): void {\r\n        check_types.isAny(fn_name, arg_name, arg);\r\n    }\r\n    // null: allow Null input\r\n    static isNull(fn_name: string, arg_name: string, arg: any): void {\r\n        check_types.isNull(fn_name, arg_name, arg);\r\n    }\r\n    // dict\r\n    static isDict(fn_name: string, arg_name: string, arg: any): void {\r\n        check_types.isDict(fn_name, arg_name, arg);\r\n    }\r\n    // list\r\n    static isList(fn_name: string, arg_name: string, arg: any[]): void {\r\n        check_types.isList(fn_name, arg_name, arg);\r\n    }\r\n    // booleans\r\n    static isBool(fn_name: string, arg_name: string, arg: boolean): void {\r\n        check_types.isBool(fn_name, arg_name, arg);\r\n    }\r\n    static isBoolL(fn_name: string, arg_name: string, arg: boolean[]): void {\r\n        check_types.isBoolL(fn_name, arg_name, arg);\r\n    }\r\n    // strings\r\n    static isStr(fn_name: string, arg_name: string, arg: string): void {\r\n        check_types.isStr(fn_name, arg_name, arg);\r\n    }\r\n    static isStrL(fn_name: string, arg_name: string, arg: string[]): void {\r\n        check_types.isStrL(fn_name, arg_name, arg);\r\n    }\r\n    static isStrStr(fn_name: string, arg_name: string, arg: [string, string]): void {\r\n        check_types.isStrL(fn_name, arg_name, arg);\r\n        check_types.isLLen(fn_name, arg_name, arg, 2);\r\n    }\r\n    static isStrNum(fn_name: string, arg_name: string, arg: [string, number]): void {\r\n        check_types.isLLen(fn_name, arg_name, arg, 2);\r\n        check_types.isStr(fn_name, arg_name, arg[0]);\r\n        check_types.isNum(fn_name, arg_name, arg[1]);\r\n    }\r\n    static isNum(fn_name: string, arg_name: string, arg: number): void {\r\n        check_types.isNum(fn_name, arg_name, arg);\r\n    }static isNum01(fn_name: string, arg_name: string, arg: number): void {\r\n        check_types.isNum01(fn_name, arg_name, arg);\r\n    }\r\n    static isNumL(fn_name: string, arg_name: string, arg: number[]): void {\r\n        check_types.isNumL(fn_name, arg_name, arg);\r\n    }\r\n    static isNullL(fn_name: string, arg_name: string, arg: number[]): void {\r\n        check_types.isNullL(fn_name, arg_name, arg);\r\n    }\r\n    static isInt(fn_name: string, arg_name: string, arg: number): void {\r\n        check_types.isInt(fn_name, arg_name, arg);\r\n    }\r\n    static isXY(fn_name: string, arg_name: string, arg: Txy): void {\r\n        check_types.isNumL(fn_name, arg_name, arg);\r\n        check_types.isLLen(fn_name, arg_name, arg, 2);\r\n        check_types.isNumL(fn_name, arg_name, arg);\r\n    }\r\n    static isXYInt(fn_name: string, arg_name: string, arg: Txy): void {\r\n        check_types.isIntL(fn_name, arg_name, arg);\r\n        check_types.isLLen(fn_name, arg_name, arg, 2);\r\n        check_types.isIntL(fn_name, arg_name, arg);\r\n    }\r\n    static isColor(fn_name: string, arg_name: string, arg: TColor): void { // TColor = [number, number, number]\r\n        check_types.isNumL(fn_name, arg_name, arg);\r\n        check_types.isLLen(fn_name, arg_name, arg, 3);\r\n        check_types.isNum01L(fn_name, arg_name, arg);\r\n        return;\r\n    }\r\n    static isXYZ(fn_name: string, arg_name: string, arg: Txyz): void { // Txyz = [number, number, number]\r\n        check_types.isNumL(fn_name, arg_name, arg);\r\n        check_types.isLLen(fn_name, arg_name, arg, 3);\r\n    }\r\n    static isXYZL(fn_name: string, arg_name: string, arg: Txyz[]): void {\r\n        check_types.isList(fn_name, arg_name, arg);\r\n        for (let i = 0; i < arg.length; i++) {\r\n            ArgCh.isXYZ(fn_name, arg_name, arg[i]);\r\n        }\r\n    }\r\n    static isXYZLL(fn_name: string, arg_name: string, arg: Txyz[][]): void {\r\n        check_types.isList(fn_name, arg_name, arg);\r\n        for (let i = 0; i < arg.length; i++) {\r\n            ArgCh.isXYZL(fn_name, arg_name + '[' + i + ']', arg[i]);\r\n        }\r\n    }\r\n    static isPln(fn_name: string, arg_name: string, arg: TPlane): void { // TPlane = [Txyz, Txyz, Txyz]\r\n        ArgCh.isXYZL(fn_name, arg_name, arg);\r\n        check_types.isLLen(fn_name, arg_name, arg, 3);\r\n    }\r\n    static isPlnL(fn_name: string, arg_name: string, arg: TPlane[]): void {\r\n        check_types.isList(fn_name, arg_name, arg);\r\n        for (let i = 0; i < arg.length; i++) {\r\n            ArgCh.isPln(fn_name, arg_name + '[' + i + ']', arg[i]);\r\n        }\r\n    }\r\n    static isBBox(fn_name: string, arg_name: string, arg: TBBox): void { // TBbox = [Txyz, Txyz, Txyz, Txyz]\r\n        ArgCh.isXYZL(fn_name, arg_name, arg);\r\n        check_types.isLLen(fn_name, arg_name, arg, 4);\r\n    }\r\n    static isBBoxL(fn_name: string, arg_name: string, arg: TBBox[]): void {\r\n        check_types.isList(fn_name, arg_name, arg);\r\n        for (let i = 0; i < arg.length; i++) {\r\n            ArgCh.isBBox(fn_name, arg_name + '[' + i + ']', arg[i]);\r\n        }\r\n    }\r\n    static isRay(fn_name: string, arg_name: string, arg: TRay): void { // TRay = [Txyz, Txyz]\r\n        ArgCh.isXYZL(fn_name, arg_name, arg);\r\n        check_types.isLLen(fn_name, arg_name, arg, 2);\r\n    }\r\n    static isRayL(fn_name: string, arg_name: string, arg: TRay[]): void {\r\n        check_types.isList(fn_name, arg_name, arg);\r\n        for (let i = 0; i < arg.length; i++) {\r\n            ArgCh.isRay(fn_name, arg_name + '[' + i + ']', arg[i]);\r\n        }\r\n    }\r\n    static isRayLL(fn_name: string, arg_name: string, arg: TRay[][]): void {\r\n        check_types.isList(fn_name, arg_name, arg);\r\n        for (let i = 0; i < arg.length; i++) {\r\n            ArgCh.isRayL(fn_name, arg_name + '[' + i + ']', arg[i]);\r\n        }\r\n    }\r\n}\r\nexport function checkArgs(fn_name: string, arg_name: string, arg: any, check_fns: Function[]): void|TEntTypeIdx|\r\n                               TEntTypeIdx[]|TEntTypeIdx[][] {\r\n    let pass = false;\r\n    const err_arr = [];\r\n    let ret;\r\n    if (arg === undefined) {\r\n        throw new Error(fn_name + ': ' + arg_name + ' is undefined' + '<br>');\r\n    }\r\n    for (let i = 0; i < check_fns.length; i++) {\r\n        try {\r\n           ret = check_fns[i](fn_name, arg_name, arg);\r\n        } catch (err) {\r\n            err_arr.push(err.message + '<br>');\r\n            continue;\r\n        }\r\n        pass = true;\r\n        break; // passed\r\n    }\r\n    if (pass === false) { // Failed all tests: argument does not fall into any valid types\r\n        const ret_msg = fn_name + ': ' + arg_name + ' failed the following tests:<br>';\r\n        throw new Error(ret_msg + err_arr.join(''));\r\n    }\r\n    return ret;\r\n}\r\n","import { ArgCh, checkArgs } from './_check_args';\r\n\r\n// =========================================================================================================================================\r\n// Attribute Checks\r\n// =========================================================================================================================================\r\nexport function checkAttribName(fn_name: string, attrib_name: string): void {\r\n    ArgCh.isStr(fn_name, 'attrib_name', attrib_name); // check arg is string\r\n    if (attrib_name === undefined) {\r\n        throw new Error (fn_name + ': ' + 'attrib_name is undefined');\r\n    }\r\n    if (attrib_name.length === 0) {\r\n        throw new Error (fn_name + ': ' + 'attrib_name not specified');\r\n    }\r\n    if (attrib_name.search(/\\W/) !== -1) {\r\n        throw new Error (fn_name + ': ' + 'attrib_name contains restricted characters');\r\n    }\r\n    if (attrib_name[0].search(/[0-9]/) !== -1) {\r\n        throw new Error (fn_name + ': ' + 'attrib_name should not start with numbers');\r\n    }\r\n    // blocks writing to id\r\n    if (attrib_name === 'id') {\r\n        throw new Error(fn_name + ': id is not modifiable!');\r\n    }\r\n}\r\nexport function checkAttribIdxKey(fn_name: string, idx_or_key?: number|string): void {\r\n    // -- check defined index\r\n    if (typeof idx_or_key === 'number') {\r\n        // check if index is number\r\n        ArgCh.isNum(fn_name, 'attrib_index', idx_or_key);\r\n        // this is an item in a list, the item value can be any\r\n    } else if (typeof idx_or_key === 'string') {\r\n        // check if index is number\r\n        ArgCh.isStr(fn_name, 'attrib_key', idx_or_key);\r\n        // this is an item in an object, the item value can be any\r\n    } else {\r\n        throw new Error(fn_name + ': index or key is not a valid type: ' + idx_or_key);\r\n    }\r\n}\r\nexport function checkAttribNameIdxKey(fn_name: string, attrib: string|[string, number|string]): [string, number|string] {\r\n    let attrib_name: string = null;\r\n    let attrib_idx_key: number|string = null;\r\n    // deconstruct the attrib arg\r\n    if (Array.isArray(attrib)) {\r\n        if (attrib.length !== 2) {\r\n            throw new Error (fn_name + ': ' + 'attrib_name not specified');\r\n        }\r\n        attrib_name = attrib[0] as string;\r\n        attrib_idx_key = attrib[1] as number|string;\r\n    } else {\r\n        attrib_name = attrib as string;\r\n    }\r\n    // check that the name is ok\r\n    checkAttribName(fn_name, attrib_name);\r\n    // check that the array index or object key is ok\r\n    if (attrib_idx_key !== null) {\r\n        checkAttribIdxKey(fn_name, attrib_idx_key);\r\n    }\r\n    // return the deconstructed attrib arg, attrib_idx_key may be null\r\n    return [attrib_name, attrib_idx_key];\r\n}\r\nexport function splitAttribNameIdxKey(fn_name: string, attrib: string|[string, number|string]): [string, number|string] {\r\n    let attrib_name: string = null;\r\n    let attrib_idx_key: number|string = null;\r\n    // deconstruct the attrib arg\r\n    if (Array.isArray(attrib)) {\r\n        attrib_name = attrib[0] as string;\r\n        attrib_idx_key = attrib[1] as number|string;\r\n    } else {\r\n        attrib_name = attrib as string;\r\n    }\r\n    // return the deconstructed attrib arg, attrib_idx_key may be null\r\n    return [attrib_name, attrib_idx_key];\r\n}\r\n\r\nexport function checkAttribValue(fn_name: string, attrib_value: any): void {\r\n    // check the actual value\r\n    checkArgs(fn_name, 'attrib_value', attrib_value,\r\n            [ArgCh.isStr, ArgCh.isNum, ArgCh.isBool,\r\n                ArgCh.isNull, ArgCh.isList, ArgCh.isDict]);\r\n}\r\n","import { EEntType, TEntTypeIdx } from '@libs/geo-info/common';\r\nimport { idsBreak } from '@libs/geo-info/id';\r\n\r\nexport class IdCh {\r\n    static default_ent_type_strs = [EEntType.POSI,\r\n                                    EEntType.TRI,\r\n                                    EEntType.VERT,\r\n                                    EEntType.EDGE,\r\n                                    EEntType.WIRE,\r\n                                    EEntType.FACE,\r\n                                    EEntType.POINT,\r\n                                    EEntType.PLINE,\r\n                                    EEntType.PGON,\r\n                                    EEntType.COLL];\r\n\r\n    static isId(fn_name: string, arg_name: string, arg: any, ent_type_strs: EEntType[]|null): TEntTypeIdx {\r\n        let ent_arr;\r\n        try {\r\n            ent_arr = idsBreak(arg) as TEntTypeIdx; // split\r\n        } catch (err) {\r\n            throw new Error(fn_name + ': ' + arg_name + ' is not a valid Entity ID'); // check valid id\r\n        }\r\n        if (ent_type_strs === null) {\r\n            ent_type_strs = IdCh.default_ent_type_strs;\r\n        }\r\n        let pass = false;\r\n        for (let i = 0; i < ent_type_strs.length; i++) {\r\n            if (ent_arr[0] === ent_type_strs[i]) {\r\n                pass = true;\r\n                break;\r\n            }\r\n        }\r\n        if (pass === false) {\r\n            throw new Error(fn_name + ': ' + arg_name + ' is not one of the following valid types - ' +\r\n                            ent_type_strs.map((test_ent) => EEntType[test_ent]).toString());\r\n        }\r\n        return ent_arr;\r\n    }\r\n    static isIdL(fn_name: string, arg_name: string, arg_list: any[], ent_type_strs: EEntType[]|null): TEntTypeIdx[] {\r\n        if (!Array.isArray(arg_list)) {\r\n            throw new Error(fn_name + ': ' + arg_name + ' is not list.');\r\n        }\r\n        const ret_arr = [];\r\n        if (ent_type_strs === null) {\r\n            ent_type_strs = IdCh.default_ent_type_strs;\r\n        }\r\n        for (let i = 0; i < arg_list.length; i++) {\r\n            ret_arr.push(IdCh.isId(fn_name, arg_name + '[' + i + ']', arg_list[i], ent_type_strs));\r\n        }\r\n        return ret_arr as TEntTypeIdx[];\r\n    }\r\n    static isIdLL(fn_name: string, arg_name: string, arg_list: any, ent_type_strs: EEntType[]|null): TEntTypeIdx[][] {\r\n        if (!Array.isArray(arg_list)) {\r\n            throw new Error(fn_name + ': ' + arg_name + ' is not list.');\r\n        }\r\n        const ret_arr = [];\r\n        if (ent_type_strs === null) {\r\n            ent_type_strs = IdCh.default_ent_type_strs;\r\n        }\r\n        for (let i = 0; i < arg_list.length; i++) {\r\n            ret_arr.push(IdCh.isIdL(fn_name, arg_name + '[' + i + ']', arg_list[i], ent_type_strs));\r\n        }\r\n        return ret_arr as TEntTypeIdx[][];\r\n    }\r\n}\r\n\r\nexport function checkIDs(fn_name: string, arg_name: string, arg: any, check_fns: Function[],\r\n                         IDchecks: EEntType[]|null): TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][] {\r\n    let pass = false;\r\n    const err_arr = [];\r\n    let ret: TEntTypeIdx|TEntTypeIdx[];\r\n    if (arg === undefined) {\r\n        throw new Error(fn_name + ': ' + arg_name + ' is undefined' + '<br>');\r\n    }\r\n    for (let i = 0; i < check_fns.length; i++) {\r\n        try {\r\n           ret =  check_fns[i](fn_name, arg_name, arg, IDchecks);\r\n        } catch (err) {\r\n            err_arr.push(err.message + '<br>');\r\n            continue;\r\n        }\r\n        pass = true;\r\n        break; // passed\r\n    }\r\n    if (pass === false) { // Failed all tests: argument does not fall into any valid types\r\n        const ret_msg = fn_name + ': ' + arg_name + ' failed the following tests:<br>';\r\n        throw new Error(ret_msg + err_arr.join(''));\r\n    }\r\n    return ret; // returns TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][]; depends on which passes\r\n}\r\n","// =====================================================================================================================\r\n// util - check type\r\n// =====================================================================================================================\r\n// Dict\r\nexport function isDict(fn_name: string, arg_name: string, arg: any): void {\r\n    if (Array.isArray(arg) || typeof arg !== 'object') {\r\n        throw new Error (fn_name + ': ' + arg_name + ' is not a dict');\r\n    }\r\n}\r\n// List\r\nexport function isList(fn_name: string, arg_name: string, arg: any): void {\r\n    if (!Array.isArray(arg)) {\r\n        throw new Error (fn_name + ': ' + arg_name + ' is not a list');\r\n    }\r\n}\r\n// List of specified length\r\nexport function isLLen(fn_name: string, arg_name: string, arg: any[], len: number): void {\r\n    if (arg.length !== len) {\r\n        throw new Error (fn_name + ': ' + arg_name + ' is not a list of length ' + len);\r\n    }\r\n}\r\n// Any\r\nexport function isAny(fn_name: string, arg_name: string, arg: any): void {\r\n    if (arg === undefined) {\r\n        throw new Error(fn_name + ': ' + arg_name + ' must be defined');\r\n    }\r\n}\r\n// Any list\r\nexport function isAnyL(fn_name: string, arg_name: string, arg: any): void {\r\n    isList(fn_name, arg_name, arg);\r\n    for (let i = 0; i < arg.length; i++) {\r\n        isAny(fn_name, arg_name + '[' + i + ']', arg[i]);\r\n    }\r\n}\r\n// Null\r\nexport function isNull(fn_name: string, arg_name: string, arg: any): void {\r\n    if (arg !== null) {\r\n        throw new Error(fn_name + ': ' + arg_name + ' is not null');\r\n    }\r\n}\r\n// Null list\r\nexport function isNullL(fn_name: string, arg_name: string, arg: any): void {\r\n    isList(fn_name, arg_name, arg);\r\n    for (let i = 0; i < arg.length; i++) {\r\n        isNull(fn_name, arg_name + '[' + i + ']', arg[i]);\r\n    }\r\n}\r\n// Boolean\r\nexport function isBool(fn_name: string, arg_name: string, arg: boolean): void {\r\n    if (typeof arg !== 'boolean') {\r\n        throw new Error(fn_name + ': ' + arg_name + ' is not a boolean');\r\n    }\r\n}\r\n// Boolean list\r\nexport function isBoolL(fn_name: string, arg_name: string, arg: boolean[]): void {\r\n    isList(fn_name, arg_name, arg);\r\n    for (let i = 0; i < arg.length; i++) {\r\n        isBool(fn_name, arg_name + '[' + i + ']', arg[i]);\r\n    }\r\n}\r\n// String\r\nexport function isStr(fn_name: string, arg_name: string, arg: string): void {\r\n    if (typeof arg !== 'string') {\r\n        throw new Error(fn_name + ': ' + arg_name + ' is not a string');\r\n    }\r\n}\r\n// String list\r\nexport function isStrL(fn_name: string, arg_name: string, arg: string[]): void {\r\n    isList(fn_name, arg_name, arg);\r\n    for (let i = 0; i < arg.length; i++) {\r\n        isStr(fn_name, arg_name + '[' + i + ']', arg[i]);\r\n    }\r\n}\r\n// Numbers\r\nexport function isNum(fn_name: string, arg_name: string, arg: number): void {\r\n    if (isNaN(arg)) { // } || isNaN(parseInt(arg, 10))) {\r\n        throw new Error(fn_name + ': ' + arg_name + ' is not a number');\r\n    }\r\n}\r\n// Number list\r\nexport function isNumL(fn_name: string, arg_name: string, arg: number[]): void {\r\n    isList(fn_name, arg_name, arg);\r\n    for (let i = 0; i < arg.length; i++) {\r\n        isNum(fn_name, arg_name + '[' + i + ']', arg[i]);\r\n    }\r\n}\r\n// Number between 0 and 1\r\nexport function isNum01(fn_name: string, arg_name: string, arg: any): void {\r\n    isNum(fn_name, arg_name, arg);\r\n    if (arg < 0 || arg > 1) {\r\n        throw new Error(fn_name + ': ' + arg_name + ' must be between 0 and 1');\r\n    }\r\n}\r\n// Number list between 0 and 1\r\nexport function isNum01L(fn_name: string, arg_name: string, arg: any): void {\r\n    isNumL(fn_name, arg_name, arg);\r\n    for (let i = 0; i < arg.length; i++) {\r\n        isNum01(fn_name, arg_name + '[' + i + ']', arg[i]);\r\n    }\r\n}\r\n// Integer\r\nexport function isInt(fn_name: string, arg_name: string, arg: any): void {\r\n    if (!Number.isInteger(arg)) {\r\n        throw new Error(fn_name + ': ' + arg_name + ' is not an integer');\r\n    }\r\n}\r\n// Integer list\r\nexport function isIntL(fn_name: string, arg_name: string, arg: any[]): void {\r\n    isList(fn_name, arg_name, arg);\r\n    for (let i = 0; i < arg.length; i++) {\r\n        isInt(fn_name, arg_name, arg[i]);\r\n    }\r\n}\r\n","import { GIModel } from '@libs/geo-info/GIModel';\r\nimport { EAttribDataTypeStrs, TAttribDataTypes, EAttribNames, EEntType, TId, TEntTypeIdx, EEntTypeStr } from '@libs/geo-info/common';\r\nimport { getArrDepth, idsBreak } from '@libs/geo-info/id';\r\n\r\n//  ===============================================================================================\r\n//  Functions used by Mobius\r\n//  ===============================================================================================\r\n/**\r\n * Creates a new empty model.\r\n *\r\n * @returns New model empty.\r\n */\r\nexport function __new__(): GIModel {\r\n    const model: GIModel = new GIModel();\r\n    model.modeldata.attribs.add.addAttrib(EEntType.POSI, EAttribNames.COORDS, EAttribDataTypeStrs.LIST);\r\n    return model;\r\n}\r\n//  ===============================================================================================\r\n/**\r\n * A function to preprocess the model, before it enters the node.\r\n * In cases where there is more than one model connected to a node,\r\n * the preprocess function will be called before the merge function.\r\n *\r\n * @param model The model to preprocess.\r\n */\r\nexport function __preprocess__(__model__: GIModel): void {\r\n    // TODO\r\n}\r\n//  ===============================================================================================\r\n/**\r\n * A function to postprocess the model, after it enters the node.\r\n *\r\n * @param model The model to postprocess.\r\n */\r\nexport function __postprocess__(__model__: GIModel): void {\r\n    // TODO\r\n    // Remove all undefined values for the arrays\r\n}\r\n//  ===============================================================================================\r\n/**\r\n * Merges the second model into the first model. The geometry, attribues, and groups are all merged.\r\n * If the models contain contain groups with the same names, then the groups will be merged.\r\n *\r\n * @param model1 The model to merge into.\r\n * @param model2 The model to merge from    .\r\n */\r\nexport function __merge__(model1: GIModel, model2: GIModel): void {\r\n    model1.merge(model2);\r\n}\r\n//  ===============================================================================================\r\n/**\r\n * Returns a string representation of this model.\r\n * @param __model__\r\n */\r\nexport function __stringify__(__model__: GIModel): string {\r\n    return JSON.stringify(__model__.getModelData());\r\n}\r\n//  ===============================================================================================\r\n/**\r\n * Select entities in the model.\r\n * @param __model__\r\n */\r\nexport function __select__(__model__: GIModel, ents_id: string|string[]|string[][], var_name: string): void {\r\n    const start = performance.now();\r\n    __model__.modeldata.geom.selected = [];\r\n    ents_id = ((Array.isArray(ents_id)) ? ents_id : [ents_id]) as string[];\r\n    const [ents_id_flat, ents_indices] = _flatten(ents_id);\r\n    const ents_arr: TEntTypeIdx[] = idsBreak(ents_id_flat) as TEntTypeIdx[];\r\n    const attrib_name: string = '_' + var_name;\r\n    for (let i = 0; i < ents_arr.length; i++) {\r\n        const ent_arr: TEntTypeIdx = ents_arr[i];\r\n        const ent_indices: number[] = ents_indices[i];\r\n        const attrib_value: string = var_name + '[' + ent_indices.join('][') + ']';\r\n        __model__.modeldata.geom.selected.push(ent_arr);\r\n        if (!__model__.modeldata.attribs.query.hasAttrib(ent_arr[0], attrib_name)) {\r\n            __model__.modeldata.attribs.add.addAttrib(ent_arr[0], attrib_name, EAttribDataTypeStrs.STRING);\r\n        }\r\n        __model__.modeldata.attribs.add.setEntAttribVal(ent_arr[0], ent_arr[1], attrib_name, attrib_value);\r\n    }\r\n}\r\nfunction _flatten(arrs: string|string[]|string[][]): [string[], number[][]] {\r\n    const arr_flat: string[] = [];\r\n    const arr_indices: number[][] = [];\r\n    let count = 0;\r\n    for (const item of arrs) {\r\n        if (Array.isArray(item)) {\r\n            const [arr_flat2, arr_indices2] = _flatten(item);\r\n            for (let i = 0; i < arr_flat2.length; i++) {\r\n                if (arr_flat.indexOf(arr_flat2[i]) !== -1) { continue; }\r\n                arr_flat.push(arr_flat2[i]);\r\n                arr_indices2[i].unshift(count);\r\n                arr_indices.push(arr_indices2[i]);\r\n            }\r\n        } else {\r\n            arr_flat.push(item);\r\n            arr_indices.push([count]);\r\n        }\r\n        count += 1;\r\n    }\r\n    return [arr_flat, arr_indices];\r\n}\r\n//  ===============================================================================================\r\n/**\r\n * Checks the model for internal consistency.\r\n * @param __model__\r\n */\r\nexport function __checkModel__(__model__: GIModel): string[] {\r\n    return __model__.check();\r\n}\r\n\r\n// Moved to attrib.ts\r\n//  ===============================================================================================\r\n/**\r\n//  * Sets an attribute value in the model.\r\n//  * @param __model__\r\n//  */\r\n// export function __setAttrib__(__model__: GIModel, entities: TId|TId[]|TId[][],\r\n//                               attrib_name: string, attrib_values: TAttribDataTypes|TAttribDataTypes[], attrib_index?: number): void {\r\n//     // @ts-ignore\r\n//     if (entities !== null && getArrDepth(entities) === 2) { entities = __.flatten(entities); }\r\n//     // --- Error Check ---\r\n//     const fn_name = 'entities@' + attrib_name;\r\n//     let ents_arr: TEntTypeIdx|TEntTypeIdx[] = null;\r\n//     if (entities !== null && entities !== undefined) {\r\n//         ents_arr = checkIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx|TEntTypeIdx[];\r\n//     }\r\n//     checkAttribName(fn_name , attrib_name);\r\n//     // --- Error Check ---\r\n//     _setAttrib(__model__, ents_arr, attrib_name, attrib_values, attrib_index);\r\n// }\r\n// function _setAttrib(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[],\r\n//         attrib_name: string, attrib_values: TAttribDataTypes|TAttribDataTypes[], attrib_index?: number): void {\r\n//     // check the ents_arr\r\n//     if (ents_arr === null) {\r\n//         _setModelAttrib(__model__, attrib_name, attrib_values as TAttribDataTypes, attrib_index);\r\n//         return;\r\n//     } else if (ents_arr.length === 0) {\r\n//         return;\r\n//     } else if (getArrDepth(ents_arr) === 1) {\r\n//         ents_arr = [ents_arr] as TEntTypeIdx[];\r\n//     }\r\n//     ents_arr = ents_arr as TEntTypeIdx[];\r\n//     // check attrib_values\r\n//     // are we setting a list of ents to a list of values?\r\n//     const attrib_values_depth: number = getArrDepth(attrib_values);\r\n//     if (attrib_values_depth === 2) {\r\n//         // attrib values is a list of lists\r\n//         // we assume that we are trying to set a different value for each ent\r\n//         // so we expect the list lengths to be equal\r\n//         _setEachEntDifferentAttribValue(__model__, ents_arr, attrib_name, attrib_values as TAttribDataTypes[], attrib_index);\r\n//         return;\r\n//     } else if (attrib_values_depth === 1) {\r\n//         // check if ents_arr.length equals attrib_values.length\r\n//         // then check if the first ent already has an attrib with the specified name\r\n//         // if both are true, then we assume we are trying to set each ent to each value\r\n//         const attrib_values_arr: number[]|string[] = attrib_values as number[]|string[];\r\n//         if (ents_arr.length === attrib_values_arr.length) {\r\n//             const first_ent_type: number = ents_arr[0][0];\r\n//             if (__model__.modeldata.attribs.query.hasAttrib(first_ent_type, attrib_name)) {\r\n//                 _setEachEntDifferentAttribValue(__model__, ents_arr, attrib_name, attrib_values as TAttribDataTypes[], attrib_index);\r\n//                 return;\r\n//             }\r\n//         }\r\n//     }\r\n//     // all ents get the same attribute value\r\n//     _setEachEntSameAttribValue(__model__, ents_arr, attrib_name, attrib_values as TAttribDataTypes, attrib_index);\r\n//     return;\r\n// }\r\n// function _setModelAttrib(__model__: GIModel, attrib_name: string, attrib_value: TAttribDataTypes, idx_or_key?: number): void {\r\n//     if (typeof idx_or_key === 'number') {\r\n//         __model__.modeldata.attribs.add.setModelAttribListIdxVal(attrib_name, idx_or_key, attrib_value);\r\n//     } if (typeof idx_or_key === 'string') {\r\n//         __model__.modeldata.attribs.add.setModelAttribDictKeyVal(attrib_name, idx_or_key, attrib_value);\r\n//     } else {\r\n//         __model__.modeldata.attribs.add.setModelAttribVal(attrib_name, attrib_value);\r\n//     }\r\n// }\r\n// function _setEachEntDifferentAttribValue(__model__: GIModel, ents_arr: TEntTypeIdx[],\r\n//         attrib_name: string, attrib_values: TAttribDataTypes[], attrib_index?: number): void {\r\n//     if (ents_arr.length !== attrib_values.length) {\r\n//         throw new Error(\r\n//             'If multiple attributes are being set to multiple values, then the number of entities must match the number of values.');\r\n//     }\r\n//     const ent_type: number = ents_arr[0][0];\r\n//     const ents_i: number[] = _getEntsIndices(__model__, ents_arr);\r\n//     for (let i = 0; i < ents_arr.length; i++) {\r\n//         // --- Error Check ---\r\n//         const fn_name = 'entities@' + attrib_name;\r\n//         checkAttribValue(fn_name , attrib_values[i], attrib_index);\r\n//         // --- Error Check ---\r\n//         if (attrib_index !== null && attrib_index !== undefined) {\r\n//             __model__.modeldata.attribs.add.setAttribListIdxVal(ent_type, ents_i[i], attrib_name, attrib_index, attrib_values[i] as number|string);\r\n//         } else {\r\n//             __model__.modeldata.attribs.add.setAttribVal(ent_type, ents_i[i], attrib_name, attrib_values[i]);\r\n//         }\r\n//     }\r\n// }\r\n// function _setEachEntSameAttribValue(__model__: GIModel, ents_arr: TEntTypeIdx[],\r\n//         attrib_name: string, attrib_value: TAttribDataTypes, attrib_index?: number): void {\r\n//     // --- Error Check ---\r\n//     const fn_name = 'entities@' + attrib_name;\r\n//     checkAttribValue(fn_name , attrib_value, attrib_index);\r\n//     // --- Error Check ---\r\n//     const ent_type: number = ents_arr[0][0];\r\n//     const ents_i: number[] = _getEntsIndices(__model__, ents_arr);\r\n//     if (attrib_index !== null && attrib_index !== undefined) {\r\n//         __model__.modeldata.attribs.add.setAttribListIdxVal(ent_type, ents_i, attrib_name, attrib_index, attrib_value as number|string);\r\n//     } else {\r\n//         __model__.modeldata.attribs.add.setAttribVal(ent_type, ents_i, attrib_name, attrib_value);\r\n//     }\r\n// }\r\n// function _getEntsIndices(__model__: GIModel, ents_arr: TEntTypeIdx[]): number[] {\r\n//     const ent_type: number = ents_arr[0][0];\r\n//     const ents_i: number[] = [];\r\n//     for (let i = 0; i < ents_arr.length; i++) {\r\n//         if (ents_arr[i][0] !== ent_type) {\r\n//             throw new Error('If an attribute is being set for multiple entities, then they must all be of the same type.');\r\n//         }\r\n//         ents_i.push(ents_arr[i][1]);\r\n//     }\r\n//     return ents_i;\r\n// }\r\n// //  ===============================================================================================\r\n// /**\r\n//  * Gets an attribute value from the model.\r\n//  * @param __model__\r\n//  */\r\n// export function __getAttrib__(__model__: GIModel, entities: TId|TId[]|TId[][],\r\n//         attrib_name: string, idx_or_key?: number|string): TAttribDataTypes|TAttribDataTypes[] {\r\n//     // @ts-ignore\r\n//     if (entities !== null && getArrDepth(entities) === 2) { entities = __.flatten(entities); }\r\n//     // --- Error Check ---\r\n//     const fn_name = 'Inline.__getAttrib__';\r\n//     let ents_arr: TEntTypeIdx|TEntTypeIdx[] = null;\r\n//     if (entities !== null && entities !== undefined) {\r\n//         ents_arr = checkIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx|TEntTypeIdx[];\r\n//     }\r\n//     checkCommTypes(fn_name, 'attrib_name', attrib_name, [TypeCheckObj.isString]);\r\n//     if (idx_or_key !== null && idx_or_key !== undefined) {\r\n//         checkCommTypes(fn_name, 'attrib_index', idx_or_key, [TypeCheckObj.isNumber, TypeCheckObj.isString]);\r\n//     }\r\n//     // --- Error Check ---\r\n//     return _getAttrib(__model__, ents_arr, attrib_name, idx_or_key);\r\n// }\r\n// function _getAttrib(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[],\r\n//         attrib_name: string, idx_or_key?: number|string): TAttribDataTypes|TAttribDataTypes[] {\r\n//     const has_idx_or_key: boolean = idx_or_key !== null && idx_or_key !== undefined;\r\n//     if (ents_arr === null) {\r\n//         if (has_idx_or_key && typeof idx_or_key === 'number') {\r\n//             return __model__.modeldata.attribs.query.getModelAttribListIdxVal(attrib_name, idx_or_key);\r\n//         } else if (has_idx_or_key && typeof idx_or_key === 'string') {\r\n//             return __model__.modeldata.attribs.query.getModelAttribDictKeyVal(attrib_name, idx_or_key);\r\n//         } else {\r\n//             return __model__.modeldata.attribs.query.getModelAttribVal(attrib_name);\r\n//         }\r\n//     } else if (ents_arr.length === 0) {\r\n//         return;\r\n//     } else if (getArrDepth(ents_arr) === 1) {\r\n//         const [ent_type, ent_i]: TEntTypeIdx = ents_arr as TEntTypeIdx;\r\n//         if (attrib_name === 'id') {\r\n//             if (has_idx_or_key) { throw new Error('The \"id\" attribute does have an index or key.'); }\r\n//             return EEntTypeStr[ent_type] + ent_i as TAttribDataTypes;\r\n//         } else if (has_idx_or_key && typeof idx_or_key === 'number') {\r\n//             return __model__.modeldata.attribs.query.getAttribListIdxVal(ent_type, attrib_name, ent_i, idx_or_key);\r\n//         } else if (has_idx_or_key && typeof idx_or_key === 'string') {\r\n//             return __model__.modeldata.attribs.query.getAttribDictKeyVal(ent_type, attrib_name, ent_i, idx_or_key);\r\n//         } else {\r\n//             return __model__.modeldata.attribs.query.getAttribVal(ent_type, attrib_name, ent_i);\r\n//         }\r\n//     } else {\r\n//         return (ents_arr as TEntTypeIdx[]).map( ent_arr =>\r\n//             _getAttrib(__model__, ent_arr, attrib_name, idx_or_key) ) as TAttribDataTypes[];\r\n//     }\r\n// }\r\n","import { GIModel } from '@libs/geo-info/GIModel';\r\n\r\n/**\r\n* Return certain value from the model for the flowchart's end node\r\n * @summary Return a specific value\r\n * @param {any[]} __model__  Model of the node.\r\n * @param {number} value  Index of the value to be returned.\r\n * @returns {any} Value\r\n */\r\nexport function Return(__model__: GIModel, value: any): any {\r\n    return value;\r\n}\r\n","/**\r\n * Shared utility functions\r\n * ~\r\n * ~\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { TId, TPlane, Txyz, EEntType, TRay, TEntTypeIdx, EEntTypeStr, Txy} from '@libs/geo-info/common';\r\nimport { getArrDepth, isColl, isPosi, isPgon, isPline, isPoint } from '@assets/libs/geo-info/id';\r\nimport { vecDiv, vecSum, vecAvg, vecFromTo, vecLen, vecCross, vecNorm, vecAdd, vecSetLen, vecDot } from '@assets/libs/geom/vectors';\r\nimport { isRay, isPlane, isXYZ } from '@assets/libs/geo-info/virtual';\r\nimport { rayFromPln } from '@assets/core/inline/_ray';\r\nimport { plnFromRay } from '@assets/core/inline/_plane';\r\nimport * as THREE from 'three';\r\nconst EPS = 1e-8;\r\n\r\n// ================================================================================================\r\nexport function getOrigin(__model__: GIModel, data: Txyz|TRay|TPlane|TId|TId[], fn_name: string): Txyz {\r\n    if (isXYZ(data)) { return data as Txyz; }\r\n    if (isRay(data)) { return data[0] as Txyz; }\r\n    if (isPlane(data)) { return data[0] as Txyz; }\r\n    const ents: TId|TId[] = data as TId|TId[];\r\n    const origin: Txyz = getCentoridFromEnts(__model__, ents, fn_name);\r\n    return origin as Txyz;\r\n}\r\n// ================================================================================================\r\nexport function getRay(__model__: GIModel, data: Txyz|TRay|TPlane|TId|TId[], fn_name: string): TRay {\r\n    if (isXYZ(data)) { return [data, [0, 0, 1]] as TRay; }\r\n    if (isRay(data)) { return data as TRay; }\r\n    if (isPlane(data)) { return rayFromPln(data as TPlane) as TRay; }\r\n    const ents: TId|TId[] = data as TId|TId[];\r\n    const origin: Txyz = getCentoridFromEnts(__model__, ents, fn_name);\r\n    return [origin, [0, 0, 1]] as TRay;\r\n}\r\n// ================================================================================================\r\nexport function getPlane(__model__: GIModel, data: Txyz|TRay|TPlane|TId|TId[], fn_name: string): TPlane {\r\n    if (isXYZ(data)) { return [data, [1, 0, 0], [0, 1, 0]] as TPlane; }\r\n    if (isRay(data)) { return plnFromRay(data as TRay) as TPlane; }\r\n    if (isPlane(data)) { return data as TPlane; }\r\n    const ents: TId|TId[] = data as TId|TId[];\r\n    const origin: Txyz = getCentoridFromEnts(__model__, ents, fn_name);\r\n    return [origin, [1, 0, 0], [0, 1, 0]] as TPlane;\r\n}\r\n// ================================================================================================\r\nexport function getCentoridFromEnts(__model__: GIModel, ents: TId|TId[], fn_name: string): Txyz {\r\n    // this must be an ID or an array of IDs, so lets get the centroid\r\n    // TODO this error message is confusing\r\n    const ents_arr: TEntTypeIdx|TEntTypeIdx[] = checkIDs(fn_name, 'ents', ents,\r\n        [IdCh.isId, IdCh.isIdL],\r\n        [EEntType.POSI, EEntType.VERT, EEntType.POINT, EEntType.EDGE, EEntType.WIRE,\r\n            EEntType.PLINE, EEntType.FACE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx;\r\n    const centroid: Txyz|Txyz[] = getCentroid(__model__, ents_arr);\r\n    if (Array.isArray(centroid[0])) {\r\n        return vecAvg(centroid as Txyz[]) as Txyz;\r\n    }\r\n    return centroid as Txyz;\r\n}\r\n// ================================================================================================\r\nexport function getCentroid(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[]): Txyz|Txyz[] {\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        const [ent_type, index]: [EEntType, number] = ents_arr as TEntTypeIdx;\r\n        const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n        return _centroidPosis(__model__, posis_i);\r\n    } else {\r\n        // divide the input into posis and non posis\r\n        ents_arr = ents_arr as TEntTypeIdx[];\r\n        const posis_i: number[] = [];\r\n        const np_ents_arr: TEntTypeIdx[] = [];\r\n        for (const ent_arr of ents_arr) {\r\n            if (ent_arr[0] === EEntType.POSI) {\r\n                posis_i.push(ent_arr[1]);\r\n            } else {\r\n                np_ents_arr.push(ent_arr);\r\n            }\r\n        }\r\n        // if we only have posis, just return one centorid\r\n        // in all other cases return a list of centroids\r\n        const np_cents: Txyz[] = (np_ents_arr as TEntTypeIdx[]).map( ent_arr => getCentroid(__model__, ent_arr) ) as Txyz[];\r\n        if (posis_i.length > 0) {\r\n            const cen_posis: Txyz = _centroidPosis(__model__, posis_i);\r\n            if (np_cents.length === 0) {\r\n                return cen_posis;\r\n            } else {\r\n                np_cents.push(cen_posis);\r\n            }\r\n        }\r\n        return np_cents;\r\n    }\r\n}\r\nfunction _centroidPosis(__model__: GIModel, posis_i: number[]): Txyz {\r\n    const unique_posis_i = Array.from(new Set(posis_i));\r\n    const unique_xyzs: Txyz[] = unique_posis_i.map( posi_i => __model__.modeldata.attribs.query.getPosiCoords(posi_i));\r\n    return vecDiv(vecSum(unique_xyzs), unique_xyzs.length);\r\n}\r\n// ================================================================================================\r\nexport function getCenterOfMass(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[]): Txyz|Txyz[] {\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        const [ent_type, ent_i]: [EEntType, number] = ents_arr as TEntTypeIdx;\r\n        const faces_i: number[] = __model__.modeldata.geom.nav.navAnyToFace(ent_type, ent_i);\r\n        if (faces_i.length === 0) { return null; }\r\n        return _centerOfMass(__model__, faces_i);\r\n    } else {\r\n        const cents: Txyz[] = [];\r\n        ents_arr = ents_arr as TEntTypeIdx[];\r\n        for (const [ent_type, ent_i] of ents_arr) {\r\n            const faces_i: number[] = __model__.modeldata.geom.nav.navAnyToFace(ent_type, ent_i);\r\n            if (faces_i.length === 0) { cents.push(null); }\r\n            cents.push(_centerOfMass(__model__, faces_i));\r\n        }\r\n        return cents;\r\n    }\r\n}\r\nfunction _centerOfMass(__model__: GIModel, faces_i: number[]): Txyz {\r\n    const face_midpoints: Txyz[] = [];\r\n    const face_areas: number[] = [];\r\n    let total_area = 0;\r\n    for (const face_i of faces_i) {\r\n        const [midpoint_xyz, area]: [Txyz, number] = _centerOfMassOfFace(__model__, face_i);\r\n        face_midpoints.push(midpoint_xyz);\r\n        face_areas.push(area);\r\n        total_area += area;\r\n    }\r\n    const cent: Txyz = [0, 0, 0];\r\n    for (let i = 0; i < face_midpoints.length; i++) {\r\n        const weight: number = face_areas[i] / total_area;\r\n        cent[0] = cent[0] + face_midpoints[i][0] * weight;\r\n        cent[1] = cent[1] + face_midpoints[i][1] * weight;\r\n        cent[2] = cent[2] + face_midpoints[i][2] * weight;\r\n    }\r\n    return cent;\r\n}\r\nfunction _centerOfMassOfFace(__model__: GIModel, face_i: number): [Txyz, number] {\r\n    const tri_midpoints: Txyz[] = [];\r\n    const tri_areas: number[] = [];\r\n    let total_area = 0;\r\n    const map_posi_to_v3: Map< number, THREE.Vector3> = new Map();\r\n    for (const tri_i of __model__.modeldata.geom.nav.navFaceToTri(face_i)) {\r\n        const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.TRI, tri_i);\r\n        const posis_v3: THREE.Vector3[] = [];\r\n        for (const posi_i of posis_i) {\r\n            let posi_v3: THREE.Vector3 = map_posi_to_v3.get(posi_i);\r\n            if (posi_v3 === undefined) {\r\n                const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n                posi_v3 = new THREE.Vector3(xyz[0], xyz[1], xyz[2]);\r\n            }\r\n            posis_v3.push(posi_v3);\r\n        }\r\n        const tri_tjs: THREE.Triangle = new THREE.Triangle(posis_v3[0], posis_v3[1], posis_v3[2]);\r\n        let midpoint: THREE.Vector3;\r\n        midpoint = tri_tjs.getMidpoint(midpoint);\r\n        const midpoint_xyz: Txyz = [midpoint.x, midpoint.y, midpoint.z];\r\n        const area: number = tri_tjs.getArea();\r\n        tri_midpoints.push(midpoint_xyz);\r\n        tri_areas.push(area);\r\n        total_area += area;\r\n    }\r\n    const cent: Txyz = [0, 0, 0];\r\n    for (let i = 0; i < tri_midpoints.length; i++) {\r\n        const weight: number = tri_areas[i] / total_area;\r\n        cent[0] = cent[0] + tri_midpoints[i][0] * weight;\r\n        cent[1] = cent[1] + tri_midpoints[i][1] * weight;\r\n        cent[2] = cent[2] + tri_midpoints[i][2] * weight;\r\n    }\r\n    return [cent, total_area];\r\n}\r\n// ================================================================================================\r\n// used by sweep\r\n// TODO update offset code to use this as well\r\n/* Function to get a set of planes along the length of a wire.\r\n * The planes are orientated perpendicular to the wire.\r\n *\r\n */\r\nexport function getPlanesSeq(xyzs: Txyz[], normal: Txyz, close: boolean): TPlane[] {\r\n    normal = vecNorm(normal);\r\n    // if closed, add a posi to the end\r\n    if (close) {\r\n        xyzs.splice(0, 0, xyzs[xyzs.length - 1]);\r\n        xyzs.push(xyzs[1]);\r\n    }\r\n    // get the perp vectors\r\n    let perp_vec: Txyz = null;\r\n    let has_bad_edges = false;\r\n    const perp_vecs: Txyz[] = []; // normalise dvectors\r\n    for (let i = 0; i < xyzs.length - 1; i++) {\r\n        const xyz0: Txyz = xyzs[i];\r\n        const xyz1: Txyz = xyzs[i + 1];\r\n        const edge_vec: Txyz = vecFromTo(xyz0, xyz1);\r\n        if (vecLen(edge_vec) > 0) {\r\n            perp_vec = vecCross(vecNorm(edge_vec), normal);\r\n        } else {\r\n            perp_vec = null;\r\n            has_bad_edges = true;\r\n        }\r\n        perp_vecs.push(perp_vec);\r\n    }\r\n    // fix any bad pairs, by setting the perp vec to its next neighbour\r\n    if (has_bad_edges) {\r\n        if (perp_vecs[perp_vecs.length - 1] === null) {\r\n            throw new Error('Error: could not process wire.');\r\n        }\r\n        for (let i = perp_vecs.length - 1; i >= 0; i--) {\r\n            if (perp_vecs[i] === null) {\r\n                perp_vecs[i] = perp_vec;\r\n            } else {\r\n                perp_vec = perp_vecs[i];\r\n            }\r\n        }\r\n    }\r\n    // array for planes\r\n    const planes: TPlane[] = [];\r\n    // if not closed, we need to deal with the first and last planes\r\n    if (!close) {\r\n        // first plane\r\n        const first_xyz: Txyz = xyzs[0];\r\n        const x_axis: Txyz = perp_vecs[0];\r\n        const first2_perp_vec: Txyz = perp_vecs[1];\r\n        let y_axis: Txyz = normal;\r\n        if (vecDot(x_axis, first2_perp_vec) < EPS) { // TODOD < what is a good value for this?\r\n            y_axis = vecCross(x_axis, first2_perp_vec);\r\n        }\r\n        const first_plane: TPlane = [first_xyz, x_axis, y_axis];\r\n        planes.push(first_plane);\r\n    }\r\n    // loop through all the edges and create a plane at the end of the edge\r\n    for (let i = 0; i < perp_vecs.length - 1; i++) {\r\n        // get the xyz\r\n        const xyz: Txyz = xyzs[i + 1];\r\n        // get the two perpendicular vectors\r\n        const this_perp_vec: Txyz = perp_vecs[i];\r\n        const next_perp_vec: Txyz = perp_vecs[i + 1];\r\n        // calc the local norm\r\n        let y_axis: Txyz = normal;\r\n        if (vecDot(this_perp_vec, next_perp_vec) < EPS) { // TODOD < what is a good value for this?\r\n            y_axis = vecCross(this_perp_vec, next_perp_vec);\r\n        }\r\n        // calc the offset vector\r\n        let x_axis: Txyz = vecNorm(vecAdd(this_perp_vec, next_perp_vec));\r\n        const dot: number = vecDot(this_perp_vec, x_axis);\r\n        const vec_len = 1 / dot;\r\n        x_axis = vecSetLen(x_axis, vec_len);\r\n        // create the plane\r\n        const plane: TPlane = [xyz, x_axis, y_axis];\r\n        planes.push(plane);\r\n    }\r\n    // if not closed, we need to deal with the first and last planes\r\n    if (!close) {\r\n        // last plane\r\n        const last_xyz: Txyz = xyzs[xyzs.length - 1];\r\n        const x_axis: Txyz = perp_vecs[perp_vecs.length - 1];\r\n        const last2_perp_vec: Txyz = perp_vecs[perp_vecs.length - 2];\r\n        let y_axis: Txyz = normal;\r\n        if (vecDot(last2_perp_vec, x_axis) < EPS) { // TODOD < what is a good value for this?\r\n            y_axis = vecCross(last2_perp_vec, x_axis);\r\n        }\r\n        const last_plane: TPlane = [last_xyz, x_axis, y_axis];\r\n        planes.push(last_plane);\r\n    }\r\n    // return the planes\r\n    return planes;\r\n}\r\n// ================================================================================================\r\n\r\n\r\n// ================================================================================================\r\n// Utility functions used in make.Copy() and in poly2d.Stitch()\r\n/**\r\n * Copy posis, points, plines, pgons\r\n * @param __model__\r\n * @param ents_arr\r\n * @param copy_attributes\r\n */\r\nexport function _copyGeom(__model__: GIModel,\r\n    ents_arr: TEntTypeIdx | TEntTypeIdx[] | TEntTypeIdx[][], copy_attributes: boolean): TEntTypeIdx | TEntTypeIdx[] | TEntTypeIdx[][] {\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 1) {\r\n        const [ent_type, index]: TEntTypeIdx = ents_arr as TEntTypeIdx;\r\n        if (isColl(ent_type)) {\r\n            const coll_i: number = __model__.modeldata.geom.add.copyColls(index, copy_attributes) as number;\r\n            return [ent_type, coll_i];\r\n        } else if (isPgon(ent_type)) {\r\n            const obj_i: number = __model__.modeldata.geom.add.copyPgons(index, copy_attributes) as number;\r\n            return [ent_type, obj_i];\r\n        } else if (isPline(ent_type)) {\r\n            const obj_i: number = __model__.modeldata.geom.add.copyPlines(index, copy_attributes) as number;\r\n            return [ent_type, obj_i];\r\n        } else if (isPoint(ent_type)) {\r\n            const obj_i: number = __model__.modeldata.geom.add.copyPoints(index, copy_attributes) as number;\r\n            return [ent_type, obj_i];\r\n        } else if (isPosi(ent_type)) {\r\n            const posi_i: number = __model__.modeldata.geom.add.copyPosis(index, copy_attributes) as number;\r\n            return [ent_type, posi_i];\r\n        }\r\n    } else if (depth === 2) {\r\n        ents_arr = ents_arr as TEntTypeIdx[];\r\n        return ents_arr.map(ents_arr_item => _copyGeom(__model__, ents_arr_item, copy_attributes)) as TEntTypeIdx[];\r\n    } else { // depth > 2\r\n        ents_arr = ents_arr as TEntTypeIdx[][];\r\n        return ents_arr.map(ents_arr_item => _copyGeom(__model__, ents_arr_item, copy_attributes)) as TEntTypeIdx[][];\r\n    }\r\n}\r\nexport function _copyGeomPosis(__model__: GIModel, ents_arr: TEntTypeIdx | TEntTypeIdx[] | TEntTypeIdx[][],\r\n        copy_attributes: boolean, vector: Txyz): void {\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 1) {\r\n        ents_arr = [ents_arr] as TEntTypeIdx[];\r\n    } else if (depth > 2) {\r\n        // @ts-ignore\r\n        ents_arr = ents_arr.flat(depth - 2) as TEntTypeIdx[];\r\n    }\r\n    // create the new positions\r\n    const old_to_new_posis_i_map: Map<number, number> = new Map(); // count number of posis\r\n    for (const ent_arr of ents_arr) {\r\n        const [ent_type, index]: TEntTypeIdx = ent_arr as TEntTypeIdx;\r\n        // something may not be right here\r\n        // if you copy a pgon + posi, if you process the pgon first you wil make a copy of the posis\r\n        // but the posi may already be copied by the _copyGeom function, then we get two copies of that posi\r\n        // I think this whole copy-move function need to to be moved to the GI library, can also make it more efficient\r\n        if (isPosi(ent_type) && vector !== null) { // positions\r\n            const old_posi_i: number = index;\r\n            let new_posi_i: number;\r\n            if (old_to_new_posis_i_map.has(old_posi_i)) {\r\n                new_posi_i = old_to_new_posis_i_map.get(old_posi_i);\r\n            } else {\r\n                const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(old_posi_i);\r\n                __model__.modeldata.attribs.add.setPosiCoords(old_posi_i, vecAdd(xyz, vector));\r\n                old_to_new_posis_i_map.set(old_posi_i, new_posi_i);\r\n            }\r\n        } else { // obj or coll\r\n            const old_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n            const ent_new_posis_i: number[] = [];\r\n            for (const old_posi_i of old_posis_i) {\r\n                let new_posi_i: number;\r\n                if (old_to_new_posis_i_map.has(old_posi_i)) {\r\n                    new_posi_i = old_to_new_posis_i_map.get(old_posi_i);\r\n                } else {\r\n                    new_posi_i = __model__.modeldata.geom.add.copyMovePosis(old_posi_i, vector, copy_attributes) as number;\r\n                    old_to_new_posis_i_map.set(old_posi_i, new_posi_i);\r\n                }\r\n                ent_new_posis_i.push(new_posi_i);\r\n            }\r\n            __model__.modeldata.geom.modify.replacePosis(ent_type, index, ent_new_posis_i);\r\n        }\r\n    }\r\n    // return all the new points\r\n    // const all_new_posis_i: number[] = Array.from(old_to_new_posis_i_map.values());\r\n    // return all_new_posis_i.map( posi_i => [EEntType.POSI, posi_i] ) as TEntTypeIdx[];\r\n}\r\n","/**\r\n * The `analysis` module has functions for performing various types of analysis with entities in the model.\r\n * These functions all return dictionaries containing the results of the analysis.\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { TId, Txyz, EEntType, TEntTypeIdx, TRay, TPlane, Txy, EAttribDataTypeStrs } from '@libs/geo-info/common';\r\nimport { getArrDepth, idsMakeFromIndicies, idsMake, idsBreak } from '@libs/geo-info/id';\r\nimport { distance } from '@libs/geom/distance';\r\nimport { vecAdd, vecCross, vecMult, vecNorm, vecAng2, vecSetLen, vecRot } from '@libs/geom/vectors';\r\nimport uscore from 'underscore';\r\nimport { min, max } from '@assets/core/inline/_math';\r\nimport { arrMakeFlat, getArrDepth2 } from '@assets/libs/util/arrs';\r\nimport { degToRad } from '@assets/core/inline/_conversion';\r\nimport { multMatrix } from '@libs/geom/matrix';\r\nimport { XAXIS, YAXIS, ZAXIS } from '@assets/libs/geom/constants';\r\nimport cytoscape from 'cytoscape';\r\nimport * as THREE from 'three';\r\nimport { TypedArrayUtils } from '@libs/TypedArrayUtils.js';\r\nimport * as Mathjs from 'mathjs';\r\nimport { createSingleMeshTjs } from '@assets/libs/geom/mesh';\r\nimport { isRay, isXYZ, isPlane } from '@assets/libs/geo-info/virtual';\r\n\r\n// ================================================================================================\r\ninterface TRaytraceResult {\r\n    hit_count?: number;\r\n    miss_count?: number;\r\n    total_dist?: number;\r\n    min_dist?: number;\r\n    avg_dist?: number;\r\n    max_dist?: number;\r\n    dist_ratio?: number;\r\n    distances?: number[];\r\n    hit_pgons?: TId[];\r\n    intersections?: Txyz[];\r\n}\r\nexport enum _ERaytraceMethod {\r\n    STATS = 'stats',\r\n    DISTANCES = 'distances',\r\n    HIT_PGONS = 'hit_pgons',\r\n    INTERSECTIONS = 'intersections',\r\n    ALL = 'all'\r\n}\r\n/**\r\n * Shoot a set of rays into a set of obstructions, consisting of polygon faces.\r\n * One can imagine particles being shot from the ray origin in the ray direction, hitting the obstructions.\r\n * ~\r\n * Each ray will either hit an obstruction, or will hit no obstructions.\r\n * The length of the ray vector is ignored, only the ray origin and direction is taken into account.\r\n * Each particle shot out from a ray will travel a certain distance.\r\n * The minimum and maximum distance that the particle will travel is defined by the 'dist' argument.\r\n * ~\r\n * If a ray particle hits an obstruction, then the 'distance' for that ray is the distance from the ray origin\r\n * to the point of intersection.\r\n * If the ray particle does not hit an obstruction, then the 'distance' for that ray is equal to\r\n * the max for the 'dist' argument.\r\n * ~\r\n * Returns a dictionary containing the following data.\r\n * ~\r\n * If 'stats' is selected, the dictionary will contain the following numbers:\r\n * 1) 'hit_count': the total number of rays that hit an obstruction.\r\n * 2) 'miss_count': the total number of rays that did not hit any obstruction.\r\n * 3) 'total_dist': the total of all the ray distances.\r\n * 4) 'min_dist': the minimum distance for all the rays.\r\n * 5) 'max_dist': the maximum distance for all the rays.\r\n * 6) 'avg_dist': the average dist for all the rays.\r\n * 7) 'dist_ratio': the ratio of 'total_dist' to the maximum distance if not rays hit any obstructions.\r\n  * ~\r\n * If 'distances' is selected, the dictionary will contain the following list:\r\n * 1) 'distances': A list of numbers, the distance travelled for each ray.\r\n   * ~\r\n * If 'hit_pgons' is selected, the dictionary will contain the following list:\r\n * 1) 'hit_pgons': A list of polygon IDs, the polygons hit for each ray, or 'null' if no polygon was hit.\r\n * ~\r\n * If 'intersections' is selected, the dictionary will contain the following list:\r\n * 1) 'intersections': A list of XYZ coords, the point of intersection where the ray hit a polygon,\r\n * or 'null' if no polygon was hit.\r\n * ~\r\n * If 'all' is selected, the dictionary will contain all of the above.\r\n * ~\r\n * If the input is a list of rays, the output will be a single dictionary.\r\n * If the list is empty (i.e. contains no rays), then 'null' is returned.\r\n * If the input is a list of lists of rays, then the output will be a list of dictionaries.\r\n * ~\r\n * @param __model__\r\n * @param rays A ray, a list of rays, or a list of lists of rays.\r\n * @param entities The obstructions, faces, polygons, or collections of faces or polygons.\r\n * @param dist The ray limits, one or two numbers. Either max, or [min, max].\r\n * @param method Enum; values to return.\r\n */\r\nexport function Raytrace(__model__: GIModel, rays: TRay|TRay[]|TRay[][],\r\n        entities: TId|TId[]|TId[][], dist: number|[number, number], method: _ERaytraceMethod): TRaytraceResult|TRaytraceResult[] {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'analyze.Raytrace';\r\n    let ents_arrs: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'rays', rays, [ArgCh.isRay, ArgCh.isRayL, ArgCh.isRayLL]);\r\n        ents_arrs = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL],\r\n            [EEntType.FACE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        checkArgs(fn_name, 'dist', dist, [ArgCh.isNum, ArgCh.isNumL]);\r\n        if (Array.isArray(dist)) {\r\n            if (dist.length !== 2) { throw new Error('If \"dist\" is a list, it must have a length of two: [min_dist, max_dist].'); }\r\n            if (dist[0] >= dist[1]) { throw new Error('If \"dist\" is a list, the \"min_dist\" must be less than the \"max_dist\": [min_dist, max_dist].'); }\r\n        }\r\n    } else {\r\n        // ents_arrs = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        // [EEntType.FACE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        ents_arrs = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const mesh: [THREE.Mesh, number[]] = createSingleMeshTjs(__model__, ents_arrs);\r\n    dist = Array.isArray(dist) ? dist : [0, dist];\r\n    const result = _raytraceAll(__model__, rays, mesh, dist, method);\r\n    // cleanup\r\n    mesh[0].geometry.dispose();\r\n    (mesh[0].material as THREE.Material).dispose();\r\n    // return the results\r\n    return result;\r\n}\r\nfunction _raytraceAll(__model__: GIModel, rays: TRay|TRay[]|TRay[][],\r\n        mesh: [THREE.Mesh, number[]], limits: [number, number],\r\n        method: _ERaytraceMethod): TRaytraceResult|TRaytraceResult[] {\r\n    const depth: number = getArrDepth2(rays);\r\n    if (depth < 2) {// an empty list\r\n        return null;\r\n    } else if (depth === 2) {// just one ray\r\n        return _raytraceAll(__model__, [rays] as TRay[], mesh, limits, method);\r\n    } else if (depth === 3) { // a list of rays\r\n        const [origins_tjs, dirs_tjs]: [THREE.Vector3[], THREE.Vector3[]] =\r\n            _raytraceOriginsDirsTjs(__model__, rays as TRay[]);\r\n        return _raytrace(origins_tjs, dirs_tjs, mesh, limits, method) as TRaytraceResult;\r\n    } else if (depth === 4) { // a nested list of rays\r\n        return (rays as TRay[][]).map(a_rays => _raytraceAll(\r\n            __model__, a_rays, mesh, limits, method)) as TRaytraceResult[];\r\n    }\r\n}\r\nfunction _raytraceOriginsDirsTjs(__model__: GIModel, rays: TRay[]): [THREE.Vector3[], THREE.Vector3[]] {\r\n    const origins_tjs: THREE.Vector3[] = [];\r\n    const dirs_tjs: THREE.Vector3[] = [];\r\n    for (const ray of rays) {\r\n        origins_tjs.push(new THREE.Vector3(ray[0][0], ray[0][1], ray[0][2]));\r\n        const dir = vecNorm(ray[1]);\r\n        dirs_tjs.push(new THREE.Vector3(dir[0], dir[1], dir[2]));\r\n    }\r\n    return [origins_tjs, dirs_tjs];\r\n}\r\nfunction _raytrace(origins_tjs: THREE.Vector3[], dirs_tjs: THREE.Vector3[], mesh: [THREE.Mesh, number[]],\r\n        limits: [number, number], method: _ERaytraceMethod): TRaytraceResult {\r\n    const result: TRaytraceResult = {};\r\n    let hit_count = 0;\r\n    let miss_count = 0;\r\n    const result_dists: number[] = [];\r\n    const result_ents: TId[] = [];\r\n    const result_isects: Txyz[] = [];\r\n    for (let i = 0; i < origins_tjs.length; i++) {\r\n        // get the origin and direction\r\n        const origin_tjs = origins_tjs[i];\r\n        const dir_tjs = dirs_tjs[i];\r\n        // shoot\r\n        const ray_tjs: THREE.Raycaster = new THREE.Raycaster(origin_tjs, dir_tjs, limits[0], limits[1]);\r\n        const isects: THREE.Intersection[] = ray_tjs.intersectObject(mesh[0], false);\r\n        // get the result\r\n        if (isects.length === 0) {\r\n            result_dists.push(limits[1]);\r\n            miss_count += 1;\r\n            if (method === _ERaytraceMethod.ALL || method === _ERaytraceMethod.HIT_PGONS) {\r\n                result_ents.push( null );\r\n            }\r\n            if (method === _ERaytraceMethod.ALL || method === _ERaytraceMethod.INTERSECTIONS) {\r\n                const origin: Txyz = origin_tjs.toArray() as Txyz;\r\n                const dir: Txyz = dir_tjs.toArray() as Txyz;\r\n                result_isects.push(vecAdd(origin, vecSetLen(dir, limits[1])));\r\n            }\r\n        } else {\r\n            result_dists.push(isects[0]['distance']);\r\n            hit_count += 1;\r\n            if (method === _ERaytraceMethod.ALL || method === _ERaytraceMethod.HIT_PGONS) {\r\n                const face_i = mesh[1][isects[0].faceIndex];\r\n                result_ents.push( idsMake([EEntType.PGON, face_i]) as TId );\r\n            }\r\n            if (method === _ERaytraceMethod.ALL || method === _ERaytraceMethod.INTERSECTIONS) {\r\n                const isect_tjs: THREE.Vector3 = isects[0].point;\r\n                result_isects.push([isect_tjs.x, isect_tjs.y, isect_tjs.z]);\r\n            }\r\n        }\r\n    }\r\n    if ((method === _ERaytraceMethod.ALL || method === _ERaytraceMethod.STATS) && result_dists.length > 0) {\r\n        result.hit_count = hit_count;\r\n        result.miss_count = miss_count;\r\n        result.total_dist = Mathjs.sum(result_dists);\r\n        result.min_dist = min(result_dists);\r\n        result.avg_dist = result.total_dist / result_dists.length;\r\n        result.max_dist = max(result_dists);\r\n        result.dist_ratio = result.total_dist / (result_dists.length * limits[1]);\r\n    }\r\n    if (method === _ERaytraceMethod.ALL || method === _ERaytraceMethod.DISTANCES) {\r\n        result.distances = result_dists;\r\n    }\r\n    if (method === _ERaytraceMethod.ALL || method === _ERaytraceMethod.HIT_PGONS) {\r\n        result.hit_pgons = result_ents;\r\n    }\r\n    if (method === _ERaytraceMethod.ALL || method === _ERaytraceMethod.INTERSECTIONS) {\r\n        result.intersections = result_isects;\r\n    }\r\n    return result;\r\n}\r\n// ================================================================================================\r\ninterface TIsovistResult {\r\n    avg_dist?: number[];\r\n    min_dist?: number[];\r\n    max_dist?: number[];\r\n    area?: number[];\r\n    perimeter?: number[];\r\n    area_ratio?: number[];\r\n    perimeter_ratio?: number[];\r\n    circularity?: number[];\r\n    compactness?: number[];\r\n    cluster?: number[];\r\n}\r\n/**\r\n * Calculates an approximation of the isovist for a set of origins, defined by XYZ coords.\r\n * ~\r\n * The isovist is calculated by shooting rays out from the origins in a radial pattern.\r\n * The 'radius' argument defines the maximum radius of the isovist.\r\n * (The radius is used to define the maximum distance for shooting the rays.)\r\n * The 'num_rays' argument defines the number of rays that will be shot,\r\n * in a radial pattern parallel to the XY plane, with equal angle between rays.\r\n * More rays will result in more accurate result, but will also be slower to execute.\r\n * ~\r\n * Returns a dictionary containing different isovist metrics.\r\n * ~\r\n * 1) 'avg_dist': The average distance from origin to the perimeter.\r\n * 2) 'min_dist': The minimum distance from the origin to the perimeter.\r\n * 3) 'max_dist': The minimum distance from the origin to the perimeter.\r\n * 4) 'area': The area of the isovist.\r\n * 5) 'perimeter': The perimeter of the isovist.\r\n * 4) 'area_ratio': The ratio of the area of the isovist to the maximum area.\r\n * 5) 'perimeter_ratio': The ratio of the perimeter of the isovist to the maximum perimeter.\r\n * 6) 'circularity': The ratio of the square of the perimeter to area (Davis and Benedikt, 1979).\r\n * 7) 'compactness': The ratio of average distance to the maximum distance (Michael Batty, 2001).\r\n * 8) 'cluster': The ratio of the radius of an idealized circle with the actual area of the\r\n * isovist to the radius of an idealized circle with the actual perimeter of the circle (Michael Batty, 2001).\r\n * ~\r\n * ~\r\n * @param __model__\r\n * @param origins A list of Rays or a list of Planes, to be used as the origins for calculating the isovists.\r\n * @param entities The obstructions: faces, polygons, or collections.\r\n * @param radius The maximum radius of the isovist.\r\n * @param num_rays The number of rays to generate when calculating isovists.\r\n */\r\nexport function Isovist(__model__: GIModel, origins: TRay[]|TPlane[],\r\n        entities: TId|TId[]|TId[][], radius: number, num_rays: number): TIsovistResult {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'analyze.Isovist';\r\n    // let origin_ents_arrs: TEntTypeIdx[];\r\n    let ents_arrs: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'origins', origins, [ArgCh.isRayL, ArgCh.isPlnL]);\r\n        ents_arrs = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isIdL],\r\n            [EEntType.FACE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        checkArgs(fn_name, 'dist', radius, [ArgCh.isNum, ArgCh.isNumL]);\r\n        if (Array.isArray(radius)) {\r\n            if (radius.length !== 2) { throw new Error('If \"dist\" is a list, it must have a length of two: [min_dist, max_dist].'); }\r\n            if (radius[0] >= radius[1]) { throw new Error('If \"dist\" is a list, the \"min_dist\" must be less than the \"max_dist\": [min_dist, max_dist].'); }\r\n        }\r\n    } else {\r\n        // origin_ents_arrs = idsBreak(origins) as TEntTypeIdx[];\r\n        ents_arrs = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    // create tjs origins for xyz, ray, or plane\r\n    const origins_tjs: THREE.Vector3[] = _isovistOriginsTjs(__model__, origins, 0.1); // TODO Should we lift coords by 0.1 ???\r\n    // create tjs directions\r\n    const dirs_xyzs: Txyz[] = [];\r\n    const dirs_tjs: THREE.Vector3[] = [];\r\n    const vec: Txyz = [1, 0, 0];\r\n    for (let i = 0; i < num_rays; i++) {\r\n        const dir_xyz = vecRot(vec, [0, 0, 1], i * (Math.PI * 2) / num_rays);\r\n        dirs_xyzs.push(vecSetLen(dir_xyz, radius));\r\n        const dir_tjs: THREE.Vector3 = new THREE.Vector3(dir_xyz[0], dir_xyz[1], dir_xyz[2]);\r\n        dirs_tjs.push(dir_tjs);\r\n    }\r\n    // calc max perim and area\r\n    const ang = (2 * Math.PI) / num_rays;\r\n    const opp = radius * Math.sin(ang / 2);\r\n    const max_perim = num_rays * 2 * opp;\r\n    const max_area = num_rays * radius * Math.cos(ang / 2) * opp;\r\n    // create mesh\r\n    const mesh: [THREE.Mesh, number[]] = createSingleMeshTjs(__model__, ents_arrs);\r\n    // create data structure\r\n    const result: TIsovistResult = { };\r\n    result.avg_dist = [];\r\n    result.min_dist = [];\r\n    result.max_dist = [];\r\n    result.area = [];\r\n    result.perimeter = [];\r\n    result.circularity = [];\r\n    result.area_ratio = [];\r\n    result.perimeter_ratio = [];\r\n    result.compactness = [];\r\n    result.cluster = [];\r\n    // shoot rays\r\n    for (let i = 0; i < origins_tjs.length; i++) {\r\n        const origin_tjs: THREE.Vector3 = origins_tjs[i];\r\n        const result_dists: number[] = [];\r\n        const result_isects: Txyz[] = [];\r\n        for (let j = 0; j < dirs_tjs.length; j++) {\r\n            const dir_tjs: THREE.Vector3 = dirs_tjs[j];\r\n            const ray_tjs: THREE.Raycaster = new THREE.Raycaster(origin_tjs, dir_tjs, 0, radius);\r\n            const isects: THREE.Intersection[] = ray_tjs.intersectObject(mesh[0], false);\r\n            // get the result\r\n            if (isects.length === 0) {\r\n                result_dists.push(radius);\r\n                result_isects.push(vecAdd(\r\n                    [origin_tjs.x, origin_tjs.y, origin_tjs.z], dirs_xyzs[j]\r\n                ));\r\n            } else {\r\n                result_dists.push(isects[0]['distance']);\r\n                const isect_tjs: THREE.Vector3 = isects[0].point;\r\n                result_isects.push([isect_tjs.x, isect_tjs.y, isect_tjs.z]);\r\n            }\r\n        }\r\n        // calc the perimeter and area\r\n        let perim = 0;\r\n        let area = 0;\r\n        for (let j = 0; j < num_rays; j++) {\r\n            const j2 = j === num_rays - 1 ? 0 : j + 1;\r\n            // calc perim\r\n            const c = distance(result_isects[j], result_isects[j2]);\r\n            perim += c;\r\n            // calc area\r\n            area += _isovistTriArea(result_dists[j], result_dists[j2], c);\r\n        }\r\n        const total_dist = Mathjs.sum(result_dists);\r\n        const avg_dist = total_dist / result_dists.length;\r\n        const min_dist = min(result_dists);\r\n        const max_dist = max(result_dists);\r\n        // save the data\r\n        result.avg_dist.push( avg_dist );\r\n        result.min_dist.push( min_dist );\r\n        result.max_dist.push( max_dist );\r\n        result.area.push( area );\r\n        result.perimeter.push( perim );\r\n        result.area_ratio.push( area / max_area );\r\n        result.perimeter_ratio.push( perim / max_perim );\r\n        result.circularity.push( (perim * perim) / area );\r\n        result.compactness.push( avg_dist / max_dist );\r\n        result.cluster.push( Math.sqrt(area / Math.PI) / (perim / (2 * Math.PI)) );\r\n    }\r\n    // cleanup\r\n    mesh[0].geometry.dispose();\r\n    (mesh[0].material as THREE.Material).dispose();\r\n    // return the results\r\n    return result;\r\n}\r\nfunction _isovistOriginsTjs(__model__: GIModel, origins: Txyz[]|TRay[]|TPlane[], offset: number): THREE.Vector3[] {\r\n    const vectors_tjs: THREE.Vector3[] = [];\r\n    const is_xyz: boolean = isXYZ(origins[0]);\r\n    const is_ray: boolean = isRay(origins[0]);\r\n    const is_pln: boolean = isPlane(origins[0]);\r\n    for (const origin of origins) {\r\n        let origin_xyz: Txyz = null;\r\n        if (is_xyz) {\r\n            origin_xyz = origin as Txyz;\r\n        } else if (is_ray) {\r\n            origin_xyz = origin[0] as Txyz;\r\n        } else if (is_pln) {\r\n            origin_xyz = origin[0] as Txyz;\r\n        } else {\r\n            throw new Error('analyze.Solar: origins arg has invalid values');\r\n        }\r\n        const origin_tjs: THREE.Vector3 = new THREE.Vector3(origin_xyz[0], origin_xyz[1], origin_xyz[2] + offset);\r\n        vectors_tjs.push(origin_tjs);\r\n    }\r\n    return vectors_tjs;\r\n}\r\nfunction _isovistTriArea(a: number, b: number, c: number): number {\r\n    // calc area using Heron's formula\r\n    const s = (a + b + c) / 2;\r\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c));\r\n}\r\n// ================================================================================================\r\nexport enum _ESkyMethod {\r\n    WEIGHTED = 'weighted',\r\n    UNWEIGHTED = 'unweighted',\r\n    ALL = 'all'\r\n}\r\n\r\n/**\r\n * Calculate an approximation of the sky exposure factor, for a set sensors positioned at specified locations.\r\n * The sky exposure factor for each sensor is a value between 0 and 1, where 0 means that it has no exposure\r\n * and 1 means that it has maximum exposure.\r\n * ~\r\n * Each sensor has a location and direction, specified using either rays or planes.\r\n * The direction of the sensor specifies what is infront and what is behind the sensor.\r\n * For each sensor, only exposure infront of the sensor is calculated.\r\n * ~\r\n * The exposure is calculated by shooting rays in reverse.\r\n * from the sensor origin to a set of points on the sky dome.\r\n * If the rays hits an obstruction, then the sky dome is obstructed..\r\n * If the ray hits no obstructions, then the sky dome is not obstructed.\r\n * ~\r\n * The exposure factor at each sensor point is calculated as follows:\r\n * 1) Shoot rays to all sky dome points.\r\n * 2) If the ray hits an obstruction, assign a weight of 0 to that ray.\r\n * 3) If a ray does not hit any obstructions, assign a weight between 0 and 1, depending on the incidence angle.\r\n * 4) Calculate the total solar expouse by adding up the weights for all rays.\r\n * 5) Divide by the maximum possible exposure for an unobstructed sensor with a direction pointing straight up.\r\n * ~\r\n * If 'weighted' is selected, then\r\n * the exposure calculation takes into account the angle of incidence of the ray to the sensor direction.\r\n * Rays parallel to the sensor direction are assigned a weight of 1.\r\n * Rays at an oblique angle are assigned a weight equal to the cosine of the angle\r\n * betweeen the sensor direction and the ray.\r\n * ~\r\n * If 'unweighted' is selected, then all rays are assigned a weight of 1, irresepctive of angle.\r\n * ~\r\n * The detail parameter spacifies the number of rays that get generated.\r\n * The higher the level of detail, the more accurate but also the slower the analysis will be.\r\n * ~\r\n * The number of rays are as follows:\r\n * 0 = 89 rays,\r\n * 1 = 337 rays,\r\n * 2 = 1313 rays,\r\n * 3 = 5185 rays.\r\n * ~\r\n * Returns a dictionary containing exposure results.\r\n * ~\r\n * 1) 'exposure': A list of numbers, the exposure factors.\r\n * ~\r\n * ~\r\n * @param __model__\r\n * @param origins A list of coordinates, a list of Rays or a list of Planes, to be used as the origins for calculating exposure.\r\n * @param detail An integer between 1 and 3 inclusive, specifying the level of detail for the analysis.\r\n * @param entities The obstructions, faces, polygons, or collections of faces or polygons.\r\n * @param limits The max distance for raytracing.\r\n * @param method Enum; sky method.\r\n */\r\nexport function Sky(__model__: GIModel, origins: Txyz[]|TRay[]|TPlane[], detail: number,\r\n        entities: TId|TId[]|TId[][], limits: number|[number, number], method: _ESkyMethod): any {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'analyze.Sky';\r\n    let ents_arrs: TEntTypeIdx[];\r\n    // let latitude: number = null;\r\n    // let north: Txy = [0, 1];\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'origins', origins, [ArgCh.isXYZL, ArgCh.isRayL, ArgCh.isPlnL]);\r\n        checkArgs(fn_name, 'detail', detail, [ArgCh.isInt]);\r\n        if (detail < 0 || detail > 3) {\r\n            throw new Error (fn_name + ': \"detail\" must be an integer between 0 and 3 inclusive.');\r\n        }\r\n        ents_arrs = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL],\r\n            [EEntType.FACE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n    } else {\r\n        ents_arrs = idsBreak(entities) as TEntTypeIdx[];\r\n        // const geolocation = __model__.modeldata.attribs.query.getModelAttribVal('geolocation');\r\n        // latitude = geolocation['latitude'];\r\n        // if (__model__.modeldata.attribs.query.hasModelAttrib('north')) {\r\n        //     north = __model__.modeldata.attribs.query.getModelAttribVal('north') as Txy;\r\n        // }\r\n    }\r\n    // TODO\r\n    // TODO\r\n    // --- Error Check ---\r\n\r\n\r\n    const sensor_oris_dirs_tjs: [THREE.Vector3, THREE.Vector3][] = _rayOrisDirsTjs(__model__, origins, 0.01);\r\n    const [mesh_tjs, idx_to_face_i]: [THREE.Mesh, number[]] = createSingleMeshTjs(__model__, ents_arrs);\r\n    limits = Array.isArray(limits) ? limits : [0, limits];\r\n    // get the direction vectors\r\n    const ray_dirs_tjs: THREE.Vector3[] = _skyRayDirsTjs(detail);\r\n    // run the simulation\r\n    const weighted: boolean = method === _ESkyMethod.WEIGHTED;\r\n    const results: number[] = _calcExposure(sensor_oris_dirs_tjs, ray_dirs_tjs, mesh_tjs, limits, weighted);\r\n    // cleanup\r\n    mesh_tjs.geometry.dispose();\r\n    (mesh_tjs.material as THREE.Material).dispose();\r\n    // return the result\r\n    return { 'exposure': results };\r\n\r\n}\r\nfunction _skyRayDirsTjs(detail: number): THREE.Vector3[] {\r\n    const hedron_tjs: THREE.IcosahedronGeometry = new THREE.IcosahedronGeometry(1, detail + 2);\r\n    // calc vectors\r\n    const vecs: THREE.Vector3[] = [];\r\n    for (const vec of hedron_tjs.vertices) {\r\n        // vec.applyAxisAngle(YAXIS, Math.PI / 2);\r\n        if (vec.z > -1e-6) {\r\n            vecs.push(vec);\r\n        }\r\n    }\r\n    //console.log(\"num rays = \", vecs.length);\r\n    return vecs;\r\n}\r\n// ================================================================================================\r\nexport enum _ESolarMethod {\r\n    DIRECT_WEIGHTED = 'direct_weighted',\r\n    DIRECT_UNWEIGHTED = 'direct_unweighted',\r\n    INDIRECT_WEIGHTED = 'indirect_weighted',\r\n    INDIRECT_UNWEIGHTED = 'indirect_unweighted'\r\n}\r\n/**\r\n * Calculate an approximation of the solar exposure factor, for a set sensors positioned at specfied locations.\r\n * The solar exposure factor for each sensor is a value between 0 and 1, where 0 means that it has no exposure\r\n * and 1 means that it has maximum exposure.\r\n * ~\r\n * The calculation takes into account the geolocation and the north direction of the model.\r\n * Geolocation is specified by a model attributes as follows:\r\n * @geolocation={'longitude':123,'latitude':12}.\r\n * North direction is specified by a model attribute as follows, using a vector:\r\n * @north==[1,2]\r\n * If no north direction is specified, then [0,1] is the default (i.e. north is in the direction of the y-axis);\r\n * ~\r\n * Each sensor has a location and direction, specified using either rays or planes.\r\n * The direction of the sensor specifies what is infront and what is behind the sensor.\r\n * For each sensor, only exposure infront of the sensor is calculated.\r\n * ~\r\n * The exposure is calculated by shooting rays in reverse.\r\n * from the sensor origin to a set of points on the sky dome.\r\n * If the rays hits an obstruction, then the sky dome is obstructed..\r\n * If the ray hits no obstructions, then the sky dome is not obstructed.\r\n * ~\r\n * The exposure factor at each sensor point is calculated as follows:\r\n * 1) Shoot rays to all sky dome points.\r\n * 2) If the ray hits an obstruction, assign a wight of 0 to that ray.\r\n * 3) If a ray does not hit any obstructions, assign a weight between 0 and 1, depending on the incidence angle.\r\n * 4) Calculate the total solar expouse by adding up the weights for all rays.\r\n * 5) Divide by the maximum possible solar exposure for an unobstructed sensor.\r\n * ~\r\n * The solar exposure calculation takes into account the angle of incidence of the sun ray to the sensor direction.\r\n * Sun rays that are hitting the sensor straight on are assigned a weight of 1.\r\n * Sun rays that are hitting the sensor at an oblique angle are assigned a weight equal to the cosine of the angle.\r\n * ~\r\n * If 'direct_exposure' is selected, then the points on the sky dome will follow the path of the sun throughout the year.\r\n * If 'indirect_exposure' is selected, then the points on the sky dome will consist of points excluded by\r\n * the path of the sun throughout the year.\r\n * ~\r\n * The direct sky dome points cover a strip of sky where the sun travels.\r\n * The inderect sky dome points cover the segments of sky either side of the direct sun strip.\r\n * ~\r\n * The detail parameter spacifies the number of rays that get generated.\r\n * The higher the level of detail, the more accurate but also the slower the analysis will be.\r\n * The number of rays differs depending on the latitde.\r\n * ~\r\n * At latitude 0, the number of rays for 'direct' are as follows:\r\n * 0 = 44 rays,\r\n * 1 = 105 rays,\r\n * 2 = 510 rays,\r\n * 3 = 1287 rays.\r\n * ~\r\n * At latitude 0, the number of rays for 'indirect' are as follows:\r\n * 0 = 58 rays,\r\n * 1 = 204 rays,\r\n * 2 = 798 rays,\r\n * 3 = 3122 rays.\r\n * ~\r\n * The number of rays for 'sky' are as follows:\r\n * 0 = 89 rays,\r\n * 1 = 337 rays,\r\n * 2 = 1313 rays,\r\n * 3 = 5185 rays.\r\n * ~\r\n * Returns a dictionary containing solar exposure results.\r\n * ~\r\n * If one  of the 'direct' methods is selected, the dictionary will contain:\r\n * 1) 'direct': A list of numbers, the direct exposure factors.\r\n * ~\r\n * If one  of the 'indirect' methods is selected, the dictionary will contain:\r\n * 1) 'indirect': A list of numbers, the indirect exposure factors.\r\n * ~\r\n * ~\r\n * @param __model__\r\n * @param origins A list of coordinates, a list of Rays or a list of Planes, to be used as the origins for calculating exposure.\r\n * @param detail An integer between 1 and 3 inclusive, specifying the level of detail for the analysis.\r\n * @param entities The obstructions, faces, polygons, or collections of faces or polygons.\r\n * @param limits The max distance for raytracing.\r\n * @param method Enum; solar method.\r\n */\r\nexport function Sun(__model__: GIModel, origins: Txyz[]|TRay[]|TPlane[], detail: number,\r\n        entities: TId|TId[]|TId[][], limits: number|[number, number], method: _ESolarMethod): any {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'analyze.Sun';\r\n    let ents_arrs: TEntTypeIdx[];\r\n    let latitude: number = null;\r\n    let north: Txy = [0, 1];\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'origins', origins, [ArgCh.isXYZL, ArgCh.isRayL, ArgCh.isPlnL]);\r\n        checkArgs(fn_name, 'detail', detail, [ArgCh.isInt]);\r\n        if (detail < 0 || detail > 3) {\r\n            throw new Error (fn_name + ': \"detail\" must be an integer between 0 and 3 inclusive.');\r\n        }\r\n        ents_arrs = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL],\r\n            [EEntType.FACE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        if (!__model__.modeldata.attribs.query.hasModelAttrib('geolocation')) {\r\n            throw new Error('analyze.Solar: model attribute \"geolocation\" is missing, \\\r\n                e.g. @geolocation = {\"latitude\":12, \"longitude\":34}');\r\n        } else {\r\n            const geolocation = __model__.modeldata.attribs.query.getModelAttribVal('geolocation');\r\n            if (uscore.isObject(geolocation) && uscore.has(geolocation, 'latitude')) {\r\n                latitude = geolocation['latitude'];\r\n            } else {\r\n                throw new Error('analyze.Solar: model attribute \"geolocation\" is missing the \"latitude\" key, \\\r\n                    e.g. @geolocation = {\"latitude\":12, \"longitude\":34}');\r\n            }\r\n        }\r\n        if (__model__.modeldata.attribs.query.hasModelAttrib('north')) {\r\n            north = __model__.modeldata.attribs.query.getModelAttribVal('north') as Txy;\r\n            if (!Array.isArray(north) || north.length !== 2) {\r\n                throw new Error('analyze.Solar: model has a \"north\" attribute with the wrong type, \\\r\n                it should be a vector with two values, \\\r\n                e.g. @north =  [1,2]');\r\n            }\r\n        }\r\n    } else {\r\n        ents_arrs = idsBreak(entities) as TEntTypeIdx[];\r\n        const geolocation = __model__.modeldata.attribs.query.getModelAttribVal('geolocation');\r\n        latitude = geolocation['latitude'];\r\n        if (__model__.modeldata.attribs.query.hasModelAttrib('north')) {\r\n            north = __model__.modeldata.attribs.query.getModelAttribVal('north') as Txy;\r\n        }\r\n    }\r\n    // TODO\r\n    // TODO\r\n    // --- Error Check ---\r\n\r\n    // TODO North direction\r\n\r\n    const sensor_oris_dirs_tjs: [THREE.Vector3, THREE.Vector3][] = _rayOrisDirsTjs(__model__, origins, 0.01);\r\n    const [mesh_tjs, idx_to_face_i]: [THREE.Mesh, number[]] = createSingleMeshTjs(__model__, ents_arrs);\r\n    limits = Array.isArray(limits) ? limits : [0, limits];\r\n\r\n\r\n    // return the result\r\n    const results = {};\r\n    switch (method) {\r\n        case _ESolarMethod.DIRECT_WEIGHTED:\r\n        case _ESolarMethod.DIRECT_UNWEIGHTED:\r\n            // get the direction vectors\r\n            const ray_dirs_tjs1: THREE.Vector3[] = uscore.flatten(_solarDirsTjs(latitude, north, detail, method));\r\n            // run the simulation\r\n            const weighted1: boolean = method === _ESolarMethod.DIRECT_WEIGHTED;\r\n            results['direct'] = _calcExposure(sensor_oris_dirs_tjs, ray_dirs_tjs1, mesh_tjs, limits, weighted1) as number[];\r\n            break;\r\n        case _ESolarMethod.INDIRECT_WEIGHTED:\r\n        case _ESolarMethod.INDIRECT_UNWEIGHTED:\r\n            // get the direction vectors\r\n            const ray_dirs_tjs2: THREE.Vector3[] = uscore.flatten(_solarDirsTjs(latitude, north, detail, method));\r\n            // run the simulation\r\n            const weighted2: boolean = method === _ESolarMethod.INDIRECT_WEIGHTED;\r\n            results['indirect'] = _calcExposure(sensor_oris_dirs_tjs, ray_dirs_tjs2, mesh_tjs, limits, weighted2) as number[];\r\n            break;\r\n        default:\r\n            throw new Error('Solar method not recognised.');\r\n    }\r\n    // cleanup\r\n    mesh_tjs.geometry.dispose();\r\n    (mesh_tjs.material as THREE.Material).dispose();\r\n    // return dict\r\n    return results;\r\n}\r\nfunction _rayOrisDirsTjs(__model__: GIModel, origins: Txyz[]|TRay[]|TPlane[], offset: number): [THREE.Vector3, THREE.Vector3][] {\r\n    const vectors_tjs: [THREE.Vector3, THREE.Vector3][] = [];\r\n    const is_xyz: boolean = isXYZ(origins[0]);\r\n    const is_ray: boolean = isRay(origins[0]);\r\n    const is_pln: boolean = isPlane(origins[0]);\r\n    for (const origin of origins) {\r\n        let origin_xyz: Txyz = null;\r\n        let normal_xyz: Txyz = null;\r\n        if (is_xyz) {\r\n            origin_xyz = origin as Txyz;\r\n            normal_xyz = [0, 0, 1];\r\n        } else if (is_ray) {\r\n            origin_xyz = origin[0] as Txyz;\r\n            normal_xyz = vecNorm(origin[1] as Txyz);\r\n        } else if (is_pln) {\r\n            origin_xyz = origin[0] as Txyz;\r\n            normal_xyz = vecCross(origin[1] as Txyz, origin[2] as Txyz);\r\n        } else {\r\n            throw new Error('analyze.Solar: origins arg has invalid values');\r\n        }\r\n        const normal_tjs: THREE.Vector3 = new THREE.Vector3(...normal_xyz);\r\n        const origin_offset_xyz: Txyz = vecAdd(origin_xyz, vecMult(normal_xyz, offset));\r\n        const origin_tjs: THREE.Vector3 = new THREE.Vector3(...origin_offset_xyz);\r\n        vectors_tjs.push([origin_tjs, normal_tjs]);\r\n    }\r\n    return vectors_tjs;\r\n}\r\nfunction _solarDirsTjs(latitude: number, north: Txy, detail: number, method: _ESolarMethod): THREE.Vector3[]|THREE.Vector3[][] {\r\n    switch (method) {\r\n        case _ESolarMethod.DIRECT_WEIGHTED:\r\n        case _ESolarMethod.DIRECT_UNWEIGHTED:\r\n            return _solarRaysDirectTjs(latitude, north, detail);\r\n        case _ESolarMethod.INDIRECT_WEIGHTED:\r\n        case _ESolarMethod.INDIRECT_UNWEIGHTED:\r\n            return _solarRaysIndirectTjs(latitude, north, detail);\r\n        // case _ESolarMethod.ALL:\r\n        //     throw new Error('Not implemented');\r\n        default:\r\n            throw new Error('Solar method not recognised.');\r\n    }\r\n}\r\nfunction _solarRot(day_ang: number, day: number, hour_ang: number, hour: number, latitude: number, north: number): THREE.Vector3 {\r\n    const vec: THREE.Vector3 = new THREE.Vector3(0, 0, -1);\r\n    vec.applyAxisAngle(XAXIS, day_ang * day);\r\n    vec.applyAxisAngle(YAXIS, hour_ang * hour);\r\n    vec.applyAxisAngle(XAXIS, latitude);\r\n    vec.applyAxisAngle(ZAXIS, -north);\r\n    return vec;\r\n}\r\nfunction _solarRaysDirectTjs(latitude: number, north: Txy, detail: number): THREE.Vector3[][] {\r\n    const directions: THREE.Vector3[][] = [];\r\n    // set the level of detail\r\n    // const day_step = [182 / 4, 182 / 5, 182 / 6, 182 / 7, 182 / 8, 182 / 9, 182 / 10][detail];\r\n    const day_step = [182 / 3, 182 / 6, 182 / 9, 182 / 12][detail];\r\n    const num_day_steps: number = Math.round(182 / day_step) + 1;\r\n    // const hour_step = [0.25 * 6, 0.25 * 5, 0.25 * 4, 0.25 * 3, 0.25 * 2, 0.25 * 1, 0.25 * 0.5][detail];\r\n    const hour_step = [0.25 * 6, 0.25 * 4, 0.25 * 1, 0.25 * 0.5][detail];\r\n    // get the angles in radians\r\n    const day_ang_rad: number = degToRad(47) as number / 182;\r\n    const hour_ang_rad: number = (2 * Math.PI) / 24;\r\n    // get the atitude angle in radians\r\n    const latitude_rad: number = degToRad(latitude) as number;\r\n    // get the angle from y-axis to north vector in radians\r\n    const north_rad = vecAng2([north[0], north[1], 0], [0, 1, 0], [0, 0, 1]);\r\n    // create the vectors\r\n    for (let day_count = 0; day_count < num_day_steps; day_count++) {\r\n        const day: number = -91 + (day_count * day_step);\r\n        const one_day_path: THREE.Vector3[] = [];\r\n        // get sunrise\r\n        let sunrise = 0;\r\n        let sunset = 0;\r\n        for (let hour = 0; hour < 24; hour = hour + 0.1) {\r\n            const sunrise_vec: THREE.Vector3 = _solarRot(day_ang_rad, day, hour_ang_rad, hour, latitude_rad, north_rad);\r\n            if (sunrise_vec.z > -1e-6) {\r\n                sunrise = hour;\r\n                sunset = 24 - hour;\r\n                one_day_path.push(sunrise_vec);\r\n                break;\r\n            }\r\n        }\r\n        // morning sun path, count down from midday\r\n        for (let hour = 12; hour > sunrise; hour = hour - hour_step) {\r\n            const am_vec: THREE.Vector3 = _solarRot(day_ang_rad, day, hour_ang_rad, hour, latitude_rad, north_rad);\r\n            if (am_vec.z > -1e-6) {\r\n                one_day_path.splice(1, 0, am_vec);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        // afternoon sunpath, count up from midday\r\n        for (let hour = 12 + hour_step; hour < sunset; hour = hour + hour_step) {\r\n            const pm_vec: THREE.Vector3 = _solarRot(day_ang_rad, day, hour_ang_rad, hour, latitude_rad, north_rad);\r\n            if (pm_vec.z > -1e-6) {\r\n                one_day_path.push(pm_vec);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        // sunset\r\n        const sunset_vec: THREE.Vector3 = _solarRot(day_ang_rad, day, hour_ang_rad, sunset, latitude_rad, north_rad);\r\n        one_day_path.push(sunset_vec);\r\n        // add it to the list\r\n        directions.push(one_day_path);\r\n    }\r\n    // console.log(\"num rays = \", arrMakeFlat(directions).length);\r\n    return directions;\r\n}\r\nfunction _solarRaysIndirectTjs(latitude: number, north: Txy, detail: number): THREE.Vector3[] {\r\n    const hedron_tjs: THREE.IcosahedronGeometry = new THREE.IcosahedronGeometry(1, detail + 2);\r\n    const solar_offset = Math.cos(degToRad(66.5) as number);\r\n    // get the atitude angle in radians\r\n    const latitude_rad: number = degToRad(latitude) as number;\r\n    // get the angle from y-axis to north vector in radians\r\n    const north_rad = vecAng2([north[0], north[1], 0], [0, 1, 0], [0, 0, 1]);\r\n    // calc vectors\r\n    const indirect_vecs: THREE.Vector3[] = [];\r\n    for (const vec of hedron_tjs.vertices) {\r\n        if (Math.abs(vec.y) > solar_offset) {\r\n            vec.applyAxisAngle(XAXIS, latitude_rad);\r\n            vec.applyAxisAngle(ZAXIS, -north_rad);\r\n            if (vec.z > -1e-6) {\r\n                indirect_vecs.push(vec);\r\n            }\r\n        }\r\n    }\r\n    // console.log(\"num rays = \", indirect_vecs.length);\r\n    return indirect_vecs;\r\n}\r\n// calc the max solar exposure for a point with no obstructions facing straight up\r\nfunction _calcMaxExposure(directions_tjs: THREE.Vector3[], weighted: boolean): number {\r\n    if (!weighted) { return directions_tjs.length; }\r\n    let result = 0;\r\n    const normal_tjs: THREE.Vector3 = new THREE.Vector3(0, 0, 1);\r\n    for (const direction_tjs of directions_tjs) {\r\n        // calc the weighted result based on the angle between the dir and normal\r\n        // this applies the cosine weighting rule\r\n        const result_weighted: number = normal_tjs.dot(direction_tjs);\r\n        if (result_weighted > 0) {\r\n            result = result + result_weighted;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction _calcExposure(origins_normals_tjs: [THREE.Vector3, THREE.Vector3][],\r\n        directions_tjs: THREE.Vector3[], mesh_tjs: THREE.Mesh,\r\n        limits: [number, number], weighted: boolean): number[] {\r\n    const results = [];\r\n    const result_max: number = _calcMaxExposure(directions_tjs, weighted);\r\n    for (const [origin_tjs, normal_tjs] of origins_normals_tjs) {\r\n        let result = 0;\r\n        for (const direction_tjs of directions_tjs) {\r\n            const dot_normal_direction: number = normal_tjs.dot(direction_tjs);\r\n            if (dot_normal_direction > 0) {\r\n                const ray_tjs: THREE.Raycaster = new THREE.Raycaster(origin_tjs, direction_tjs, limits[0], limits[1]);\r\n                const isects: THREE.Intersection[] = ray_tjs.intersectObject(mesh_tjs, false);\r\n                if (isects.length === 0) {\r\n                    if (weighted) {\r\n                        // this applies the cosine weighting rule\r\n                        result = result + dot_normal_direction;\r\n                    } else {\r\n                        // this applies no cosine weighting\r\n                        result = result + 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        results.push(result / result_max);\r\n    }\r\n    return results;\r\n}\r\n// ================================================================================================\r\nexport enum _ESunPathMethod {\r\n    DIRECT = 'direct',\r\n    INDIRECT = 'indirect',\r\n    SKY = 'sky'\r\n}\r\n/**\r\n * Generates a sun path, oriented according to the geolocation and north direction.\r\n * The sun path is generated as an aid to visualize the orientation of the sun relative to the model.\r\n * Note that the solar exposure calculations do not require the sub path to be visualized.\r\n * ~\r\n * The sun path takes into account the geolocation and the north direction of the model.\r\n * Geolocation is specified by a model attributes as follows:\r\n * @geolocation={'longitude':123,'latitude':12}.\r\n * North direction is specified by a model attribute as follows, using a vector:\r\n * @north==[1,2]\r\n * If no north direction is specified, then [0,1] is the default (i.e. north is in the direction of the y-axis);\r\n * ~\r\n * @param __model__\r\n * @param origins The origins of the rays\r\n * @param detail The level of detail for the analysis\r\n * @param radius The radius of the sun path\r\n * @param method Enum, the type of sky to generate.\r\n */\r\nexport function SkyDome(__model__: GIModel, origin: Txyz|TRay|TPlane, detail: number,\r\n        radius: number, method: _ESunPathMethod): TId[]|TId[][] {\r\n    // --- Error Check ---\r\n    const fn_name = 'analyze.SkyDome';\r\n    let latitude: number = null;\r\n    let north: Txy = [0, 1];\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'origin', origin, [ArgCh.isXYZ, ArgCh.isRay, ArgCh.isPln]);\r\n        checkArgs(fn_name, 'detail', detail, [ArgCh.isInt]);\r\n        if (detail < 0 || detail > 6) {\r\n            throw new Error (fn_name + ': \"detail\" must be an integer between 0 and 6.');\r\n        }\r\n        checkArgs(fn_name, 'radius', radius, [ArgCh.isNum]);\r\n        if (method !== _ESunPathMethod.SKY) {\r\n            if (!__model__.modeldata.attribs.query.hasModelAttrib('geolocation')) {\r\n                throw new Error('analyze.Solar: model attribute \"geolocation\" is missing, \\\r\n                    e.g. @geolocation = {\"latitude\":12, \"longitude\":34}');\r\n            } else {\r\n                const geolocation = __model__.modeldata.attribs.query.getModelAttribVal('geolocation');\r\n                if (uscore.isObject(geolocation) && uscore.has(geolocation, 'latitude')) {\r\n                    latitude = geolocation['latitude'];\r\n                } else {\r\n                    throw new Error('analyze.Solar: model attribute \"geolocation\" is missing the \"latitude\" key, \\\r\n                        e.g. @geolocation = {\"latitude\":12, \"longitude\":34}');\r\n                }\r\n            }\r\n            if (__model__.modeldata.attribs.query.hasModelAttrib('north')) {\r\n                north = __model__.modeldata.attribs.query.getModelAttribVal('north') as Txy;\r\n                if (!Array.isArray(north) || north.length !== 2) {\r\n                    throw new Error('analyze.Solar: model has a \"north\" attribute with the wrong type, \\\r\n                    it should be a vector with two values, \\\r\n                    e.g. @north =  [1,2]');\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        const geolocation = __model__.modeldata.attribs.query.getModelAttribVal('geolocation');\r\n        latitude = geolocation['latitude'];\r\n        if (__model__.modeldata.attribs.query.hasModelAttrib('north')) {\r\n            north = __model__.modeldata.attribs.query.getModelAttribVal('north') as Txy;\r\n        }\r\n    }\r\n    // --- Error Check ---\r\n    // create the matrix one time\r\n    const matrix: THREE.Matrix4 = new THREE.Matrix4();\r\n    const origin_depth: number = getArrDepth(origin);\r\n    if (origin_depth === 2 && origin.length === 2) {\r\n        // origin is a ray\r\n        matrix.makeTranslation(...origin[0] as Txyz);\r\n    } else if (origin_depth === 2 && origin.length === 3) {\r\n        // origin is a plane\r\n        // matrix = xfromSourceTargetMatrix(XYPLANE, origin as TPlane); // TODO xform not nceessary\r\n        matrix.makeTranslation(...origin[0] as Txyz);\r\n    } else {\r\n        // origin is Txyz\r\n        matrix.makeTranslation(...origin as Txyz);\r\n    }\r\n    // generate the positions on the sky dome\r\n    switch (method) {\r\n        case _ESunPathMethod.DIRECT:\r\n            const rays_dirs_tjs1: THREE.Vector3[][] = _solarRaysDirectTjs(latitude, north, detail);\r\n            return _sunPathGenPosisNested(__model__, rays_dirs_tjs1, radius, matrix);\r\n        case _ESunPathMethod.INDIRECT:\r\n            const rays_dirs_tjs2: THREE.Vector3[] = _solarRaysIndirectTjs(latitude, north, detail);\r\n            return _sunPathGenPosis(__model__, rays_dirs_tjs2, radius, matrix);\r\n        case _ESunPathMethod.SKY:\r\n            const rays_dirs_tjs3: THREE.Vector3[] = _skyRayDirsTjs(detail);\r\n            return _sunPathGenPosis(__model__, rays_dirs_tjs3, radius, matrix);\r\n        default:\r\n            throw new Error('Sunpath method not recognised.');\r\n    }\r\n}\r\nfunction _sunPathGenPosisNested(__model__: GIModel, rays_dirs_tjs: THREE.Vector3[][],\r\n        radius: number, matrix: THREE.Matrix4): TId[][] {\r\n    const posis: TId[][] = [];\r\n    for (const one_day_tjs of rays_dirs_tjs) {\r\n        posis.push(_sunPathGenPosis(__model__, one_day_tjs, radius, matrix));\r\n    }\r\n    return posis;\r\n}\r\nfunction _sunPathGenPosis(__model__: GIModel, rays_dirs_tjs: THREE.Vector3[],\r\n        radius: number, matrix: THREE.Matrix4): TId[] {\r\n    const posis_i: number[] = [];\r\n    for (const direction_tjs of rays_dirs_tjs) {\r\n        let xyz: Txyz = vecMult([direction_tjs.x, direction_tjs.y, direction_tjs.z], radius);\r\n        xyz = multMatrix(xyz, matrix);\r\n        const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(posi_i, xyz);\r\n        posis_i.push(posi_i);\r\n    }\r\n    return idsMakeFromIndicies(EEntType.POSI, posis_i) as TId[];\r\n}\r\n// ================================================================================================\r\n/**\r\n * Finds the nearest positions within a certain maximum radius.\r\n * ~\r\n * The neighbors to each source position is calculated as follows:\r\n * 1) Calculate the distance to all target positions.\r\n * 2) Creat the neighbors set by filtering out target positions that are further than the maximum radius.\r\n * 3) If the number of neighbors is greater than 'max_neighbors',\r\n * then select the 'max_neighbors' closest target positions.\r\n * ~\r\n * Returns a dictionary containing the nearest positions.\r\n * ~\r\n * If 'num_neighbors' is 1, the dictionary will contain two lists:\r\n * 1) 'posis': a list of positions, a subset of positions from the source.\r\n * 2) 'neighbors': a list of neighbouring positions, a subset of positions from target.\r\n  * ~\r\n * If 'num_neighbors' is greater than 1, the dictionary will contain two lists:\r\n * 1) 'posis': a list of positions, a subset of positions from the source.\r\n * 2) 'neighbors': a list of lists of neighbouring positions, a subset of positions from target.\r\n * ~\r\n * @param __model__\r\n * @param source A list of positions, or entities from which positions can be extracted.\r\n * @param target A list of positions, or entities from which positions can be extracted.\r\n * If null, the positions in source will be used.\r\n * @param radius The maximum distance for neighbors. If null, Infinity will be used.\r\n * @param max_neighbors The maximum number of neighbors to return.\r\n * If null, the number of positions in target is used.\r\n * @returns A dictionary containing the results.\r\n */\r\nexport function Nearest(__model__: GIModel,\r\n        source: TId|TId[], target: TId|TId[], radius: number, max_neighbors: number):\r\n        {'posis': TId[], 'neighbors': TId[]|TId[][], 'distances': number[]|number[][]} {\r\n    if (target === null) { target = source; } // TODO optimise\r\n    source = arrMakeFlat(source) as TId[];\r\n    target = arrMakeFlat(target) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'analyze.Nearest';\r\n    let source_ents_arrs: TEntTypeIdx[];\r\n    let target_ents_arrs: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        source_ents_arrs = checkIDs(fn_name, 'origins', source,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n        target_ents_arrs = checkIDs(fn_name, 'destinations', target,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // source_ents_arrs = splitIDs(fn_name, 'origins', source,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        // target_ents_arrs = splitIDs(fn_name, 'destinations', target,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        source_ents_arrs = idsBreak(source) as TEntTypeIdx[];\r\n        target_ents_arrs  = idsBreak(target) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const source_posis_i: number[] = _getUniquePosis(__model__, source_ents_arrs);\r\n    const target_posis_i: number[] = _getUniquePosis(__model__, target_ents_arrs);\r\n    const result: [number[], number[]|number[][], number[]|number[][]] =\r\n        _nearest(__model__, source_posis_i, target_posis_i, radius, max_neighbors);\r\n    // return dictionary with results\r\n    return {\r\n        'posis': idsMakeFromIndicies(EEntType.POSI, result[0]) as TId[],\r\n        'neighbors': idsMakeFromIndicies(EEntType.POSI, result[1]) as TId[][]|TId[],\r\n        'distances': result[2] as number[]|number[][]\r\n    };\r\n}\r\nfunction _fuseDistSq(xyz1: number[], xyz2: number[]): number {\r\n    return Math.pow(xyz1[0] - xyz2[0], 2) +  Math.pow(xyz1[1] - xyz2[1], 2) +  Math.pow(xyz1[2] - xyz2[2], 2);\r\n}\r\nfunction _nearest(__model__: GIModel, source_posis_i: number[], target_posis_i: number[],\r\n        dist: number, num_neighbors: number): [number[], number[]|number[][], number[]|number[][]] {\r\n    // create a list of all posis\r\n    const set_target_posis_i: Set<number> = new Set(target_posis_i);\r\n    const set_posis_i: Set<number> = new Set(target_posis_i);\r\n    for (const posi_i of source_posis_i) { set_posis_i.add(posi_i); }\r\n    const posis_i: number[] = Array.from(set_posis_i);\r\n    // get dist and num_neighbours\r\n    if (dist === null) { dist = Infinity; }\r\n    if (num_neighbors === null) { num_neighbors = target_posis_i.length; }\r\n    // find neighbor\r\n    const map_posi_i_to_xyz: Map<number, Txyz> = new Map();\r\n    const typed_positions = new Float32Array( posis_i.length * 4 );\r\n    const typed_buff = new THREE.BufferGeometry();\r\n    typed_buff.setAttribute( 'position', new THREE.BufferAttribute( typed_positions, 4 ) );\r\n    for (let i = 0; i < posis_i.length; i++) {\r\n        const posi_i: number = posis_i[i];\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        map_posi_i_to_xyz.set(posi_i, xyz);\r\n        typed_positions[ i * 4 + 0 ] = xyz[0];\r\n        typed_positions[ i * 4 + 1 ] = xyz[1];\r\n        typed_positions[ i * 4 + 2 ] = xyz[2];\r\n        typed_positions[ i * 4 + 3 ] = posi_i;\r\n    }\r\n    const kdtree = new TypedArrayUtils.Kdtree( typed_positions, _fuseDistSq, 4 );\r\n    // calculate the dist squared\r\n    const num_posis: number = posis_i.length;\r\n    const dist_sq: number = dist * dist;\r\n    // deal with special case, num_neighbors === 1\r\n    if (num_neighbors === 1) {\r\n        const result1: [number[], number[], number[]] = [[], [], []];\r\n        for (const posi_i of source_posis_i) {\r\n            const nn = kdtree.nearest( map_posi_i_to_xyz.get(posi_i) as any, num_posis, dist_sq );\r\n            let min_dist = Infinity;\r\n            let nn_posi_i: number;\r\n            for (const a_nn of nn) {\r\n                const next_nn_posi_i: number = a_nn[0].obj[3];\r\n                if (set_target_posis_i.has(next_nn_posi_i) && a_nn[1] < min_dist) {\r\n                    min_dist = a_nn[1];\r\n                    nn_posi_i = next_nn_posi_i;\r\n                }\r\n            }\r\n            if (nn_posi_i !== undefined) {\r\n                result1[0].push(posi_i);\r\n                result1[1].push(nn_posi_i);\r\n                result1[2].push(Math.sqrt(min_dist));\r\n            }\r\n        }\r\n        return result1;\r\n    }\r\n    // create a neighbors list\r\n    const result: [number[], number[][], number[][]] = [[], [], []];\r\n    for (const posi_i of source_posis_i) {\r\n        // TODO at the moment is gets all posis since no distinction is made between source and traget\r\n        // TODO kdtree could be optimised\r\n        const nn = kdtree.nearest( map_posi_i_to_xyz.get(posi_i) as any, num_posis, dist_sq );\r\n        const posis_i_dists: [number, number][] = [];\r\n        for (const a_nn of nn) {\r\n            const nn_posi_i: number = a_nn[0].obj[3];\r\n            if (set_target_posis_i.has(nn_posi_i)) {\r\n                posis_i_dists.push([nn_posi_i, a_nn[1]]);\r\n            }\r\n        }\r\n        posis_i_dists.sort( (a, b) => a[1] - b[1] );\r\n        const nn_posis_i: number[] = [];\r\n        const nn_dists: number[] = [];\r\n        for (const posi_i_dist  of posis_i_dists) {\r\n            nn_posis_i.push(posi_i_dist[0]);\r\n            nn_dists.push(Math.sqrt(posi_i_dist[1]));\r\n            if (nn_posis_i.length === num_neighbors) { break; }\r\n        }\r\n        if (nn_posis_i.length > 0) {\r\n            result[0].push(posi_i);\r\n            result[1].push(nn_posis_i);\r\n            result[2].push(nn_dists);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n// ================================================================================================\r\ninterface TShortestPathResult {\r\n    source_posis?: TId[];\r\n    distances?: number[]|number[][];\r\n    edges?: TId[];\r\n    posis?: TId[];\r\n    edges_count?: number[];\r\n    posis_count?: number[];\r\n    edge_paths?: TId[][];\r\n    posi_paths?: TId[][];\r\n}\r\nexport enum _EShortestPathMethod {\r\n    UNDIRECTED = 'undirected',\r\n    DIRECTED = 'directed'\r\n}\r\nexport enum _EShortestPathResult {\r\n    DISTS = 'distances',\r\n    COUNTS = 'counts',\r\n    PATHS = 'paths',\r\n    ALL = 'all'\r\n}\r\n/**\r\n * Calculates the shortest path from every source position to every target position.\r\n * ~\r\n * Paths are calculated through a network of connected edges.\r\n * For edges to be connected, vertices must be welded.\r\n * For example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\r\n * ~\r\n * If 'directed' is selected, then the edge direction is taken into account. Each edge will be one-way.\r\n * If 'undirected' is selected, the edge direction is ignored. Each edge will be two-way.\r\n * ~\r\n * Each edge can be assigned a weight.\r\n * The shortest path is the path where the sum of the weights of the edges along the path is the minimum.\r\n * ~\r\n * By default, all edges are assigned a weight of 1.\r\n * Default weights can be overridden by creating a numeric attribute on edges call 'weight'.\r\n * ~\r\n * Returns a dictionary containing the shortest paths.\r\n * ~\r\n * If 'distances' is selected, the dictionary will contain two list:\r\n * 1) 'source_posis': a list of start positions for eah path,\r\n * 2) 'distances': a list of distances, one list for each path starting at each source position.\r\n * ~\r\n * If 'counts' is selected, the dictionary will contain four lists:\r\n * 1) 'posis': a list of positions traversed by the paths,\r\n * 2) 'posis_count': a list of numbers that count how often each position was traversed,\r\n * 3) 'edges': a list of edges traversed by the paths,\r\n * 4) 'edges_count': a list of numbers that count how often each edge was traversed.\r\n * ~\r\n * If 'paths' is selected, the dictionary will contain two lists of lists:\r\n * 1) 'posi_paths': a list of lists of positions, one list for each path,\r\n * 2) 'edge_paths': a list of lists of edges, one list for each path.\r\n * ~\r\n * If 'all' is selected, the dictionary will contain all lists just described.\r\n * ~\r\n * @param __model__\r\n * @param source Path source, a list of positions, or entities from which positions can be extracted.\r\n * @param target Path target, a list of positions, or entities from which positions can be extracted.\r\n * @param entities The network, edges, or entities from which edges can be extracted.\r\n * @param method Enum, the method to use, directed or undirected.\r\n * @param result Enum, the data to return, positions, edges, or both.\r\n * @returns A dictionary containing the results.\r\n */\r\nexport function ShortestPath(__model__: GIModel, source: TId|TId[]|TId[][][], target: TId|TId[]|TId[][],\r\n        entities: TId|TId[]|TId[][], method: _EShortestPathMethod, result: _EShortestPathResult): TShortestPathResult {\r\n\r\n    source = source === null ? [] : arrMakeFlat(source) as TId[];\r\n    target = target === null ? [] : arrMakeFlat(target) as TId[];\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'analyze.ShortestPath';\r\n    let source_ents_arrs: TEntTypeIdx[];\r\n    let target_ents_arrs: TEntTypeIdx[];\r\n    let ents_arrs: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        source_ents_arrs = checkIDs(fn_name, 'origins', source,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n        target_ents_arrs = checkIDs(fn_name, 'destinations', target,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n        ents_arrs = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // source_ents_arrs = splitIDs(fn_name, 'origins', source,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        // target_ents_arrs = splitIDs(fn_name, 'destinations', target,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        // ents_arrs = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        source_ents_arrs = idsBreak(source) as TEntTypeIdx[];\r\n        target_ents_arrs = idsBreak(target) as TEntTypeIdx[];\r\n        ents_arrs = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const directed: boolean = method === _EShortestPathMethod.DIRECTED ? true : false;\r\n    let return_dists = true;\r\n    let return_counts = true;\r\n    let return_paths = true;\r\n    switch (result) {\r\n        case _EShortestPathResult.DISTS:\r\n            return_paths = false;\r\n            return_counts = false;\r\n            break;\r\n        case _EShortestPathResult.COUNTS:\r\n            return_dists = false;\r\n            return_paths = false;\r\n            break;\r\n        case _EShortestPathResult.PATHS:\r\n            return_dists = false;\r\n            return_counts = false;\r\n            break;\r\n        default:\r\n            // all true\r\n            break;\r\n    }\r\n    const source_posis_i: number[] = _getUniquePosis(__model__, source.length === 0 ? ents_arrs : source_ents_arrs);\r\n    const target_posis_i: number[] = _getUniquePosis(__model__, target.length === 0 ? ents_arrs : target_ents_arrs);\r\n    const cy_elems: any[] = _cytoscapeGetElements(__model__, ents_arrs, source_posis_i, target_posis_i, directed);\r\n    // create the cytoscape object\r\n    const cy = cytoscape({\r\n        elements: cy_elems,\r\n        headless: true,\r\n    });\r\n    const map_edges_i: Map<number, number> = new Map();\r\n    const map_posis_i: Map<number, number> = new Map();\r\n    const posi_paths: number[][] = [];\r\n    const edge_paths: number[][] = [];\r\n    const all_path_dists: number[][] = [];\r\n    for (const source_posi_i of source_posis_i) {\r\n        const path_dists: number[] = [];\r\n        const cy_source_elem = cy.getElementById( source_posi_i.toString() );\r\n        const dijkstra = cy.elements().dijkstra({\r\n            root: cy_source_elem,\r\n            weight: _cytoscapeWeightFn,\r\n            directed: directed\r\n        });\r\n        for (const target_posi_i of target_posis_i) {\r\n            const cy_node = cy.getElementById( target_posi_i.toString() );\r\n            const dist: number = dijkstra.distanceTo(cy_node);\r\n            const cy_path = dijkstra.pathTo(cy_node);\r\n            const posi_path: number[] = [];\r\n            const edge_path: number[] = [];\r\n            for (const cy_path_elem of cy_path.toArray()) {\r\n                if (cy_path_elem.isEdge()) {\r\n                    const edge_i: number = cy_path_elem.data('idx');\r\n                    if (return_counts) {\r\n                        if (!map_edges_i.has(edge_i)) {\r\n                            map_edges_i.set(edge_i, 1);\r\n                        } else {\r\n                            map_edges_i.set(edge_i, map_edges_i.get(edge_i) + 1);\r\n                        }\r\n                        if (!directed) {\r\n                            const edge2_i: number = cy_path_elem.data('idx2');\r\n                            if (edge2_i !== null) {\r\n                                if (!map_edges_i.has(edge2_i)) {\r\n                                    map_edges_i.set(edge2_i, 1);\r\n                                } else {\r\n                                    map_edges_i.set(edge2_i, map_edges_i.get(edge2_i) + 1);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (return_paths) {\r\n                        edge_path.push(edge_i);\r\n                    }\r\n                } else {\r\n                    const posi_i: number = cy_path_elem.data('idx');\r\n                    if (return_counts) {\r\n                        if (!map_posis_i.has(posi_i)) {\r\n                            map_posis_i.set(posi_i, 1);\r\n                        } else {\r\n                            map_posis_i.set(posi_i, map_posis_i.get(posi_i) + 1);\r\n                        }\r\n                    }\r\n                    if (return_paths) {\r\n                        posi_path.push(posi_i);\r\n                    }\r\n                }\r\n            }\r\n            if (return_paths) {\r\n                edge_paths.push(edge_path);\r\n                posi_paths.push(posi_path);\r\n            }\r\n            if (return_dists) {\r\n                path_dists.push(dist);\r\n            }\r\n        }\r\n        all_path_dists.push(path_dists);\r\n    }\r\n    const dict: TShortestPathResult = {};\r\n    if (return_dists) {\r\n        dict.source_posis = idsMakeFromIndicies(EEntType.POSI, source_posis_i) as TId[];\r\n        dict.distances = source_posis_i.length === 1 ? all_path_dists[0] : all_path_dists;\r\n    }\r\n    if (return_counts) {\r\n        dict.edges = idsMakeFromIndicies(EEntType.EDGE, Array.from(map_edges_i.keys())) as TId[];\r\n        dict.edges_count = Array.from(map_edges_i.values());\r\n        dict.posis =  idsMakeFromIndicies(EEntType.POSI, Array.from(map_posis_i.keys())) as TId[];\r\n        dict.posis_count =  Array.from(map_posis_i.values());\r\n    }\r\n    if (return_paths) {\r\n        dict.edge_paths =  idsMakeFromIndicies(EEntType.EDGE, edge_paths) as TId[][];\r\n        dict.posi_paths =  idsMakeFromIndicies(EEntType.POSI, posi_paths) as TId[][];\r\n    }\r\n    return dict;\r\n}\r\n\r\nfunction _getUniquePosis(__model__: GIModel, ents_arr: TEntTypeIdx[]): number[] {\r\n    if (ents_arr.length === 0) { return []; }\r\n    const set_posis_i: Set<number> = new Set();\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n        for (const posi_i of posis_i) {\r\n            set_posis_i.add(posi_i);\r\n        }\r\n    }\r\n    return Array.from(set_posis_i);\r\n}\r\nfunction _cytoscapeWeightFn(edge: cytoscape.EdgeSingular) {\r\n    return edge.data('weight');\r\n}\r\nfunction _cytoscapeWeightFn2(edge: cytoscape.EdgeSingular) {\r\n    const weight: number = edge.data('weight');\r\n    if (weight < 1) { return 1; }\r\n    return weight;\r\n}\r\nfunction _cytoscapeGetElements(__model__: GIModel, ents_arr: TEntTypeIdx[],\r\n        source_posis_i: number[], target_posis_i: number[], directed: boolean): any[] {\r\n    let has_weight_attrib = false;\r\n    if (__model__.modeldata.attribs.query.hasAttrib(EEntType.EDGE, 'weight')) {\r\n        has_weight_attrib = __model__.modeldata.attribs.query.getAttribDataType(EEntType.EDGE, 'weight') === EAttribDataTypeStrs.NUMBER;\r\n    }\r\n    // edges, starts empty\r\n    const set_edges_i: Set<number> = new Set();\r\n    // posis, starts with cource and target\r\n    const set_posis_i: Set<number> = new Set(source_posis_i);\r\n    for (const target_posi_i of target_posis_i) { set_posis_i.add(target_posi_i); }\r\n    // network\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        const edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, ent_i);\r\n        for (const edge_i of edges_i) {\r\n            set_edges_i.add(edge_i);\r\n        }\r\n        const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n        for (const posi_i of posis_i) {\r\n            set_posis_i.add(posi_i);\r\n        }\r\n    }\r\n    // create elements\r\n    const elements: any[] = [];\r\n    for (const posi_i of Array.from(set_posis_i)) {\r\n        elements.push( {  data: { id: posi_i.toString(), idx: posi_i} } );\r\n    }\r\n    if (directed) {\r\n        // directed\r\n        for (const edge_i of Array.from(set_edges_i)) {\r\n            const edge_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n            let weight = 1.0;\r\n            if (has_weight_attrib) {\r\n                weight = __model__.modeldata.attribs.query.getAttribVal(EEntType.EDGE, 'weight', edge_i) as number;\r\n            } else {\r\n                const c0: Txyz = __model__.modeldata.attribs.query.getPosiCoords(edge_posis_i[0]);\r\n                const c1: Txyz = __model__.modeldata.attribs.query.getPosiCoords(edge_posis_i[1]);\r\n                weight = distance(c0, c1);\r\n            }\r\n            elements.push( {  data: { id: 'e' + edge_i,\r\n                source: edge_posis_i[0].toString(), target: edge_posis_i[1].toString(), weight: weight, idx: edge_i} } );\r\n        }\r\n    } else {\r\n        // undirected\r\n        const map_edges_ab: Map<string, any> = new Map();\r\n        for (const edge_i of Array.from(set_edges_i)) {\r\n            let edge_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n            edge_posis_i = edge_posis_i[0] < edge_posis_i[1] ? edge_posis_i : [edge_posis_i[1], edge_posis_i[0]];\r\n            const undir_edge_id: string = 'e_' + edge_posis_i[0].toString() + '_' + edge_posis_i[1].toString();\r\n            if (map_edges_ab.has(undir_edge_id)) {\r\n                const obj = map_edges_ab.get(undir_edge_id);\r\n                obj['data']['idx2'] = edge_i;\r\n                // TODO should we take the average of the two weights? Could be more than two...\r\n            } else {\r\n                let weight = 1.0;\r\n                if (has_weight_attrib) {\r\n                    weight = __model__.modeldata.attribs.query.getAttribVal(EEntType.EDGE, 'weight', edge_i) as number;\r\n                } else {\r\n                    const c0: Txyz = __model__.modeldata.attribs.query.getPosiCoords(edge_posis_i[0]);\r\n                    const c1: Txyz = __model__.modeldata.attribs.query.getPosiCoords(edge_posis_i[1]);\r\n                    weight = distance(c0, c1);\r\n                }\r\n                const obj = {\r\n                    data: {\r\n                        id: undir_edge_id,\r\n                        source: edge_posis_i[0].toString(),\r\n                        target: edge_posis_i[1].toString(),\r\n                        weight: weight,\r\n                        idx: edge_i,\r\n                        idx2: null\r\n                    }\r\n                };\r\n                map_edges_ab.set(undir_edge_id, obj);\r\n                elements.push(obj);\r\n            }\r\n        }\r\n    }\r\n    return elements;\r\n}\r\n// ================================================================================================\r\ninterface TClosestPathResult {\r\n    source_posis?: TId[];\r\n    distances?: number[];\r\n    edges?: TId[];\r\n    posis?: TId[];\r\n    edges_count?: number[];\r\n    posis_count?: number[];\r\n    edge_paths?: TId[][];\r\n    posi_paths?: TId[][];\r\n}\r\n/**\r\n * Calculates the shortest path from every position in source, to the closest position in target.\r\n * ~\r\n * This differs from the 'analyze.ShortestPath()' function. If you specify multiple target positions,\r\n * for each cource position,\r\n * the 'analyze.ShortestPath()' function will calculate multiple shortest paths,\r\n * i.e. the shortest path to all targets.\r\n * This function will caculate just one shortest path,\r\n * i.e. the shortest path to the closest target.\r\n * ~\r\n * Paths are calculated through a network of connected edges.\r\n * For edges to be connected, vertices must be welded.\r\n * For example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\r\n * ~\r\n * If 'directed' is selected, then the edge direction is taken into account. Each edge will be one-way.\r\n * If 'undirected' is selected, the edge direction is ignored. Each edge will be two-way.\r\n * ~\r\n * Each edge can be assigned a weight.\r\n * The shortest path is the path where the sum of the weights of the edges along the path is the minimum.\r\n * ~\r\n * By default, all edges are assigned a weight of 1.\r\n * Default weights can be overridden by creating a numeric attribute on edges call 'weight'.\r\n * ~\r\n * Returns a dictionary containing the shortes paths.\r\n * ~\r\n * If 'distances' is selected, the dictionary will contain one list:\r\n * 1) 'distances': a list of distances.\r\n * ~\r\n * If 'counts' is selected, the dictionary will contain four lists:\r\n * 1) 'posis': a list of positions traversed by the paths,\r\n * 2) 'posis_count': a list of numbers that count how often each position was traversed.\r\n * 3) 'edges': a list of edges traversed by the paths,\r\n * 4) 'edges_count': a list of numbers that count how often each edge was traversed.\r\n * ~\r\n * If 'paths' is selected, the dictionary will contain two lists of lists:\r\n * 1) 'posi_paths': a list of lists of positions, one list for each path.\r\n * 2) 'edge_paths': a list of lists of edges, one list for each path.\r\n * ~\r\n * If 'all' is selected, the dictionary will contain all lists just described.\r\n * ~\r\n * @param __model__\r\n * @param source Path source, a list of positions, or entities from which positions can be extracted.\r\n * @param target Path source, a list of positions, or entities from which positions can be extracted.\r\n * @param entities The network, edges, or entities from which edges can be extracted.\r\n * @param method Enum, the method to use, directed or undirected.\r\n * @param result Enum, the data to return, positions, edges, or both.\r\n * @returns A dictionary containing the results.\r\n */\r\nexport function ClosestPath(__model__: GIModel, source: TId|TId[]|TId[][][], target: TId|TId[]|TId[][],\r\n        entities: TId|TId[]|TId[][], method: _EShortestPathMethod, result: _EShortestPathResult): TClosestPathResult {\r\n\r\n    source = source === null ? [] : arrMakeFlat(source) as TId[];\r\n    target = target === null ? [] : arrMakeFlat(target) as TId[];\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'analyze.ClosestPath';\r\n    let source_ents_arrs: TEntTypeIdx[];\r\n    let target_ents_arrs: TEntTypeIdx[];\r\n    let ents_arrs: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        source_ents_arrs = checkIDs(fn_name, 'origins', source,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n        target_ents_arrs = checkIDs(fn_name, 'destinations', target,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n        ents_arrs = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // source_ents_arrs = splitIDs(fn_name, 'origins', source,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        // target_ents_arrs = splitIDs(fn_name, 'destinations', target,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        // ents_arrs = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        source_ents_arrs = idsBreak(source) as TEntTypeIdx[];\r\n        target_ents_arrs = idsBreak(target) as TEntTypeIdx[];\r\n        ents_arrs = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const directed: boolean = method === _EShortestPathMethod.DIRECTED ? true : false;\r\n    let return_dists = true;\r\n    let return_counts = true;\r\n    let return_paths = true;\r\n    switch (result) {\r\n        case _EShortestPathResult.DISTS:\r\n            return_paths = false;\r\n            return_counts = false;\r\n            break;\r\n        case _EShortestPathResult.COUNTS:\r\n            return_dists = false;\r\n            return_paths = false;\r\n            break;\r\n        case _EShortestPathResult.PATHS:\r\n            return_dists = false;\r\n            return_counts = false;\r\n            break;\r\n        default:\r\n            // all true\r\n            break;\r\n    }\r\n    const source_posis_i: number[] = _getUniquePosis(__model__, source.length === 0 ? ents_arrs : source_ents_arrs);\r\n    const target_posis_i: number[] = _getUniquePosis(__model__, target.length === 0 ? ents_arrs : target_ents_arrs);\r\n    const cy_elems: any[] = _cytoscapeGetElements(__model__, ents_arrs, source_posis_i, target_posis_i, directed);\r\n    // create the cytoscape object\r\n    const cy = cytoscape({\r\n        elements: cy_elems,\r\n        headless: true,\r\n    });\r\n    const map_edges_i: Map<number, number> = new Map();\r\n    const map_posis_i: Map<number, number> = new Map();\r\n    const posi_paths: number[][] = [];\r\n    const edge_paths: number[][] = [];\r\n    const path_dists: number[] = [];\r\n    for (const source_posi_i of source_posis_i) {\r\n        const cy_source_elem = cy.getElementById( source_posi_i.toString() );\r\n        const dijkstra = cy.elements().dijkstra({\r\n            root: cy_source_elem,\r\n            weight: _cytoscapeWeightFn,\r\n            directed: directed\r\n        });\r\n        let closest_target_posi_i: number = null;\r\n        let closest_dist = Infinity;\r\n        for (const target_posi_i of target_posis_i) {\r\n            // find shortest path\r\n            const dist: number =\r\n                dijkstra.distanceTo( cy.getElementById( target_posi_i.toString() ) );\r\n            if (dist < closest_dist) {\r\n                closest_dist = dist;\r\n                closest_target_posi_i = target_posi_i;\r\n            }\r\n        }\r\n        if (closest_target_posi_i !== null) {\r\n            // get shortest path\r\n            const cy_path: cytoscape.CollectionReturnValue =\r\n                dijkstra.pathTo( cy.getElementById( closest_target_posi_i.toString() ) );\r\n            // get the data\r\n            const posi_path: number[] = [];\r\n            const edge_path: number[] = [];\r\n            for (const cy_path_elem of cy_path.toArray()) {\r\n                if (cy_path_elem.isEdge()) {\r\n                    const edge_i: number = cy_path_elem.data('idx');\r\n                    if (return_counts) {\r\n                        if (!map_edges_i.has(edge_i)) {\r\n                            map_edges_i.set(edge_i, 1);\r\n                        } else {\r\n                            map_edges_i.set(edge_i, map_edges_i.get(edge_i) + 1);\r\n                        }\r\n                        if (!directed) {\r\n                            const edge2_i: number = cy_path_elem.data('idx2');\r\n                            if (edge2_i !== null) {\r\n                                if (!map_edges_i.has(edge2_i)) {\r\n                                    map_edges_i.set(edge2_i, 1);\r\n                                } else {\r\n                                    map_edges_i.set(edge2_i, map_edges_i.get(edge2_i) + 1);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (return_paths) {\r\n                        edge_path.push(edge_i);\r\n                    }\r\n                } else {\r\n                    const posi_i: number = cy_path_elem.data('idx');\r\n                    if (return_counts) {\r\n                        if (!map_posis_i.has(posi_i)) {\r\n                            map_posis_i.set(posi_i, 1);\r\n                        } else {\r\n                            map_posis_i.set(posi_i, map_posis_i.get(posi_i) + 1);\r\n                        }\r\n                    }\r\n                    if (return_paths) {\r\n                        posi_path.push(posi_i);\r\n                    }\r\n                }\r\n            }\r\n            if (return_paths) {\r\n                edge_paths.push(edge_path);\r\n                posi_paths.push(posi_path);\r\n            }\r\n            if (return_dists) {\r\n                path_dists.push(closest_dist);\r\n            }\r\n        } else {\r\n            if (return_paths) {\r\n                edge_paths.push([]);\r\n                posi_paths.push([]);\r\n            }\r\n            if (return_dists) {\r\n                path_dists.push(1e8); // TODO, cannot pas Infinity due to JSON issues\r\n            }\r\n        }\r\n    }\r\n    const dict: TClosestPathResult = {};\r\n    if (return_dists) {\r\n        dict.source_posis = idsMakeFromIndicies(EEntType.POSI, source_posis_i) as TId[];\r\n        dict.distances = path_dists;\r\n    }\r\n    if (return_counts) {\r\n        dict.edges = idsMakeFromIndicies(EEntType.EDGE, Array.from(map_edges_i.keys())) as TId[];\r\n        dict.edges_count = Array.from(map_edges_i.values());\r\n        dict.posis =  idsMakeFromIndicies(EEntType.POSI, Array.from(map_posis_i.keys())) as TId[];\r\n        dict.posis_count =  Array.from(map_posis_i.values());\r\n    }\r\n    if (return_paths) {\r\n        dict.edge_paths =  idsMakeFromIndicies(EEntType.EDGE, edge_paths) as TId[][];\r\n        dict.posi_paths =  idsMakeFromIndicies(EEntType.POSI, posi_paths) as TId[][];\r\n    }\r\n    return dict;\r\n}\r\n// ================================================================================================\r\nexport enum _ECentralityMethod {\r\n    UNDIRECTED = 'undirected',\r\n    DIRECTED = 'directed'\r\n}\r\nfunction _cyGetPosisAndElements(__model__: GIModel, ents_arr: TEntTypeIdx[],\r\n    posis_i: number[], directed: boolean): [cytoscape.ElementDefinition[], number[]] {\r\n    let has_weight_attrib = false;\r\n    if (__model__.modeldata.attribs.query.hasAttrib(EEntType.EDGE, 'weight')) {\r\n        has_weight_attrib = __model__.modeldata.attribs.query.getAttribDataType(EEntType.EDGE, 'weight') === EAttribDataTypeStrs.NUMBER;\r\n    }\r\n    // edges, starts empty\r\n    const set_edges_i: Set<number> = new Set();\r\n    // posis, starts with posis_i\r\n    const set_posis_i: Set<number> = new Set(posis_i);\r\n    // network\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        const n_edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, ent_i);\r\n        for (const edge_i of n_edges_i) {\r\n            set_edges_i.add(edge_i);\r\n        }\r\n        const n_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n        for (const posi_i of n_posis_i) {\r\n            set_posis_i.add(posi_i);\r\n        }\r\n    }\r\n    // all unique posis\r\n    const uniq_posis_i: number[] =  Array.from(set_posis_i);\r\n    // create elements\r\n    const elements: cytoscape.ElementDefinition[] = [];\r\n    for (const posi_i of uniq_posis_i) {\r\n        elements.push( {  data: { id: posi_i.toString(), idx: posi_i} } );\r\n    }\r\n    if (directed) {\r\n        // directed\r\n        for (const edge_i of Array.from(set_edges_i)) {\r\n            const edge_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n            let weight = 1.0;\r\n            if (has_weight_attrib) {\r\n                weight = __model__.modeldata.attribs.query.getAttribVal(EEntType.EDGE, 'weight', edge_i) as number;\r\n            } else {\r\n                // const c0: Txyz = __model__.modeldata.attribs.query.getPosiCoords(edge_posis_i[0]);\r\n                // const c1: Txyz = __model__.modeldata.attribs.query.getPosiCoords(edge_posis_i[1]);\r\n                weight = 1; // distance(c0, c1);\r\n            }\r\n            elements.push( {  data: { id: 'e' + edge_i,\r\n                source: edge_posis_i[0].toString(), target: edge_posis_i[1].toString(), weight: weight, idx: edge_i} } );\r\n        }\r\n    } else {\r\n        // undirected\r\n        const map_edges_ab: Map<string, any> = new Map();\r\n        for (const edge_i of Array.from(set_edges_i)) {\r\n            let edge_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n            edge_posis_i = edge_posis_i[0] < edge_posis_i[1] ? edge_posis_i : [edge_posis_i[1], edge_posis_i[0]];\r\n            const undir_edge_id: string = 'e_' + edge_posis_i[0].toString() + '_' + edge_posis_i[1].toString();\r\n            if (map_edges_ab.has(undir_edge_id)) {\r\n                const obj = map_edges_ab.get(undir_edge_id);\r\n                obj['data']['idx2'] = edge_i;\r\n                // TODO should we take the average of the two weights? Could be more than two...\r\n            } else {\r\n                let weight = 1.0;\r\n                if (has_weight_attrib) {\r\n                    weight = __model__.modeldata.attribs.query.getAttribVal(EEntType.EDGE, 'weight', edge_i) as number;\r\n                } else {\r\n                    // const c0: Txyz = __model__.modeldata.attribs.query.getPosiCoords(edge_posis_i[0]);\r\n                    // const c1: Txyz = __model__.modeldata.attribs.query.getPosiCoords(edge_posis_i[1]);\r\n                    weight = 1; // distance(c0, c1);\r\n                }\r\n                const obj = {\r\n                    data: {\r\n                        id: undir_edge_id,\r\n                        source: edge_posis_i[0].toString(),\r\n                        target: edge_posis_i[1].toString(),\r\n                        weight: weight,\r\n                        idx: edge_i,\r\n                        idx2: null\r\n                    }\r\n                };\r\n                map_edges_ab.set(undir_edge_id, obj);\r\n                elements.push(obj);\r\n            }\r\n        }\r\n    }\r\n    return [elements, uniq_posis_i];\r\n}\r\n// ================================================================================================\r\n/**\r\n * Calculates degree centrality for positions in a netowrk. Values are normalized in the range 0 to 1.\r\n * ~\r\n * The network is defined by a set of connected edges, consisting of polylines and/or polygons.\r\n * For edges to be connected, vertices must be welded.\r\n * For example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\r\n * ~\r\n * Degree centrality is based on the idea that the centrality of a position in a network is related to\r\n * the number of direct links that it has to other positions.\r\n * ~\r\n * If 'undirected' is selected,  degree centrality is calculated by summing up the weights\r\n * of all edges connected to a position.\r\n * If 'directed' is selected, then two types of centrality are calculated: incoming degree and\r\n * outgoing degree.\r\n * Incoming degree is calculated by summing up the weights of all incoming edges connected to a position.\r\n * Outgoing degree is calculated by summing up the weights of all outgoing edges connected to a position.\r\n * ~\r\n * Default weight is 1 for all edges. Weights can be specified using an attribute called 'weight' on edges.\r\n * ~\r\n * Returns a dictionary containing the results.\r\n * ~\r\n * If 'undirected' is selected, the dictionary will contain  the following:\r\n * 1) 'posis': a list of position IDs.\r\n * 2) 'degree': a list of numbers, the values for degree centrality.\r\n * ~\r\n * If 'directed' is selected, the dictionary will contain  the following:\r\n * 1) 'posis': a list of position IDs.\r\n * 2) 'indegree': a list of numbers, the values for incoming degree centrality.\r\n * 3) 'outdegree': a list of numbers, the values for outgoing degree centrality.\r\n * ~\r\n * @param __model__\r\n * @param source A list of positions, or entities from which positions can be extracted.\r\n * These positions should be part of the network.\r\n * @param entities The network, edges, or entities from which edges can be extracted.\r\n * @param alpha The alpha value for the centrality calculation, ranging on [0, 1]. With value 0,\r\n * disregards edge weights and solely uses number of edges in the centrality calculation. With value 1,\r\n * disregards number of edges and solely uses the edge weights in the centrality calculation.\r\n * @param method Enum, the method to use, directed or undirected.\r\n * @returns A dictionary containing the results.\r\n */\r\nexport function Degree(__model__: GIModel, source: TId|TId[]|TId[][][],\r\n        entities: TId|TId[]|TId[][], alpha: number, method: _ECentralityMethod): any {\r\n    // source posis and network entities\r\n    if (source === null) {\r\n        source = [];\r\n    } else {\r\n        source = arrMakeFlat(source) as TId[];\r\n    }\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'analyze.Degree';\r\n    let source_ents_arrs: TEntTypeIdx[] = [];\r\n    let ents_arrs: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        if (source.length > 0) {\r\n            source_ents_arrs = checkIDs(fn_name, 'source', source,\r\n                [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n        }\r\n        ents_arrs = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // if (source.length > 0) {\r\n        //     source_ents_arrs = splitIDs(fn_name, 'source', source,\r\n        //         [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        // }\r\n        // ents_arrs = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        source_ents_arrs = idsBreak(source) as TEntTypeIdx[];\r\n        ents_arrs = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const directed: boolean = method === _ECentralityMethod.DIRECTED ? true : false;\r\n    const source_posis_i: number[] = _getUniquePosis(__model__, source_ents_arrs);\r\n\r\n    // TODO deal with source === null\r\n\r\n    const [elements, graph_posis_i]: [cytoscape.ElementDefinition[], number[]] =\r\n        _cyGetPosisAndElements(__model__, ents_arrs, source_posis_i, directed);\r\n    // create the cytoscape object\r\n    const cy_network = cytoscape({\r\n        elements: elements,\r\n        headless: true,\r\n    });\r\n    const posis_i: number[] = source_ents_arrs.length === 0 ? graph_posis_i : source_posis_i;\r\n    if (directed) {\r\n        return _centralityDegreeDirected(posis_i, cy_network, alpha);\r\n    } else {\r\n        return _centralityDegreeUndirected(posis_i, cy_network, alpha);\r\n    }\r\n}\r\nfunction _centralityDegreeDirected(posis_i: number[], cy_network: any, alpha: number): any {\r\n    const indegree: number[] = [];\r\n    const outdegree: number[] = [];\r\n    const cy_centrality = cy_network.elements().degreeCentralityNormalized({\r\n        weight: _cytoscapeWeightFn,\r\n        alpha: alpha,\r\n        directed: true\r\n    });\r\n    for (const posi_i of posis_i) {\r\n        const source_elem = cy_network.getElementById( posi_i.toString() );\r\n        indegree.push( cy_centrality.indegree(source_elem) );\r\n        outdegree.push( cy_centrality.outdegree(source_elem) );\r\n    }\r\n    return {\r\n        'posis': idsMakeFromIndicies(EEntType.POSI, posis_i),\r\n        'indegree': indegree,\r\n        'outdegree': outdegree\r\n    };\r\n}\r\nfunction _centralityDegreeUndirected(posis_i: number[], cy_network: any, alpha: number) {\r\n    const degree: number[] = [];\r\n    const cy_centrality = cy_network.elements().degreeCentralityNormalized({\r\n        weight: _cytoscapeWeightFn,\r\n        alpha: alpha,\r\n        directed: false\r\n    });\r\n    for (const posi_i of posis_i) {\r\n        const source_elem = cy_network.getElementById( posi_i.toString() );\r\n        degree.push( cy_centrality.degree(source_elem) );\r\n    }\r\n    return {\r\n        'posis': idsMakeFromIndicies(EEntType.POSI, posis_i),\r\n        'degree': degree\r\n    };\r\n}\r\n// ================================================================================================\r\nexport enum _ECentralityType {\r\n    BETWEENNESS = 'betweenness',\r\n    CLOSENESS = 'closeness',\r\n    HARMONIC = 'harmonic'\r\n}\r\n/**\r\n * Calculates betweenness, closeness, and harmonic centrality\r\n * for positions in a netowrk. Values are normalized in the range 0 to 1.\r\n * ~\r\n * The network is defined by a set of connected edges, consisting of polylines and/or polygons.\r\n * For edges to be connected, vertices must be welded.\r\n * For example, if the network consists of multiple polylines, then the vertcies of those polylines must be welded.\r\n * ~\r\n * Centralities are calculate based on distances between positions.\r\n * The distance between two positions is the shortest path between those positions.\r\n * The shortest path is the path where the sum of the weights of the edges along the path is the minimum.\r\n * ~\r\n * Default weight is 1 for all edges. Weights can be specified using an attribute called 'weight' on edges.\r\n * ~\r\n * Closeness centrality is calculated by inverting the sum of the distances to all other positions.\r\n * ~\r\n * Harmonic centrality is calculated by summing up the inverted distances to all other positions.\r\n * ~\r\n * Betweenness centrality os calculated in two steps.\r\n * First, the shortest path between every pair of nodes is calculated.\r\n * Second, the betweenness centrality of each node is then the total number of times the node is traversed\r\n * by the shortest paths.\r\n * ~\r\n * For closeness centrality, the network is first split up into connected sub-networks.\r\n * This is because closeness centrality cannot be calculated on networks that are not fully connected.\r\n * The closeness centrality is then calculated for each sub-network seperately.\r\n * ~\r\n * For harmonic centrality, care must be taken when defining custom weights.\r\n * Weight with zero values or very small values will result in errors or will distort the results.\r\n * This is due to the inversion operation: 1 / weight.\r\n * ~\r\n * Returns a dictionary containing the results.\r\n * ~\r\n * 1) 'posis': a list of position IDs.\r\n * 2) 'centrality': a list of numbers, the values for centrality, either betweenness, closeness, or harmonic.\r\n * ~\r\n * @param __model__\r\n * @param source A list of positions, or entities from which positions can be extracted.\r\n * These positions should be part of the network.\r\n * @param entities The network, edges, or entities from which edges can be extracted.\r\n * @param method Enum, the method to use, directed or undirected.\r\n * @param cen_type Enum, the data to return, positions, edges, or both.\r\n * @returns A list of centrality values, between 0 and 1.\r\n */\r\nexport function Centrality(__model__: GIModel, source: TId|TId[]|TId[][][],\r\n        entities: TId|TId[]|TId[][], method: _ECentralityMethod, cen_type: _ECentralityType): any {\r\n    // source posis and network entities\r\n    if (source === null) {\r\n        source = [];\r\n    } else {\r\n        source = arrMakeFlat(source) as TId[];\r\n    }\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'analyze.Centrality';\r\n    let source_ents_arrs: TEntTypeIdx[] = [];\r\n    let ents_arrs: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        if (source.length > 0) {\r\n            source_ents_arrs = checkIDs(fn_name, 'source', source,\r\n                [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n        }\r\n        ents_arrs = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // if (source.length > 0) {\r\n        //     source_ents_arrs = splitIDs(fn_name, 'source', source,\r\n        //         [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        // }\r\n        // ents_arrs = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        source_ents_arrs = idsBreak(source) as TEntTypeIdx[];\r\n        ents_arrs = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const directed: boolean = method === _ECentralityMethod.DIRECTED ? true : false;\r\n    const source_posis_i: number[] = _getUniquePosis(__model__, source_ents_arrs);\r\n\r\n     // TODO deal with source === null\r\n\r\n    const [elements, graph_posis_i]: [cytoscape.ElementDefinition[], number[]] =\r\n        _cyGetPosisAndElements(__model__, ents_arrs, source_posis_i, directed);\r\n    // create the cytoscape object\r\n    const cy_network = cytoscape({\r\n        elements: elements,\r\n        headless: true,\r\n    });\r\n    // calculate the centrality\r\n    const posis_i: number[] = source_ents_arrs.length === 0 ? graph_posis_i : source_posis_i;\r\n    switch (cen_type) {\r\n        case _ECentralityType.CLOSENESS:\r\n            return _centralityCloseness(posis_i, cy_network, directed);\r\n        case _ECentralityType.HARMONIC:\r\n            return _centralityHarmonic(posis_i, cy_network, directed);\r\n        case _ECentralityType.BETWEENNESS:\r\n            return _centralityBetweenness(posis_i, cy_network, directed);\r\n        default:\r\n            throw new Error('Centrality type not recognised.');\r\n    }\r\n}\r\nfunction _centralityCloseness(posis_i: number[], cy_network: cytoscape.Core,  directed: boolean) {\r\n    const results: number[] = [];\r\n    const result_posis_i: number[] = [];\r\n    const comps: number[][] = [];\r\n    const cy_colls: cytoscape.Collection[] = cy_network.elements().components();\r\n    cy_colls.sort( (a, b) => b.length - a.length);\r\n    for (const cy_coll of cy_colls) {\r\n        const comp: number[] = [];\r\n        const cy_centrality: any = cy_coll.closenessCentralityNormalized({\r\n            weight: _cytoscapeWeightFn,\r\n            harmonic: false,\r\n            directed: directed\r\n        });\r\n        for (const posi_i of posis_i) {\r\n            const source_elem = cy_coll.getElementById( posi_i.toString() );\r\n            if (source_elem.length === 0) { continue; }\r\n            const result = cy_centrality.closeness(source_elem);\r\n            if (isNaN(result)) {\r\n                throw new Error('Error calculating closeness centrality.');\r\n            }\r\n            result_posis_i.push(posi_i);\r\n            comp.push(posi_i);\r\n            results.push( result );\r\n        }\r\n        comps.push(comp);\r\n    }\r\n    return {\r\n        'posis': idsMakeFromIndicies(EEntType.POSI, result_posis_i),\r\n        'centrality': results\r\n    };\r\n}\r\n\r\nfunction _centralityHarmonic(posis_i: number[], cy_network: cytoscape.Core,  directed: boolean) {\r\n    const results: number[] = [];\r\n    const cy_centrality: any = cy_network.elements().closenessCentralityNormalized({\r\n        weight: _cytoscapeWeightFn,\r\n        harmonic: true,\r\n        directed: directed\r\n    });\r\n    for (const posi_i of posis_i) {\r\n        const source_elem = cy_network.getElementById( posi_i.toString() );\r\n        if (source_elem.length === 0) { continue; }\r\n        const result = cy_centrality.closeness(source_elem);\r\n        if (isNaN(result)) {\r\n            throw new Error('Error calculating harmonic centrality.');\r\n        }\r\n        results.push( result );\r\n    }\r\n    return {\r\n        'posis': idsMakeFromIndicies(EEntType.POSI, posis_i),\r\n        'centrality': results\r\n    };\r\n}\r\nfunction _centralityBetweenness(posis_i: number[], cy_network: cytoscape.Core, directed: boolean) {\r\n    const results: number[] = [];\r\n    const cy_centrality = cy_network.elements().betweennessCentrality({\r\n        weight: _cytoscapeWeightFn,\r\n        directed: directed\r\n    });\r\n    for (const posi_i of posis_i) {\r\n        const source_elem = cy_network.getElementById( posi_i.toString() );\r\n        const result = cy_centrality.betweennessNormalized(source_elem);\r\n        if (isNaN(result)) {\r\n            throw new Error('Error calculating betweenness centrality.');\r\n        }\r\n        results.push( result );\r\n    }\r\n    return {\r\n        'posis': idsMakeFromIndicies(EEntType.POSI, posis_i),\r\n        'centrality': results\r\n    };\r\n}\r\n","/**\r\n * The `attrib` module has functions for working with attributes in teh model.\r\n * Note that attributes can also be set and retrieved using the \"@\" symbol.\r\n * ~\r\n * ~\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkAttribValue, checkAttribName,\r\n    checkAttribIdxKey, checkAttribNameIdxKey, splitAttribNameIdxKey } from '../_check_attribs';\r\n\r\nimport uscore from 'underscore';\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { TId, EEntType, TEntTypeIdx,\r\n    EAttribPush, TAttribDataTypes, EEntTypeStr, EAttribDataTypeStrs } from '@libs/geo-info/common';\r\nimport { getArrDepth, idsBreak } from '@libs/geo-info/id';\r\n// ================================================================================================\r\n\r\nexport enum _EEntType {\r\n    POSI =   'ps',\r\n    VERT =   '_v',\r\n    EDGE =   '_e',\r\n    WIRE =   '_w',\r\n    FACE =   '_f',\r\n    POINT =  'pt',\r\n    PLINE =  'pl',\r\n    PGON =   'pg',\r\n    COLL =   'co'\r\n}\r\nexport enum _EEntTypeAndMod {\r\n    POSI =   'ps',\r\n    VERT =   '_v',\r\n    EDGE =   '_e',\r\n    WIRE =   '_w',\r\n    FACE =   '_f',\r\n    POINT =  'pt',\r\n    PLINE =  'pl',\r\n    PGON =   'pg',\r\n    COLL =   'co',\r\n    MOD =    'mo'\r\n}\r\nexport enum _EAttribPushTarget {\r\n    POSI =   'ps',\r\n    VERT =   '_v',\r\n    EDGE =   '_e',\r\n    WIRE =   '_w',\r\n    FACE =   '_f',\r\n    POINT =  'pt',\r\n    PLINE =  'pl',\r\n    PGON =   'pg',\r\n    COLL =   'co',\r\n    COLLP =  'cop',\r\n    COLLC =  'coc',\r\n    MOD =    'mo'\r\n}\r\nexport enum _EDataType {\r\n    NUMBER =   'number',\r\n    STRING =   'string',\r\n    BOOLEAN = 'boolean',\r\n    LIST =   'list',\r\n    DICT = 'dict'\r\n}\r\nfunction _getEntTypeFromStr(ent_type_str: _EEntType|_EEntTypeAndMod): EEntType {\r\n    switch (ent_type_str) {\r\n        case _EEntTypeAndMod.POSI:\r\n            return EEntType.POSI;\r\n        case _EEntTypeAndMod.VERT:\r\n            return EEntType.VERT;\r\n        case _EEntTypeAndMod.EDGE:\r\n            return EEntType.EDGE;\r\n        case _EEntTypeAndMod.WIRE:\r\n            return EEntType.WIRE;\r\n        case _EEntTypeAndMod.FACE:\r\n            return EEntType.FACE;\r\n        case _EEntTypeAndMod.POINT:\r\n            return EEntType.POINT;\r\n        case _EEntTypeAndMod.PLINE:\r\n            return EEntType.PLINE;\r\n        case _EEntTypeAndMod.PGON:\r\n            return EEntType.PGON;\r\n        case _EEntTypeAndMod.COLL:\r\n            return EEntType.COLL;\r\n        case _EEntTypeAndMod.MOD:\r\n            return EEntType.MOD;\r\n        default:\r\n            break;\r\n    }\r\n}\r\nfunction _getAttribPushTarget(ent_type_str: _EAttribPushTarget): EEntType|string {\r\n    switch (ent_type_str) {\r\n        case _EAttribPushTarget.POSI:\r\n            return EEntType.POSI;\r\n        case _EAttribPushTarget.VERT:\r\n            return EEntType.VERT;\r\n        case _EAttribPushTarget.EDGE:\r\n            return EEntType.EDGE;\r\n        case _EAttribPushTarget.WIRE:\r\n            return EEntType.WIRE;\r\n        case _EAttribPushTarget.FACE:\r\n            return EEntType.FACE;\r\n        case _EAttribPushTarget.POINT:\r\n            return EEntType.POINT;\r\n        case _EAttribPushTarget.PLINE:\r\n            return EEntType.PLINE;\r\n        case _EAttribPushTarget.PGON:\r\n            return EEntType.PGON;\r\n        case _EAttribPushTarget.COLL:\r\n            return EEntType.COLL;\r\n        case _EAttribPushTarget.COLLC:\r\n            return 'coll_children';\r\n        case _EAttribPushTarget.COLLP:\r\n            return 'coll_parent';\r\n        case _EAttribPushTarget.MOD:\r\n            return EEntType.MOD;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Set an attribute value for one or more entities.\r\n * ~\r\n * If entities is null, then model level attributes will be set.\r\n * ~\r\n * @param __model__\r\n * @param entities Entities, the entities to set the attribute value for.\r\n * @param attrib The attribute. Can be `name`, `[name, index]`, or `[name, key]`.\r\n * @param value The attribute value, or list of values.\r\n * @param method Enum\r\n */\r\nexport function Set(__model__: GIModel, entities: TId|TId[]|TId[][],\r\n        attrib: string|[string, number|string], value: TAttribDataTypes|TAttribDataTypes[], method: _ESet): void {\r\n    // if entities is null, then we are setting model attributes\r\n    // @ts-ignore\r\n    if (entities !== null && getArrDepth(entities) === 2) { entities = uscore.flatten(entities); }\r\n    // --- Error Check ---\r\n    const fn_name = 'attrib.Set';\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[] = null;\r\n    let attrib_name: string;\r\n    let attrib_idx_key: number|string;\r\n    if (__model__.debug) {\r\n        if (value === undefined) {\r\n            throw new Error(fn_name + ': value is undefined');\r\n        }\r\n        if (entities !== null && entities !== undefined) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx|TEntTypeIdx[];\r\n        }\r\n        [attrib_name, attrib_idx_key] = checkAttribNameIdxKey(fn_name, attrib);\r\n        checkAttribName(fn_name , attrib_name);\r\n    } else {\r\n        if (entities !== null && entities !== undefined) {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n            // [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx|TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n        }\r\n        [attrib_name, attrib_idx_key] = splitAttribNameIdxKey(fn_name, attrib);\r\n    }\r\n    // --- Error Check ---\r\n    _setAttrib(__model__, ents_arr, attrib_name, value, attrib_idx_key, method);\r\n}\r\nexport enum _ESet {\r\n    ONE_VALUE =   'one_value',\r\n    MANY_VALUES =   'many_values'\r\n}\r\nfunction _setAttrib(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[],\r\n        attrib_name: string, attrib_values: TAttribDataTypes|TAttribDataTypes[], idx_or_key: number|string, method: _ESet): void {\r\n    // check the ents_arr\r\n    if (ents_arr === null) {\r\n        _setModelAttrib(__model__, attrib_name, attrib_values as TAttribDataTypes, idx_or_key);\r\n        return;\r\n    } else if (ents_arr.length === 0) {\r\n        return;\r\n    } else if (getArrDepth(ents_arr) === 1) {\r\n        ents_arr = [ents_arr] as TEntTypeIdx[];\r\n    }\r\n    ents_arr = ents_arr as TEntTypeIdx[];\r\n    // all ents get the same attribute value\r\n    if (method === _ESet.MANY_VALUES) {\r\n        _setEachEntDifferentAttribValue(__model__, ents_arr, attrib_name, attrib_values as TAttribDataTypes[], idx_or_key);\r\n    } else {\r\n        _setEachEntSameAttribValue(__model__, ents_arr, attrib_name, attrib_values as TAttribDataTypes, idx_or_key);\r\n    }\r\n    return;\r\n}\r\nfunction _setModelAttrib(__model__: GIModel, attrib_name: string, attrib_value: TAttribDataTypes, idx_or_key?: number|string): void {\r\n    if (typeof idx_or_key === 'number') {\r\n        __model__.modeldata.attribs.add.setModelAttribListIdxVal(attrib_name, idx_or_key, attrib_value as number);\r\n    } if (typeof idx_or_key === 'string') {\r\n        __model__.modeldata.attribs.add.setModelAttribDictKeyVal(attrib_name, idx_or_key, attrib_value as string);\r\n    } else {\r\n        __model__.modeldata.attribs.add.setModelAttribVal(attrib_name, attrib_value);\r\n    }\r\n}\r\nfunction _setEachEntDifferentAttribValue(__model__: GIModel, ents_arr: TEntTypeIdx[],\r\n        attrib_name: string, attrib_values: TAttribDataTypes[], idx_or_key?: number|string): void {\r\n    if (ents_arr.length !== attrib_values.length) {\r\n        throw new Error(\r\n            'If multiple entities are being set to multiple values, then the number of entities must match the number of values.');\r\n    }\r\n    const ent_type: number = ents_arr[0][0];\r\n    const ents_i: number[] = _getEntsIndices(__model__, ents_arr);\r\n    for (let i = 0; i < ents_arr.length; i++) {\r\n        // --- Error Check ---\r\n        if (__model__.debug) {\r\n            const fn_name = 'entities@' + attrib_name;\r\n            checkAttribValue(fn_name, attrib_values[i]);\r\n            if (idx_or_key !== null) { checkAttribIdxKey(fn_name, idx_or_key); }\r\n        }\r\n        // --- Error Check ---\r\n        if (typeof idx_or_key === 'number') {\r\n            __model__.modeldata.attribs.add.setEntAttribListIdxVal(ent_type, ents_i[i], attrib_name, idx_or_key, attrib_values[i]);\r\n        } if (typeof idx_or_key === 'string') {\r\n            __model__.modeldata.attribs.add.setEntAttribDictKeyVal(ent_type, ents_i[i], attrib_name, idx_or_key, attrib_values[i]);\r\n        } else {\r\n            __model__.modeldata.attribs.add.setEntAttribVal(ent_type, ents_i[i], attrib_name, attrib_values[i]);\r\n        }\r\n    }\r\n}\r\nfunction _setEachEntSameAttribValue(__model__: GIModel, ents_arr: TEntTypeIdx[],\r\n        attrib_name: string, attrib_value: TAttribDataTypes, idx_or_key?: number|string): void {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'entities@' + attrib_name;\r\n        checkAttribValue(fn_name , attrib_value);\r\n    }\r\n    // --- Error Check ---\r\n    const ent_type: number = ents_arr[0][0];\r\n    const ents_i: number[] = _getEntsIndices(__model__, ents_arr);\r\n    if (typeof idx_or_key === 'number') {\r\n        __model__.modeldata.attribs.add.setEntAttribListIdxVal(ent_type, ents_i, attrib_name, idx_or_key, attrib_value);\r\n    } else if (typeof idx_or_key === 'string') {\r\n        __model__.modeldata.attribs.add.setEntAttribDictKeyVal(ent_type, ents_i, attrib_name, idx_or_key, attrib_value);\r\n    } else {\r\n        __model__.modeldata.attribs.add.setEntAttribVal(ent_type, ents_i, attrib_name, attrib_value);\r\n    }\r\n}\r\nfunction _getEntsIndices(__model__: GIModel, ents_arr: TEntTypeIdx[]): number[] {\r\n    const ent_type: number = ents_arr[0][0];\r\n    const ents_i: number[] = [];\r\n    for (let i = 0; i < ents_arr.length; i++) {\r\n        if (ents_arr[i][0] !== ent_type) {\r\n            throw new Error('If an attribute is being set for multiple entities, then they must all be of the same type.');\r\n        }\r\n        ents_i.push(ents_arr[i][1]);\r\n    }\r\n    return ents_i;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Get attribute values for one or more entities.\r\n * ~\r\n * If entities is null, then model level attributes will be returned.\r\n * ~\r\n * @param __model__\r\n * @param entities Entities, the entities to get the attribute values for.\r\n * @param attrib The attribute. Can be `name`, `[name, index]`, or `[name, key]`.\r\n * @returns One attribute value, or a list of attribute values.\r\n */\r\nexport function Get(__model__: GIModel, entities: TId|TId[]|TId[][],\r\n        attrib: string|[string, number|string]): TAttribDataTypes|TAttribDataTypes[] {\r\n    // @ts-ignore\r\n    if (entities !== null && getArrDepth(entities) === 2) { entities = uscore.flatten(entities); }\r\n    // --- Error Check ---\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[] = null;\r\n    let attrib_name: string;\r\n    let attrib_idx_key: number|string;\r\n    const fn_name = 'attrib.Get';\r\n    if (__model__.debug) {\r\n        if (entities !== null && entities !== undefined) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx|TEntTypeIdx[];\r\n        }\r\n        [attrib_name, attrib_idx_key] = checkAttribNameIdxKey(fn_name, attrib);\r\n        checkAttribName(fn_name, attrib_name);\r\n    } else {\r\n        if (entities !== null && entities !== undefined) {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n            // [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx|TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n        }\r\n        [attrib_name, attrib_idx_key] = splitAttribNameIdxKey(fn_name, attrib);\r\n    }\r\n    // --- Error Check ---\r\n    return _get(__model__, ents_arr, attrib_name, attrib_idx_key);\r\n}\r\nfunction _get(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[],\r\n        attrib_name: string, attrib_idx_key?: number|string): TAttribDataTypes|TAttribDataTypes[] {\r\n    const has_idx_key: boolean = attrib_idx_key !== null && attrib_idx_key !== undefined;\r\n    if (ents_arr === null) {\r\n        // get the attrib values from the model\r\n        if (typeof attrib_idx_key === 'number') {\r\n            return __model__.modeldata.attribs.query.getModelAttribListIdxVal(attrib_name, attrib_idx_key);\r\n        } else if (typeof attrib_idx_key === 'string') {\r\n            return __model__.modeldata.attribs.query.getModelAttribDictKeyVal(attrib_name, attrib_idx_key);\r\n        } else {\r\n            return __model__.modeldata.attribs.query.getModelAttribVal(attrib_name);\r\n        }\r\n    } else if (ents_arr.length === 0) {\r\n        return [];\r\n    } else if (getArrDepth(ents_arr) === 1) {\r\n        const [ent_type, ent_i]: TEntTypeIdx = ents_arr as TEntTypeIdx;\r\n        // check if this is ID\r\n        if (attrib_name === '_id') {\r\n            if (has_idx_key) { throw new Error('The \"_id\" attribute does have an index.'); }\r\n            return EEntTypeStr[ent_type] + ent_i as TAttribDataTypes;\r\n        }\r\n        // get the attrib values from the ents\r\n        if (typeof attrib_idx_key === 'number') {\r\n            return __model__.modeldata.attribs.query.getAttribListIdxVal(ent_type, attrib_name, ent_i, attrib_idx_key as number);\r\n        } else if (typeof attrib_idx_key === 'string') {\r\n            return __model__.modeldata.attribs.query.getAttribDictKeyVal(ent_type, attrib_name, ent_i, attrib_idx_key as string);\r\n        } else {\r\n            return __model__.modeldata.attribs.query.getAttribVal(ent_type, attrib_name, ent_i);\r\n        }\r\n    } else {\r\n        return (ents_arr as TEntTypeIdx[]).map( ent_arr =>\r\n            _get(__model__, ent_arr, attrib_name, attrib_idx_key) ) as TAttribDataTypes[];\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Add one or more attributes to the model.\r\n * The attribute will appear as a new column in the attribute table.\r\n * All attribute values will be set to null.\r\n * ~\r\n * @param __model__\r\n * @param ent_type_sel Enum, the attribute entity type.\r\n * @param data_type_sel Enum, the data type for this attribute\r\n * @param attribs A single attribute name, or a list of attribute names.\r\n */\r\nexport function Add(__model__: GIModel, ent_type_sel: _EEntTypeAndMod, data_type_sel: _EDataType, attribs: string|string[]): void {\r\n    // --- Error Check ---\r\n\r\n    const fn_name = 'attrib.Add';\r\n    const arg_name = 'ent_type_sel';\r\n    let ent_type: EEntType;\r\n\r\n    if (__model__.debug) {\r\n        if (ent_type_sel === 'ps' && attribs === 'xyz') {\r\n            throw new Error(fn_name + ': ' + arg_name + ' The xyz attribute already exists.');\r\n         }\r\n        // convert the ent_type_str to an ent_type\r\n        ent_type = _getEntTypeFromStr(ent_type_sel);\r\n        if (ent_type === undefined) {\r\n            throw new Error(fn_name + ': ' + arg_name + ' is not one of the following valid types - ' +\r\n            'ps, _v, _e, _w, _f, pt, pl, pg, co, mo.');\r\n        }\r\n        // create an array of attrib names\r\n        if (!Array.isArray(attribs)) { attribs = [attribs]; }\r\n        attribs = attribs as string[];\r\n        for (const attrib of attribs) { checkAttribName(fn_name , attrib); }\r\n    } else {\r\n        // convert the ent_type_str to an ent_type\r\n        ent_type = _getEntTypeFromStr(ent_type_sel);\r\n        // create an array of attrib names\r\n        attribs = attribs as string[];\r\n    }\r\n\r\n    // --- Error Check ---\r\n    // set the data type\r\n    let data_type: EAttribDataTypeStrs = null;\r\n    switch (data_type_sel) {\r\n        case _EDataType.NUMBER:\r\n            data_type = EAttribDataTypeStrs.NUMBER;\r\n            break;\r\n        case _EDataType.STRING:\r\n            data_type = EAttribDataTypeStrs.STRING;\r\n            break;\r\n        case _EDataType.BOOLEAN:\r\n            data_type = EAttribDataTypeStrs.BOOLEAN;\r\n            break;\r\n        case _EDataType.LIST:\r\n            data_type = EAttribDataTypeStrs.LIST;\r\n            break;\r\n        case _EDataType.DICT:\r\n            data_type = EAttribDataTypeStrs.DICT;\r\n            break;\r\n        default:\r\n            throw new Error('Data type not recognised.');\r\n            break;\r\n    }\r\n    // create the attribute\r\n    for (const attrib of attribs) {\r\n        __model__.modeldata.attribs.add.addAttrib(ent_type, attrib, data_type);\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Delete one or more attributes from the model.\r\n * The column in the attribute table will be deleted.\r\n * All values will also be deleted.\r\n * ~\r\n * @param __model__\r\n * @param ent_type_sel Enum, the attribute entity type.\r\n * @param attribs A single attribute name, or a list of attribute names. In 'null' all attributes will be deleted.\r\n */\r\nexport function Delete(__model__: GIModel, ent_type_sel: _EEntTypeAndMod, attribs: string|string[]): void {\r\n    // --- Error Check ---\r\n    const fn_name = 'attrib.Delete';\r\n    const arg_name = 'ent_type_sel';\r\n    let ent_type: EEntType;\r\n    if (__model__.debug) {\r\n        if (ent_type_sel === 'ps' && attribs === 'xyz') {\r\n            throw new Error(fn_name + ': ' + arg_name + ' Deleting xyz attribute is not allowed.');\r\n        }\r\n        // convert the ent_type_str to an ent_type\r\n        ent_type = _getEntTypeFromStr(ent_type_sel);\r\n        if (ent_type === undefined) {\r\n            throw new Error(fn_name + ': ' + arg_name + ' is not one of the following valid types - ' +\r\n            'ps, _v, _e, _w, _f, pt, pl, pg, co, mo.');\r\n        }\r\n        // create an array of attrib names\r\n        if (attribs === null) { attribs = __model__.modeldata.attribs.query.getAttribNamesUser(ent_type); }\r\n        if (!Array.isArray(attribs)) { attribs = [attribs]; }\r\n        attribs = attribs as string[];\r\n        for (const attrib of attribs) { checkAttribName(fn_name , attrib); }\r\n    } else {\r\n        // convert the ent_type_str to an ent_type\r\n        ent_type = _getEntTypeFromStr(ent_type_sel);\r\n        // create an array of attrib names\r\n        if (attribs === null) { attribs = __model__.modeldata.attribs.query.getAttribNamesUser(ent_type); }\r\n        if (!Array.isArray(attribs)) { attribs = [attribs]; }\r\n        attribs = attribs as string[];\r\n    }\r\n    // --- Error Check ---\r\n    // delete the attributes\r\n    for (const attrib of attribs) {\r\n        __model__.modeldata.attribs.modify.delAttrib(ent_type, attrib);\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Rename an attribute in the model.\r\n * The header for column in the attribute table will be renamed.\r\n * All values will remain the same.\r\n * ~\r\n * @param __model__\r\n * @param ent_type_sel Enum, the attribute entity type.\r\n * @param old_attrib The old attribute name.\r\n * @param new_attrib The old attribute name.\r\n */\r\nexport function Rename(__model__: GIModel, ent_type_sel: _EEntTypeAndMod, old_attrib: string, new_attrib: string): void {\r\n    if (ent_type_sel === 'ps' && old_attrib === 'xyz') { return; }\r\n    // --- Error Check ---\r\n    const fn_name = 'attrib.Rename';\r\n    const arg_name = 'ent_type_sel';\r\n    const ent_type: EEntType = _getEntTypeFromStr(ent_type_sel);\r\n    if (__model__.debug) {\r\n        checkAttribName(fn_name , old_attrib);\r\n        checkAttribName(fn_name , new_attrib);\r\n        // --- Error Check ---\r\n        // convert the ent_type_str to an ent_type\r\n        if (ent_type === undefined) {\r\n            throw new Error(fn_name + ': ' + arg_name + ' is not one of the following valid types - ' +\r\n            'ps, _v, _e, _w, _f, pt, pl, pg, co, mo.');\r\n        }\r\n    }\r\n    // create the attribute\r\n    __model__.modeldata.attribs.modify.renameAttrib(ent_type, old_attrib, new_attrib);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Push attributes up or down the hierarchy. The original attribute is not changed.\r\n * ~\r\n * @param __model__\r\n * @param entities Entities, the entities to push the attribute values for.\r\n * @param attrib The attribute. Can be `name`, `[name, index_or_key]`,\r\n * `[source_name, source_index_or_key, target_name]` or `[source_name, source_index_or_key, target_name, target_index_or_key]`.\r\n * @param ent_type_sel Enum, the target entity type where the attribute values should be pushed to.\r\n * @param method_sel Enum, the method for aggregating attribute values in cases where aggregation is necessary.\r\n */\r\nexport function Push(__model__: GIModel, entities: TId|TId[],\r\n        attrib: string|[string, number|string]|[string, number|string, string]|[string, number|string, string, number|string],\r\n        ent_type_sel: _EAttribPushTarget, method_sel: _EPushMethodSel): void {\r\n    if (entities !== null) {\r\n        const depth = getArrDepth(entities);\r\n        if (depth === 0) {\r\n            entities = [entities] as TId[];\r\n        } else if (depth === 2) {\r\n            // @ts-ignore\r\n            entities = uscore.flatten(entities) as TId[];\r\n        }\r\n    }\r\n    // --- Error Check ---\r\n    const fn_name = 'attrib.Push';\r\n\r\n    let ents_arr: TEntTypeIdx[] = null;\r\n    let source_attrib_name: string;\r\n    let source_attrib_idx_key: number|string;\r\n    let target_attrib_name: string;\r\n    let target_attrib_idx_key: number|string;\r\n    let source_ent_type: EEntType;\r\n    const indices: number[] = [];\r\n    let target: EEntType|string;\r\n    let source_attrib: [string, number|string] = null;\r\n    let target_attrib: [string, number|string] = null;\r\n    if (Array.isArray(attrib)) {\r\n        // set source attrib\r\n        source_attrib = [\r\n            attrib[0] as string,\r\n            (attrib.length > 1 ? attrib[1] : null) as number|string\r\n        ];\r\n        // set target attrib\r\n        target_attrib = [\r\n            (attrib.length > 2 ? attrib[2] : attrib[0]) as string,\r\n            (attrib.length > 3 ? attrib[3] : null) as number|string\r\n        ];\r\n    } else {\r\n        source_attrib = [attrib, null];\r\n        target_attrib = [attrib, null];\r\n    }\r\n\r\n    if (__model__.debug) {\r\n        if (entities !== null && entities !== undefined) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n        }\r\n        [source_attrib_name, source_attrib_idx_key] = checkAttribNameIdxKey(fn_name, source_attrib);\r\n        [target_attrib_name, target_attrib_idx_key] = checkAttribNameIdxKey(fn_name, target_attrib);\r\n        // --- Error Check ---\r\n        // get the source ent_type and indices\r\n        source_ent_type = ents_arr[0][0];\r\n        for (const ent_arr of ents_arr) {\r\n            if (ent_arr[0] !== source_ent_type) {\r\n                throw new Error('The entities must all be of the same type.');\r\n            }\r\n            indices.push(ent_arr[1]);\r\n        }\r\n        // check the names\r\n        checkAttribName(fn_name, source_attrib_name);\r\n        checkAttribName(fn_name, target_attrib_name);\r\n        // get the target ent_type\r\n        target = _getAttribPushTarget(ent_type_sel);\r\n        if (source_ent_type === target) {\r\n            throw new Error('The new attribute is at the same level as the existing attribute.');\r\n        }\r\n    } else {\r\n        if (entities !== null && entities !== undefined) {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n            // [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        [source_attrib_name, source_attrib_idx_key] = splitAttribNameIdxKey(fn_name, source_attrib);\r\n        [target_attrib_name, target_attrib_idx_key] = splitAttribNameIdxKey(fn_name, target_attrib);\r\n\r\n        // get the source ent_type and indices\r\n        source_ent_type = ents_arr[0][0];\r\n        for (const ent_arr of ents_arr) {\r\n            indices.push(ent_arr[1]);\r\n        }\r\n        // get the target ent_type\r\n        target = _getAttribPushTarget(ent_type_sel);\r\n    }\r\n\r\n    // let ents_arr: TEntTypeIdx[] = null;\r\n    // if (entities !== null && entities !== undefined) {\r\n    //     ents_arr = checkIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n    // }\r\n    // let source_attrib: [string, number|string] = null;\r\n    // let target_attrib: [string, number|string] = null;\r\n    // if (Array.isArray(attrib)) {\r\n    //     // set source attrib\r\n    //     source_attrib = [\r\n    //         attrib[0] as string,\r\n    //         (attrib.length > 1 ? attrib[1] : null) as number|string\r\n    //     ];\r\n    //     // set target attrib\r\n    //     target_attrib = [\r\n    //         (attrib.length > 2 ? attrib[2] : attrib[0]) as string,\r\n    //         (attrib.length > 3 ? attrib[3] : null) as number|string\r\n    //     ];\r\n    // } else {\r\n    //     source_attrib = [attrib, null];\r\n    //     target_attrib = [attrib, null];\r\n    // }\r\n    // const [source_attrib_name, source_attrib_idx_key]: [string, number|string] = checkAttribNameIdxKey(fn_name, source_attrib);\r\n    // const [target_attrib_name, target_attrib_idx_key]: [string, number|string] = checkAttribNameIdxKey(fn_name, target_attrib);\r\n    // // --- Error Check ---\r\n    // // get the source ent_type and indices\r\n    // const source_ent_type: EEntType = ents_arr[0][0];\r\n    // const indices: number[] = [];\r\n    // for (const ent_arr of ents_arr) {\r\n    //     if (ent_arr[0] !== source_ent_type) {\r\n    //         throw new Error('The entities must all be of the same type.');\r\n    //     }\r\n    //     indices.push(ent_arr[1]);\r\n    // }\r\n    // // check the names\r\n    // checkAttribName(fn_name, source_attrib_name);\r\n    // checkAttribName(fn_name, target_attrib_name);\r\n    // // get the target ent_type\r\n    // const target: EEntType|string = _getAttribPushTarget(ent_type_sel);\r\n    // if (source_ent_type === target) {\r\n    //     throw new Error('The new attribute is at the same level as the existing attribute.');\r\n    // }\r\n\r\n    // get the method\r\n    const method: EAttribPush = _convertPushMethod(method_sel);\r\n    // do the push\r\n    __model__.modeldata.attribs.add.pushAttribVals(source_ent_type, source_attrib_name, source_attrib_idx_key, indices,\r\n                                         target,          target_attrib_name, target_attrib_idx_key, method);\r\n}\r\nexport enum _EPushMethodSel {\r\n    FIRST = 'first',\r\n    LAST = 'last',\r\n    AVERAGE = 'average',\r\n    MEDIAN = 'median',\r\n    SUM = 'sum',\r\n    MIN = 'min',\r\n    MAX = 'max'\r\n}\r\nfunction _convertPushMethod(select: _EPushMethodSel): EAttribPush {\r\n    switch (select) {\r\n        case _EPushMethodSel.AVERAGE:\r\n            return EAttribPush.AVERAGE;\r\n        case _EPushMethodSel.MEDIAN:\r\n            return EAttribPush.MEDIAN;\r\n        case _EPushMethodSel.SUM:\r\n            return EAttribPush.SUM;\r\n        case _EPushMethodSel.MIN:\r\n            return EAttribPush.MIN;\r\n        case _EPushMethodSel.MAX:\r\n            return EAttribPush.MAX;\r\n        case _EPushMethodSel.FIRST:\r\n            return EAttribPush.FIRST;\r\n        case _EPushMethodSel.LAST:\r\n            return EAttribPush.LAST;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n// ================================================================================================\r\n","/**\r\n * The `calc` module has functions for performing various types of calculations with entities in the model.\r\n * These functions neither make nor modify anything in the model.\r\n * These functions all return either numbers or lists of numbers.\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { TId, Txyz, EEntType, TEntTypeIdx, TRay, TPlane, TBBox, Txy } from '@libs/geo-info/common';\r\nimport { isPline, isWire, isEdge, isPgon, isFace, getArrDepth, isVert, isPosi, isPoint, idsBreak } from '@libs/geo-info/id';\r\nimport { distance } from '@libs/geom/distance';\r\nimport { vecSum, vecDiv, vecAdd, vecSub, vecCross, vecMult, vecFromTo, vecLen, vecDot, vecNorm, vecSetLen } from '@libs/geom/vectors';\r\nimport { triangulate } from '@libs/triangulate/triangulate';\r\nimport { area } from '@libs/geom/triangle';\r\nimport uscore from 'underscore';\r\nimport { getCentroid, getCenterOfMass } from './_common';\r\nimport { rayFromPln } from '@assets/core/inline/_ray';\r\nimport { isEmptyArr2, arrMakeFlat, arrMaxDepth } from '@assets/libs/util/arrs';\r\n\r\n// ================================================================================================\r\nexport enum _EDistanceMethod {\r\n    PS_PS_DISTANCE = 'ps_to_ps_distance',\r\n    PS_E_DISTANCE = 'ps_to_e_distance',\r\n    PS_W_DISTANCE = 'ps_to_w_distance',\r\n}\r\n/**\r\n * Calculates the minimum distance from one position to other entities in the model.\r\n * ~\r\n * @param __model__\r\n * @param entities1 Position to calculate distance from.\r\n * @param entities2 List of entities to calculate distance to.\r\n * @param method Enum; distance method.\r\n * @returns Distance, or list of distances (if position2 is a list).\r\n * @example distance1 = calc.Distance (position1, position2, p_to_p_distance)\r\n * @example_info position1 = [0,0,0], position2 = [[0,0,10],[0,0,20]], Expected value of distance is 10.\r\n */\r\nexport function Distance(__model__: GIModel, entities1: TId|TId[], entities2: TId|TId[], method: _EDistanceMethod): number|number[] {\r\n    if (isEmptyArr2(entities1)) { return []; }\r\n    if (isEmptyArr2(entities2)) { return []; }\r\n    if (Array.isArray(entities1)) { entities1 = arrMakeFlat(entities1); }\r\n    entities2 = arrMakeFlat(entities2);\r\n    // --- Error Check ---\r\n    const fn_name = 'calc.Distance';\r\n    let ents_arr1: TEntTypeIdx|TEntTypeIdx[];\r\n    let ents_arr2: TEntTypeIdx|TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr1 = checkIDs(fn_name, 'entities1', entities1, [IdCh.isId, IdCh.isIdL],\r\n            null)  as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arr2 = checkIDs(fn_name, 'entities2', entities2, [IdCh.isIdL],\r\n            null) as TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr1 = splitIDs(fn_name, 'entities1', entities1, [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        //     null)  as TEntTypeIdx|TEntTypeIdx[];\r\n        // ents_arr2 = splitIDs(fn_name, 'entities2', entities2, [IDcheckObj.isIDList],\r\n        //     null) as TEntTypeIdx[];\r\n        ents_arr1 = idsBreak(entities1)  as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arr2 = idsBreak(entities2) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    // get the from posis\r\n    let from_posis_i: number|number[];\r\n    if (arrMaxDepth(ents_arr1) === 1 && ents_arr1[0] === EEntType.POSI) {\r\n        from_posis_i = ents_arr1[1];\r\n    } else {\r\n        from_posis_i = [];\r\n        for (const [ent_type, ent_i] of ents_arr1 as TEntTypeIdx[]) {\r\n            if (ent_type === EEntType.POSI) {\r\n                from_posis_i.push(ent_i);\r\n            } else {\r\n                const ent_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n                for (const ent_posi_i of ent_posis_i) {\r\n                    from_posis_i.push(ent_posi_i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // get the to ent_type\r\n    let to_ent_type: number;\r\n    switch (method) {\r\n        case _EDistanceMethod.PS_PS_DISTANCE:\r\n            to_ent_type = EEntType.POSI;\r\n            break;\r\n        case _EDistanceMethod.PS_W_DISTANCE:\r\n        case _EDistanceMethod.PS_E_DISTANCE:\r\n            to_ent_type = EEntType.EDGE;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    // get the ents and posis sets\r\n    const set_to_ents_i: Set<number> = new Set();\r\n    let set_to_posis_i: Set<number> = new Set();\r\n    for (const [ent_type, ent_i] of ents_arr2 as TEntTypeIdx[]) {\r\n        // ents\r\n        if (ent_type === to_ent_type) {\r\n            set_to_ents_i.add(ent_i);\r\n        } else {\r\n            const sub_ents_i: number[] = __model__.modeldata.geom.nav.navAnyToAny(ent_type, to_ent_type, ent_i);\r\n            for (const sub_ent_i of sub_ents_i) {\r\n                set_to_ents_i.add(sub_ent_i);\r\n            }\r\n        }\r\n        // posis\r\n        if (to_ent_type !== EEntType.POSI) {\r\n            const sub_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n            for (const sub_posi_i of sub_posis_i) {\r\n                set_to_posis_i.add(sub_posi_i);\r\n            }\r\n        }\r\n    }\r\n    // create an array of to_ents\r\n    const to_ents_i: number[] = Array.from(set_to_ents_i);\r\n    // cerate a posis xyz map\r\n    const map_posi_i_xyz: Map<number, Txyz> = new Map();\r\n    if (to_ent_type === EEntType.POSI) { set_to_posis_i = set_to_ents_i; }\r\n    for (const posi_i of set_to_posis_i) {\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        map_posi_i_xyz.set(posi_i, xyz);\r\n    }\r\n    // calc the distance\r\n    switch (method) {\r\n        case _EDistanceMethod.PS_PS_DISTANCE:\r\n            return _distanceManyPosisToPosis(__model__, from_posis_i, to_ents_i, map_posi_i_xyz, method);\r\n        case _EDistanceMethod.PS_W_DISTANCE:\r\n        case _EDistanceMethod.PS_E_DISTANCE:\r\n            return _distanceManyPosisToEdges(__model__, from_posis_i, to_ents_i, map_posi_i_xyz, method);\r\n        default:\r\n            break;\r\n    }\r\n}\r\nfunction _distanceManyPosisToPosis(__model__: GIModel, from_posi_i: number|number[], to_ents_i: number[],\r\n    map_posi_i_xyz: Map<number, Txyz>, method: _EDistanceMethod): number|number[] {\r\n    if (!Array.isArray(from_posi_i)) {\r\n        from_posi_i = from_posi_i as number;\r\n        return _distancePstoPs(__model__, from_posi_i, to_ents_i, map_posi_i_xyz) as number;\r\n    } else  {\r\n        from_posi_i = from_posi_i as number[];\r\n        // TODO This can be optimised\r\n        // From posis may have duplicates, only calc once\r\n        return from_posi_i.map( one_from => _distanceManyPosisToPosis(__model__, one_from, to_ents_i,\r\n            map_posi_i_xyz, method) ) as number[];\r\n    }\r\n}\r\n// function _distanceManyPosisToWires(__model__: GIModel, from_posi_i: number|number[], to_ents_i: number[],\r\n//         method: _EDistanceMethod): number|number[] {\r\n//     if (!Array.isArray(from_posi_i)) {\r\n//         from_posi_i = from_posi_i as number;\r\n//         return _distancePstoW(__model__, from_posi_i, to_ents_i) as number;\r\n//     } else  {\r\n//         from_posi_i = from_posi_i as number[];\r\n//         // TODO This can be optimised\r\n//         // There is some vector stuff that gets repeated for each posi to line dist calc\r\n//         return from_posi_i.map( one_from => _distanceManyPosisToWires(__model__, one_from, to_ents_i, method) ) as number[];\r\n//     }\r\n// }\r\nfunction _distanceManyPosisToEdges(__model__: GIModel, from_posi_i: number|number[], to_ents_i: number[],\r\n        map_posi_i_xyz: Map<number, Txyz>, method: _EDistanceMethod): number|number[] {\r\n    if (!Array.isArray(from_posi_i)) {\r\n        from_posi_i = from_posi_i as number;\r\n        return _distancePstoE(__model__, from_posi_i, to_ents_i, map_posi_i_xyz) as number;\r\n    } else  {\r\n        from_posi_i = from_posi_i as number[];\r\n        // TODO This can be optimised\r\n        // From posis may have duplicates, only calc once\r\n        // Adjacent edges could be calculated once only\r\n        return from_posi_i.map( one_from => _distanceManyPosisToEdges(__model__, one_from, to_ents_i,\r\n            map_posi_i_xyz, method) ) as number[];\r\n    }\r\n}\r\nfunction _distancePstoPs(__model__: GIModel, from_posi_i: number, to_posis_i: number[],\r\n        map_posi_i_xyz: Map<number, Txyz>): number {\r\n    const from_xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(from_posi_i);\r\n    let min_dist = Infinity;\r\n    // loop, measure dist\r\n    for (const to_posi_i of to_posis_i) {\r\n        // get xyz\r\n        const to_xyz: Txyz = map_posi_i_xyz.get(to_posi_i);\r\n        // calc dist\r\n        const dist: number = _distancePointToPoint(from_xyz, to_xyz);\r\n        if (dist < min_dist) { min_dist = dist; }\r\n    }\r\n    return min_dist;\r\n}\r\n// function _distancePstoW(__model__: GIModel, from_posi_i: number, to_wires_i: number[]): number {\r\n//     const from_xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(from_posi_i);\r\n//     let min_dist = Infinity;\r\n//     const map_posi_xyz: Map<number, Txyz> = new Map();\r\n//     for (const wire_i of to_wires_i) {\r\n//         // get the posis\r\n//         const to_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, wire_i);\r\n//         // if closed, add first posi to end\r\n//         if (__model__.modeldata.geom.query.isWireClosed(wire_i)) { to_posis_i.push(to_posis_i[0]); }\r\n//         // add the first xyz to the list, this will be prev\r\n//         let prev_xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(to_posis_i[0]);\r\n//         map_posi_xyz.set(to_posis_i[0], prev_xyz);\r\n//         // loop, measure dist\r\n//         for (let i = 1; i < to_posis_i.length; i++) {\r\n//             // get xyz\r\n//             const curr_posi_i: number = to_posis_i[i];\r\n//             let curr_xyz: Txyz = map_posi_xyz.get(curr_posi_i);\r\n//             if (curr_xyz === undefined) {\r\n//                 curr_xyz = __model__.modeldata.attribs.query.getPosiCoords(curr_posi_i);\r\n//                 map_posi_xyz.set(curr_posi_i, curr_xyz);\r\n//             }\r\n//             // calc dist\r\n//             const dist: number = _distancePointToLine(from_xyz, prev_xyz, curr_xyz);\r\n//             if (dist < min_dist) { min_dist = dist; }\r\n//             // next\r\n//             prev_xyz = curr_xyz;\r\n//         }\r\n//     }\r\n//     return min_dist;\r\n// }\r\nfunction _distancePstoE(__model__: GIModel, from_posi_i: number, to_edges_i: number[],\r\n        map_posi_i_xyz: Map<number, Txyz>): number {\r\n    const from_xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(from_posi_i);\r\n    let min_dist = Infinity;\r\n    for (const edge_i of to_edges_i) {\r\n        // get the posis\r\n        const edge_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n        const xyz_start: Txyz = map_posi_i_xyz.get(edge_posis_i[0]);\r\n        const xyz_end: Txyz = map_posi_i_xyz.get(edge_posis_i[1]);\r\n        // calc dist\r\n        const dist: number = _distancePointToLine(from_xyz, xyz_start, xyz_end);\r\n        if (dist < min_dist) { min_dist = dist; }\r\n    }\r\n    return min_dist;\r\n}\r\nfunction _distancePointToPoint(from: Txyz, to: Txyz) {\r\n    const a: number = from[0] - to[0];\r\n    const b: number = from[1] - to[1];\r\n    const c: number = from[2] - to[2];\r\n    return Math.sqrt(a * a + b * b + c * c);\r\n}\r\nfunction _distancePointToLine(from: Txyz, start: Txyz, end: Txyz) {\r\n    const vec_from: Txyz = vecFromTo(start, from);\r\n    const vec_line: Txyz = vecFromTo(start, end);\r\n    const len: number = vecLen(vec_line);\r\n    const vec_line_norm = vecDiv(vec_line, len);\r\n    const dot: number = vecDot(vec_from, vec_line_norm);\r\n    if (dot <= 0) {\r\n        return  _distancePointToPoint(from, start);\r\n    } else if (dot >= len) {\r\n        return  _distancePointToPoint(from, end);\r\n    }\r\n    const close: Txyz = vecAdd(start, vecSetLen(vec_line, dot));\r\n    return _distancePointToPoint(from, close);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Calculates the length of an entity.\r\n * ~\r\n * The entity can be an edge, a wire, a polyline, or anything from which wires can be extracted.\r\n * This includes polylines, polygons, faces, and collections.\r\n * ~\r\n * Given a list of edges, wires, or polylines, a list of lengths are returned.\r\n * ~\r\n * Given any types of entities from which wires can be extracted, a list of lengths are returned.\r\n * For example, given a single polygon, a list of lengths are returned (since a polygon may have multiple wires).\r\n * ~\r\n * @param __model__\r\n * @param entities Single or list of edges, wires, or polylines, or other entities from which wires can be extracted.\r\n * @returns Lengths, a number or list of numbers.\r\n * @example length1 = calc.Length(line1)\r\n */\r\nexport function Length(__model__: GIModel, entities: TId|TId[]): number|number[] {\r\n    if (isEmptyArr2(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'calc.Length';\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL],\r\n        [EEntType.EDGE, EEntType.WIRE, EEntType.PLINE, EEntType.PGON, EEntType.FACE, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        // [EEntType.EDGE, EEntType.WIRE, EEntType.PLINE, EEntType.PGON, EEntType.FACE, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    return _length(__model__, ents_arr);\r\n}\r\nfunction _length(__model__: GIModel, ents_arrs: TEntTypeIdx|TEntTypeIdx[]): number|number[] {\r\n    if (getArrDepth(ents_arrs) === 1) {\r\n        const [ent_type, index]: [EEntType, number] = ents_arrs as TEntTypeIdx;\r\n        if (ent_type === EEntType.EDGE) {\r\n            return _edgeLength(__model__, index);\r\n        } else if (ent_type === EEntType.WIRE) {\r\n            return _wireLength(__model__, index);\r\n        } else if (ent_type === EEntType.PLINE) {\r\n            const wire_i: number = __model__.modeldata.geom.nav.navPlineToWire(index);\r\n            return _wireLength(__model__, wire_i);\r\n        } else {\r\n            const wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(ent_type, index);\r\n            return wires_i.map( wire_i => _wireLength(__model__, wire_i) ) as number[];\r\n        }\r\n    } else {\r\n        const lengths: number[]|number[][] =\r\n            (ents_arrs as TEntTypeIdx[]).map( ents_arr => _length(__model__, ents_arr) ) as number[]|number[][];\r\n        return uscore.flatten(lengths);\r\n    }\r\n}\r\nfunction _edgeLength(__model__: GIModel, edge_i: number): number {\r\n    const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n    const xyz_0: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[0]);\r\n    const xyz_1: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[1]);\r\n    return distance(xyz_0, xyz_1);\r\n}\r\nfunction _wireLength(__model__: GIModel, wire_i: number): number {\r\n    const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, wire_i);\r\n    let dist = 0;\r\n    for (let i = 0; i < posis_i.length - 1; i++) {\r\n        const xyz_0: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[i]);\r\n        const xyz_1: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[i + 1]);\r\n        dist += distance(xyz_0, xyz_1);\r\n    }\r\n    if (__model__.modeldata.geom.query.isWireClosed(wire_i)) {\r\n        const xyz_0: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[posis_i.length - 1]);\r\n        const xyz_1: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[0]);\r\n        dist += distance(xyz_0, xyz_1);\r\n    }\r\n    return dist;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Calculates the area of en entity.\r\n * ~\r\n * The entity can be a polygon, a face, a closed polyline, a closed wire, or a collection.\r\n * ~\r\n * Given a list of entities, a list of areas are returned.\r\n * ~\r\n * @param __model__\r\n * @param entities Single or list of polygons, faces, closed polylines, closed wires, collections.\r\n * @returns Area.\r\n * @example area1 = calc.Area (surface1)\r\n */\r\nexport function Area(__model__: GIModel, entities: TId|TId[]): number|number[] {\r\n    if (isEmptyArr2(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'calc.Area';\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL],\r\n        [EEntType.PGON, EEntType.FACE, EEntType.PLINE, EEntType.WIRE, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        // [EEntType.PGON, EEntType.FACE, EEntType.PLINE, EEntType.WIRE, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    return _area(__model__, ents_arr);\r\n}\r\nfunction _area(__model__: GIModel, ents_arrs: TEntTypeIdx|TEntTypeIdx[]): number|number[] {\r\n    if (getArrDepth(ents_arrs) === 1) {\r\n        const [ent_type, index]: [EEntType, number] = ents_arrs as TEntTypeIdx;\r\n        if (isPgon(ent_type) || isFace(ent_type)) {\r\n            // faces, these are already triangulated\r\n            let face_i: number = index;\r\n            if (isPgon(ent_type)) {\r\n                face_i = __model__.modeldata.geom.nav.navPgonToFace(index);\r\n            }\r\n            const tris_i: number[] = __model__.modeldata.geom.nav.navFaceToTri(face_i);\r\n            let total_area = 0;\r\n            for (const tri_i of tris_i) {\r\n                const corners_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.TRI, tri_i);\r\n                const corners_xyzs: Txyz[] = corners_i.map(corner_i => __model__.modeldata.attribs.query.getPosiCoords(corner_i));\r\n                const tri_area: number = area( corners_xyzs[0], corners_xyzs[1], corners_xyzs[2]);\r\n                total_area += tri_area;\r\n            }\r\n            return total_area;\r\n        } else if (isPline(ent_type) || isWire(ent_type)) {\r\n            // wires, these need to be triangulated\r\n            let wire_i: number = index;\r\n            if (isPline(ent_type)) {\r\n                wire_i = __model__.modeldata.geom.nav.navPlineToWire(index);\r\n            }\r\n            if (!__model__.modeldata.geom.query.isWireClosed(wire_i)) {\r\n                throw new Error('To calculate area, wire must be closed');\r\n            }\r\n            const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, index);\r\n            const xyzs:  Txyz[] = posis_i.map( posi_i => __model__.modeldata.attribs.query.getPosiCoords(posi_i) );\r\n            const tris: number[][] = triangulate(xyzs);\r\n            let total_area = 0;\r\n            for (const tri of tris) {\r\n                const corners_xyzs: Txyz[] = tri.map(corner_i => xyzs[corner_i]);\r\n                const tri_area: number = area( corners_xyzs[0], corners_xyzs[1], corners_xyzs[2] );\r\n                total_area += tri_area;\r\n            }\r\n            return total_area;\r\n        } else {\r\n            return 0;\r\n        }\r\n    } else {\r\n        const areas: number[]|number[][] =\r\n            (ents_arrs as TEntTypeIdx[]).map( ents_arr => _area(__model__, ents_arr) ) as number[]|number[][];\r\n        return uscore.flatten(areas);\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Returns a vector along an edge, from the start position to the end position.\r\n * The vector is not normalized.\r\n * ~\r\n * Given a single edge, a single vector will be returned. Given a list of edges, a list of vectors will be returned.\r\n * ~\r\n * Given any entity that has edges (collection, polygons, polylines, faces, and wires),\r\n * a list of edges will be extracted, and a list of vectors will be returned.\r\n * ~\r\n * @param __model__\r\n * @param entities Single or list of edges, or any entity from which edges can be extracted.\r\n * @returns The vector [x, y, z] or a list of vectors.\r\n */\r\nexport function Vector(__model__: GIModel, entities: TId|TId[]): Txyz|Txyz[] {\r\n    if (isEmptyArr2(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'calc.Vector';\r\n    let ents_arrs: TEntTypeIdx|TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arrs = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL],\r\n        [EEntType.PGON, EEntType.FACE, EEntType.PLINE, EEntType.WIRE, EEntType.EDGE]) as TEntTypeIdx|TEntTypeIdx[];\r\n    } else {\r\n        // ents_arrs = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        // [EEntType.PGON, EEntType.FACE, EEntType.PLINE, EEntType.WIRE, EEntType.EDGE]) as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arrs = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    return _vector(__model__, ents_arrs);\r\n}\r\nfunction _vector(__model__: GIModel, ents_arrs: TEntTypeIdx|TEntTypeIdx[]): Txyz|Txyz[] {\r\n    if (getArrDepth(ents_arrs) === 1) {\r\n        const [ent_type, index]: [EEntType, number] = ents_arrs as TEntTypeIdx;\r\n        if (ent_type === EEntType.EDGE) {\r\n            const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n            const start: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[0]);\r\n            const end: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[1]);\r\n            // console.log(\">>>>\", start, end);\r\n            return vecSub(end, start);\r\n        } else {\r\n            const edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, index);\r\n            const edges_arrs: TEntTypeIdx[] = edges_i.map(edge_i => [EEntType.EDGE, edge_i] as [EEntType, number]);\r\n            return edges_arrs.map( edges_arr => _vector(__model__, edges_arr) ) as Txyz[];\r\n        }\r\n    } else {\r\n        const vectors_arrs: Txyz[]|Txyz[][] =\r\n            (ents_arrs as TEntTypeIdx[]).map( ents_arr => _vector(__model__, ents_arr) ) as Txyz[]|Txyz[][];\r\n        const all_vectors: Txyz[] = [];\r\n        for (const vectors_arr of vectors_arrs) {\r\n            if (getArrDepth(vectors_arr) === 1) {\r\n                all_vectors.push(vectors_arr as Txyz);\r\n            } else {\r\n                for (const vector_arr of vectors_arr) {\r\n                    all_vectors.push(vector_arr as Txyz);\r\n                }\r\n            }\r\n        }\r\n        return all_vectors;\r\n    }\r\n}\r\n// ================================================================================================\r\nexport enum _ECentroidMethod {\r\n    PS_AVERAGE = 'ps_average',\r\n    CENTER_OF_MASS = 'center_of_mass'\r\n}\r\n/**\r\n * Calculates the centroid of an entity.\r\n * ~\r\n * If 'ps_average' is selected, the centroid is the average of the positions that make up that entity.\r\n * ~\r\n * If 'center_of_mass' is selected, the centroid is the centre of mass of the faces that make up that entity.\r\n * Note that only faces are deemed to have mass.\r\n * ~\r\n * Given a list of entities, a list of centroids will be returned.\r\n * ~\r\n * Given a list of positions, a single centroid that is the average of all those positions will be returned.\r\n * ~\r\n * @param __model__\r\n * @param entities Single or list of entities. (Can be any type of entities.)\r\n * @param method Enum, the method for calculating the centroid.\r\n * @returns A centroid [x, y, z] or a list of centroids.\r\n * @example centroid1 = calc.Centroid (polygon1)\r\n */\r\nexport function Centroid(__model__: GIModel, entities: TId|TId[], method: _ECentroidMethod): Txyz|Txyz[] {\r\n    if (isEmptyArr2(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'calc.Centroid';\r\n    let ents_arrs: TEntTypeIdx|TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arrs = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx|TEntTypeIdx[];\r\n    } else {\r\n        // ents_arrs = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arrs = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    switch (method) {\r\n        case _ECentroidMethod.PS_AVERAGE:\r\n            return getCentroid(__model__, ents_arrs);\r\n        case _ECentroidMethod.CENTER_OF_MASS:\r\n            return getCenterOfMass(__model__, ents_arrs);\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\n// ================================================================================================\r\n/**\r\n * Calculates the normal vector of an entity or list of entities. The vector is normalised, and scaled\r\n * by the specified scale factor.\r\n * ~\r\n * Given a single entity, a single normal will be returned. Given a list of entities, a list of normals will be returned.\r\n * ~\r\n * For polygons, faces, and face wires the normal is calculated by taking the average of all the normals of the face triangles.\r\n * ~\r\n * For polylines and polyline wires, the normal is calculated by triangulating the positions, and then\r\n * taking the average of all the normals of the triangles.\r\n * ~\r\n * For edges, the normal is calculated by takingthe avery of the normals of the two vertices.\r\n * ~\r\n * For vertices, the normal is calculated by creating a triangle out of the two adjacent edges,\r\n * and then calculating the normal of the triangle.\r\n * (If there is only one edge, or if the two adjacent edges are colinear, the the normal of the wire is returned.)\r\n * ~\r\n * For positions, the normal is calculated by taking the average of the normals of all the vertices linked to the position.\r\n * ~\r\n * If the normal cannot be calculated, [0, 0, 0] will be returned.\r\n *\r\n * @param __model__\r\n * @param entities Single or list of entities. (Can be any type of entities.)\r\n * @param scale The scale factor for the normal vector. (This is equivalent to the length of the normal vector.)\r\n * @returns The normal vector [x, y, z] or a list of normal vectors.\r\n * @example normal1 = calc.Normal (polygon1, 1)\r\n * @example_info If the input is non-planar, the output vector will be an average of all normals vector of the polygon triangles.\r\n */\r\nexport function Normal(__model__: GIModel, entities: TId|TId[], scale: number): Txyz|Txyz[] {\r\n    if (isEmptyArr2(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'calc.Normal';\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL], null) as  TEntTypeIdx|TEntTypeIdx[];\r\n        checkArgs(fn_name, 'scale', scale, [ArgCh.isNum]);\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList], null) as  TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    return _normal(__model__, ents_arr, scale);\r\n}\r\nexport function _normal(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[], scale: number): Txyz|Txyz[] {\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        const ent_type: EEntType = (ents_arr as TEntTypeIdx)[0];\r\n        const index: number = (ents_arr as TEntTypeIdx)[1];\r\n        if (isPgon(ent_type)) {\r\n            const norm_vec: Txyz = __model__.modeldata.geom.query.getFaceNormal(__model__.modeldata.geom.nav.navPgonToFace(index));\r\n            return vecMult(norm_vec, scale);\r\n        } else if (isFace(ent_type)) {\r\n            const norm_vec: Txyz = __model__.modeldata.geom.query.getFaceNormal(index);\r\n            return vecMult(norm_vec, scale);\r\n        } else if (isPline(ent_type)) {\r\n            const norm_vec: Txyz = __model__.modeldata.geom.query.getWireNormal(__model__.modeldata.geom.nav.navPlineToWire(index));\r\n            return vecMult(norm_vec, scale);\r\n        } else if (isWire(ent_type)) {\r\n            const norm_vec: Txyz = __model__.modeldata.geom.query.getWireNormal(index);\r\n            return vecMult(norm_vec, scale);\r\n        } else if (isEdge(ent_type)) {\r\n            const verts_i: number[] = __model__.modeldata.geom.nav.navEdgeToVert(index);\r\n            const norm_vecs: Txyz[] = verts_i.map( vert_i => _vertNormal(__model__, vert_i) );\r\n            const norm_vec: Txyz = vecDiv( vecSum(norm_vecs), norm_vecs.length);\r\n            return vecMult(norm_vec, scale);\r\n        } else if (isVert(ent_type)) {\r\n            const norm_vec: Txyz = _vertNormal(__model__, index);\r\n            return vecMult(norm_vec, scale);\r\n        } else if (isPosi(ent_type)) {\r\n            const verts_i: number[] = __model__.modeldata.geom.nav.navPosiToVert(index);\r\n            if (verts_i.length > 0) {\r\n                const norm_vecs: Txyz[] = verts_i.map( vert_i => _vertNormal(__model__, vert_i) );\r\n                const norm_vec: Txyz = vecDiv( vecSum(norm_vecs), norm_vecs.length);\r\n                return vecMult(norm_vec, scale);\r\n            }\r\n            return [0, 0, 0];\r\n        }  else if (isPoint(ent_type)) {\r\n            return [0, 0, 0];\r\n        }\r\n    } else {\r\n        return (ents_arr as TEntTypeIdx[]).map(ent_arr => _normal(__model__, ent_arr, scale)) as Txyz[];\r\n    }\r\n}\r\nfunction _vertNormal(__model__: GIModel, index: number) {\r\n    let norm_vec: Txyz;\r\n    const edges_i: number[] = __model__.modeldata.geom.nav.navVertToEdge(index);\r\n    if (edges_i.length === 1) {\r\n        const posis0_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edges_i[0]);\r\n        const posis1_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edges_i[1]);\r\n        const p_mid: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis0_i[1]); // same as posis1_i[0]\r\n        const p_a: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis0_i[0]);\r\n        const p_b: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis1_i[1]);\r\n        norm_vec = vecCross( vecFromTo(p_mid, p_a), vecFromTo(p_mid, p_b), true);\r\n        if (vecLen(norm_vec) > 0) { return norm_vec; }\r\n    }\r\n    const wire_i: number = __model__.modeldata.geom.nav.navEdgeToWire(edges_i[0]);\r\n    norm_vec = __model__.modeldata.geom.query.getWireNormal(wire_i);\r\n    return norm_vec;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Calculates the xyz coord along an edge, wire, or polyline given a t parameter.\r\n * ~\r\n * The 't' parameter varies between 0 and 1, where 0 indicates the start and 1 indicates the end.\r\n * For example, given a polyline,\r\n * evaluating at t=0 gives that xyz at the start,\r\n * evaluating at t=0.5 gives the xyz halfway along the polyline,\r\n * evaluating at t=1 gives the xyz at the end of the polyline.\r\n * ~\r\n * Given a single edge, wire, or polyline, a single xyz coord will be returned.\r\n * ~\r\n * Given a list of edges, wires, or polylines, a list of xyz coords will be returned.\r\n * ~\r\n * Given any entity that has wires (faces, polygons and collections),\r\n * a list of wires will be extracted, and a list of coords will be returned.\r\n * ~\r\n * @param __model__\r\n * @param entities Single or list of edges, wires, polylines, or faces, polygons, or collections.\r\n * @param t_param A value between 0 to 1.\r\n * @returns The coordinates [x, y, z], or a list of coordinates.\r\n * @example coord1 = calc.Eval (polyline1, 0.23)\r\n */\r\nexport function Eval(__model__: GIModel, entities: TId|TId[], t_param: number): Txyz|Txyz[] {\r\n    if (isEmptyArr2(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'calc.Eval';\r\n    let ents_arrs: TEntTypeIdx|TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arrs = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL],\r\n            [EEntType.EDGE, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n        checkArgs(fn_name, 'param', t_param, [ArgCh.isNum01]);\r\n    } else {\r\n        // ents_arrs = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        //     [EEntType.EDGE, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arrs = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    return _eval(__model__, ents_arrs, t_param);\r\n}\r\nfunction _eval(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[], t_param: number): Txyz|Txyz[] {\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        const [ent_type, index]: [EEntType, number] = ents_arr as TEntTypeIdx;\r\n        if (ent_type === EEntType.EDGE || ent_type === EEntType.WIRE || ent_type === EEntType.PLINE) {\r\n            const edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, index);\r\n            const num_edges: number = edges_i.length;\r\n            // get all the edge lengths\r\n            let total_dist = 0;\r\n            const dists: number[] = [];\r\n            const xyz_pairs: Txyz[][] = [];\r\n            for (const edge_i of edges_i) {\r\n                const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n                const xyz_0: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[0]);\r\n                const xyz_1: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[1]);\r\n                const dist: number = distance(xyz_0, xyz_1);\r\n                total_dist += dist;\r\n                dists.push(total_dist);\r\n                xyz_pairs.push([xyz_0, xyz_1]);\r\n            }\r\n            // map the t_param\r\n            const t_param_mapped: number = t_param * total_dist;\r\n            // loop through and find the point\r\n            for (let i = 0; i < num_edges; i++) {\r\n                if (t_param_mapped < dists[i]) {\r\n                    const xyz_pair: Txyz[] = xyz_pairs[i];\r\n                    let dist_a = 0;\r\n                    if (i > 0) { dist_a = dists[i - 1]; }\r\n                    const dist_b = dists[i];\r\n                    const edge_length = dist_b - dist_a;\r\n                    const to_t = t_param_mapped - dist_a;\r\n                    const vec_len = to_t / edge_length;\r\n                    return vecAdd( xyz_pair[0], vecMult(vecSub(xyz_pair[1], xyz_pair[0]), vec_len) );\r\n                }\r\n            }\r\n            // t param must be 1 (or greater)\r\n            return xyz_pairs[num_edges - 1][1];\r\n        } else {\r\n            const wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(ent_type, index);\r\n            const wires_arrs: TEntTypeIdx[] = wires_i.map(wire_i => [EEntType.WIRE, wire_i] as [EEntType, number]);\r\n            return wires_arrs.map( wires_arr => _eval(__model__, wires_arr, t_param) ) as Txyz[];\r\n        }\r\n    } else {\r\n        return (ents_arr as TEntTypeIdx[]).map( ent_arr => _eval(__model__, ent_arr, t_param) ) as Txyz[];\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Calculates the 't' parameter along a linear entity, given a location.\r\n * The 't' parameter varies between 0 and 1, where 0 indicates the start and 1 indicates the end.\r\n *\r\n * @param __model__\r\n * @param lines List of edges, wires, or polylines.\r\n * @param locations List of positions, vertices, points, or coordinates.\r\n * @return The 't' parameter vale, between 0 and 1.\r\n * @example coord1 = calc.ParamXyzToT (polyline1, [1,2,3])\r\n */\r\nexport function _ParamXyzToT(__model__: GIModel, lines: TId|TId[], locations: TId|TId[]|Txyz|Txyz[]): number|number[] {\r\n    // --- Error Check ---\r\n    // const fn_name = 'calc.ParamXyzToT';\r\n    // checkIDs(fn_name, 'lines', lines, [IDcheckObj.isID, IDcheckObj.isIDList], [EEntType.EDGE, EEntType.WIRE, EEntType.PLINE]);\r\n    // checkIDnTypes(fn_name, 'locations', locations,\r\n    //               [IDcheckObj.isID, IDcheckObj.isIDList, TypeCheckObj.isNumberList], [EEntType.POSI, EEntType.VERT, EEntType.POINT]);\r\n    // --- Error Check ---\r\n    throw new Error('Not implemented.'); return null;\r\n}\r\n// ================================================================================================\r\n\r\n\r\n\r\n// ================================================================================================\r\n/**\r\n * Returns a ray for an edge, a face, or a polygons. For edges, it returns a ray along the edge, from teh start vertex to the end vertex\r\n * For a face or polygon, it returns the ray that is the z-axis of the plane.\r\n * ~\r\n * For an edge, the ray vector is not normalised. For a face or polygon, the ray vector is normalised.\r\n *\r\n * @param __model__\r\n * @param entities An edge, a face, or a polygon, or a list.\r\n * @returns The ray.\r\n */\r\nexport function Ray(__model__: GIModel, entities: TId|TId[]): TRay|TRay[] {\r\n    if (isEmptyArr2(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'calc.Ray';\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL], [EEntType.EDGE, EEntType.PLINE, EEntType.FACE, EEntType.PGON]) as TEntTypeIdx|TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList], [EEntType.EDGE, EEntType.PLINE, EEntType.FACE, EEntType.PGON]) as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    return _getRay(__model__, ents_arr);\r\n}\r\nfunction _getRayFromEdge(__model__: GIModel, ent_arr: TEntTypeIdx): TRay {\r\n    const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_arr[0], ent_arr[1]);\r\n    const xyzs: Txyz[] = posis_i.map( posi_i => __model__.modeldata.attribs.query.getPosiCoords(posi_i));\r\n    return [xyzs[0], vecSub(xyzs[1], xyzs[0])];\r\n}\r\nfunction _getRayFromFace(__model__: GIModel, ent_arr: TEntTypeIdx): TRay {\r\n    const plane: TPlane = _getPlane(__model__, ent_arr) as TPlane;\r\n    return rayFromPln(plane) as TRay;\r\n}\r\nfunction _getRayFromPline(__model__: GIModel, ent_arr: TEntTypeIdx): TRay[] {\r\n    const edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_arr[0], ent_arr[1]);\r\n    return edges_i.map( edge_i => _getRayFromEdge(__model__, [EEntType.EDGE, edge_i]) ) as TRay[];\r\n}\r\nfunction _getRay(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[]): TRay|TRay[] {\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        const ent_arr: TEntTypeIdx = ents_arr as TEntTypeIdx;\r\n        if (ent_arr[0] === EEntType.EDGE) {\r\n            return _getRayFromEdge(__model__, ent_arr);\r\n        } else if (ent_arr[0] === EEntType.PLINE) {\r\n            return _getRayFromPline(__model__, ent_arr);\r\n        } else if (ent_arr[0] === EEntType.FACE) {\r\n            return _getRayFromFace(__model__, ent_arr);\r\n        } else { // must be a polygon\r\n            const face_i: number = __model__.modeldata.geom.nav.navPgonToFace(ent_arr[1]);\r\n            return _getRayFromFace(__model__, [EEntType.FACE, face_i]);\r\n        }\r\n    } else {\r\n        return (ents_arr as TEntTypeIdx[]).map( ent_arr => _getRay(__model__, ent_arr)) as TRay[];\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Returns a plane from a polygon, a face, a polyline, or a wire.\r\n * For polylines or wires, there must be at least three non-colinear vertices.\r\n * ~\r\n * The winding order is counter-clockwise.\r\n * This means that if the vertices are ordered counter-clockwise relative to your point of view,\r\n * then the z axis of the plane will be pointing towards you.\r\n *\r\n * @param entities Any entities\r\n * @returns The plane.\r\n */\r\nexport function Plane(__model__: GIModel, entities: TId|TId[]): TPlane|TPlane[] {\r\n    if (isEmptyArr2(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'calc.Plane';\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx|TEntTypeIdx[]; // takes in any\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx|TEntTypeIdx[]; // takes in any\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // TODO [EEntType.PGON, EEntType.FACE, EEntType.PLINE, EEntType.WIRE]);\r\n    // --- Error Check ---\r\n    return _getPlane(__model__, ents_arr);\r\n}\r\nfunction _getPlane(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[]): TPlane|TPlane[] {\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        const ent_arr = ents_arr as TEntTypeIdx;\r\n        const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_arr[0], ent_arr[1]);\r\n        const unique_posis_i = Array.from(new Set(posis_i));\r\n        if (unique_posis_i.length < 3) { throw new Error('Too few points to calculate plane.'); }\r\n        const unique_xyzs: Txyz[] = unique_posis_i.map( posi_i => __model__.modeldata.attribs.query.getPosiCoords(posi_i));\r\n        const origin: Txyz = vecDiv(vecSum(unique_xyzs), unique_xyzs.length);\r\n        // const normal: Txyz = newellNorm(unique_xyzs);\r\n        const normal: Txyz = _normal(__model__, ent_arr, 1) as Txyz;\r\n        const x_vec: Txyz = vecNorm(vecFromTo(unique_xyzs[0], unique_xyzs[1]));\r\n        const y_vec: Txyz = vecCross(normal, x_vec); // must be z-axis, x-axis\r\n        return [origin, x_vec, y_vec] as TPlane;\r\n    } else {\r\n        return (ents_arr as TEntTypeIdx[]).map(ent_arr => _getPlane(__model__, ent_arr)) as TPlane[];\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Returns the bounding box of the entities.\r\n * The bounding box is an imaginary box that completley contains all the geometry.\r\n * The box is always aligned with the global x, y, and z axes.\r\n * The bounding box consists of a list of lists, as follows [[x, y, z], [x, y, z], [x, y, z], [x, y, z]].\r\n * - The first [x, y, z] is the coordinates of the centre of the bounding box.\r\n * - The second [x, y, z] is the corner of the bounding box with the lowest x, y, z values.\r\n * - The third [x, y, z] is the corner of the bounding box with the highest x, y, z values.\r\n * - The fourth [x, y, z] is the dimensions of the bounding box.\r\n * ~\r\n * @param __model__\r\n * @param entities The etities for which to calculate the bounding box.\r\n * @returns The bounding box consisting of a list of four lists.\r\n */\r\nexport function BBox(__model__: GIModel, entities: TId|TId[]): TBBox {\r\n    if (!Array.isArray(entities)) { entities = [entities]; }\r\n    // --- Error Check ---\r\n    const fn_name = 'calc.BBox';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isIdL], null) as TEntTypeIdx[]; // all\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities, [IDcheckObj.isIDList], null) as TEntTypeIdx[]; // all\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    return _getBoundingBox(__model__, ents_arr);\r\n}\r\nfunction _getBoundingBox(__model__: GIModel, ents_arr: TEntTypeIdx[]): TBBox {\r\n    const posis_set_i: Set<number> = new Set();\r\n    for (const ent_arr of ents_arr) {\r\n        const ent_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_arr[0], ent_arr[1]);\r\n        for (const ent_posi_i of ent_posis_i) {\r\n            posis_set_i.add(ent_posi_i);\r\n        }\r\n    }\r\n    const unique_posis_i = Array.from(posis_set_i);\r\n    const unique_xyzs: Txyz[] = unique_posis_i.map( posi_i => __model__.modeldata.attribs.query.getPosiCoords(posi_i));\r\n    const corner_min: Txyz = [Infinity, Infinity, Infinity];\r\n    const corner_max: Txyz = [-Infinity, -Infinity, -Infinity];\r\n    for (const unique_xyz of unique_xyzs) {\r\n        if (unique_xyz[0] < corner_min[0]) { corner_min[0] = unique_xyz[0]; }\r\n        if (unique_xyz[1] < corner_min[1]) { corner_min[1] = unique_xyz[1]; }\r\n        if (unique_xyz[2] < corner_min[2]) { corner_min[2] = unique_xyz[2]; }\r\n        if (unique_xyz[0] > corner_max[0]) { corner_max[0] = unique_xyz[0]; }\r\n        if (unique_xyz[1] > corner_max[1]) { corner_max[1] = unique_xyz[1]; }\r\n        if (unique_xyz[2] > corner_max[2]) { corner_max[2] = unique_xyz[2]; }\r\n    }\r\n    return [\r\n        [(corner_min[0] + corner_max[0]) / 2, (corner_min[1] + corner_max[1]) / 2, (corner_min[2] + corner_max[2]) / 2],\r\n        corner_min,\r\n        corner_max,\r\n        [corner_max[0] - corner_min[0], corner_max[1] - corner_min[1], corner_max[2] - corner_min[2]]\r\n    ];\r\n}\r\n// ================================================================================================\r\n// /**\r\n//  * Calculates the distance between a ray or plane and a list of positions.\r\n//  * ~\r\n//  * @param __model__\r\n//  * @param ray_or_plane Ray or a plane.\r\n//  * @param entities A position or list of positions.\r\n//  * @param method Enum; all_distances or min_distance.\r\n//  * @returns Distance, or list of distances.\r\n//  * @example distance1 = virtual.Distance(ray, positions, all_distances)\r\n//  * @example_info Returns a list of distances between the ray and each position.\r\n//  */\r\n// export function Distance(__model__: GIModel, ray_or_plane: TRay|TPlane, entities: TId|TId[], method: _EDistanceMethod): number|number[] {\r\n//     // --- Error Check ---\r\n//     const fn_name = 'virtual.Distance';\r\n//     checkCommTypes(fn_name, 'ray_or_plane', ray_or_plane, [TypeCheckObj.isRay, TypeCheckObj.isPlane]);\r\n//     const ents_arr = checkIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList],\r\n//         [EEntType.POSI]) as TEntTypeIdx|TEntTypeIdx[];\r\n//     // --- Error Check ---\r\n//     const one_posi: boolean = getArrDepth(ents_arr) === 1;\r\n//     // get the to posis_i\r\n//     let posis_i: number|number[] = null;\r\n//     if (one_posi) {\r\n//         posis_i = ents_arr[1] as number;\r\n//     } else {\r\n//         posis_i = (ents_arr as TEntTypeIdx[]).map( ent_arr => ent_arr[1] ) as number[];\r\n//     }\r\n//     // get a list of distances\r\n//     let dists: number|number[] = null;\r\n//     if (ray_or_plane.length === 2) { // ray\r\n//         const ray_tjs: THREE.Ray = new THREE.Ray(new THREE.Vector3(...ray_or_plane[0]), new THREE.Vector3(...ray_or_plane[1]));\r\n//         dists = _distanceRaytoP(__model__, ray_tjs, posis_i);\r\n//     } else if (ray_or_plane.length === 3) { // plane\r\n//         const plane_normal: Txyz = vecCross(ray_or_plane[1], ray_or_plane[2]);\r\n//         const plane_tjs: THREE.Plane = new THREE.Plane();\r\n//         plane_tjs.setFromNormalAndCoplanarPoint( new THREE.Vector3(...plane_normal), new THREE.Vector3(...ray_or_plane[0]) );\r\n//         dists = _distancePlanetoP(__model__, plane_tjs, posis_i);\r\n//     }\r\n//     // return either the min or the whole list\r\n//     if (method === _EDistanceMethod.MIN_DISTANCE && !one_posi) {\r\n//         return Math.min(...dists as number[]);\r\n//     }\r\n//     return dists;\r\n// }\r\n// function _distanceRaytoP(__model__: GIModel, ray_tjs: THREE.Ray, posis_i: number|number[]): number|number[] {\r\n//     if (!Array.isArray(posis_i)) {\r\n//         const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i);\r\n//         return ray_tjs.distanceToPoint( new THREE.Vector3(...xyz) ) as number;\r\n//     } else {\r\n//         return posis_i.map( posi_i => _distanceRaytoP(__model__, ray_tjs, posi_i) ) as number[];\r\n//     }\r\n// }\r\n// function _distancePlanetoP(__model__: GIModel, plane_tjs: THREE.Plane, posis_i: number|number[]): number|number[] {\r\n//     if (!Array.isArray(posis_i)) {\r\n//         const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i);\r\n//         return plane_tjs.distanceToPoint( new THREE.Vector3(...xyz) ) as number;\r\n//     } else {\r\n//         return posis_i.map( posi_i => _distancePlanetoP(__model__, plane_tjs, posi_i) ) as number[];\r\n//     }\r\n// }\r\n// export enum _EDistanceMethod {\r\n//     ALL_DISTANCES = 'all_distances',\r\n//     MIN_DISTANCE = 'min_distance'\r\n// }\r\n","/**\r\n * The `collections` module has functions for creating and modifying collections.\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { TId, EEntType, TEntTypeIdx, EFilterOperatorTypes } from '@libs/geo-info/common';\r\nimport { isPoint, isPline, isPgon, isColl, idsMake, getArrDepth, isEmptyArr, idsBreak } from '@libs/geo-info/id';\r\nimport { __merge__} from '../_model';\r\nimport { _model } from '..';\r\nimport { arrMakeFlat } from '@libs/util/arrs';\r\n\r\n// ================================================================================================\r\n/**\r\n * Adds one or more new collections to the model.\r\n * ~\r\n * If the list of entities contains other collections, these other collections will then become\r\n * children of the new collection that will be created.\r\n * ~\r\n * @param __model__\r\n * @param entities List or nested lists of points, polylines, polygons, and other colletions.\r\n * @param name The name to give to this collection, resulting in an attribute called `name`. If `null`, no attribute will be created.\r\n * @returns Entities, new collection, or a list of new collections.\r\n * @example collection1 = collection.Create([point1,polyine1,polygon1], 'my_coll')\r\n * @example_info Creates a collection containing point1, polyline1, polygon1, with an attribute `name = 'my_coll'`.\r\n * @example collections = collection.Create([[point1,polyine1],[polygon1]], ['coll1', 'coll2'])\r\n * @example_info Creates two collections, the first containing point1 and polyline1, the second containing polygon1.\r\n */\r\nexport function Create(__model__: GIModel, entities: TId|TId[]|TId[][], name: string|string[]): TId|TId[] {\r\n    // --- Error Check ---\r\n    const fn_name = 'collection.Create';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL, IdCh.isIdLL],\r\n            [EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        checkArgs(fn_name, 'name', name, [ArgCh.isStr, ArgCh.isStrL]);\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList, IDcheckObj.isIDList_list],\r\n        //     [EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const new_ent_arrs: TEntTypeIdx|TEntTypeIdx[] = _create(__model__, ents_arr);\r\n    // set the name\r\n    if (name !== null) {\r\n        let colls_i: number[] = [];\r\n        if (Array.isArray(new_ent_arrs[0])) {\r\n            colls_i = (new_ent_arrs as TEntTypeIdx[]).map( new_ent_arr => new_ent_arr[1] as number);\r\n        } else {\r\n            colls_i = [new_ent_arrs[1] as number];\r\n        }\r\n        if (Array.isArray(name)) {\r\n            if (name.length !== colls_i.length) {\r\n                throw new Error(fn_name +\r\n                    ': The list of collection names must be equal in length to the list of collections that get created.');\r\n            }\r\n            for (let i = 0; i < name.length; i++) {\r\n                __model__.modeldata.attribs.add.setEntAttribVal(EEntType.COLL, colls_i[i], 'name', name[i]);\r\n            }\r\n        } else {\r\n            __model__.modeldata.attribs.add.setEntAttribVal(EEntType.COLL, colls_i, 'name', name);\r\n        }\r\n    }\r\n    // return the collection id\r\n    return idsMake(new_ent_arrs) as TId|TId[];\r\n}\r\nfunction _create(__model__: GIModel, ents_arr: TEntTypeIdx | TEntTypeIdx[] | TEntTypeIdx[][]): TEntTypeIdx | TEntTypeIdx[] {\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 1) {\r\n        ents_arr = [ents_arr] as TEntTypeIdx[];\r\n    } else if (depth === 3) {\r\n        ents_arr = ents_arr as TEntTypeIdx[][];\r\n        return ents_arr.map(ents_arr_item => _create(__model__, ents_arr_item)) as TEntTypeIdx[];\r\n    }\r\n    const points_i: number[] = [];\r\n    const plines_i: number[] = [];\r\n    const pgons_i: number[] = [];\r\n    const child_colls_i: number[] = [];\r\n    for (const ent_arr of ents_arr) {\r\n        if (isPoint(ent_arr[0])) { points_i.push(ent_arr[1]); }\r\n        if (isPline(ent_arr[0])) { plines_i.push(ent_arr[1]); }\r\n        if (isPgon(ent_arr[0])) { pgons_i.push(ent_arr[1]); }\r\n        if (isColl(ent_arr[0])) { child_colls_i.push(ent_arr[1]); }\r\n    }\r\n    // create the collection, setting tha parent to -1\r\n    const coll_i: number = __model__.modeldata.geom.add.addColl(-1, points_i, plines_i, pgons_i);\r\n    // set the parents\r\n    for (const child_coll_i of child_colls_i) {\r\n        __model__.modeldata.geom.modify_coll.setCollParent(child_coll_i, coll_i);\r\n    }\r\n    // return the new collection\r\n    return [EEntType.COLL, coll_i];\r\n}\r\n// ================================================================================================\r\n/**\r\n * Get one or more collections from the model, given a name or list of names.\r\n * Collections with an attribute called 'name' and with a value that matches teh given vale will be returned.\r\n * ~\r\n * The value for name can include wildcards: '?' matches any single character and '*' matches any sequence of characters.\r\n * For example, 'coll?' will match 'coll1' and 'colla'. 'coll*' matches any name that starts with 'coll'.\r\n * ~\r\n * If a single collection is found, the collection will be returned as a single item (not a list).\r\n * This is a convenience so that there is no need to get the first item out of the returned list.\r\n * ~\r\n * If no collections are found, then an empty list is returned.\r\n * ~\r\n * @param __model__\r\n * @param names A name or list of names. May include wildcards, '?' and '*'.\r\n * @returns The collection, or a list of collections.\r\n */\r\nexport function Get(__model__: GIModel, names: string|string[]): TId|TId[] {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'collection.Get';\r\n        checkArgs(fn_name, 'names', names, [ArgCh.isStr, ArgCh.isStrL]);\r\n    }\r\n    // --- Error Check ---\r\n    const colls_i: number[] = _get(__model__, names);\r\n    if (colls_i.length === 0) {\r\n        return []; // return an empty list\r\n    } else if (colls_i.length === 1) {\r\n        return idsMake([EEntType.COLL, colls_i[0]]) as TId;\r\n    }\r\n    return idsMake(colls_i.map(coll_i => [EEntType.COLL, coll_i]) as TEntTypeIdx[]) as TId[];\r\n}\r\nfunction _get(__model__: GIModel, names: string|string[]): number[] {\r\n    if (!Array.isArray(names)) {\r\n        // wildcards\r\n        if (names.indexOf('*') !== -1 || names.indexOf('?') !== -1) {\r\n            const reg_exp = new RegExp(names.replace('?', '\\\\w').replace('*', '\\\\w*'));\r\n            const all_colls_i: number[] = __model__.modeldata.geom.query.getEnts(EEntType.COLL);\r\n            const all_names: string[] = __model__.modeldata.attribs.query.getAttribVal(EEntType.COLL, 'name', all_colls_i) as string[];\r\n            const unique_names: string[] = Array.from(new Set(all_names));\r\n            const match_names: string[] = [];\r\n            for (const name1 of unique_names) {\r\n                if (reg_exp.test(name1)) { match_names.push(name1); }\r\n            }\r\n            return _get(__model__, match_names);\r\n        }\r\n        const colls_i: number[] = __model__.modeldata.geom.query.getEnts(EEntType.COLL);\r\n        const query_result: number[] = __model__.modeldata.attribs.query.filterByAttribs(\r\n            EEntType.COLL, colls_i, 'name', null, EFilterOperatorTypes.IS_EQUAL, names);\r\n        return query_result;\r\n    } else {\r\n        const all_colls_i: number[] = [];\r\n        for (const name1 of names) {\r\n            for (const coll_i of _get(__model__, name1)) {\r\n                all_colls_i.push(coll_i);\r\n            }\r\n        }\r\n        return all_colls_i;\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Addes entities to a collection.\r\n * ~\r\n * @param __model__\r\n * @param coll The collection to be updated.\r\n * @param entities Points, polylines, polygons, and collections to add.\r\n * @returns void\r\n */\r\nexport function Add(__model__: GIModel, coll: TId, entities: TId|TId[]): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        const fn_name = 'collection.Add';\r\n        let coll_arr;\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            coll_arr = checkIDs(fn_name, 'coll', coll, [IdCh.isId], [EEntType.COLL]) as TEntTypeIdx;\r\n            ents_arr = checkIDs(fn_name, 'entities', entities,\r\n                [IdCh.isId, IdCh.isIdL],\r\n                [EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        } else {\r\n            // coll_arr = splitIDs(fn_name, 'coll', coll, [IDcheckObj.isID], [EEntType.COLL]) as TEntTypeIdx;\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n            //     [IDcheckObj.isID, IDcheckObj.isIDList],\r\n            //     [EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            coll_arr = idsBreak(coll) as TEntTypeIdx;\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        // --- Error Check ---\r\n        _collectionAdd(__model__, coll_arr[1], ents_arr);\r\n    }\r\n}\r\n\r\nfunction _collectionAdd(__model__: GIModel, coll_i: number, ents_arr: TEntTypeIdx[]): void {\r\n    const points_i: number[] = [];\r\n    const plines_i: number[] = [];\r\n    const pgons_i: number[] = [];\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        switch (ent_type) {\r\n            case EEntType.POINT:\r\n                points_i.push(ent_i);\r\n                break;\r\n            case EEntType.PLINE:\r\n                plines_i.push(ent_i);\r\n                break;\r\n            case EEntType.PGON:\r\n                pgons_i.push(ent_i);\r\n                break;\r\n            case EEntType.COLL:\r\n                __model__.modeldata.geom.modify_coll.setCollParent(ent_i, coll_i);\r\n                break;\r\n            default:\r\n                throw new Error('Error adding entities to a collection. \\\r\n                A collection can only contain points, polylines, polygons, and other collections.');\r\n        }\r\n    }\r\n    __model__.modeldata.geom.modify_coll.collAddEnts(coll_i, points_i, plines_i, pgons_i);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Removes entities from a collection.\r\n * ~\r\n * @param __model__\r\n * @param coll The collection to be updated.\r\n * @param entities Points, polylines, polygons, and collections to add. Or null to empty the collection.\r\n * @returns void\r\n */\r\nexport function Remove(__model__: GIModel, coll: TId, entities: TId|TId[]): void {\r\n    // --- Error Check ---\r\n    const fn_name = 'collection.Remove';\r\n    let ents_arr: TEntTypeIdx[] = null;\r\n    let coll_arr;\r\n    if (__model__.debug) {\r\n        if (entities !== null) {\r\n            entities = arrMakeFlat(entities) as TId[];\r\n            ents_arr = checkIDs(fn_name, 'entities', entities,\r\n                [IdCh.isId, IdCh.isIdL],\r\n                [EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        }\r\n        coll_arr = checkIDs(fn_name, 'coll', coll, [IdCh.isId], [EEntType.COLL]) as TEntTypeIdx;\r\n    } else {\r\n        if (entities !== null) {\r\n            entities = arrMakeFlat(entities) as TId[];\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n            //     [IDcheckObj.isID, IDcheckObj.isIDList],\r\n            //     [EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        // coll_arr = splitIDs(fn_name, 'coll', coll, [IDcheckObj.isID], [EEntType.COLL]) as TEntTypeIdx;\r\n        coll_arr = idsBreak(coll) as TEntTypeIdx;\r\n    }\r\n    // --- Error Check ---\r\n    if (ents_arr === null) {\r\n        _collectionEmpty(__model__, coll_arr[1]);\r\n    } else {\r\n        _collectionRemove(__model__, coll_arr[1], ents_arr);\r\n    }\r\n}\r\nfunction _collectionRemove(__model__: GIModel, coll_i: number, ents_arr: TEntTypeIdx[]): void {\r\n    const points_i: number[] = [];\r\n    const plines_i: number[] = [];\r\n    const pgons_i: number[] = [];\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        switch (ent_type) {\r\n            case EEntType.POINT:\r\n                points_i.push(ent_i);\r\n                break;\r\n            case EEntType.PLINE:\r\n                plines_i.push(ent_i);\r\n                break;\r\n            case EEntType.PGON:\r\n                pgons_i.push(ent_i);\r\n                break;\r\n            case EEntType.COLL:\r\n                if (__model__.modeldata.geom.query.getCollParent(ent_i) === coll_i) {\r\n                    __model__.modeldata.geom.modify_coll.setCollParent(ent_i, -1);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('Error removing entities from a collection. \\\r\n                A collection can only contain points, polylines, polygons, and other collections.');\r\n        }\r\n    }\r\n    __model__.modeldata.geom.modify_coll.collRemoveEnts(coll_i, points_i, plines_i, pgons_i);\r\n}\r\nfunction _collectionEmpty(__model__: GIModel, coll_i: number): void {\r\n    const points_i: number[] = __model__.modeldata.geom.nav.navCollToPoint(coll_i);\r\n    const plines_i: number[] = __model__.modeldata.geom.nav.navCollToPline(coll_i);\r\n    const pgons_i: number[] = __model__.modeldata.geom.nav.navCollToPgon(coll_i);\r\n    __model__.modeldata.geom.modify_coll.collRemoveEnts(coll_i, points_i, plines_i, pgons_i);\r\n    // remove the collections that are children of this collection\r\n    const child_colls_i: number[] = __model__.modeldata.geom.query.getCollChildren(coll_i);\r\n    for (const child_coll_i of child_colls_i) {\r\n        __model__.modeldata.geom.modify_coll.setCollParent(child_coll_i, -1);\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Deletes a collection without deleting the entities in the collection.\r\n * ~\r\n * @param __model__\r\n * @param coll The collection or list of collections to be deleted.\r\n * @returns void\r\n */\r\nexport function Delete(__model__: GIModel, coll: TId|TId[]): void {\r\n    coll = arrMakeFlat(coll) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'collection.Delete';\r\n    let colls_arrs;\r\n    if (__model__.debug) {\r\n        colls_arrs = checkIDs(fn_name, 'coll', coll, [IdCh.isIdL], [EEntType.COLL]) as TEntTypeIdx[];\r\n    } else {\r\n        // colls_arrs = splitIDs(fn_name, 'coll', coll, [IDcheckObj.isIDList], [EEntType.COLL]) as TEntTypeIdx[];\r\n        colls_arrs = idsBreak(coll) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const colls_i: number[] = [];\r\n    for (const [ent_type, ent_i] of colls_arrs) {\r\n        colls_i.push(ent_i);\r\n    }\r\n    __model__.modeldata.geom.del.delColls(colls_i, false);\r\n}\r\n// ================================================================================================\r\n\r\n","/**\r\n * The `dict` module has functions for working with dictionaries.\r\n * These functions have no direct link with the model, the are generic functions for manipulating dictionaries.\r\n * These functions neither make nor modify anything in the model.\r\n * In addition to these functions, there are also inline functions available for working with dictionaries.\r\n\r\n */\r\n\r\n/**\r\n *\r\n */\r\n\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\n// ================================================================================================\r\n/**\r\n * Adds one or more key-value pairs to a dict. Existing keys with the same name will be overwritten.\r\n * ~\r\n * @param dict Dictionary to add the key-value pairs to.\r\n * @param keys A key or list of keys.\r\n * @param values A value of list of values.\r\n * @returns void\r\n */\r\nexport function Add(dict: object, keys: string|string[], values: any|any[]): void {\r\n    // --- Error Check ---\r\n    const fn_name = 'dict.Add';\r\n    checkArgs(fn_name, 'keys', keys, [ArgCh.isStr, ArgCh.isStrL]);\r\n    checkArgs(fn_name, 'values', keys, [ArgCh.isAny, ArgCh.isList]);\r\n    keys = Array.isArray(keys) ? keys : [keys];\r\n    values = Array.isArray(values) ? values : [values];\r\n    if (keys.length !== values.length) {\r\n        throw new Error(fn_name + ': The list of keys must be the same length as the list of values.');\r\n    }\r\n    // --- Error Check ---\r\n    for (let i = 0; i < keys.length; i++) {\r\n        const key = keys[i];\r\n        const value = values[i];\r\n        dict[key] = dict[value];\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Removes keys from a dict. If the key does not exist, no action is taken and no error is thrown.\r\n * ~\r\n * @param dict The dict in which to remove keys\r\n * @param keys The key or list of keys to remove.\r\n * @returns void\r\n */\r\nexport function Remove(dict: object, keys: string|string[]): void {\r\n    // --- Error Check ---\r\n    const fn_name = 'dict.Remove';\r\n    checkArgs(fn_name, 'key', keys, [ArgCh.isStr, ArgCh.isStrL]);\r\n    // --- Error Check ---\r\n    if (!Array.isArray(keys)) { keys = [keys] as string[]; }\r\n    keys = keys as string[];\r\n    for (const key of keys) {\r\n        if (typeof key !== 'string') {\r\n            throw new Error('dict.Remove: Keys must be strings; \\\r\n                the following key is not valid:\"' + key + '\".');\r\n        }\r\n        if (key in dict) {\r\n            delete dict[key];\r\n        }\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Replaces keys in a dict. If the key does not exist, no action is taken and no error is thrown.\r\n * ~\r\n * @param dict The dict in which to replace keys\r\n * @param old_keys The old key or list of keys.\r\n * @param new_keys The new key or list of keys.\r\n * @returns void\r\n */\r\nexport function Replace(dict: object, old_keys: string|string[], new_keys: string|string[]): void {\r\n    // --- Error Check ---\r\n    const fn_name = 'dict.Replace';\r\n    checkArgs(fn_name, 'old_keys', old_keys, [ArgCh.isStr, ArgCh.isStrL]);\r\n    checkArgs(fn_name, 'new_keys', new_keys, [ArgCh.isStr, ArgCh.isStrL]);\r\n    old_keys = Array.isArray(old_keys) ? old_keys : [old_keys];\r\n    new_keys = Array.isArray(new_keys) ? new_keys : [new_keys];\r\n    if (old_keys.length !== new_keys.length) {\r\n        throw new Error(fn_name + ': The list of new keys must be the same length as the list of old keys.');\r\n    }\r\n    // --- Error Check ---\r\n    for (let i = 0; i < old_keys.length; i++) {\r\n        const old_key = old_keys[i];\r\n        const new_key = new_keys[i];\r\n        if (old_key in dict) {\r\n            dict[new_key] = dict[old_key];\r\n            delete dict[old_key];\r\n        }\r\n    }\r\n}\r\n// ================================================================================================\r\n\r\n","/**\r\n * The `intersect` module has functions for calculating intersections between different types of entities.\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { TId, Txyz, EEntType, TPlane, TRay, TEntTypeIdx } from '@libs/geo-info/common';\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { getArrDepth, idsBreak } from '@libs/geo-info/id';\r\nimport { vecCross} from '@libs/geom/vectors';\r\nimport { _normal } from './calc';\r\nimport * as THREE from 'three';\r\n\r\n// ================================================================================================\r\n/**\r\n * Calculates the xyz intersection between a ray or a plane and a list of entities.\r\n * ~\r\n * For a ray, the intersection between the ray and one or more faces is return.\r\n * The intersection between each face triangle and the ray is caclulated.\r\n * This ignores the intersections between rays and edges (including polyline edges).\r\n * ~\r\n * For a plane, the intersection between the plane and one or more edges is returned.\r\n * This ignores the intersections between planes and face triangles (including polygon faces).\r\n * ~\r\n * @param __model__\r\n * @param ray A ray.\r\n * @param entities List of entities.\r\n * @return A list of xyz intersection coordinates.\r\n * @example coords = virtual.Intersect(plane, polyline1)\r\n * @example_info Returns a list of coordinates where the plane intersects with polyline1.\r\n */\r\nexport function RayFace(__model__: GIModel, ray: TRay, entities: TId|TId[]): Txyz[] {\r\n    // --- Error Check ---\r\n    const fn_name = 'intersect.RayFace';\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'ray', ray, [ArgCh.isRay]);\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL],\r\n            [EEntType.FACE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        //     [EEntType.FACE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    // create the threejs entity and calc intersections\r\n    const ray_tjs: THREE.Ray = new THREE.Ray(new THREE.Vector3(...ray[0]), new THREE.Vector3(...ray[1]));\r\n    return _intersectRay(__model__, ents_arr, ray_tjs);\r\n}\r\nfunction _intersectRay(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[], ray_tjs: THREE.Ray): Txyz[] {\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        const [ent_type, index]: [EEntType, number] = ents_arr as TEntTypeIdx;\r\n        const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n        const posis_tjs: THREE.Vector3[] = [];\r\n        for (const posi_i of posis_i) {\r\n            const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n            const posi_tjs: THREE.Vector3 = new THREE.Vector3(...xyz);\r\n            posis_tjs[posi_i] = posi_tjs;\r\n        }\r\n        const isect_xyzs: Txyz[] = [];\r\n        // triangles\r\n        const tris_i: number[] = __model__.modeldata.geom.nav.navAnyToTri(ent_type, index);\r\n        for (const tri_i of tris_i) {\r\n            const tri_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.TRI, tri_i);\r\n            const tri_posis_tjs: THREE.Vector3[] = tri_posis_i.map(tri_posi_i => posis_tjs[tri_posi_i]);\r\n            const isect_tjs: THREE.Vector3 = new THREE.Vector3();\r\n            const result: THREE.Vector3 = ray_tjs.intersectTriangle(tri_posis_tjs[0], tri_posis_tjs[1], tri_posis_tjs[2], false, isect_tjs);\r\n            if (result !== undefined && result !== null) {\r\n                isect_xyzs.push([isect_tjs.x, isect_tjs.y, isect_tjs.z]);\r\n            }\r\n        }\r\n        // return the intersection xyzs\r\n        return isect_xyzs;\r\n    } else {\r\n        const all_isect_xyzs: Txyz[] = [];\r\n        for (const ent_arr of ents_arr) {\r\n            const isect_xyzs: Txyz[] = _intersectRay(__model__, ent_arr as TEntTypeIdx, ray_tjs);\r\n            for (const isect_xyz  of isect_xyzs) {\r\n                all_isect_xyzs.push(isect_xyz);\r\n            }\r\n        }\r\n        return all_isect_xyzs as Txyz[];\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Calculates the xyz intersection between a ray or a plane and a list of entities.\r\n * ~\r\n * For a ray, the intersection between the ray and one or more faces is return.\r\n * The intersection between each face triangle and the ray is caclulated.\r\n * This ignores the intersections between rays and edges (including polyline edges).\r\n * ~\r\n * For a plane, the intersection between the plane and one or more edges is returned.\r\n * This ignores the intersections between planes and face triangles (including polygon faces).\r\n * ~\r\n * @param __model__\r\n * @param plane A plane.\r\n * @param entities List of entities.\r\n * @return A list of xyz intersection coordinates.\r\n * @example coords = virtual.Intersect(plane, polyline1)\r\n * @example_info Returns a list of coordinates where the plane intersects with polyline1.\r\n */\r\nexport function PlaneEdge(__model__: GIModel, plane: TRay|TPlane, entities: TId|TId[]): Txyz[] {\r\n    // --- Error Check ---\r\n    const fn_name = 'intersect.PlaneEdge';\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'plane', plane, [ArgCh.isPln]);\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL],\r\n            [EEntType.EDGE, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        //     [EEntType.EDGE, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    // create the threejs entity and calc intersections\r\n    const plane_normal: Txyz = vecCross(plane[1], plane[2]);\r\n    const plane_tjs: THREE.Plane = new THREE.Plane();\r\n    plane_tjs.setFromNormalAndCoplanarPoint( new THREE.Vector3(...plane_normal), new THREE.Vector3(...plane[0]) );\r\n    return _intersectPlane(__model__, ents_arr, plane_tjs);\r\n}\r\nfunction _intersectPlane(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[], plane_tjs: THREE.Plane): Txyz[] {\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        const [ent_type, index]: [EEntType, number] = ents_arr as TEntTypeIdx;\r\n        const isect_xyzs: Txyz[] = [];\r\n        const wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(ent_type, index);\r\n        for (const wire_i of wires_i) {\r\n            const wire_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, wire_i);\r\n            // create threejs posis for all posis\r\n            const posis_tjs: THREE.Vector3[] = [];\r\n            for (const wire_posi_i of wire_posis_i) {\r\n                const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(wire_posi_i);\r\n                const posi_tjs: THREE.Vector3 = new THREE.Vector3(...xyz);\r\n                posis_tjs.push(posi_tjs);\r\n            }\r\n            if (__model__.modeldata.geom.query.isWireClosed(wire_i)) {\r\n                posis_tjs.push(posis_tjs[0]);\r\n            }\r\n            // for each pair of posis, create a threejs line and do the intersect\r\n            for (let i = 0; i < posis_tjs.length - 1; i++) {\r\n                const line_tjs: THREE.Line3 = new THREE.Line3(posis_tjs[i], posis_tjs[i + 1]);\r\n                const isect_tjs: THREE.Vector3 = new THREE.Vector3();\r\n                const result: THREE.Vector3 = plane_tjs.intersectLine(line_tjs, isect_tjs);\r\n                if (result !== undefined && result !== null) {\r\n                    isect_xyzs.push([isect_tjs.x, isect_tjs.y, isect_tjs.z]);\r\n                }\r\n            }\r\n        }\r\n        return isect_xyzs;\r\n    } else {\r\n        const all_isect_xyzs: Txyz[] = [];\r\n        for (const ent_arr of ents_arr) {\r\n            const isect_xyzs: Txyz[] = _intersectPlane(__model__, ent_arr as TEntTypeIdx, plane_tjs);\r\n            for (const isect_xyz  of isect_xyzs) {\r\n                all_isect_xyzs.push(isect_xyz);\r\n            }\r\n        }\r\n        return all_isect_xyzs as Txyz[];\r\n    }\r\n}\r\n","/**\r\n * The `io` module has functions for importing and exporting.\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { importObj, exportPosiBasedObj, exportVertBasedObj } from '@libs/geo-info/io_obj';\r\nimport { importGeojson, exportGeojson } from '@libs/geo-info/io_geojson';\r\nimport { download } from '@libs/filesys/download';\r\nimport { TId, EEntType, TEntTypeIdx, IEntSets } from '@libs/geo-info/common';\r\nimport { __merge__ } from '../_model';\r\nimport { _model } from '..';\r\nimport { idsMake, idsBreak } from '@libs/geo-info/id';\r\nimport { arrMakeFlat } from '@assets/libs/util/arrs';\r\nimport JSZip from 'jszip';\r\n\r\nconst requestedBytes = 1024 * 1024 * 200; // 200 MB local storage quota\r\n\r\n// ================================================================================================\r\ndeclare global {\r\n    interface Navigator {\r\n        webkitPersistentStorage: {\r\n            requestQuota: (a, b, c) => {}\r\n        };\r\n    }\r\n}\r\n// ================================================================================================\r\n// Import / Export data types\r\nexport enum _EIODataFormat {\r\n    GI = 'gi',\r\n    OBJ = 'obj',\r\n    GEOJSON = 'geojson'\r\n}\r\nexport enum _EIODataSource {\r\n    DEFAULT = 'From URL',\r\n    FILESYS = 'From Local Storage'\r\n}\r\nexport enum _EIODataTarget {\r\n    DEFAULT = 'Save to Hard Disk',\r\n    FILESYS = 'Save to Local Storage'\r\n}\r\n// ================================================================================================\r\n/**\r\n * Read data from a Url or from local storage.\r\n *\r\n * @param data The data to be read (from URL or from Local Storage).\r\n * @returns the data.\r\n */\r\nexport async function Read(__model__: GIModel, data: string): Promise<string|{}> {\r\n    return _getFile(data);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Write data to the hard disk or to the local storage.\r\n *\r\n * @param data The data to be saved (can be the url to the file).\r\n * @param file_name The name to be saved in the file system (file extension should be included).\r\n * @param data_target Enum, where the data is to be exported to.\r\n * @returns whether the data is successfully saved.\r\n */\r\nexport async function Write(__model__: GIModel, data: string, file_name: string, data_target: _EIODataTarget): Promise<Boolean> {\r\n    try {\r\n        if (data_target === _EIODataTarget.DEFAULT) {\r\n            return download(data, file_name);\r\n        }\r\n        return saveResource(data, file_name);\r\n    } catch (ex) {\r\n        return false;\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Imports data into the model.\r\n * ~\r\n * Model data can be pasted in directly as a string, or can be retrieved as a file.\r\n * ~\r\n * If model data is retrieved from a file, there are two ways of specifying the file location:\r\n * - A url, e.g. \"https://www.dropbox.com/xxxx/my_data.obj\"\r\n * - A file name in the local storage, e.g. \"my_data.obj\".\r\n * ~\r\n * To place a file in local storage, go to the Mobius menu, and select 'Local Storage' from the dropdown.\r\n * Note that a codescript using a file in local storage will not be shareable with others.\r\n * ~\r\n * @param model_data The model data\r\n * @param data_format Enum, the file format.\r\n * @returns A list of the positions, points, polylines, polygons and collections added to the model.\r\n * @example io.Import (\"my_data.obj\", obj)\r\n * @example_info Imports the data from my_data.obj, from local storage.\r\n */\r\nexport async function Import(__model__: GIModel, input_data: string, data_format: _EIODataFormat): Promise<TId|{}> {\r\n    const model_data = await _getFile(input_data);\r\n    if (!model_data) {\r\n        throw new Error('Invalid imported model data');\r\n    }\r\n    let coll_i: number = null;\r\n    if (model_data.constructor === {}.constructor) {\r\n        let import_func: Function;\r\n        switch (data_format) {\r\n            case _EIODataFormat.GI:\r\n                import_func  = _importGI;\r\n                break;\r\n            case _EIODataFormat.OBJ:\r\n                import_func  = _importObj;\r\n                break;\r\n            case _EIODataFormat.GEOJSON:\r\n                import_func  = _importGeojson;\r\n                break;\r\n            default:\r\n                throw new Error('Import type not recognised');\r\n        }\r\n        const coll_results = {};\r\n        for (const data_name in <Object> model_data) {\r\n            if (model_data[data_name]) {\r\n                coll_i  = import_func(__model__, <string> model_data[data_name]);\r\n                coll_results[data_name] = idsMake([EEntType.COLL, coll_i]) as TId;\r\n            }\r\n        }\r\n        return coll_results;\r\n    }\r\n    switch (data_format) {\r\n        case _EIODataFormat.GI:\r\n            coll_i  = _importGI(__model__, <string> model_data);\r\n            break;\r\n        case _EIODataFormat.OBJ:\r\n            coll_i  = _importObj(__model__, <string> model_data);\r\n            break;\r\n        case _EIODataFormat.GEOJSON:\r\n            coll_i  = _importGeojson(__model__, <string> model_data);\r\n            break;\r\n        default:\r\n            throw new Error('Import type not recognised');\r\n    }\r\n    return idsMake([EEntType.COLL, coll_i]) as TId;\r\n}\r\nfunction _importGI(__model__: GIModel, json_str: string): number {\r\n    // get number of ents before merge\r\n    const num_ents_before: number[] = __model__.modeldata.geom.query.numEntsAll();\r\n    // import\r\n    const gi_model: GIModel = new GIModel(__model__.getMetaData());\r\n    gi_model.setJSONStr(json_str);\r\n    __model__.mergeAndPurge(gi_model);\r\n    // get number of ents after merge\r\n    const num_ents_after: number[] = __model__.modeldata.geom.query.numEntsAll();\r\n    // return the result\r\n    return _createGIColl(__model__, num_ents_before, num_ents_after);\r\n}\r\nfunction _importObj(__model__: GIModel, model_data: string): number {\r\n    // get number of ents before merge\r\n    const num_ents_before: number[] = __model__.modeldata.geom.query.numEntsAll();\r\n    // import\r\n    const obj_model: GIModel = importObj(model_data);\r\n    __model__.merge(obj_model);\r\n    // get number of ents after merge\r\n    const num_ents_after: number[] = __model__.modeldata.geom.query.numEntsAll();\r\n    // return the result\r\n    return _createColl(__model__, num_ents_before, num_ents_after);\r\n}\r\nfunction _importGeojson(__model__: GIModel, model_data: string): number {\r\n    // get number of ents before merge\r\n    const num_ents_before: number[] = __model__.modeldata.geom.query.numEntsAll();\r\n    // import\r\n    importGeojson(__model__, model_data, 0);\r\n    // get number of ents after merge\r\n    const num_ents_after: number[] = __model__.modeldata.geom.query.numEntsAll();\r\n    // return the result\r\n    return _createColl(__model__, num_ents_before, num_ents_after);\r\n}\r\nfunction _createGIColl(__model__: GIModel, before: number[], after: number[]): number {\r\n    const points_i: number[] = [];\r\n    const plines_i: number[] = [];\r\n    const pgons_i: number[] = [];\r\n    for (let point_i = before[1]; point_i < after[1]; point_i++) {\r\n        if (__model__.modeldata.geom.query.entExists(EEntType.POINT, point_i)) {\r\n            points_i.push( point_i );\r\n        }\r\n    }\r\n    for (let pline_i = before[2]; pline_i < after[2]; pline_i++) {\r\n        if (__model__.modeldata.geom.query.entExists(EEntType.PLINE, pline_i)) {\r\n            plines_i.push( pline_i );\r\n        }\r\n    }\r\n    for (let pgon_i = before[3]; pgon_i < after[3]; pgon_i++) {\r\n        if (__model__.modeldata.geom.query.entExists(EEntType.PGON, pgon_i)) {\r\n            pgons_i.push( pgon_i );\r\n        }\r\n    }\r\n    if (points_i.length + plines_i.length + pgons_i.length === 0) { return null; }\r\n    const container_coll_i: number = __model__.modeldata.geom.add.addColl(null, points_i, plines_i, pgons_i);\r\n    for (let coll_i = before[4]; coll_i < after[4]; coll_i++) {\r\n        if (__model__.modeldata.geom.query.entExists(EEntType.COLL, coll_i)) {\r\n            __model__.modeldata.geom.modify_coll.setCollParent(coll_i, container_coll_i);\r\n        }\r\n    }\r\n    return container_coll_i;\r\n}\r\nfunction _createColl(__model__: GIModel, before: number[], after: number[]): number {\r\n    const points_i: number[] = [];\r\n    const plines_i: number[] = [];\r\n    const pgons_i: number[] = [];\r\n    for (let point_i = before[1]; point_i < after[1]; point_i++) {\r\n        points_i.push( point_i );\r\n    }\r\n    for (let pline_i = before[2]; pline_i < after[2]; pline_i++) {\r\n        plines_i.push( pline_i );\r\n    }\r\n    for (let pgon_i = before[3]; pgon_i < after[3]; pgon_i++) {\r\n        pgons_i.push( pgon_i );\r\n    }\r\n    if (points_i.length + plines_i.length + pgons_i.length === 0) { return null; }\r\n    const container_coll_i: number = __model__.modeldata.geom.add.addColl(null, points_i, plines_i, pgons_i);\r\n    for (let coll_i = before[4]; coll_i < after[4]; coll_i++) {\r\n        __model__.modeldata.geom.modify_coll.setCollParent(coll_i, container_coll_i);\r\n    }\r\n    return container_coll_i;\r\n}\r\n// ================================================================================================\r\nexport enum _EIOExportDataFormat {\r\n    GI = 'gi',\r\n    OBJ_VERT = 'obj_v',\r\n    OBJ_POSI = 'obj_ps',\r\n    // DAE = 'dae',\r\n    GEOJSON = 'geojson'\r\n}\r\n/**\r\n * Export data from the model as a file.\r\n * ~\r\n * If you expore to your  hard disk,\r\n * it will result in a popup in your browser, asking you to save the file.\r\n * ~\r\n * If you export to Local Storage, there will be no popup.\r\n * ~\r\n * @param __model__\r\n * @param entities Optional. Entities to be exported. If null, the whole model will be exported.\r\n * @param file_name Name of the file as a string.\r\n * @param data_format Enum, the file format.\r\n * @param data_target Enum, where the data is to be exported to.\r\n * @returns void.\r\n * @example io.Export (#pg, 'my_model.obj', obj)\r\n * @example_info Exports all the polgons in the model as an OBJ.\r\n */\r\nexport async function Export(__model__: GIModel, entities: TId|TId[]|TId[][],\r\n        file_name: string, data_format: _EIOExportDataFormat, data_target: _EIODataTarget) {\r\n    if ( typeof localStorage === 'undefined') { return; }\r\n    // --- Error Check ---\r\n    const fn_name = 'io.Export';\r\n    let ents_arr = null;\r\n    if (__model__.debug) {\r\n        if (entities !== null) {\r\n            entities = arrMakeFlat(entities) as TId[];\r\n            ents_arr = checkIDs(fn_name, 'entities', entities,\r\n                [IdCh.isIdL], [EEntType.PLINE, EEntType.PGON, EEntType.COLL])  as TEntTypeIdx[];\r\n        }\r\n        checkArgs(fn_name, 'file_name', file_name, [ArgCh.isStr, ArgCh.isStrL]);\r\n    } else {\r\n        if (entities !== null) {\r\n            entities = arrMakeFlat(entities) as TId[];\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n            //     [IDcheckObj.isIDList], [EEntType.PLINE, EEntType.PGON, EEntType.COLL])  as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n    }\r\n    // --- Error Check ---\r\n    await _export(__model__, ents_arr, file_name, data_format, data_target);\r\n}\r\nasync function _export(__model__: GIModel, ents_arr: TEntTypeIdx[],\r\n    file_name: string, data_format: _EIOExportDataFormat, data_target: _EIODataTarget): Promise<boolean> {\r\n    switch (data_format) {\r\n        case _EIOExportDataFormat.GI:\r\n            // === get model data ===\r\n            let model_data = '';\r\n            // clone the model\r\n            const model_clone: GIModel = __model__.clone();\r\n            if (ents_arr !== null) {\r\n                // get the ents\r\n                const ent_sets: IEntSets = model_clone.modeldata.geom.query.getDelEntSets(ents_arr);\r\n                // delete the ents\r\n                model_clone.delete(ent_sets, true);\r\n            }\r\n            // === get meta data ===\r\n            model_data = model_clone.getJSONStr();\r\n            // gi_data = gi_data.replace(/\\\\\\\"/g, '\\\\\\\\\\\\\"'); // TODO temporary fix\r\n            model_data = model_data.replace(/\\\\/g, '\\\\\\\\\\\\'); // TODO temporary fix\r\n            // === save the file ===\r\n            if (data_target === _EIODataTarget.DEFAULT) {\r\n                return download(model_data , file_name);\r\n            }\r\n            return saveResource(model_data, file_name);\r\n        case _EIOExportDataFormat.OBJ_VERT:\r\n            const obj_verts_data: string = exportVertBasedObj(__model__, ents_arr);\r\n            // obj_data = obj_data.replace(/#/g, '%23'); // TODO temporary fix\r\n            if (data_target === _EIODataTarget.DEFAULT) {\r\n                return download(obj_verts_data , file_name);\r\n            }\r\n            return saveResource(obj_verts_data, file_name);\r\n        case _EIOExportDataFormat.OBJ_POSI:\r\n            const obj_posis_data: string = exportPosiBasedObj(__model__, ents_arr);\r\n            // obj_data = obj_data.replace(/#/g, '%23'); // TODO temporary fix\r\n            if (data_target === _EIODataTarget.DEFAULT) {\r\n                return download(obj_posis_data , file_name);\r\n            }\r\n            return saveResource(obj_posis_data, file_name);\r\n        // case _EIOExportDataFormat.DAE:\r\n        //     const dae_data: string = exportDae(__model__);\r\n        //     // dae_data = dae_data.replace(/#/g, '%23'); // TODO temporary fix\r\n        //     if (data_target === _EIODataTarget.DEFAULT) {\r\n        //         return download(dae_data, file_name);\r\n        //     }\r\n        //     return saveResource(dae_data, file_name);\r\n        //     break;\r\n        case _EIOExportDataFormat.GEOJSON:\r\n            const geojson_data: string = exportGeojson(__model__, ents_arr, true); // flatten\r\n            if (data_target === _EIODataTarget.DEFAULT) {\r\n                return download(geojson_data , file_name);\r\n            }\r\n            return saveResource(geojson_data, file_name);\r\n        default:\r\n            throw new Error('Data type not recognised');\r\n    }\r\n}\r\n\r\n// ================================================================================================\r\n/**\r\n * Functions for saving and loading resources to file system.\r\n */\r\n\r\nasync function saveResource(file: string, name: string): Promise<boolean> {\r\n    const itemstring = localStorage.getItem('mobius_backup_list');\r\n    if (!itemstring) {\r\n        localStorage.setItem('mobius_backup_list', `[\"${name}\"]`);\r\n        localStorage.setItem('mobius_backup_date_dict', `{ \"${name}\": \"${(new Date()).toLocaleString()}\"}`);\r\n    } else {\r\n        const items: string[] = JSON.parse(itemstring);\r\n        let check = false;\r\n        for (let i = 0; i < items.length; i++) {\r\n            const item = items[i];\r\n            if (item === name) {\r\n                items.splice(i, 1);\r\n                items.unshift(item);\r\n                check = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!check) {\r\n            items.unshift(name);\r\n            // if (items.length > 10) {\r\n            //     const item = items.pop();\r\n            //     localStorage.removeItem(item);\r\n            // }\r\n        }\r\n        localStorage.setItem('mobius_backup_list', JSON.stringify(items));\r\n        const itemDates = JSON.parse(localStorage.getItem('mobius_backup_date_dict'));\r\n        itemDates[itemstring] = (new Date()).toLocaleString();\r\n        localStorage.setItem('mobius_backup_date_dict', JSON.stringify(itemDates));\r\n    }\r\n    // window['_code__'] = name;\r\n    // window['_file__'] = file;\r\n\r\n    function saveToFS(fs) {\r\n        const code = name;\r\n        // console.log(code)\r\n        fs.root.getFile(code, { create: true}, function (fileEntry) {\r\n            fileEntry.createWriter(async function (fileWriter) {\r\n                const bb = new Blob([file + '_|_|_'], {type: 'text/plain;charset=utf-8'});\r\n                await fileWriter.write(bb);\r\n            }, (e) => { console.log(e); });\r\n        }, (e) => { console.log(e.code); });\r\n    }\r\n\r\n    navigator.webkitPersistentStorage.requestQuota (\r\n        requestedBytes, function(grantedBytes) {\r\n            // @ts-ignore\r\n            window.webkitRequestFileSystem(PERSISTENT, grantedBytes, saveToFS,\r\n            function(e) { throw e; });\r\n        }, function(e) { throw e; }\r\n    );\r\n    return true;\r\n    // localStorage.setItem(code, file);\r\n}\r\n\r\nasync function getURLContent(url: string): Promise<any> {\r\n    url = url.replace('http://', 'https://');\r\n    if (url.indexOf('dropbox') !== -1) {\r\n        url = url.replace('www', 'dl').replace('dl=0', 'dl=1');\r\n    }\r\n    if (url[0] === '\"' || url[0] === '\\'') {\r\n        url = url.substring(1);\r\n    }\r\n    if (url[url.length - 1] === '\"' || url[url.length - 1] === '\\'') {\r\n        url = url.substring(0, url.length - 1);\r\n    }\r\n    const p = new Promise((resolve) => {\r\n        fetch(url).then(res => {\r\n            if (!res.ok) {\r\n                resolve('HTTP Request Error: Unable to retrieve file from ' + url);\r\n                return '';\r\n            }\r\n            if (url.indexOf('.zip') !== -1) {\r\n                res.blob().then(body => resolve(body));\r\n            } else {\r\n                res.text().then(body => resolve(body.replace(/(\\\\[bfnrtv\\'\\\"\\\\])/g, '\\\\$1')));\r\n            }\r\n        });\r\n\r\n    });\r\n    return await p;\r\n}\r\nasync function openZipFile(zipFile) {\r\n    let result = '{';\r\n    await JSZip.loadAsync(zipFile).then(async function (zip) {\r\n        for (const filename of Object.keys(zip.files)) {\r\n            // const splittedNames = filename.split('/').slice(1).join('/');\r\n            await zip.files[filename].async('text').then(function (fileData) {\r\n                result += `\"${filename}\": \\`${fileData.replace(/\\\\/g, '\\\\\\\\')}\\`,`;\r\n            });\r\n        }\r\n    });\r\n    result += '}';\r\n    return result;\r\n}\r\nasync function loadFromFileSystem(filecode): Promise<any> {\r\n    const p = new Promise((resolve) => {\r\n        navigator.webkitPersistentStorage.requestQuota (\r\n            requestedBytes, function(grantedBytes) {\r\n                // @ts-ignore\r\n                window.webkitRequestFileSystem(PERSISTENT, grantedBytes, function(fs) {\r\n                    fs.root.getFile(filecode, {}, function(fileEntry) {\r\n                        fileEntry.file((file) => {\r\n                            const reader = new FileReader();\r\n                            reader.onerror = () => {\r\n                                resolve('error');\r\n                            };\r\n                            reader.onloadend = () => {\r\n                                if ((typeof reader.result) === 'string') {\r\n                                    resolve((<string>reader.result).split('_|_|_')[0]);\r\n                                    // const splitted = (<string>reader.result).split('_|_|_');\r\n                                    // let val = splitted[0];\r\n                                    // for (const i of splitted) {\r\n                                    //     if (val.length < i.length) {\r\n                                    //         val = i;\r\n                                    //     }\r\n                                    // }\r\n                                    // resolve(val);\r\n                                } else {\r\n                                    resolve(reader.result);\r\n                                }\r\n                            };\r\n                            reader.readAsText(file, 'text/plain;charset=utf-8');\r\n                        });\r\n                    });\r\n                });\r\n            }, function(e) { console.log('Error', e); }\r\n        );\r\n    });\r\n    return await p;\r\n}\r\nexport async function _getFile(source: string) {\r\n    if (source.indexOf('__model_data__') !== -1) {\r\n        return source.split('__model_data__').join('');\r\n    } else if (source[0] === '{') {\r\n        return source;\r\n    } else if (source.indexOf('://') !== -1) {\r\n        const val = source.replace(/ /g, '');\r\n        const result = await getURLContent(val);\r\n        if (result === undefined) {\r\n            return source;\r\n        } else if (result.indexOf && result.indexOf('HTTP Request Error') !== -1) {\r\n            throw new Error(result);\r\n        } else if (val.indexOf('.zip') !== -1) {\r\n            return await openZipFile(result);\r\n        } else {\r\n            return result;\r\n        }\r\n    } else {\r\n        if (source.length > 1 && source[0] === '{') {\r\n            return null;\r\n        }\r\n        const val = source.replace(/\\\"|\\'/g, '');\r\n        const backup_list: string[] = JSON.parse(localStorage.getItem('mobius_backup_list'));\r\n        if (val.indexOf('*') !== -1) {\r\n            const splittedVal = val.split('*');\r\n            const start = splittedVal[0] === '' ? null : splittedVal[0];\r\n            const end = splittedVal[1] === '' ? null : splittedVal[1];\r\n            let result = '{';\r\n            for (const backup_name of backup_list) {\r\n                let valid_check = true;\r\n                if (start && !backup_name.startsWith(start)) {\r\n                    valid_check = false;\r\n                }\r\n                if (end && !backup_name.endsWith(end)) {\r\n                    valid_check = false;\r\n                }\r\n                if (valid_check) {\r\n                    const backup_file = await loadFromFileSystem(backup_name);\r\n                    result += `\"${backup_name}\": \\`${backup_file.replace(/\\\\/g, '\\\\\\\\')}\\`,`;\r\n                }\r\n            }\r\n            result += '}';\r\n            return result;\r\n        } else {\r\n            if (backup_list.indexOf(val) !== -1) {\r\n                const result = await loadFromFileSystem(val);\r\n                if (!result || result === 'error') {\r\n                    throw(new Error(`File named ${val} does not exist in the local storage`));\r\n                    // return source;\r\n                } else {\r\n                    return result;\r\n                }\r\n            } else {\r\n                throw(new Error(`File named ${val} does not exist in the local storage`));\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n * The `list` module has functions for working with lists of items.\r\n * These functions have no direct link with the model, the are generic functions for manipulating lists.\r\n * The functions are often used when manipulating lists of IDs of entities in the model.\r\n * These functions neither make nor modify anything in the model.\r\n * In addition to these functions, there are also various inline functions available for working with lists.\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { idsBreak } from '@libs/geo-info/id';\r\nimport { TEntTypeIdx } from '@libs/geo-info/common';\r\nimport { getArrDepth2 } from '@assets/libs/util/arrs';\r\n\r\n\r\n// ================================================================================================\r\nexport enum _EAddMethod {\r\n    TO_START = 'to_start',\r\n    TO_END = 'to_end',\r\n    EXTEND_START = 'extend_start',\r\n    EXTEND_END = 'extend_end',\r\n    SORTED_ALPHA = 'alpha_descending',\r\n    SORTED_REV_ALPHA = 'alpha_ascending',\r\n    SORTED_NUM = 'numeric_descending',\r\n    SORTED_REV_NUM = 'numeric_ascending',\r\n    SORTED_ID = 'ID_descending',\r\n    SORTED_REV_ID = 'ID_ascending'\r\n}\r\n/**\r\n * Adds an item to a list.\r\n *\r\n * @param list List to add the item to.\r\n * @param item Item to add.\r\n * @param method Enum, select the method.\r\n * @returns void\r\n * @example append = list.Add([1,2,3], 4, 'at_end')\r\n * @example_info Expected value of list is [1,2,3,4].\r\n * @example append = list.Add([1,2,3], [4, 5], 'at_end')\r\n * @example_info Expected value of list is [1,2,3,[4,5]].\r\n * @example append = list.Add([1,2,3], [4,5], 'extend_end')\r\n * @example_info Expected value of list is [1,2,3,4,5].\r\n * @example append = list.Add([\"a\", \"c\", \"d\"], \"b\", 'alpha_descending')\r\n * @example_info Expected value of list is [\"a\", \"b\", \"c\", \"d\"].\r\n */\r\nexport function Add(list: any[], item: any|any[], method: _EAddMethod): void {\r\n    // --- Error Check ---\r\n    const fn_name = 'list.Add';\r\n    checkArgs(fn_name, 'list', list, [ArgCh.isList]);\r\n    checkArgs(fn_name, 'value', item, [ArgCh.isAny]);\r\n    // --- Error Check ---\r\n    let str_value: string;\r\n    switch (method) {\r\n        case _EAddMethod.TO_START:\r\n            list.unshift(item);\r\n            break;\r\n        case _EAddMethod.TO_END:\r\n            list.push(item);\r\n            break;\r\n        case _EAddMethod.EXTEND_START:\r\n            if (!Array.isArray(item)) { item = [item]; }\r\n            for (let i = item.length - 1; i >= 0; i--) {\r\n                list.unshift(item[i]);\r\n            }\r\n            break;\r\n        case _EAddMethod.EXTEND_END:\r\n            if (!Array.isArray(item)) { item = [item]; }\r\n            for (let i = 0; i < item.length; i++) {\r\n                list.push(item[i]);\r\n            }\r\n            break;\r\n        case _EAddMethod.SORTED_ALPHA:\r\n            str_value = item + '';\r\n            for (let i = 0; i < list.length + 1; i++) {\r\n                if (str_value < list[i] + '' || i === list.length) {\r\n                    list.splice(i, 0, item);\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        case _EAddMethod.SORTED_REV_ALPHA:\r\n            str_value = item + '';\r\n            for (let i = 0; i < list.length + 1; i++) {\r\n                if (str_value > list[i] + '' || i === list.length) {\r\n                    list.splice(i, 0, item);\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        case _EAddMethod.SORTED_NUM:\r\n            for (let i = 0; i < list.length + 1; i++) {\r\n                if (item - list[i] > 0 || i === list.length) {\r\n                    list.splice(i, 0, item);\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        case _EAddMethod.SORTED_REV_NUM:\r\n            for (let i = 0; i < list.length + 1; i++) {\r\n                if (item - list[i] < 0 || i === list.length) {\r\n                    list.splice(i, 0, item);\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        case _EAddMethod.SORTED_ID:\r\n            for (let i = 0; i < list.length + 1; i++) {\r\n                if (_compareID(item, list[i]) > 0 || i === list.length) {\r\n                    list.splice(i, 0, item);\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        case _EAddMethod.SORTED_REV_ID:\r\n            for (let i = 0; i < list.length + 1; i++) {\r\n                if (_compareID(item, list[i]) < 0 || i === list.length) {\r\n                    list.splice(i, 0, item);\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n// ================================================================================================\r\nexport enum _ERemoveMethod {\r\n    REMOVE_INDEX = 'index',\r\n    REMOVE_FIRST_VALUE = 'first_value',\r\n    REMOVE_LAST_VALUE = 'last_value',\r\n    REMOVE_ALL_VALUES = 'all_values'\r\n}\r\n/**\r\n * Removes items in a list.\r\n * ~\r\n * If @param method is set to 'index', then @param item should be the index of the item to be replaced.\r\n * Negative indexes are allowed.\r\n * If @param method is not set to 'index', then @param item should be the value.\r\n *\r\n * @param list The list in which to remove items\r\n * @param item The item to remove, either the index of the item or the value. Negative indexes are allowed.\r\n * @param method Enum, select the method for removing items from the list.\r\n * @returns void\r\n */\r\nexport function Remove(list: any[], item: any, method: _ERemoveMethod): void {\r\n    // --- Error Check ---\r\n    const fn_name = 'list.Remove';\r\n    checkArgs(fn_name, 'list', list, [ArgCh.isList]);\r\n    checkArgs(fn_name, 'item', item, [ArgCh.isAny]);\r\n    // --- Error Check ---\r\n    let index: number;\r\n    switch (method) {\r\n        case _ERemoveMethod.REMOVE_INDEX:\r\n            index = item;\r\n            if (! isNaN(index) ) {\r\n                if (index < 0) { index = list.length + index; }\r\n                list.splice(index, 1);\r\n            }\r\n            break;\r\n        case _ERemoveMethod.REMOVE_FIRST_VALUE:\r\n            index = list.indexOf(item);\r\n            if (index !== -1) { list.splice(index, 1); }\r\n            break;\r\n        case _ERemoveMethod.REMOVE_LAST_VALUE:\r\n            index = list.lastIndexOf(item);\r\n            if (index !== -1) { list.splice(index, 1); }\r\n            break;\r\n        case _ERemoveMethod.REMOVE_ALL_VALUES:\r\n            for (index = 0; index < list.length; index++) {\r\n                if (list[index] === item) {\r\n                    list.splice(index, 1);\r\n                    index -= 1;\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            throw new Error('list.Remove: Remove method not recognised.');\r\n    }\r\n}\r\n// ================================================================================================\r\nexport enum _EReplaceMethod {\r\n    REPLACE_INDEX = 'index',\r\n    REPLACE_FIRST_VALUE = 'first_value',\r\n    REPLACE_LAST_VALUE = 'last_value',\r\n    REPLACE_ALL_VALUES = 'all_values'\r\n}\r\n/**\r\n * Replaces items in a list.\r\n * ~\r\n * If @param method is set to 'index', then @param old_item should be the index of the item to be replaced. Negative indexes are allowed.\r\n * If @param method is not set to 'index', then @param old_item should be the value.\r\n *\r\n * @param list The list in which to replace items\r\n * @param old_item The old item to replace.\r\n * @param new_item The new item.\r\n * @param method Enum, select the method for replacing items in the list.\r\n * @returns void\r\n */\r\nexport function Replace(list: any[], old_item: any, new_item: any, method: _EReplaceMethod): void {\r\n    // --- Error Check ---\r\n    const fn_name = 'list.Replace';\r\n    checkArgs(fn_name, 'list', list, [ArgCh.isList]);\r\n    checkArgs(fn_name, 'item', old_item, [ArgCh.isAny]);\r\n    checkArgs(fn_name, 'new_value', new_item, [ArgCh.isAny]);\r\n    // --- Error Check ---\r\n    let index: number;\r\n    switch (method) {\r\n        case _EReplaceMethod.REPLACE_INDEX:\r\n            index = old_item;\r\n            if (! isNaN(index) ) {\r\n                if (index < 0) { index = list.length + index; }\r\n                list[index] = new_item;\r\n            }\r\n            break;\r\n        case _EReplaceMethod.REPLACE_FIRST_VALUE:\r\n            index = list.indexOf(old_item);\r\n            if (index !== -1) { list[index] = new_item; }\r\n            break;\r\n        case _EReplaceMethod.REPLACE_LAST_VALUE:\r\n            index = list.lastIndexOf(old_item);\r\n            if (index !== -1) { list[index] = new_item; }\r\n            break;\r\n        case _EReplaceMethod.REPLACE_ALL_VALUES:\r\n            for (index = 0; index < list.length; index++) {\r\n                if (list[index] === old_item) {\r\n                    list[index] = new_item;\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            throw new Error('list.Replace: Replace method not recognised.');\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Sorts an list, based on the values of the items in the list.\r\n * ~\r\n * For alphabetical sort, values are sorted character by character,\r\n * numbers before upper case alphabets, upper case alphabets before lower case alphabets.\r\n *\r\n * @param list List to sort.\r\n * @param method Enum; specifies the sort method to use.\r\n * @returns void\r\n * @example list.Sort(list, 'alpha')\r\n * @example_info where list = [\"1\",\"2\",\"10\",\"Orange\",\"apple\"]\r\n * Expected value of list is [\"1\",\"10\",\"2\",\"Orange\",\"apple\"].\r\n * @example list.Sort(list, 'numeric')\r\n * @example_info where list = [56,6,48]\r\n * Expected value of list is [6,48,56].\r\n */\r\nexport function Sort(list: any[], method: _ESortMethod): void {\r\n    // --- Error Check ---\r\n    checkArgs('list.Sort', 'list', list, [ArgCh.isList]);\r\n    // --- Error Check ---\r\n    _sort(list, method);\r\n}\r\nexport enum _ESortMethod {\r\n    REV = 'reverse',\r\n    ALPHA = 'alpha_descending',\r\n    REV_ALPHA = 'alpha_ascending',\r\n    NUM = 'numeric_descending',\r\n    REV_NUM = 'numeric_ascending',\r\n    ID = 'ID_descending',\r\n    REV_ID = 'ID_ascending',\r\n    SHIFT = 'shift_1',\r\n    REV_SHIFT = 'reverse_shift_1',\r\n    RANDOM = 'random'\r\n}\r\nfunction _compareID(id1: string, id2: string): number {\r\n    const [ent_type1, index1]: TEntTypeIdx = idsBreak(id1) as TEntTypeIdx;\r\n    const [ent_type2, index2]: TEntTypeIdx = idsBreak(id2) as TEntTypeIdx;\r\n    if (ent_type1 !== ent_type2) { return ent_type1 -  ent_type2; }\r\n    if (index1 !== index2) { return index1 -  index2; }\r\n    return 0;\r\n}\r\nfunction _compareNumList(l1: any[], l2: any[], depth: number): number {\r\n    if (depth === 1) { return l1[0] - l2[0] as number; }\r\n    if (depth === 2) { return l1[0][0] - l2[0][0] as number; }\r\n    let val1 = l1;\r\n    let val2 = l2;\r\n    for (let i = 0; i < depth; i++) {\r\n        val1 = val1[0];\r\n        val2 = val2[0];\r\n    }\r\n    return (val1 as unknown as number) - (val2 as unknown as number);\r\n}\r\nfunction _sort(list: any[], method: _ESortMethod): void {\r\n    switch (method) {\r\n        case _ESortMethod.REV:\r\n            list.reverse();\r\n            break;\r\n        case _ESortMethod.ALPHA:\r\n            list.sort().reverse();\r\n            break;\r\n        case _ESortMethod.REV_ALPHA:\r\n            list.sort();\r\n            break;\r\n        case _ESortMethod.NUM:\r\n            if (Array.isArray(list[0])) {\r\n                const depth: number = getArrDepth2(list[0]);\r\n                list.sort((a, b) => _compareNumList(a, b, depth)).reverse();\r\n            } else {\r\n                list.sort((a, b) => b - a);\r\n            }\r\n            break;\r\n        case _ESortMethod.REV_NUM:\r\n            if (Array.isArray(list[0])) {\r\n                const depth: number = getArrDepth2(list[0]);\r\n                list.sort((a, b) => _compareNumList(a, b, depth));\r\n            } else {\r\n                list.sort((a, b) => a - b);\r\n            }\r\n            break;\r\n        case _ESortMethod.ID:\r\n            list.sort(_compareID).reverse();\r\n            break;\r\n        case _ESortMethod.REV_ID:\r\n            list.sort(_compareID);\r\n            break;\r\n        case _ESortMethod.SHIFT:\r\n            const last: any = list.pop();\r\n            list.unshift(last);\r\n            break;\r\n        case _ESortMethod.REV_SHIFT:\r\n            const first: any = list.shift();\r\n            list.push(first);\r\n            break;\r\n        case _ESortMethod.RANDOM:\r\n            list.sort(() => .5 - Math.random());\r\n            break;\r\n        default:\r\n            throw new Error('list.Sort: Sort method not recognised.');\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Removes and inserts items in a list.\r\n * ~\r\n * If no items_to_add are specified, then items are only removed.\r\n * If num_to_remove is 0, then values are only inserted.\r\n *\r\n * @param list List to splice.\r\n * @param index Zero-based index after which to starting removing or inserting items.\r\n * @param num_to_remove Number of items to remove.\r\n * @param items_to_insert Optional, list of items to add, or null.\r\n * @returns void\r\n * @example result = list.Splice(list1, 1, 3, [2.2, 3.3])\r\n * @example_info where list1 = [10, 20, 30, 40, 50]\r\n * Expected value of result is [10, 2.2, 3.3, 50]. New items were added where the items were removed.\r\n */\r\nexport function Splice(list: any[], index: number, num_to_remove: number, items_to_insert: any[]): void {\r\n    // --- Error Check ---\r\n    const fn_name = 'list.Splice';\r\n    checkArgs(fn_name, 'list', list, [ArgCh.isList]);\r\n    checkArgs(fn_name, 'index', index, [ArgCh.isInt]);\r\n    checkArgs(fn_name, 'num_to_remove', num_to_remove, [ArgCh.isInt]);\r\n    checkArgs(fn_name, 'values_to_add', items_to_insert, [ArgCh.isList]);\r\n    // --- Error Check ---\r\n\r\n    // avoid the spread operator\r\n    list.splice(index, num_to_remove);\r\n    if (items_to_insert !== null && items_to_insert.length) {\r\n        for (let i = 0; i < items_to_insert.length; i++) {\r\n            list.splice(index + i, 0, items_to_insert[i]);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","/**\r\n * The `make` module has functions for making new entities in the model.\r\n * All these functions return the IDs of the entities that are created.\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { EAttribNames, TId, EEntType, Txyz, TEntTypeIdx, TPlane } from '@libs/geo-info/common';\r\nimport { isDim0, isDim2, isColl,\r\n    isEdge, isFace, idsMake, idIndicies, getArrDepth, isEmptyArr, isWire, idsBreak } from '@libs/geo-info/id';\r\nimport { __merge__} from '../_model';\r\nimport { _model } from '..';\r\nimport { vecDiv, vecMult, interpByNum, interpByLen, vecAdd, vecFromTo, vecCross } from '@libs/geom/vectors';\r\nimport { distance } from '@libs/geom/distance';\r\nimport { arrMakeFlat } from '@libs/util/arrs';\r\nimport { getPlanesSeq, _copyGeom, _copyGeomPosis } from './_common';\r\nimport { xfromSourceTargetMatrix, multMatrix } from '@assets/libs/geom/matrix';\r\nimport { Matrix4 } from 'three';\r\nimport { listZip } from '@assets/core/inline/_list';\r\nimport * as THREE from 'three';\r\n\r\n// Divide edge modelling operation\r\nexport enum _EDivisorMethod {\r\n    BY_NUMBER =  'by_number',\r\n    BY_LENGTH  =  'by_length',\r\n    BY_MAX_LENGTH  =  'by_max_length',\r\n    BY_MIN_LENGTH  =  'by_min_length'\r\n}\r\nexport enum _EExtrudeMethod {\r\n    QUADS =  'quads',\r\n    STRINGERS = 'stringers',\r\n    RIBS = 'ribs',\r\n    COPIES = 'copies'\r\n}\r\n// ================================================================================================\r\n/**\r\n * Adds one or more new position to the model.\r\n *\r\n * @param __model__\r\n * @param coords A list of three numbers, or a list of lists of three numbers.\r\n * @returns A new position, or nested list of new positions.\r\n * @example position1 = make.Position([1,2,3])\r\n * @example_info Creates a position with coordinates x=1, y=2, z=3.\r\n * @example positions = make.Position([[1,2,3],[3,4,5],[5,6,7]])\r\n * @example_info Creates three positions, with coordinates [1,2,3],[3,4,5] and [5,6,7].\r\n * @example_link make.Position.mob&node=1\r\n */\r\nexport function Position(__model__: GIModel, coords: Txyz|Txyz[]|Txyz[][]): TId|TId[]|TId[][] {\r\n    if (isEmptyArr(coords)) { return []; }\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        checkArgs('make.Position', 'coords', coords, [ArgCh.isXYZ, ArgCh.isXYZL, ArgCh.isXYZLL]);\r\n    }\r\n    // --- Error Check ---\r\n    const new_ents_arr: TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][] = _position(__model__, coords);\r\n    return idsMake(new_ents_arr);\r\n}\r\nfunction _position(__model__: GIModel, coords: Txyz|Txyz[]|Txyz[][]): TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][] {\r\n    const depth: number = getArrDepth(coords);\r\n    if (depth === 1) {\r\n        const coord1: Txyz = coords as Txyz;\r\n        const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setEntAttribVal(EEntType.POSI, posi_i, EAttribNames.COORDS, coord1);\r\n        return [EEntType.POSI, posi_i] as TEntTypeIdx;\r\n    } else if (depth === 2) {\r\n        const coords2: Txyz[] = coords as Txyz[];\r\n        return coords2.map(coord => _position(__model__, coord)) as TEntTypeIdx[];\r\n    } else {\r\n        const coords3: Txyz[][] = coords as Txyz[][];\r\n        return coords3.map(coord2 => _position(__model__, coord2)) as TEntTypeIdx[][];\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Adds one or more new points to the model.\r\n *\r\n * @param __model__\r\n * @param entities Position, or list of positions, or entities from which positions can be extracted.\r\n * @returns Entities, new point or a list of new points.\r\n * @example point1 = make.Point(position1)\r\n * @example_info Creates a point at position1.\r\n * @example_link make.Point.mob&node=1\r\n */\r\nexport function Point(__model__: GIModel, entities: TId|TId[]|TId[][]): TId|TId[]|TId[][] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    let ents_arr;\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs('make.Point', 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL, IdCh.isIdLL],\r\n        [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n        EEntType.FACE, EEntType.POINT, EEntType.PLINE, EEntType.PGON])  as TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][];\r\n    } else {\r\n        // ents_arr = splitIDs('make.Point', 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList, IDcheckObj.isIDList_list],\r\n        // [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n        // EEntType.FACE, EEntType.POINT, EEntType.PLINE, EEntType.PGON])  as TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][];\r\n    }\r\n    // --- Error Check ---\r\n    const new_ents_arr: TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][] =  _point(__model__, ents_arr);\r\n    return idsMake(new_ents_arr) as TId|TId[]|TId[][];\r\n}\r\nfunction _point(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][]): TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][] {\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 1) {\r\n        const [ent_type, index]: TEntTypeIdx = ents_arr as TEntTypeIdx; // either a posi or something else\r\n        if (ent_type === EEntType.POSI) {\r\n            const point_i: number = __model__.modeldata.geom.add.addPoint(index);\r\n            return [EEntType.POINT, point_i] as TEntTypeIdx;\r\n        } else {\r\n            const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n            return posis_i.map(posi_i => _point(__model__, [EEntType.POSI, posi_i])) as TEntTypeIdx[];\r\n        }\r\n    } else if (depth === 2) {\r\n        ents_arr = ents_arr as TEntTypeIdx[];\r\n        return ents_arr.map(ents_arr_item => _point(__model__, ents_arr_item)) as TEntTypeIdx[];\r\n    } else { // depth > 2\r\n        ents_arr = ents_arr as TEntTypeIdx[][];\r\n        return ents_arr.map(ents_arr_item => _point(__model__, ents_arr_item)) as TEntTypeIdx[][];\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Adds one or more new polylines to the model.\r\n *\r\n * @param __model__\r\n * @param entities List or nested lists of positions, or entities from which positions can be extracted.\r\n * @param close Enum, 'open' or 'close'.\r\n * @returns Entities, new polyline, or a list of new polylines.\r\n * @example polyline1 = make.Polyline([position1,position2,position3], close)\r\n * @example_info Creates a closed polyline with vertices position1, position2, position3 in sequence.\r\n * @example_link make.Polyline.mob&node=1\r\n */\r\nexport function Polyline(__model__: GIModel, entities: TId|TId[]|TId[][], close: _EClose): TId|TId[] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    let ents_arr;\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs('make.Polyline', 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL, IdCh.isIdLL],\r\n        [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n        EEntType.FACE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][];\r\n    } else {\r\n        // ents_arr = splitIDs('make.Polyline', 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList, IDcheckObj.isIDListOfLists],\r\n        // [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n        // EEntType.FACE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][];\r\n    }\r\n    // --- Error Check ---\r\n    const posis_arrs: TEntTypeIdx[][] = _getPlinePosisFromEnts(__model__, ents_arr);\r\n    const new_ents_arr: TEntTypeIdx[] = _polyline(__model__, posis_arrs, close) as  TEntTypeIdx[];\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 1 || (depth === 2 && ents_arr[0][0] === EEntType.POSI)) {\r\n        const first_ent: TEntTypeIdx = new_ents_arr[0] as TEntTypeIdx;\r\n        return idsMake(first_ent) as TId;\r\n    } else {\r\n        return idsMake(new_ents_arr) as TId|TId[];\r\n    }\r\n}\r\n// Enums for Polyline()\r\nexport enum _EClose {\r\n    OPEN = 'open',\r\n    CLOSE = 'close'\r\n}\r\nfunction _polyline(__model__: GIModel, ents_arr: TEntTypeIdx[]|TEntTypeIdx[][], close: _EClose): TEntTypeIdx|TEntTypeIdx[] {\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 2) {\r\n        if (ents_arr.length < 2) {\r\n            throw new Error('Error in make.Polyline: Polylines must have at least two positions.');\r\n        }\r\n        const bool_close: boolean = (close === _EClose.CLOSE);\r\n        const posis_i: number[] = idIndicies(ents_arr as TEntTypeIdx[]);\r\n        const pline_i: number = __model__.modeldata.geom.add.addPline(posis_i, bool_close);\r\n        return [EEntType.PLINE, pline_i] as TEntTypeIdx;\r\n    } else {\r\n        ents_arr = ents_arr as TEntTypeIdx[][];\r\n        return ents_arr.map(ents_arr_item => _polyline(__model__, ents_arr_item, close)) as TEntTypeIdx[];\r\n    }\r\n}\r\nfunction _getPlinePosisFromEnts(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][]): TEntTypeIdx[][] {\r\n    // check if this is a single object ID\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        ents_arr =  [ents_arr] as TEntTypeIdx[];\r\n    }\r\n    // check if this is a list of posis, verts, or points\r\n    if (getArrDepth(ents_arr) === 2 && isDim0(ents_arr[0][0])) {\r\n        const ents_arr2: TEntTypeIdx[] = [];\r\n        for (const ent_arr of ents_arr) {\r\n            const [ent_type, index]: TEntTypeIdx = ent_arr as TEntTypeIdx;\r\n            if (ent_type === EEntType.POSI) {\r\n                ents_arr2.push(ent_arr as TEntTypeIdx);\r\n            } else {\r\n                const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n                for (const posi_i of posis_i) {\r\n                    ents_arr2.push([EEntType.POSI, posi_i]);\r\n                }\r\n            }\r\n        }\r\n        ents_arr = [ents_arr2] as TEntTypeIdx[][];\r\n    }\r\n    // now process the ents\r\n    const posis_arrs: TEntTypeIdx[][] = [];\r\n    for (const ent_arr of ents_arr) {\r\n        if (getArrDepth(ent_arr) === 2) { // this must be a list of posis\r\n            posis_arrs.push(ent_arr as TEntTypeIdx[]);\r\n            continue;\r\n        }\r\n        const [ent_type, index]: TEntTypeIdx = ent_arr as TEntTypeIdx;\r\n        switch (ent_type) {\r\n            case EEntType.EDGE:\r\n            case EEntType.WIRE:\r\n            case EEntType.PLINE:\r\n                const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n                const posis_arr: TEntTypeIdx[] = posis_i.map( posi_i => [EEntType.POSI, posi_i]) as TEntTypeIdx[];\r\n                posis_arrs.push( posis_arr );\r\n                break;\r\n            case EEntType.FACE:\r\n            case EEntType.PGON:\r\n                const wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(ent_type, index);\r\n                for (let j = 0; j < wires_i.length; j++) {\r\n                    const wire_i: number = wires_i[j];\r\n                    const wire_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, wire_i);\r\n                    const wire_posis_arr: TEntTypeIdx[] = wire_posis_i.map( posi_i => [EEntType.POSI, posi_i]) as TEntTypeIdx[];\r\n                    posis_arrs.push( wire_posis_arr );\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return posis_arrs;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Adds one or more new polygons to the model.\r\n *\r\n * @param __model__\r\n * @param entities List or nested lists of positions, or entities from which positions can be extracted.\r\n * @returns Entities, new polygon, or a list of new polygons.\r\n * @example polygon1 = make.Polygon([pos1,pos2,pos3])\r\n * @example_info Creates a polygon with vertices pos1, pos2, pos3 in sequence.\r\n * @example polygons = make.Polygon([[pos1,pos2,pos3], [pos3,pos4,pos5]])\r\n * @example_info Creates two polygons, the first with vertices at [pos1,pos2,pos3], and the second with vertices at [pos3,pos4,pos5].\r\n * @example_link make.Polygon.mob&node=1\r\n */\r\nexport function Polygon(__model__: GIModel, entities: TId|TId[]|TId[][]): TId|TId[] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    let ents_arr;\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs('make.Polygon', 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL, IdCh.isIdLL],\r\n        [EEntType.POSI, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n    } else {\r\n        // ents_arr = splitIDs('make.Polygon', 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList, IDcheckObj.isIDListOfLists],\r\n        // [EEntType.POSI, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n    }\r\n    // --- Error Check ---\r\n    const posis_arrs: TEntTypeIdx[][] = _getPgonPosisFromEnts(__model__, ents_arr);\r\n    const new_ents_arr: TEntTypeIdx[] = _polygon(__model__, posis_arrs) as TEntTypeIdx[];\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 1 || (depth === 2 && ents_arr[0][0] === EEntType.POSI)) {\r\n        const first_ent: TEntTypeIdx = new_ents_arr[0] as TEntTypeIdx;\r\n        return idsMake(first_ent) as TId;\r\n    } else {\r\n        return idsMake(new_ents_arr) as TId|TId[];\r\n    }\r\n}\r\nfunction _polygon(__model__: GIModel, ents_arr: TEntTypeIdx[]|TEntTypeIdx[][]): TEntTypeIdx|TEntTypeIdx[] {\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 2) {\r\n        if (ents_arr.length < 3) {\r\n            throw new Error('Error in make.Polygon: Polygons must have at least three positions.');\r\n        }\r\n        const posis_i: number[] = idIndicies(ents_arr as TEntTypeIdx[]);\r\n        const pgon_i: number = __model__.modeldata.geom.add.addPgon(posis_i);\r\n        return [EEntType.PGON, pgon_i] as TEntTypeIdx;\r\n    } else {\r\n        ents_arr = ents_arr as TEntTypeIdx[][];\r\n        return ents_arr.map(ents_arr_item => _polygon(__model__, ents_arr_item)) as TEntTypeIdx[];\r\n    }\r\n}\r\nfunction _getPgonPosisFromEnts(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][]): TEntTypeIdx[][] {\r\n    // check if this is a single object ID\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        ents_arr = [ents_arr] as TEntTypeIdx[];\r\n    }\r\n    // check if this is a list of posis\r\n    if (getArrDepth(ents_arr) === 2 && ents_arr[0][0] === EEntType.POSI) {\r\n        // ents_arr =  [ents_arr] as TEntTypeIdx[][];\r\n        const ents_arr2: TEntTypeIdx[] = [];\r\n        for (const ent_arr of ents_arr) {\r\n            const [ent_type, index]: TEntTypeIdx = ent_arr as TEntTypeIdx;\r\n            if (ent_type === EEntType.POSI) {\r\n                ents_arr2.push(ent_arr as TEntTypeIdx);\r\n            } else {\r\n                const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n                for (const posi_i of posis_i) {\r\n                    ents_arr2.push([EEntType.POSI, posi_i]);\r\n                }\r\n            }\r\n        }\r\n        ents_arr = [ents_arr2] as TEntTypeIdx[][];\r\n    }\r\n    // now process the ents\r\n    const posis_arrs: TEntTypeIdx[][] = [];\r\n    for (const ent_arr of ents_arr) {\r\n        if (getArrDepth(ent_arr) === 2) { // this must be a list of posis\r\n            posis_arrs.push(ent_arr as TEntTypeIdx[]);\r\n            continue;\r\n        }\r\n        const [ent_type, index]: TEntTypeIdx = ent_arr as TEntTypeIdx;\r\n        switch (ent_type) {\r\n            case EEntType.WIRE:\r\n            case EEntType.PLINE:\r\n                const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n                const posis_arr: TEntTypeIdx[] = posis_i.map( posi_i => [EEntType.POSI, posi_i]) as TEntTypeIdx[];\r\n                posis_arrs.push(posis_arr);\r\n                break;\r\n            case EEntType.FACE:\r\n            case EEntType.PGON:\r\n                const wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(ent_type, index);\r\n                for (let j = 0; j < wires_i.length; j++) {\r\n                    const wire_i: number = wires_i[j];\r\n                    const wire_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, wire_i);\r\n                    const wire_posis_arr: TEntTypeIdx[] = wire_posis_i.map( posi_i => [EEntType.POSI, posi_i]) as TEntTypeIdx[];\r\n                    posis_arrs.push(wire_posis_arr);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return posis_arrs;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Adds a set of triangular polygons, forming a Triangulated Irregular Network (TIN).\r\n *\r\n * @param __model__\r\n * @param entities List or nested lists of positions, or entities from which positions can be extracted.\r\n * @returns Entities, a list of new polygons.\r\n */\r\nexport function _Tin(__model__: GIModel, entities: TId[]|TId[][]): TId[] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    let ents_arr;\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs('make.Tin', 'entities', entities,\r\n        [IdCh.isIdL, IdCh.isIdLL],\r\n        [EEntType.POSI, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n    } else {\r\n        // ents_arr = splitIDs('make.Tin', 'entities', entities,\r\n        // [IDcheckObj.isIDList, IDcheckObj.isIDListOfLists],\r\n        // [EEntType.POSI, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n    }\r\n    // --- Error Check ---\r\n    const posis_arrs: TEntTypeIdx[][] = _getPgonPosisFromEnts(__model__, ents_arr);\r\n    return null;\r\n}\r\nfunction _tin(__model__: GIModel, ents_arr: TEntTypeIdx[]|TEntTypeIdx[][]): TEntTypeIdx|TEntTypeIdx[] {\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 2) {\r\n        const posis_i: number[] = idIndicies(ents_arr as TEntTypeIdx[]);\r\n        const vtxs_tf: Txyz[] = [];\r\n        for (const posi_i of posis_i) {\r\n            const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n            vtxs_tf.push(xyz);\r\n        }\r\n        // const tin = turf.triangulate(vtxs_tf);\r\n        // console.log(tin);\r\n        return null;\r\n    } else {\r\n        ents_arr = ents_arr as TEntTypeIdx[][];\r\n        return ents_arr.map(ents_arr_item => _tin(__model__, ents_arr_item)) as TEntTypeIdx[];\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Adds a new copy of specified entities to the model.\r\n *\r\n * @param __model__\r\n * @param entities Entity or lists of entities to be copied. Entities can be positions, points, polylines, polygons and collections.\r\n * @param vector A vector to move the entities by after copying, can be `null`.\r\n * @returns Entities, the copied entity or a list of copied entities.\r\n * @example copies = make.Copy([position1,polyine1,polygon1])\r\n * @example_info Creates a copy of position1, polyine1, and polygon1.\r\n */\r\nexport function Copy(__model__: GIModel, entities: TId|TId[]|TId[][], vector: Txyz|number): TId|TId[]|TId[][] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'make.Copy';\r\n    let ents_arr;\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL, , IdCh.isIdLL],\r\n        [EEntType.POSI, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][];\r\n        checkArgs(fn_name, 'vector', vector, [ArgCh.isNum, ArgCh.isXYZ, ArgCh.isNull]);\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList, , IDcheckObj.isIDListOfLists],\r\n        // [EEntType.POSI, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][];\r\n    }\r\n    // --- Error Check ---\r\n    const move_vec: Txyz = (Array.isArray(vector) ? vector : [0, 0, vector]) as Txyz;\r\n    const bool_copy_attribs = true;\r\n    // copy the list of entities\r\n    const new_ents_arr: TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][] = _copyGeom(__model__, ents_arr, bool_copy_attribs);\r\n    // copy the positions that belong to the list of entities\r\n    _copyGeomPosis(__model__, new_ents_arr, bool_copy_attribs, move_vec);\r\n    // return only the new entities\r\n    return idsMake(new_ents_arr) as TId|TId[]|TId[][];\r\n}\r\n// ================================================================================================\r\n/**\r\n * Makes one or more holes in a polygon.\r\n * ~\r\n * The positions must be on the polygon, i.e. they must be co-planar with the polygon and\r\n * they must be within the boundary of the polygon.\r\n * ~\r\n * If the list of positions consists of a single list, then one hole will be generated.\r\n * If the list of positions consists of a list of lists, then multiple holes will be generated.\r\n * ~\r\n * @param __model__\r\n * @param pgon A face or polygon to make holes in.\r\n * @param entities List of positions, or nested lists of positions, or entities from which positions can be extracted.\r\n * @returns Entities, a list of wires resulting from the hole(s).\r\n */\r\nexport function Hole(__model__: GIModel, pgon: TId, entities: TId|TId[]|TId[][]): TId[] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    if (!Array.isArray(entities)) { entities = [entities]; }\r\n    // --- Error Check ---\r\n    const fn_name = 'make.Hole';\r\n    let ent_arr: TEntTypeIdx;\r\n    let holes_ents_arr: TEntTypeIdx[]|TEntTypeIdx[][];\r\n    if (__model__.debug) {\r\n        ent_arr = checkIDs(fn_name, 'pgon', pgon, [IdCh.isId], [EEntType.FACE, EEntType.PGON]) as TEntTypeIdx;\r\n        holes_ents_arr = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL, IdCh.isIdLL],\r\n            [EEntType.POSI, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n    } else {\r\n        // ent_arr = splitIDs(fn_name, 'pgon', pgon, [IDcheckObj.isID], [EEntType.FACE, EEntType.PGON]) as TEntTypeIdx;\r\n        // holes_ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList, IDcheckObj.isIDListOfLists],\r\n        // [EEntType.POSI, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n        ent_arr = idsBreak(pgon) as TEntTypeIdx;\r\n        holes_ents_arr = idsBreak(entities) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n    }\r\n    // --- Error Check ---\r\n    // get the posis for making holes\r\n    _getHolePosisFromEnts(__model__, holes_ents_arr);\r\n    // make sure we have a pgon\r\n    const pgon_i: number = isFace(ent_arr[0]) ? __model__.modeldata.geom.nav.navFaceToPgon(ent_arr[1]) : ent_arr[1];\r\n    // make the holes\r\n    const new_ents_arr: TEntTypeIdx[] = _hole(__model__, pgon_i, holes_ents_arr);\r\n    // make and return the IDs of the hole wires\r\n    return idsMake(new_ents_arr) as TId[];\r\n}\r\n// Hole modelling operation\r\nfunction _hole(__model__: GIModel, pgon_i: number, holes_ents_arr: TEntTypeIdx[]|TEntTypeIdx[][]): TEntTypeIdx[] {\r\n    if (getArrDepth(holes_ents_arr) === 2) {\r\n        holes_ents_arr = [holes_ents_arr] as TEntTypeIdx[][];\r\n    }\r\n    // convert the holes to lists of posis_i\r\n    const holes_posis_i: number[][] = [];\r\n    for (const hole_ents_arr of holes_ents_arr as TEntTypeIdx[][]) {\r\n        holes_posis_i.push( hole_ents_arr.map( ent_arr => ent_arr[1] ) );\r\n    }\r\n    // create the hole\r\n    const wires_i: number[] = __model__.modeldata.geom.modify_pgon.cutPgonHoles(pgon_i, holes_posis_i);\r\n    return wires_i.map(wire_i => [EEntType.WIRE, wire_i]) as TEntTypeIdx[];\r\n}\r\nfunction _getHolePosisFromEnts(__model__: GIModel, ents_arr: TEntTypeIdx[]|TEntTypeIdx[][]): void {\r\n    for (let i = 0; i < ents_arr.length; i++) {\r\n        const depth: number = getArrDepth(ents_arr[i]);\r\n        if (depth === 1) {\r\n            const [ent_type, index]: TEntTypeIdx = ents_arr[i] as TEntTypeIdx;\r\n            switch (ent_type) {\r\n                case EEntType.WIRE:\r\n                case EEntType.PLINE:\r\n                    const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n                    const posis_arr: TEntTypeIdx[] = posis_i.map( posi_i => [EEntType.POSI, posi_i]) as TEntTypeIdx[];\r\n                    Array.prototype.splice.apply(ents_arr, [i, 1, posis_arr]); // TODO\r\n                    break;\r\n                case EEntType.FACE:\r\n                case EEntType.PGON:\r\n                    // ignore holes, so only take the first wire\r\n                    const wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(ent_type, index);\r\n                    const wire_i: number = wires_i[0];\r\n                    const wire_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, wire_i);\r\n                    const wire_posis_arr: TEntTypeIdx[] = wire_posis_i.map( posi_i => [EEntType.POSI, posi_i]) as TEntTypeIdx[];\r\n                    Array.prototype.splice.apply(ents_arr, [i, 1, wire_posis_arr]); // TODO\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Lofts between entities.\r\n * ~\r\n * The geometry that is generated depends on the method that is selected.\r\n * - The 'quads' methods will generate polygons.\r\n * - The 'stringers' and 'ribs' methods will generate polylines.\r\n * - The 'copies' method will generate copies of the input geometry type.\r\n *\r\n * @param __model__\r\n * @param entities List of entities, or list of lists of entities.\r\n * @param method Enum, if 'closed', then close the loft back to the first entity in the list.\r\n * @returns Entities, a list of new polygons or polylines resulting from the loft.\r\n * @example quads = make.Loft([polyline1,polyline2,polyline3], 1, 'open_quads')\r\n * @example_info Creates quad polygons lofting between polyline1, polyline2, polyline3.\r\n * @example quads = make.Loft([polyline1,polyline2,polyline3], 1, 'closed_quads')\r\n * @example_info Creates quad polygons lofting between polyline1, polyline2, polyline3, and back to polyline1.\r\n * @example quads = make.Loft([ [polyline1,polyline2], [polyline3,polyline4] ] , 1, 'open_quads')\r\n * @example_info Creates quad polygons lofting first between polyline1 and polyline2, and then between polyline3 and polyline4.\r\n */\r\nexport function Loft(__model__: GIModel, entities: TId[]|TId[][], divisions: number, method: _ELoftMethod): TId[] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    let ents_arr;\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs('make.Loft', 'entities', entities,\r\n        [IdCh.isIdL, IdCh.isIdLL],\r\n        [EEntType.EDGE, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n    } else {\r\n        // ents_arr = splitIDs('make.Loft', 'entities', entities,\r\n        // [IDcheckObj.isIDList, IDcheckObj.isIDListOfLists],\r\n        // [EEntType.EDGE, EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n    }\r\n    // --- Error Check ---\r\n    const new_ents_arr: TEntTypeIdx[] = _loft(__model__, ents_arr, divisions, method);\r\n    return idsMake(new_ents_arr) as TId[];\r\n}\r\nexport enum _ELoftMethod {\r\n    OPEN_QUADS =  'open_quads',\r\n    CLOSED_QUADS  =  'closed_quads',\r\n    OPEN_STRINGERS =  'open_stringers',\r\n    CLOSED_STRINGERS  =  'closed_stringers',\r\n    OPEN_RIBS = 'open_ribs',\r\n    CLOSED_RIBS = 'closed_ribs',\r\n    COPIES = 'copies'\r\n}\r\nfunction _loftQuads(__model__: GIModel, ents_arr: TEntTypeIdx[], divisions: number, method: _ELoftMethod): TEntTypeIdx[] {\r\n    const edges_arrs_i: number[][] = [];\r\n    let num_edges = 0;\r\n    for (const ents of ents_arr) {\r\n        const [ent_type, index]: TEntTypeIdx = ents as TEntTypeIdx;\r\n        const edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, index);\r\n        if (edges_arrs_i.length === 0) { num_edges = edges_i.length; }\r\n        if (edges_i.length !== num_edges) {\r\n            throw new Error('make.Loft: Number of edges is not consistent.');\r\n        }\r\n        edges_arrs_i.push(edges_i);\r\n    }\r\n    if (method === _ELoftMethod.CLOSED_QUADS) {\r\n        edges_arrs_i.push(edges_arrs_i[0]);\r\n    }\r\n    const new_pgons_i: number[] = [];\r\n    for (let i = 0; i < edges_arrs_i.length - 1; i++) {\r\n        const edges_i_a: number[] = edges_arrs_i[i];\r\n        const edges_i_b: number[] = edges_arrs_i[i + 1];\r\n        if (divisions > 0) {\r\n            const strip_posis_map: Map<number, number[]> = new Map();\r\n            for (let j = 0; j < num_edges; j++) {\r\n                const edge_i_a: number = edges_i_a[j];\r\n                const edge_i_b: number = edges_i_b[j];\r\n                // get exist two posis_i\r\n                const exist_posis_a_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i_a);\r\n                const exist_posis_b_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i_b);\r\n                // create the new posis strip if necessary\r\n                for (const k of [0, 1]) {\r\n                    if (strip_posis_map.get(exist_posis_a_i[k]) === undefined) {\r\n                        const xyz_a: Txyz = __model__.modeldata.attribs.query.getPosiCoords(exist_posis_a_i[k]);\r\n                        const xyz_b: Txyz = __model__.modeldata.attribs.query.getPosiCoords(exist_posis_b_i[k]);\r\n                        const extrude_vec_div: Txyz = vecDiv(vecFromTo(xyz_a, xyz_b), divisions);\r\n                        const strip_posis_i: number[] = [exist_posis_a_i[k]];\r\n                        for (let d = 1; d < divisions; d++) {\r\n                            const strip_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n                            const move_xyz = vecMult(extrude_vec_div, d);\r\n                            __model__.modeldata.attribs.add.setPosiCoords(strip_posi_i, vecAdd(xyz_a, move_xyz));\r\n                            strip_posis_i.push(strip_posi_i);\r\n                        }\r\n                        strip_posis_i.push(exist_posis_b_i[k]);\r\n                        strip_posis_map.set(exist_posis_a_i[k], strip_posis_i);\r\n                    }\r\n                }\r\n                // get the two strips and make polygons\r\n                const strip1_posis_i: number[] = strip_posis_map.get(exist_posis_a_i[0]);\r\n                const strip2_posis_i: number[] = strip_posis_map.get(exist_posis_a_i[1]);\r\n                for (let k = 0; k < strip1_posis_i.length - 1; k++) {\r\n                    const c1: number = strip1_posis_i[k];\r\n                    const c2: number = strip2_posis_i[k];\r\n                    const c3: number = strip2_posis_i[k + 1];\r\n                    const c4: number = strip1_posis_i[k + 1];\r\n                    const pgon_i: number = __model__.modeldata.geom.add.addPgon([c1, c2, c3, c4]);\r\n                    new_pgons_i.push(pgon_i);\r\n                }\r\n            }\r\n        } else {\r\n            for (let j = 0; j < num_edges; j++) {\r\n                const posis_i_a: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edges_i_a[j]);\r\n                const posis_i_b: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edges_i_b[j]);\r\n                const pgon_i: number = __model__.modeldata.geom.add.addPgon([posis_i_a[0], posis_i_a[1], posis_i_b[1], posis_i_b[0]]);\r\n                new_pgons_i.push(pgon_i);\r\n            }\r\n        }\r\n    }\r\n    return new_pgons_i.map( pgon_i => [EEntType.PGON, pgon_i]) as TEntTypeIdx[];\r\n}\r\nfunction _loftStringers(__model__: GIModel, ents_arr: TEntTypeIdx[], divisions: number, method: _ELoftMethod): TEntTypeIdx[] {\r\n    const posis_arrs_i: number[][] = [];\r\n    let num_posis = 0;\r\n    for (const ents of ents_arr) {\r\n        const [ent_type, index]: TEntTypeIdx = ents as TEntTypeIdx;\r\n        const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n        if (posis_arrs_i.length === 0) { num_posis = posis_i.length; }\r\n        if (posis_i.length !== num_posis) {\r\n            throw new Error('make.Loft: Number of positions is not consistent.');\r\n        }\r\n        posis_arrs_i.push(posis_i);\r\n    }\r\n    const is_closed: boolean = method === _ELoftMethod.CLOSED_STRINGERS;\r\n    if (is_closed) {\r\n        posis_arrs_i.push(posis_arrs_i[0]);\r\n    }\r\n    const stringer_plines_i: number[] = [];\r\n    for (let i = 0; i < num_posis; i++) {\r\n        const stringer_posis_i: number[] = [];\r\n        for (let j = 0; j < posis_arrs_i.length - 1; j++) {\r\n            stringer_posis_i.push(posis_arrs_i[j][i]);\r\n            if (divisions > 0) {\r\n                const xyz1: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_arrs_i[j][i]);\r\n                const xyz2: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_arrs_i[j + 1][i]);\r\n                const vec: Txyz = vecDiv(vecFromTo(xyz1, xyz2), divisions);\r\n                for (let k = 1; k < divisions; k++) {\r\n                    const new_xyz: Txyz = vecAdd(xyz1, vecMult(vec, k));\r\n                    const new_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n                    __model__.modeldata.attribs.add.setPosiCoords(new_posi_i, new_xyz);\r\n                    stringer_posis_i.push(new_posi_i);\r\n                }\r\n            }\r\n        }\r\n        if (!is_closed) {\r\n            stringer_posis_i.push(posis_arrs_i[posis_arrs_i.length - 1][i]);\r\n        }\r\n        const pline_i: number = __model__.modeldata.geom.add.addPline(stringer_posis_i, is_closed);\r\n        stringer_plines_i.push(pline_i);\r\n    }\r\n    return stringer_plines_i.map( pline_i => [EEntType.PLINE, pline_i]) as TEntTypeIdx[];\r\n}\r\nfunction _loftRibs(__model__: GIModel, ents_arr: TEntTypeIdx[], divisions: number, method: _ELoftMethod): TEntTypeIdx[] {\r\n    const posis_arrs_i: number[][] = [];\r\n    let num_posis = 0;\r\n    for (const ents of ents_arr) {\r\n        const [ent_type, index]: TEntTypeIdx = ents as TEntTypeIdx;\r\n        const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n        if (posis_arrs_i.length === 0) { num_posis = posis_i.length; }\r\n        if (posis_i.length !== num_posis) {\r\n            throw new Error('make.Loft: Number of positions is not consistent.');\r\n        }\r\n        posis_arrs_i.push(posis_i);\r\n    }\r\n    const is_closed: boolean = method === _ELoftMethod.CLOSED_RIBS;\r\n    if (is_closed) {\r\n        posis_arrs_i.push(posis_arrs_i[0]);\r\n    }\r\n    let ribs_is_closed = false;\r\n    switch (ents_arr[0][0]) { // check if the first entity is closed\r\n        case EEntType.PGON:\r\n        case EEntType.FACE:\r\n            ribs_is_closed = true;\r\n            break;\r\n        case EEntType.PLINE:\r\n            const wire_i: number = __model__.modeldata.geom.nav.navPlineToWire(ents_arr[0][1]);\r\n            ribs_is_closed = __model__.modeldata.geom.query.isWireClosed(wire_i);\r\n            break;\r\n        case EEntType.WIRE:\r\n            ribs_is_closed = __model__.modeldata.geom.query.isWireClosed(ents_arr[0][1]);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    const rib_plines_i: number[] = [];\r\n    for (let i = 0; i < posis_arrs_i.length - 1; i++) {\r\n        const pline_i: number = __model__.modeldata.geom.add.addPline(posis_arrs_i[i], ribs_is_closed);\r\n        rib_plines_i.push(pline_i);\r\n        if (divisions > 0) {\r\n            const xyzs1: Txyz[] = posis_arrs_i[i].map(posi_i => __model__.modeldata.attribs.query.getPosiCoords(posi_i));\r\n            const xyzs2: Txyz[] = posis_arrs_i[i + 1].map(posi_i => __model__.modeldata.attribs.query.getPosiCoords(posi_i));\r\n            const vecs: Txyz[] = [];\r\n            for (let k = 0; k < num_posis; k++) {\r\n                const vec: Txyz = vecDiv(vecFromTo(xyzs1[k], xyzs2[k]), divisions);\r\n                vecs.push(vec);\r\n            }\r\n            for (let j = 1; j < divisions; j++) {\r\n                const rib_posis_i: number[] = [];\r\n                for (let k = 0; k < num_posis; k++) {\r\n                    const new_xyz: Txyz = vecAdd(xyzs1[k], vecMult(vecs[k], j));\r\n                    const new_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n                    __model__.modeldata.attribs.add.setPosiCoords(new_posi_i, new_xyz);\r\n                    rib_posis_i.push(new_posi_i);\r\n                }\r\n                const new_rib_pline_i: number = __model__.modeldata.geom.add.addPline(rib_posis_i, ribs_is_closed);\r\n                rib_plines_i.push(new_rib_pline_i);\r\n            }\r\n        }\r\n    }\r\n    if (!is_closed) {\r\n        const pline_i: number = __model__.modeldata.geom.add.addPline(posis_arrs_i[posis_arrs_i.length - 1], ribs_is_closed);\r\n        rib_plines_i.push(pline_i);\r\n    }\r\n    return rib_plines_i.map( pline_i => [EEntType.PLINE, pline_i]) as TEntTypeIdx[];\r\n}\r\nfunction _loftCopies(__model__: GIModel, ents_arr: TEntTypeIdx[], divisions: number): TEntTypeIdx[] {\r\n    const posis_arrs_i: number[][] = [];\r\n    let num_posis = 0;\r\n    for (const ents of ents_arr) {\r\n        const [ent_type, index]: TEntTypeIdx = ents as TEntTypeIdx;\r\n        const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n        if (posis_arrs_i.length === 0) { num_posis = posis_i.length; }\r\n        if (posis_i.length !== num_posis) {\r\n            throw new Error('make.Loft: Number of positions is not consistent.');\r\n        }\r\n        posis_arrs_i.push(posis_i);\r\n    }\r\n    const copies: TEntTypeIdx[] = [];\r\n    for (let i = 0; i < posis_arrs_i.length - 1; i++) {\r\n        copies.push(ents_arr[i]);\r\n        if (divisions > 0) {\r\n            const xyzs1: Txyz[] = posis_arrs_i[i].map(posi_i => __model__.modeldata.attribs.query.getPosiCoords(posi_i));\r\n            const xyzs2: Txyz[] = posis_arrs_i[i + 1].map(posi_i => __model__.modeldata.attribs.query.getPosiCoords(posi_i));\r\n            const vecs: Txyz[] = [];\r\n            for (let k = 0; k < num_posis; k++) {\r\n                const vec: Txyz = vecDiv(vecFromTo(xyzs1[k], xyzs2[k]), divisions);\r\n                vecs.push(vec);\r\n            }\r\n            for (let j = 1; j < divisions; j++) {\r\n                const lofted_ent_arr: TEntTypeIdx = _copyGeom(__model__, ents_arr[i], true) as TEntTypeIdx;\r\n                _copyGeomPosis(__model__, lofted_ent_arr, true, null);\r\n                const [lofted_ent_type, lofted_ent_i]: [number, number] = lofted_ent_arr;\r\n                const new_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(lofted_ent_type, lofted_ent_i);\r\n                for (let k = 0; k < num_posis; k++) {\r\n                    const new_xyz: Txyz = vecAdd(xyzs1[k], vecMult(vecs[k], j));\r\n                    __model__.modeldata.attribs.add.setPosiCoords(new_posis_i[k], new_xyz);\r\n                }\r\n                copies.push(lofted_ent_arr);\r\n            }\r\n        }\r\n    }\r\n    copies.push(ents_arr[ents_arr.length - 1]);\r\n    return copies;\r\n}\r\nfunction _loft(__model__: GIModel, ents_arrs: TEntTypeIdx[]|TEntTypeIdx[][], divisions: number, method: _ELoftMethod): TEntTypeIdx[] {\r\n    const depth: number = getArrDepth(ents_arrs);\r\n    if (depth === 2) {\r\n        const ents_arr: TEntTypeIdx[] = ents_arrs as TEntTypeIdx[];\r\n        switch (method) {\r\n            case _ELoftMethod.OPEN_QUADS:\r\n            case _ELoftMethod.CLOSED_QUADS:\r\n                return _loftQuads(__model__, ents_arr, divisions, method);\r\n            case _ELoftMethod.OPEN_STRINGERS:\r\n            case _ELoftMethod.CLOSED_STRINGERS:\r\n                return _loftStringers(__model__, ents_arr, divisions, method);\r\n            case _ELoftMethod.OPEN_RIBS:\r\n            case _ELoftMethod.CLOSED_RIBS:\r\n                return _loftRibs(__model__, ents_arr, divisions, method);\r\n            case _ELoftMethod.COPIES:\r\n                return _loftCopies(__model__, ents_arr, divisions);\r\n            default:\r\n                break;\r\n        }\r\n    } else if (depth === 3) {\r\n        const all_loft_ents: TEntTypeIdx[] = [];\r\n        for (const ents_arr of ents_arrs  as TEntTypeIdx[][]) {\r\n            const loft_ents: TEntTypeIdx[] = _loft(__model__, ents_arr, divisions, method);\r\n            loft_ents.forEach( loft_ent => all_loft_ents.push(loft_ent) );\r\n        }\r\n        return all_loft_ents;\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Extrudes geometry by distance or by vector.\r\n * - Extrusion of a position, vertex, or point produces polylines;\r\n * - Extrusion of an edge, wire, or polyline produces polygons;\r\n * - Extrusion of a face or polygon produces polygons, capped at the top.\r\n * ~\r\n * The geometry that is generated depends on the method that is selected.\r\n * - The 'quads' methods will generate polygons.\r\n * - The 'stringers' and 'ribs' methods will generate polylines.\r\n * - The 'copies' method will generate copies of the input geometry type.\r\n * ~\r\n * @param __model__\r\n * @param entities Vertex, edge, wire, face, position, point, polyline, polygon, collection.\r\n * @param dist Number or vector. If number, assumed to be [0,0,value] (i.e. extrusion distance in z-direction).\r\n * @param divisions Number of divisions to divide extrusion by. Minimum is 1.\r\n * @param method Enum, when extruding edges, select quads, stringers, or ribs\r\n * @returns Entities, a list of new polygons or polylines resulting from the extrude.\r\n * @example extrusion1 = make.Extrude(point1, 10, 2, 'quads')\r\n * @example_info Creates a polyline of total length 10 (with two edges of length 5 each) in the z-direction.\r\n * In this case, the 'quads' setting is ignored.\r\n * @example extrusion2 = make.Extrude(polygon1, [0,5,0], 1, 'quads')\r\n * @example_info Extrudes polygon1 by 5 in the y-direction, creating a list of quad surfaces.\r\n */\r\nexport function Extrude(__model__: GIModel, entities: TId|TId[],\r\n        dist: number|Txyz, divisions: number, method: _EExtrudeMethod): TId|TId[] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'make.Extrude';\r\n    let ents_arr;\r\n    if (__model__.debug) {\r\n        ents_arr =  checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL],\r\n            [EEntType.VERT, EEntType.EDGE, EEntType.WIRE, EEntType.FACE,\r\n            EEntType.POSI, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n        checkArgs(fn_name, 'dist', dist, [ArgCh.isNum, ArgCh.isXYZ]);\r\n        checkArgs(fn_name, 'divisions', divisions, [ArgCh.isInt]);\r\n    } else {\r\n        // ents_arr =  splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        //     [EEntType.VERT, EEntType.EDGE, EEntType.WIRE, EEntType.FACE,\r\n        //     EEntType.POSI, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    let new_ents_arr: TEntTypeIdx[] = null;\r\n    // extrude\r\n    if (method === _EExtrudeMethod.COPIES) {\r\n        new_ents_arr = _extrudeCopies(__model__, ents_arr, dist, divisions);\r\n    } else {\r\n        new_ents_arr = _extrude(__model__, ents_arr, dist, divisions, method);\r\n    }\r\n    // create IDs\r\n    if (!Array.isArray(entities) && new_ents_arr.length === 1) {\r\n        return idsMake(new_ents_arr[0]) as TId;\r\n    } else {\r\n        return idsMake(new_ents_arr) as TId|TId[];\r\n    }\r\n}\r\nfunction _extrudeCopies(__model__: GIModel, ents: TEntTypeIdx|TEntTypeIdx[],\r\n        dist: number|Txyz, divisions: number): TEntTypeIdx[] {\r\n    const ents_arr: TEntTypeIdx[] = (getArrDepth(ents) === 1 ? [ents] : ents) as TEntTypeIdx[];\r\n    const extrude_vec: Txyz = (Array.isArray(dist) ? dist : [0, 0, dist]) as Txyz;\r\n    const extrude_vec_div: Txyz = vecDiv(extrude_vec, divisions);\r\n    const copies: TEntTypeIdx[] = [];\r\n    // make the copies\r\n    for (let i = 0; i < divisions + 1; i++) {\r\n        // copy the list of entities\r\n        const copied_ents_arr: TEntTypeIdx[] = _copyGeom(__model__, ents_arr, true) as TEntTypeIdx[];\r\n        // copy the positions that belong to the list of entities\r\n        _copyGeomPosis(__model__, copied_ents_arr, true, vecMult(extrude_vec_div, i));\r\n        // add to the array\r\n        for (const copied_ent_arr of copied_ents_arr) {\r\n            copies.push(copied_ent_arr);\r\n        }\r\n    }\r\n    // return the copies\r\n    return copies;\r\n}\r\nfunction _extrudeColl(__model__: GIModel, index: number,\r\n        extrude_vec: Txyz, divisions: number, method: _EExtrudeMethod): TEntTypeIdx[] {\r\n    const points_i: number[] = __model__.modeldata.geom.nav.navCollToPoint(index);\r\n    const res1 = points_i.map( point_i => _extrude(__model__, [EEntType.POINT, point_i], extrude_vec, divisions, method));\r\n    const plines_i: number[] = __model__.modeldata.geom.nav.navCollToPline(index);\r\n    const res2 = plines_i.map( pline_i => _extrude(__model__, [EEntType.PLINE, pline_i], extrude_vec, divisions, method));\r\n    const pgons_i: number[] = __model__.modeldata.geom.nav.navCollToPgon(index);\r\n    const res3 = pgons_i.map( pgon_i => _extrude(__model__, [EEntType.PGON, pgon_i], extrude_vec, divisions, method));\r\n    return [].concat(res1, res2, res3);\r\n}\r\nfunction _extrudeDim0(__model__: GIModel, ent_type: number, index: number, extrude_vec: Txyz, divisions: number): TEntTypeIdx[] {\r\n    const extrude_vec_div: Txyz = vecDiv(extrude_vec, divisions);\r\n    const exist_posi_i: number = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index)[0];\r\n    const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(exist_posi_i);\r\n    const strip_posis_i: number[] = [exist_posi_i];\r\n    for (let i = 1; i < divisions + 1; i++) {\r\n        const strip_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        const move_xyz = vecMult(extrude_vec_div, i);\r\n        __model__.modeldata.attribs.add.setPosiCoords(strip_posi_i, vecAdd(xyz, move_xyz));\r\n        strip_posis_i.push(strip_posi_i);\r\n    }\r\n    // loft between the positions and create a single polyline\r\n    const pline_i: number = __model__.modeldata.geom.add.addPline(strip_posis_i);\r\n    return [[EEntType.PLINE, pline_i]];\r\n}\r\nfunction _extrudeQuads(__model__: GIModel, ent_type: number, index: number, extrude_vec: Txyz, divisions: number): TEntTypeIdx[] {\r\n    const new_pgons_i: number[] = [];\r\n    const extrude_vec_div: Txyz = vecDiv(extrude_vec, divisions);\r\n    const edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, index);\r\n    const strip_posis_map: Map<number, number[]> = new Map();\r\n    for (const edge_i of edges_i) {\r\n        // get exist posis_i\r\n        const exist_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n        // create the new posis strip if necessary\r\n        for (const exist_posi_i of exist_posis_i) {\r\n            if (strip_posis_map.get(exist_posi_i) === undefined) {\r\n                const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(exist_posi_i);\r\n                const strip_posis_i: number[] = [exist_posi_i];\r\n                for (let i = 1; i < divisions + 1; i++) {\r\n                    const strip_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n                    const move_xyz = vecMult(extrude_vec_div, i);\r\n                    __model__.modeldata.attribs.add.setPosiCoords(strip_posi_i, vecAdd(xyz, move_xyz));\r\n                    strip_posis_i.push(strip_posi_i);\r\n                }\r\n                strip_posis_map.set(exist_posi_i, strip_posis_i);\r\n            }\r\n        }\r\n        // get the two strips and make polygons\r\n        const strip1_posis_i: number[] = strip_posis_map.get(exist_posis_i[0]);\r\n        const strip2_posis_i: number[] = strip_posis_map.get(exist_posis_i[1]);\r\n        for (let i = 0; i < strip1_posis_i.length - 1; i++) {\r\n            const c1: number = strip1_posis_i[i];\r\n            const c2: number = strip2_posis_i[i];\r\n            const c3: number = strip2_posis_i[i + 1];\r\n            const c4: number = strip1_posis_i[i + 1];\r\n            const pgon_i: number = __model__.modeldata.geom.add.addPgon([c1, c2, c3, c4]);\r\n            new_pgons_i.push(pgon_i);\r\n        }\r\n    }\r\n    // cap the top\r\n    if (isDim2(ent_type)) { // create a top -> polygon\r\n        const face_i: number = isFace(ent_type) ? index : __model__.modeldata.geom.nav.navPgonToFace(index);\r\n        const cap_pgon_i: number = _extrudeCap(__model__, face_i, strip_posis_map, divisions);\r\n        new_pgons_i.push(cap_pgon_i);\r\n    }\r\n    return new_pgons_i.map(pgon_i => [EEntType.PGON, pgon_i] as TEntTypeIdx);\r\n}\r\nfunction _extrudeStringers(__model__: GIModel, ent_type: number, index: number, extrude_vec: Txyz, divisions: number): TEntTypeIdx[] {\r\n    const new_plines_i: number[] = [];\r\n    const extrude_vec_div: Txyz = vecDiv(extrude_vec, divisions);\r\n    const edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, index);\r\n    const strip_posis_map: Map<number, number[]> = new Map();\r\n    for (const edge_i of edges_i) {\r\n        // get exist posis_i\r\n        const exist_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n        // create the new posis strip if necessary\r\n        for (const exist_posi_i of exist_posis_i) {\r\n            if (strip_posis_map.get(exist_posi_i) === undefined) {\r\n                const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(exist_posi_i);\r\n                const strip_posis_i: number[] = [exist_posi_i];\r\n                for (let i = 1; i < divisions + 1; i++) {\r\n                    const strip_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n                    const move_xyz = vecMult(extrude_vec_div, i);\r\n                    __model__.modeldata.attribs.add.setPosiCoords(strip_posi_i, vecAdd(xyz, move_xyz));\r\n                    strip_posis_i.push(strip_posi_i);\r\n                }\r\n                strip_posis_map.set(exist_posi_i, strip_posis_i);\r\n            }\r\n        }\r\n    }\r\n    // make the stringers\r\n    strip_posis_map.forEach(strip_posis_i => {\r\n        const pline_i: number = __model__.modeldata.geom.add.addPline(strip_posis_i);\r\n        new_plines_i.push(pline_i);\r\n    });\r\n    // return the stringers\r\n    return new_plines_i.map(pline_i => [EEntType.PLINE, pline_i] as TEntTypeIdx);\r\n}\r\nfunction _extrudeRibs(__model__: GIModel, ent_type: number, index: number, extrude_vec: Txyz, divisions: number): TEntTypeIdx[] {\r\n    const new_plines_i: number[] = [];\r\n    const extrude_vec_div: Txyz = vecDiv(extrude_vec, divisions);\r\n    const edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, index);\r\n    const strip_posis_map: Map<number, number[]> = new Map();\r\n    for (const edge_i of edges_i) {\r\n        // get exist posis_i\r\n        const exist_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n        // create the new posis strip if necessary\r\n        for (const exist_posi_i of exist_posis_i) {\r\n            if (strip_posis_map.get(exist_posi_i) === undefined) {\r\n                const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(exist_posi_i);\r\n                const strip_posis_i: number[] = [exist_posi_i];\r\n                for (let i = 1; i < divisions + 1; i++) {\r\n                    const strip_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n                    const move_xyz = vecMult(extrude_vec_div, i);\r\n                    __model__.modeldata.attribs.add.setPosiCoords(strip_posi_i, vecAdd(xyz, move_xyz));\r\n                    strip_posis_i.push(strip_posi_i);\r\n                }\r\n                strip_posis_map.set(exist_posi_i, strip_posis_i);\r\n            }\r\n        }\r\n    }\r\n    // make an array of ents to process as ribs\r\n    let ribs_is_closed = false;\r\n    const ribs_posis_i: number[][] = [];\r\n    switch (ent_type) { // check if the entity is closed\r\n        case EEntType.PGON:\r\n        case EEntType.FACE:\r\n            ribs_is_closed = true;\r\n            const face_wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(ent_type, index);\r\n            for (const face_wire_i of face_wires_i) {\r\n                const face_wire_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, face_wire_i);\r\n                ribs_posis_i.push(face_wire_posis_i);\r\n            }\r\n            break;\r\n        case EEntType.PLINE:\r\n            const pline_wire_i: number = __model__.modeldata.geom.nav.navPlineToWire(index);\r\n            const pline_wire_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, pline_wire_i);\r\n            ribs_posis_i.push(pline_wire_posis_i);\r\n            ribs_is_closed = __model__.modeldata.geom.query.isWireClosed(pline_wire_i);\r\n            break;\r\n        case EEntType.WIRE:\r\n            const wire_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, index);\r\n            ribs_posis_i.push(wire_posis_i);\r\n            ribs_is_closed = __model__.modeldata.geom.query.isWireClosed(index);\r\n            break;\r\n        default:\r\n            const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n            ribs_posis_i.push(posis_i);\r\n            break;\r\n    }\r\n    // make the ribs\r\n    for (let i = 0; i < divisions + 1; i++) {\r\n        for (const rib_posis_i of ribs_posis_i) {\r\n            const mapped_rib_posis_i: number[] = rib_posis_i.map( rib_posi_i => strip_posis_map.get(rib_posi_i)[i] );\r\n            const pline_i: number = __model__.modeldata.geom.add.addPline(mapped_rib_posis_i, ribs_is_closed);\r\n            new_plines_i.push(pline_i);\r\n        }\r\n    }\r\n    // return the ribs\r\n    return new_plines_i.map(pline_i => [EEntType.PLINE, pline_i] as TEntTypeIdx);\r\n}\r\nfunction _extrudeCap(__model__: GIModel, index: number, strip_posis_map: Map<number, number[]>, divisions: number): number {\r\n    const face_i: number = __model__.modeldata.geom.nav.navPgonToFace(index);\r\n    // get positions on boundary\r\n    const old_wire_i: number = __model__.modeldata.geom.query.getFaceBoundary(face_i);\r\n    const old_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, old_wire_i);\r\n    const new_posis_i: number[] = old_posis_i.map(old_posi_i => strip_posis_map.get(old_posi_i)[divisions]);\r\n    // get positions for holes\r\n    const old_holes_wires_i: number[] = __model__.modeldata.geom.query.getFaceHoles(face_i);\r\n    const new_holes_posis_i: number[][] = [];\r\n    for (const old_hole_wire_i of old_holes_wires_i) {\r\n        const old_hole_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, old_hole_wire_i);\r\n        const new_hole_posis_i: number[] = old_hole_posis_i.map(old_posi_i => strip_posis_map.get(old_posi_i)[divisions]);\r\n        new_holes_posis_i.push(new_hole_posis_i);\r\n    }\r\n    // make new polygon\r\n    const pgon_i: number = __model__.modeldata.geom.add.addPgon( new_posis_i, new_holes_posis_i );\r\n    return pgon_i;\r\n}\r\nfunction _extrude(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[],\r\n        dist: number|Txyz, divisions: number, method: _EExtrudeMethod): TEntTypeIdx[] {\r\n    const extrude_vec: Txyz = (Array.isArray(dist) ? dist : [0, 0, dist]) as Txyz;\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        const [ent_type, index]: TEntTypeIdx = ents_arr as TEntTypeIdx;\r\n        // check if this is a collection, call this function again\r\n        if (isColl(ent_type)) {\r\n            return _extrudeColl(__model__, index, extrude_vec, divisions, method);\r\n        }\r\n        // check if this is a position, a vertex, or a point -> pline\r\n        if (isDim0(ent_type)) {\r\n            return _extrudeDim0(__model__, ent_type, index, extrude_vec, divisions);\r\n        }\r\n        // extrude edges -> polygons\r\n        switch (method) {\r\n            case _EExtrudeMethod.QUADS:\r\n                return _extrudeQuads(__model__, ent_type, index, extrude_vec, divisions);\r\n            case _EExtrudeMethod.STRINGERS:\r\n                return _extrudeStringers(__model__, ent_type, index, extrude_vec, divisions);\r\n            case _EExtrudeMethod.RIBS:\r\n                return _extrudeRibs(__model__, ent_type, index, extrude_vec, divisions);\r\n            default:\r\n                throw new Error('Extrude method not recognised.');\r\n        }\r\n    } else {\r\n        const new_ents_arr: TEntTypeIdx[] = [];\r\n        (ents_arr as TEntTypeIdx[]).forEach(ent_arr => {\r\n            const result = _extrude(__model__, ent_arr, extrude_vec, divisions, method);\r\n            result.forEach( new_ent_arr => new_ents_arr.push(new_ent_arr));\r\n        });\r\n        return new_ents_arr;\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Sweeps a cross section wire along a backbone wire.\r\n * ~\r\n * @param __model__\r\n * @param entities Wires, or entities from which wires can be extracted.\r\n * @param xsection Cross section wire to sweep, or entity from which a wire can be extracted.\r\n * @param divisions Segment length or number of segments.\r\n * @param method Enum, select the method for sweeping.\r\n * @returns Entities, a list of new polygons or polylines resulting from the sweep.\r\n */\r\nexport function Sweep(__model__: GIModel, entities: TId|TId[], x_section: TId, divisions: number, method: _EExtrudeMethod): TId[] {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'make.Sweep';\r\n    let backbone_ents: TEntTypeIdx[];\r\n    let xsection_ent: TEntTypeIdx;\r\n    if (__model__.debug) {\r\n        backbone_ents = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], [EEntType.WIRE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        xsection_ent = checkIDs(fn_name, 'xsextion', x_section,\r\n            [IdCh.isId], [EEntType.EDGE, EEntType.WIRE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx;\r\n        checkArgs(fn_name, 'divisions', divisions, [ArgCh.isInt]);\r\n        if (divisions === 0) {\r\n            throw new Error(fn_name + ' : Divisor cannot be zero.');\r\n        }\r\n    } else {\r\n        // backbone_ents = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], [EEntType.WIRE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        // xsection_ent = splitIDs(fn_name, 'xsextion', xsextion,\r\n        //     [IDcheckObj.isID], [EEntType.EDGE, EEntType.WIRE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx;\r\n        backbone_ents = idsBreak(entities) as TEntTypeIdx[];\r\n        xsection_ent = idsBreak(x_section) as TEntTypeIdx;\r\n    }\r\n    // --- Error Check ---\r\n    // the xsection\r\n    const [xsection_ent_type, xsection_index]: TEntTypeIdx = xsection_ent;\r\n    let xsection_wire_i: number = null;\r\n    if (isWire(xsection_ent_type)) {\r\n        xsection_wire_i = xsection_index;\r\n    } else {\r\n        const xsection_wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(xsection_ent_type, xsection_index);\r\n        xsection_wire_i = xsection_wires_i[0]; // select the first wire that is found\r\n    }\r\n    // get all the wires and put them into an array\r\n    const backbone_wires_i: number[] = [];\r\n    for (const [ent_type, index] of backbone_ents) {\r\n        if (isWire(ent_type)) {\r\n            backbone_wires_i.push(index);\r\n        } else {\r\n            const ent_wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(ent_type, index);\r\n            backbone_wires_i.push(...ent_wires_i);\r\n        }\r\n    }\r\n    // do the sweep\r\n    const new_ents: TEntTypeIdx[] = _sweep(__model__, backbone_wires_i, xsection_wire_i, divisions, method);\r\n    return idsMake(new_ents) as TId[];\r\n}\r\nfunction _sweep(__model__: GIModel, backbone_wires_i: number|number[], xsection_wire_i: number,\r\n        divisions: number, method: _EExtrudeMethod): TEntTypeIdx[] {\r\n    if (!Array.isArray(backbone_wires_i)) {\r\n        // extrude edges -> polygons\r\n        switch (method) {\r\n            case _EExtrudeMethod.QUADS:\r\n                return _sweepQuads(__model__, backbone_wires_i, xsection_wire_i, divisions);\r\n            case _EExtrudeMethod.STRINGERS:\r\n                return _sweepStringers(__model__, backbone_wires_i, xsection_wire_i, divisions);\r\n            case _EExtrudeMethod.RIBS:\r\n                return _sweepRibs(__model__, backbone_wires_i, xsection_wire_i, divisions);\r\n            case _EExtrudeMethod.COPIES:\r\n                return _sweepCopies(__model__, backbone_wires_i, xsection_wire_i, divisions);\r\n            default:\r\n                throw new Error('Extrude method not recognised.');\r\n        }\r\n    } else {\r\n        const new_ents: TEntTypeIdx[] = [];\r\n        for (const wire_i of backbone_wires_i) {\r\n            const wire_new_ents: TEntTypeIdx[] = _sweep(__model__, wire_i, xsection_wire_i, divisions, method);\r\n            for (const wire_new_ent of wire_new_ents) {\r\n                new_ents.push(wire_new_ent);\r\n            }\r\n        }\r\n        return new_ents;\r\n    }\r\n}\r\nfunction _sweepQuads(__model__: GIModel, backbone_wire_i: number, xsection_wire_i: number, divisions: number): TEntTypeIdx[] {\r\n    const strips_posis_i: number[][] = _sweepPosis(__model__, backbone_wire_i, xsection_wire_i, divisions);\r\n    const backbone_is_closed: boolean = __model__.modeldata.geom.query.isWireClosed(backbone_wire_i);\r\n    const xsection_is_closed: boolean = __model__.modeldata.geom.query.isWireClosed(xsection_wire_i);\r\n    // add row if backbone_is_closed\r\n    if (backbone_is_closed) {\r\n        strips_posis_i.push(strips_posis_i[0].slice());\r\n    }\r\n    // add a posi_i to end of each strip if xsection_is_closed\r\n    if (xsection_is_closed) {\r\n        for (const strip_posis_i of strips_posis_i) {\r\n            strip_posis_i.push(strip_posis_i[0]);\r\n        }\r\n    }\r\n    // create quads\r\n    const new_pgons: TEntTypeIdx[] = [];\r\n    for (let i = 0; i < strips_posis_i.length - 1; i++) {\r\n        const strip1_posis_i: number[] = strips_posis_i[i];\r\n        const strip2_posis_i: number[] = strips_posis_i[i + 1];\r\n        for (let j = 0; j < strip1_posis_i.length - 1; j++) {\r\n            const c1: number = strip1_posis_i[j];\r\n            const c2: number = strip2_posis_i[j];\r\n            const c3: number = strip2_posis_i[j + 1];\r\n            const c4: number = strip1_posis_i[j + 1];\r\n            const pgon_i: number = __model__.modeldata.geom.add.addPgon([c1, c2, c3, c4]);\r\n            new_pgons.push([EEntType.PGON, pgon_i]);\r\n        }\r\n    }\r\n    return new_pgons;\r\n}\r\nfunction _sweepStringers(__model__: GIModel, backbone_wire_i: number, xsection_wire_i: number, divisions: number): TEntTypeIdx[] {\r\n    const backbone_is_closed: boolean = __model__.modeldata.geom.query.isWireClosed(backbone_wire_i);\r\n    const ribs_posis_i: number[][] = _sweepPosis(__model__, backbone_wire_i, xsection_wire_i, divisions);\r\n    const stringers_posis_i: number[][] = listZip(ribs_posis_i);\r\n    const plines: TEntTypeIdx[] = [];\r\n    for (const stringer_posis_i of stringers_posis_i) {\r\n        const pline_i: number = __model__.modeldata.geom.add.addPline(stringer_posis_i, backbone_is_closed);\r\n        plines.push([EEntType.PLINE, pline_i]);\r\n    }\r\n    return plines;\r\n}\r\nfunction _sweepRibs(__model__: GIModel, backbone_wire_i: number, xsection_wire_i: number, divisions: number): TEntTypeIdx[] {\r\n    const xsection_is_closed: boolean = __model__.modeldata.geom.query.isWireClosed(xsection_wire_i);\r\n    const ribs_posis_i: number[][] = _sweepPosis(__model__, backbone_wire_i, xsection_wire_i, divisions);\r\n    const plines: TEntTypeIdx[] = [];\r\n    for (const rib_posis_i of ribs_posis_i) {\r\n        const pline_i: number = __model__.modeldata.geom.add.addPline(rib_posis_i, xsection_is_closed);\r\n        plines.push([EEntType.PLINE, pline_i]);\r\n    }\r\n    return plines;\r\n}\r\nfunction _sweepCopies(__model__: GIModel, backbone_wire_i: number, xsection_wire_i: number, divisions: number): TEntTypeIdx[] {\r\n    const posis_i: number[][] = _sweepPosis(__model__, backbone_wire_i, xsection_wire_i, divisions);\r\n    // TODO\r\n    throw new Error('Not implemented');\r\n    // TODO\r\n}\r\nfunction _sweepPosis(__model__: GIModel, backbone_wire_i: number, xsection_wire_i: number, divisions: number): number[][] {\r\n    // get the xyzs of the cross section\r\n    const xsextion_xyzs: Txyz[] = __model__.modeldata.attribs.query.getEntCoords(EEntType.WIRE, xsection_wire_i);\r\n    // get the xyzs of the backbone\r\n    const wire_normal: Txyz = __model__.modeldata.geom.query.getWireNormal(backbone_wire_i);\r\n    const wire_is_closed: boolean =  __model__.modeldata.geom.query.isWireClosed(backbone_wire_i);\r\n    const wire_xyzs: Txyz[] = __model__.modeldata.attribs.query.getEntCoords(EEntType.WIRE, backbone_wire_i);\r\n    let plane_xyzs: Txyz[] = [];\r\n    // if not divisions is not 1, then we need to add xyzs\r\n    if (divisions === 1) {\r\n        plane_xyzs = wire_xyzs;\r\n    } else {\r\n        if (wire_is_closed) {\r\n            wire_xyzs.push(wire_xyzs[0]);\r\n        }\r\n        for (let i = 0; i < wire_xyzs.length - 1; i++) {\r\n            const xyz0: Txyz = wire_xyzs[i];\r\n            const xyz1: Txyz = wire_xyzs[i + 1];\r\n            const vec: Txyz = vecFromTo(xyz0, xyz1);\r\n            const vec_div: Txyz = vecDiv(vec, divisions);\r\n            // create additional xyzs for planes\r\n            plane_xyzs.push(xyz0);\r\n            for (let j = 1; j < divisions; j++) {\r\n                plane_xyzs.push(vecAdd(xyz0, vecMult(vec_div, j)));\r\n            }\r\n        }\r\n        if (!wire_is_closed) {\r\n            plane_xyzs.push(wire_xyzs[wire_xyzs.length - 1]);\r\n        }\r\n    }\r\n    // create the planes\r\n    const planes: TPlane[] = getPlanesSeq(plane_xyzs, wire_normal, wire_is_closed);\r\n    // create the new  posis\r\n    const XY: TPlane = [[0, 0, 0], [1, 0, 0], [0, 1, 0]];\r\n    const all_new_posis_i: number[][] = [];\r\n    for (const plane of planes) {\r\n        const matrix: Matrix4 = xfromSourceTargetMatrix(XY, plane);\r\n        const xsection_posis_i: number[] = [];\r\n        for (const xsextion_xyz of xsextion_xyzs) {\r\n            const new_xyz: Txyz = multMatrix(xsextion_xyz, matrix);\r\n            const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n            __model__.modeldata.attribs.add.setPosiCoords(posi_i, new_xyz);\r\n            xsection_posis_i.push(posi_i);\r\n        }\r\n        all_new_posis_i.push(xsection_posis_i);\r\n    }\r\n    // return the new posis\r\n    return all_new_posis_i;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Divides edges into a set of shorter edges.\r\n * ~\r\n * If the 'by_number' method is selected, then each edge is divided into a fixed number of equal length shorter edges.\r\n * If the 'by length' method is selected, then each edge is divided into shorter edges of the specified length.\r\n * The length of the last segment will be the remainder.\r\n * If the 'by_min_length' method is selected,\r\n * then the edge is divided into the maximum number of shorter edges\r\n * that have a new length that is equal to or greater than the minimum.\r\n * ~\r\n * @param __model__\r\n * @param entities Edges, or entities from which edges can be extracted.\r\n * @param divisor Segment length or number of segments.\r\n * @param method Enum, select the method for dividing edges.\r\n * @returns Entities, a list of new edges resulting from the divide.\r\n * @example segments1 = make.Divide(edge1, 5, by_number)\r\n * @example_info Creates a list of 5 equal segments from edge1.\r\n * @example segments2 = make.Divide(edge1, 5, by_length)\r\n * @example_info If edge1 has length 13, creates from edge a list of two segments of length 5 and one segment of length 3.\r\n */\r\nexport function Divide(__model__: GIModel, entities: TId|TId[], divisor: number, method: _EDivisorMethod): TId[] {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'make.Divide';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL], [EEntType.EDGE, EEntType.WIRE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        checkArgs(fn_name, 'divisor', divisor, [ArgCh.isNum]);\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList], [EEntType.EDGE, EEntType.WIRE, EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const new_ents_arr: TEntTypeIdx[] = _divide(__model__, ents_arr, divisor, method);\r\n    // return the ids\r\n    return idsMake(new_ents_arr) as TId[];\r\n}\r\nfunction _divide(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[], divisor: number, method: _EDivisorMethod): TEntTypeIdx[] {\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        const [ent_type, index]: TEntTypeIdx = ents_arr as TEntTypeIdx;\r\n        let exist_edges_i: number[];\r\n        if (!isEdge(ent_type)) {\r\n            exist_edges_i = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, index).slice();\r\n        } else {\r\n            exist_edges_i = [index];\r\n        }\r\n        const all_new_edges_i: number[] = [];\r\n        for (const exist_edge_i of exist_edges_i) {\r\n            const new_edges_i: number[] = _divideEdge(__model__, exist_edge_i, divisor, method);\r\n            all_new_edges_i.push(...new_edges_i);\r\n        }\r\n        __model__.modeldata.geom.time_stamp.updateObjsTs(ent_type, index);\r\n        return all_new_edges_i.map(one_edge_i => [EEntType.EDGE, one_edge_i] as TEntTypeIdx);\r\n    } else {\r\n        return [].concat(...(ents_arr as TEntTypeIdx[]).map(one_edge => _divide(__model__, one_edge, divisor, method)));\r\n    }\r\n}\r\nfunction _divideEdge(__model__: GIModel, edge_i: number, divisor: number, method: _EDivisorMethod): number[] {\r\n    const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n    const start = __model__.modeldata.attribs.query.getPosiCoords(posis_i[0]);\r\n    const end = __model__.modeldata.attribs.query.getPosiCoords(posis_i[1]);\r\n    let new_xyzs: Txyz[];\r\n    if (method === _EDivisorMethod.BY_NUMBER) {\r\n        new_xyzs = interpByNum(start, end, divisor - 1);\r\n    } else if (method === _EDivisorMethod.BY_LENGTH) {\r\n        new_xyzs = interpByLen(start, end, divisor);\r\n    } else if (method === _EDivisorMethod.BY_MAX_LENGTH) {\r\n        const len: number = distance(start, end);\r\n        if (divisor === 0) {\r\n            new_xyzs = [];\r\n        } else {\r\n            const num_div: number = Math.ceil(len / divisor);\r\n            const num_div_max: number = num_div > 1 ? num_div - 1 : 0;\r\n            new_xyzs = interpByNum(start, end, num_div_max);\r\n        }\r\n    } else { // BY_MIN_LENGTH\r\n        if (divisor === 0) {\r\n            new_xyzs = [];\r\n        } else {\r\n            const len: number = distance(start, end);\r\n            const num_div: number = Math.floor(len / divisor);\r\n            const num_div_min: number = num_div > 1 ? num_div - 1 : 0;\r\n            new_xyzs = interpByNum(start, end, num_div_min);\r\n        }\r\n    }\r\n    const new_edges_i: number[] = [];\r\n    let old_edge_i: number = edge_i;\r\n    for (const new_xyz of new_xyzs) {\r\n        const posi_i = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(posi_i, new_xyz);\r\n        const new_edge_i: number = __model__.modeldata.geom.modify.insertVertIntoWire(old_edge_i, posi_i);\r\n        new_edges_i.push(old_edge_i);\r\n        old_edge_i = new_edge_i;\r\n    }\r\n    new_edges_i.push(old_edge_i);\r\n    return new_edges_i;\r\n}\r\n// ================================================================================================\r\nexport enum _ECutMethod {\r\n    KEEP_ABOVE =  'keep_above',\r\n    KEEP_BELOW = 'keep_below',\r\n    KEEP_BOTH = 'keep_both'\r\n}\r\n/**\r\n * Cuts polygons and polylines using a plane.\r\n * ~\r\n * If the 'keep_above' method is selected, then only the part of the cut entities above the plane are kept.\r\n * If the 'keep_below' method is selected, then only the part of the cut entities below the plane are kept.\r\n * If the 'keep_both' method is selected, then both the parts of the cut entities are kept.\r\n * ~\r\n * Currently does not support cutting polygons with holes. TODO\r\n * ~\r\n * If 'keep_both' is selected, returns a list of two lists.\r\n * [[entities above the plane], [entities below the plane]].\r\n * ~\r\n * @param __model__\r\n * @param entities Polylines or polygons, or entities from which polyline or polygons can be extracted.\r\n * @param plane The plane to cut with.\r\n * @param method Enum, select the method for cutting.\r\n * @returns Entities, a list of three lists of entities resulting from the cut.\r\n\r\n */\r\nexport function Cut(__model__: GIModel, entities: TId|TId[], plane: TPlane, method: _ECutMethod): TId[]|[TId[], TId[]] {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) {\r\n        if (method === _ECutMethod.KEEP_BOTH) { return [[], []]; }\r\n        return [];\r\n    }\r\n    // --- Error Check ---\r\n    const fn_name = 'make.Cut';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n        checkArgs(fn_name, 'plane', plane, [ArgCh.isPln]);\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        // checkArgTypes(fn_name, 'plane', plane, [TypeCheckObj.isPlane]);\r\n    }\r\n    // --- Error Check ---\r\n    // create the threejs entity and calc intersections\r\n    const plane_normal: Txyz = vecCross(plane[1], plane[2]);\r\n    const plane_tjs: THREE.Plane = new THREE.Plane();\r\n    plane_tjs.setFromNormalAndCoplanarPoint( new THREE.Vector3(...plane_normal), new THREE.Vector3(...plane[0]) );\r\n    // get polylines and polygons\r\n    const set_plines: Set<number> = new Set();\r\n    const set_pgons: Set<number> = new Set();\r\n    const edges_i: number[] = []; // all edges\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        if (ent_type === EEntType.PLINE) {\r\n            set_plines.add(ent_i);\r\n        } else if (ent_type === EEntType.PGON) {\r\n            set_pgons.add(ent_i);\r\n        } else {\r\n            const plines: number[] = __model__.modeldata.geom.nav.navAnyToPline(ent_type, ent_i);\r\n            for (const pline of plines) { set_plines.add(pline); }\r\n            const pgons: number[] = __model__.modeldata.geom.nav.navAnyToPline(ent_type, ent_i);\r\n            for (const pgon of pgons) { set_pgons.add(pgon); }\r\n        }\r\n        const ent_edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, ent_i);\r\n        for (const ent_edge_i of ent_edges_i) { edges_i.push(ent_edge_i); }\r\n    }\r\n    const above: TEntTypeIdx[] = [];\r\n    const below: TEntTypeIdx[] = [];\r\n    // cut each edge and store the results\r\n    const [edge_to_isect_posis, cut_posi_to_copies, posi_to_tjs]: [number[][], number[], THREE.Vector3[]] =\r\n        _cutEdges(__model__, edges_i, plane_tjs, method);\r\n    // create array to store new posis\r\n    const posi_to_copies: number[] = [];\r\n    // slice polylines\r\n    for (const exist_pline_i of Array.from(set_plines)) {\r\n        const sliced: [number[], number[]] =\r\n            _cutCreateEnts(__model__, EEntType.PLINE, exist_pline_i, plane_tjs, edge_to_isect_posis,\r\n                posi_to_copies, cut_posi_to_copies, posi_to_tjs, method);\r\n        for (const new_pline_i of sliced[0]) { above.push([EEntType.PLINE, new_pline_i]); }\r\n        for (const new_pline_i of sliced[1]) { below.push([EEntType.PLINE, new_pline_i]); }\r\n    }\r\n    // slice polygons\r\n    for (const exist_pgon_i of Array.from(set_pgons)) {\r\n        // TODO slice polygons with holes\r\n        const sliced: [number[], number[]] =\r\n            _cutCreateEnts(__model__, EEntType.PGON, exist_pgon_i, plane_tjs, edge_to_isect_posis,\r\n                posi_to_copies, cut_posi_to_copies, posi_to_tjs, method);\r\n        for (const new_pgon_i of sliced[0]) { above.push([EEntType.PGON, new_pgon_i]); }\r\n        for (const new_pgon_i of sliced[1]) { below.push([EEntType.PGON, new_pgon_i]); }\r\n    }\r\n    // return the result\r\n    switch (method) {\r\n        case _ECutMethod.KEEP_ABOVE:\r\n            return idsMake(above) as TId[];\r\n        case _ECutMethod.KEEP_BELOW:\r\n            return idsMake(below) as TId[];\r\n        default:\r\n            return [idsMake(above), idsMake(below)] as [TId[], TId[]];\r\n    }\r\n}\r\n// cut each edge in the input geometry and store teh intersection posi in a sparse array\r\n// the array is nested, the two indexes [i1][i2] is the two posi ends of the edge, the value is the isect posi\r\n// also returns some other data\r\n// if method is \"both\", then we need copies of the isect posis, so these are also generated\r\n// finally, the tjs points that are created are also returned, they are used later for checking \"starts_above\"\r\nfunction _cutEdges(__model__: GIModel, edges_i: number[], plane_tjs: THREE.Plane, method: _ECutMethod):\r\n        [number[][], number[], THREE.Vector3[]] {\r\n    // create sparse arrays for storing data\r\n    const posi_to_tjs: THREE.Vector3[] = []; // sparse array\r\n    const edge_to_isect_posis: number[][] = []; // sparse array, map_posis[2][3] is the edge from posi 2 to posi 3 (and 3 to 2)\r\n    const cut_posi_to_copies: number[] = []; // sparse array\r\n    // loop through each edge\r\n    for (const edge_i of edges_i) {\r\n        const edge_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n        edge_posis_i.sort();\r\n        // get the edge isect point\r\n        if (edge_to_isect_posis[edge_posis_i[0]] === undefined) { edge_to_isect_posis[edge_posis_i[0]] = []; }\r\n        const posi_i: number = edge_to_isect_posis[edge_posis_i[0]][edge_posis_i[1]];\r\n        if (posi_i === undefined) {\r\n            const posi0_tjs: THREE.Vector3 = _cutGetTjsPoint(__model__, edge_posis_i[0], posi_to_tjs);\r\n            const posi1_tjs: THREE.Vector3 = _cutGetTjsPoint(__model__, edge_posis_i[1], posi_to_tjs);\r\n            const line_tjs: THREE.Line3 = new THREE.Line3(posi0_tjs, posi1_tjs);\r\n            const isect_tjs: THREE.Vector3 = new THREE.Vector3();\r\n            const result: THREE.Vector3 = plane_tjs.intersectLine(line_tjs, isect_tjs);\r\n            if (result !== undefined && result !== null) {\r\n                const new_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n                __model__.modeldata.attribs.add.setPosiCoords(new_posi_i, [isect_tjs.x, isect_tjs.y, isect_tjs.z]);\r\n                edge_to_isect_posis[edge_posis_i[0]][edge_posis_i[1]] = new_posi_i;\r\n                if (method === _ECutMethod.KEEP_BOTH) {\r\n                    const copy_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n                    __model__.modeldata.attribs.add.setPosiCoords(copy_posi_i, [isect_tjs.x, isect_tjs.y, isect_tjs.z]);\r\n                    cut_posi_to_copies[new_posi_i] = copy_posi_i;\r\n                }\r\n            } else {\r\n                edge_to_isect_posis[edge_posis_i[0]][edge_posis_i[1]] = null;\r\n            }\r\n        }\r\n    }\r\n    return [edge_to_isect_posis, cut_posi_to_copies, posi_to_tjs] ;\r\n}\r\n// given an exist posis, returns a tjs point\r\n// if necessary, a new tjs point will be created\r\n// creates a map from exist posi to tjs\r\nfunction _cutGetTjsPoint(__model__: GIModel, posi_i: number, posi_to_tjs: THREE.Vector3[]): THREE.Vector3 {\r\n    if (posi_to_tjs[posi_i] !== undefined) { return posi_to_tjs[posi_i]; }\r\n    const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n    const posi_tjs: THREE.Vector3 = new THREE.Vector3(...xyz);\r\n    posi_to_tjs[posi_i] = posi_tjs;\r\n    return posi_tjs;\r\n}\r\n// given an exist posis, returns a new posi\r\n// if necessary, a new posi point be created\r\n// creates a map from exist posi to new posi\r\nfunction _cutGetPosi(__model__: GIModel, posi_i: number, posi_to_copies: number[]): number {\r\n    if (posi_to_copies[posi_i] !== undefined) { return posi_to_copies[posi_i]; }\r\n    const new_posi_i: number = __model__.modeldata.geom.add.copyPosis(posi_i, true) as number;\r\n    posi_to_copies[posi_i] = new_posi_i;\r\n    return new_posi_i;\r\n}\r\n// given a list of exist posis, returns a list of new posi\r\n// if necessary, new posi will be creates\r\nfunction _cutGetPosis(__model__: GIModel, posis_i: number[], posi_to_copies: number[]): number[] {\r\n    return posis_i.map(posi_i => _cutGetPosi(__model__, posi_i, posi_to_copies) );\r\n}\r\n// makes a copy of an existing ent\r\n// all posis in the exist ent will be replaced by new posis\r\nfunction _cutCopyEnt(__model__: GIModel, ent_type: EEntType, ent_i: number, exist_posis_i: number[], posi_to_copies: number[]): number {\r\n    const new_posis_i: number[] = _cutGetPosis(__model__, exist_posis_i, posi_to_copies);\r\n    switch (ent_type) {\r\n        case EEntType.PLINE:\r\n            const new_pline_i: number = __model__.modeldata.geom.add.copyPlines(ent_i, true) as number;\r\n            __model__.modeldata.geom.modify.replacePosis(ent_type, new_pline_i, new_posis_i);\r\n            return new_pline_i;\r\n        case EEntType.PGON:\r\n            const new_pgon_i: number = __model__.modeldata.geom.add.copyPgons(ent_i, true) as number;\r\n            __model__.modeldata.geom.modify.replacePosis(ent_type, new_pgon_i, new_posis_i);\r\n            return new_pgon_i;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n// creates new ents\r\n// if the ent is not cut by the plane, the ent will be copies (with new posis)\r\n// if the ent is cut, a new ent will be created\r\nfunction _cutCreateEnts(__model__: GIModel, ent_type: EEntType, ent_i: number, plane_tjs: THREE.Plane,\r\n        edge_to_isect_posis: number[][], posi_to_copies: number[], cut_posi_to_copies: number[], posi_to_tjs: THREE.Vector3[],\r\n        method: _ECutMethod): [number[], number[]] {\r\n    // get wire and posis\r\n    const wire_i: number = __model__.modeldata.geom.nav.navAnyToWire(ent_type, ent_i)[0];\r\n    const wire_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, wire_i);\r\n    const wire_posis_ex_i: number[] = wire_posis_i.slice();\r\n    const is_closed: boolean = __model__.modeldata.geom.query.isWireClosed(wire_i);\r\n    if (is_closed) {\r\n        wire_posis_ex_i.push(wire_posis_ex_i[0]);\r\n    }\r\n    const num_posis: number = wire_posis_ex_i.length;\r\n    // create lists to store posis\r\n    const slice_posis_i: number[][][] = [[], []];\r\n    // analyze the first point\r\n    const dist: number = plane_tjs.distanceToPoint(posi_to_tjs[wire_posis_ex_i[0]]);\r\n    const start_above = dist > 0; // is the first point above the plane?\r\n    const first = start_above ? 0 : 1; // the first list to start adding posis\r\n    const second = 1 - first; // the second list to add posis, after you cross the plane\r\n    let index = first;\r\n    // for each pair of posis, get the posi_i intersection or null\r\n    slice_posis_i[index].push([]);\r\n    for (let i = 0; i < num_posis - 1; i++) {\r\n        const edge_posis_i: [number, number] = [wire_posis_ex_i[i], wire_posis_ex_i[i + 1]];\r\n        edge_posis_i.sort();\r\n        const isect_posi_i: number = edge_to_isect_posis[edge_posis_i[0]][edge_posis_i[1]];\r\n        slice_posis_i[index][slice_posis_i[index].length - 1].push(wire_posis_ex_i[i]);\r\n        if (isect_posi_i !== null) {\r\n            // add posi before cut\r\n            if (method === _ECutMethod.KEEP_BOTH && index === 0) {\r\n                const isect_posi2_i: number = cut_posi_to_copies[isect_posi_i];\r\n                slice_posis_i[index][slice_posis_i[index].length - 1].push(isect_posi2_i);\r\n                posi_to_copies[isect_posi2_i] = isect_posi2_i;\r\n            } else {\r\n                slice_posis_i[index][slice_posis_i[index].length - 1].push(isect_posi_i);\r\n                posi_to_copies[isect_posi_i] = isect_posi_i;\r\n            }\r\n            // switch\r\n            index = 1 - index;\r\n            slice_posis_i[index].push([]);\r\n            // add posi after cut\r\n            if (method === _ECutMethod.KEEP_BOTH && index === 0) {\r\n                const isect_posi2_i: number = cut_posi_to_copies[isect_posi_i];\r\n                slice_posis_i[index][slice_posis_i[index].length - 1].push(isect_posi2_i);\r\n                posi_to_copies[isect_posi2_i] = isect_posi2_i;\r\n            } else {\r\n                slice_posis_i[index][slice_posis_i[index].length - 1].push(isect_posi_i);\r\n                posi_to_copies[isect_posi_i] = isect_posi_i;\r\n            }\r\n        }\r\n    }\r\n    // deal with cases where the entity was not cut\r\n    // make a copy of the ent, with new posis\r\n    if (slice_posis_i[second].length === 0) {\r\n        if ( start_above && (method === _ECutMethod.KEEP_BOTH || method === _ECutMethod.KEEP_ABOVE)) {\r\n            return [[_cutCopyEnt(__model__, ent_type, ent_i, wire_posis_i, posi_to_copies)], []];\r\n        } else if ( !start_above && (method === _ECutMethod.KEEP_BOTH || method === _ECutMethod.KEEP_BELOW)) {\r\n            return [[], [_cutCopyEnt(__model__, ent_type, ent_i, wire_posis_i, posi_to_copies)]];\r\n        }\r\n        return [[], []];\r\n    }\r\n    // update the lists, to deal with the end cases\r\n    if (is_closed) {\r\n        // add the last list of posis to the the first list of posis\r\n        for (const slice_posi_i of slice_posis_i[index][slice_posis_i[index].length - 1]) {\r\n            slice_posis_i[index][0].push(slice_posi_i);\r\n        }\r\n        slice_posis_i[index] = slice_posis_i[index].slice(0, -1);\r\n    } else {\r\n        // add the last posi to the last list\r\n        slice_posis_i[index][slice_posis_i[index].length - 1].push(wire_posis_ex_i[num_posis - 1]);\r\n    }\r\n    // make the cut entities\r\n    const above: number[] = [];\r\n    const below: number[] = [];\r\n    switch (method) {\r\n        case _ECutMethod.KEEP_BOTH:\r\n        case _ECutMethod.KEEP_ABOVE:\r\n            for (const posis_i of slice_posis_i[0]) {\r\n                if (ent_type === EEntType.PLINE) {\r\n                    const copy_posis_i: number[] = _cutGetPosis(__model__, posis_i, posi_to_copies);\r\n                    above.push( __model__.modeldata.geom.add.addPline(copy_posis_i, false));\r\n                } else {\r\n                    const copy_posis_i: number[] = _cutGetPosis(__model__, posis_i, posi_to_copies);\r\n                    above.push( __model__.modeldata.geom.add.addPgon(copy_posis_i));\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    switch (method) {\r\n        case _ECutMethod.KEEP_BOTH:\r\n        case _ECutMethod.KEEP_BELOW:\r\n            for (const posis_i of slice_posis_i[1]) {\r\n                if (ent_type === EEntType.PLINE) {\r\n                    const copy_posis_i: number[] = _cutGetPosis(__model__, posis_i, posi_to_copies);\r\n                    below.push( __model__.modeldata.geom.add.addPline(copy_posis_i, false));\r\n                } else {\r\n                    const copy_posis_i: number[] = _cutGetPosis(__model__, posis_i, posi_to_copies);\r\n                    below.push( __model__.modeldata.geom.add.addPgon(copy_posis_i));\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return [above, below];\r\n}\r\n\r\n// ================================================================================================\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // ================================================================================================\r\n// function _polygonHoles(__model__: GIModel, ents_arr: TEntTypeIdx[],\r\n//     holes_ents_arr: TEntTypeIdx[]|TEntTypeIdx[][]): TEntTypeIdx {\r\n// if (getArrDepth(holes_ents_arr) === 2) {\r\n//     holes_ents_arr = [holes_ents_arr] as TEntTypeIdx[][];\r\n// }\r\n// const posis_i: number[] = ents_arr.map(ent_arr => ent_arr[1]);\r\n// const holes_posis_i: number[][] = [];\r\n// for (const hole_ents_arr of holes_ents_arr as TEntTypeIdx[][]) {\r\n//     holes_posis_i.push( hole_ents_arr.map(ent_arr => ent_arr[1]) );\r\n// }\r\n// const pgon_i: number = __model__.modeldata.geom.add.addPgon(posis_i, holes_posis_i);\r\n// return [EEntType.PGON, pgon_i];\r\n// }\r\n// /**\r\n// * Adds a single new polygon to the model with one or more holes.\r\n// * @param __model__\r\n// * @param positions List of positions.\r\n// * @param hole_positions List of positions for the holes. For multiple holes, a list of list can provided.\r\n// * @returns Entities, a list of new polygons.\r\n// * @example polygon1 = make.Polygon([position1,position2,position3], [position4,position5,position6])\r\n// * @example_info Creates a polygon with  a hole, with vertices in sequence from position1 to position6.\r\n// */\r\n// function _PolygonHoles(__model__: GIModel, positions: TId[], hole_positions: TId[]|TId[][]): TId {\r\n// // --- Error Check ---\r\n// const pgon_ents_arr = checkIDs('make.Polygon', 'positions', positions, [IDcheckObj.isIDList], [EEntType.POSI]) as TEntTypeIdx[];\r\n// const holes_ents_arr = checkIDs('make.Polygon', 'positions', hole_positions,\r\n//     [IDcheckObj.isIDList, IDcheckObj.isIDList_list], [EEntType.POSI]) as TEntTypeIdx[]|TEntTypeIdx[][];\r\n// // --- Error Check ---\r\n// const new_ent_arr: TEntTypeIdx = _polygonHoles(__model__, pgon_ents_arr, holes_ents_arr);\r\n// console.log(__model__);\r\n// return idsMake(new_ent_arr) as TId;\r\n// }\r\n// // ================================================================================================\r\n// /**\r\n//  * Joins polylines to polylines or polygons to polygons.\r\n//  * ~\r\n//  * New polylins or polygons are created. The original polyline or polygons are not affected.\r\n//  *\r\n//  * @param __model__\r\n//  * @param geometry Polylines or polygons.\r\n//  * @returns Entities, a list of new joined polylines or polygons.\r\n//  * @example joined1 = make.Join([polyline1,polyline2])\r\n//  * @example_info Creates a new polyline by joining polyline1 and polyline2. Geometries must be of the same type.\r\n//  */\r\n// export function _Join(__model__: GIModel, geometry: TId[]): TId {\r\n//     // --- Error Check ---\r\n//     // const ents_arr =  checkIDs('make.Join', 'geometry', geometry, [IDcheckObj.isIDList], [EEntType.PLINE, EEntType.PGON]);\r\n//     // --- Error Check ---\r\n//     throw new Error('Not implemented.'); return null;\r\n// }\r\n","/**\r\n * The `material` module has functions for defining materials.\r\n * The material definitions are saved as attributes at the model level.\r\n * More advanced materials can be created.\r\n * For more informtion, see the threejs docs: https://threejs.org/\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { Txyz, EAttribNames, EAttribDataTypeStrs } from '@libs/geo-info/common';\r\nimport * as THREE from 'three';\r\nimport { TId, EEntType, TEntTypeIdx } from '@libs/geo-info/common';\r\nimport { isEmptyArr, idsBreak } from '@libs/geo-info/id';\r\nimport { arrMakeFlat } from '@assets/libs/util/arrs';\r\n\r\n// ================================================================================================\r\nexport enum _ESide {\r\n    FRONT =   'front',\r\n    BACK =   'back',\r\n    BOTH =   'both'\r\n}\r\nfunction _convertSelectESideToNum(select: _ESide): number {\r\n    switch (select) {\r\n        case _ESide.FRONT:\r\n            return THREE.FrontSide;\r\n        case _ESide.BACK:\r\n            return THREE.BackSide;\r\n        default:\r\n            return THREE.DoubleSide;\r\n    }\r\n}\r\nexport enum _Ecolors {\r\n    NO_VERT_COLORS =   'none',\r\n    VERT_COLORS =   'apply_rgb'\r\n}\r\nfunction _convertSelectEcolorsToNum(select: _Ecolors): number {\r\n    switch (select) {\r\n        case _Ecolors.NO_VERT_COLORS:\r\n            return THREE.NoColors;\r\n        default:\r\n            return THREE.VertexColors;\r\n    }\r\n}\r\nfunction _clamp01(val: number): number {\r\n    val = (val > 1) ? 1 : val;\r\n    val = (val < 0) ? 0 : val;\r\n    return val;\r\n}\r\nfunction _clamp0100(val: number): number {\r\n    val = (val > 100) ? 100 : val;\r\n    val = (val < 0) ? 0 : val;\r\n    return val;\r\n}\r\nfunction _clampArr01(vals: number[]): void {\r\n    for (let i = 0; i < vals.length; i++) {\r\n        vals[i] = _clamp01(vals[i]);\r\n    }\r\n}\r\nfunction _getTjsColor(col: Txyz): THREE.Color {\r\n    return new THREE.Color(col[0], col[1], col[2]);\r\n}\r\n\r\nfunction _setMaterialModelAttrib(__model__: GIModel, name: string, settings_obj: object) {\r\n    // if the material already exists, then existing settings will be added\r\n    // but new settings will take precedence\r\n    if (__model__.modeldata.attribs.query.hasModelAttrib(name)) {\r\n        const exist_settings_obj: object = __model__.modeldata.attribs.query.getModelAttribVal(name) as object;\r\n        // check that the existing material is a Basic one\r\n        if (exist_settings_obj['type'] !== _EMaterialType.BASIC) {\r\n            if (settings_obj['type'] !== exist_settings_obj['type']) {\r\n                throw new Error('Error creating material: non-basic material with this name already exists.');\r\n            }\r\n        }\r\n        // copy the settings from the existing material to the new material\r\n        for (const key of Object.keys(exist_settings_obj)) {\r\n            if (settings_obj[key] === undefined) {\r\n                settings_obj[key] = exist_settings_obj[key];\r\n            }\r\n        }\r\n    } else {\r\n        __model__.modeldata.attribs.add.addAttrib(EEntType.MOD, name, EAttribDataTypeStrs.DICT);\r\n    }\r\n    // const settings_str: string = JSON.stringify(settings_obj);\r\n    __model__.modeldata.attribs.add.setModelAttribVal(name, settings_obj);\r\n}\r\nenum _EMaterialType {\r\n    BASIC = 'MeshBasicMaterial',\r\n    LAMBERT = 'MeshLambertMaterial',\r\n    PHONG = 'MeshPhongMaterial',\r\n    STANDARD = 'MeshStandardMaterial',\r\n    PHYSICAL = 'MeshPhysicalMaterial'\r\n}\r\n// ================================================================================================\r\n/**\r\n * Sets material by creating a polygon attribute called 'material' and setting the value.\r\n * The value is a sitring, which is the name of the material.\r\n * The properties of this material must be defined at the model level, using one of the material functions.\r\n * ~\r\n * @param entities The entities for which to set the material.\r\n * @param material The name of the material.\r\n * @returns void\r\n */\r\nexport function Set(__model__: GIModel, entities: TId|TId[], material: string): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        const fn_name = 'matrial.Set';\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities,\r\n                [IdCh.isId, IdCh.isIdL, IdCh.isIdLL], null) as TEntTypeIdx[];\r\n            checkArgs(fn_name, 'material', material, [ArgCh.isStr]);\r\n        } else {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n            //     [IDcheckObj.isID, IDcheckObj.isIDList, IDcheckObj.isIDListOfLists], null) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        // --- Error Check ---\r\n        _material(__model__, ents_arr, material);\r\n    }\r\n}\r\nfunction _material(__model__: GIModel, ents_arr: TEntTypeIdx[], material: string): void {\r\n    if (!__model__.modeldata.attribs.query.hasAttrib(EEntType.PGON, EAttribNames.MATERIAL)) {\r\n        __model__.modeldata.attribs.add.addAttrib(EEntType.PGON, EAttribNames.MATERIAL, EAttribDataTypeStrs.STRING);\r\n    }\r\n    for (const ent_arr of ents_arr) {\r\n        const [ent_type, ent_i]: [number, number] = ent_arr as TEntTypeIdx;\r\n        const pgons_i: number[] = __model__.modeldata.geom.nav.navAnyToPgon(ent_type, ent_i);\r\n        for (const pgon_i of pgons_i) {\r\n            __model__.modeldata.attribs.add.setEntAttribVal(EEntType.PGON, pgon_i, EAttribNames.MATERIAL, material);\r\n        }\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Creates a glass material with an opacity setting. The material will default to a Phong material.\r\n * ~\r\n * In order to assign a material to polygons in the model, a polygon attribute called 'material'\r\n * needs to be created. The value for each polygon must either be null, or must be a material name.\r\n * ~\r\n * @param name The name of the material.\r\n * @param opacity The opacity of the glass, between 0 (totally transparent) and 1 (totally opaque).\r\n * @returns void\r\n */\r\nexport function Glass(__model__: GIModel, name: string, opacity: number): void {\r\n    // --- Error Check ---\r\n    const fn_name = 'material.Glass';\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'name', name, [ArgCh.isStr]);\r\n        checkArgs(fn_name, 'opacity', opacity, [ArgCh.isNum01]);\r\n    }\r\n    // --- Error Check ---\r\n    opacity = _clamp01(opacity);\r\n    const transparent: boolean = opacity < 1;\r\n    const settings_obj = {\r\n        type: _EMaterialType.PHONG,\r\n        opacity: opacity,\r\n        transparent: transparent,\r\n        shininess: 90,\r\n        color: new THREE.Color(1, 1, 1),\r\n        emissive: new THREE.Color(0, 0, 0),\r\n        side: THREE.DoubleSide\r\n    };\r\n    _setMaterialModelAttrib(__model__, name, settings_obj);\r\n}\r\n\r\n// ================================================================================================\r\n/**\r\n * Creates a Basic material and saves it in the model attributes.\r\n * ~\r\n * [See the threejs docs](https://threejs.org/docs/#api/en/materials/MeshBasicMaterial)\r\n * ~\r\n * The color pf the material can either ignore or apply the vertex rgb colors.\r\n * If 'apply' id selected, then the actual color will be a combination of the material color\r\n * and the vertex colors, as specified by the a vertex attribute called 'rgb'.\r\n * In such a case, if material color is set to white, then it will\r\n * have no effect, and the color will be defined by the vertex [r,g,b] values.\r\n * ~\r\n * Additional material properties can be set by calling the functions for the more advanced materials.\r\n * These include LambertMaterial, PhongMaterial, StandardMaterial, and Physical Material.\r\n * Each of these more advanced materials allows you to specify certain additional settings.\r\n * ~\r\n * In order to assign a material to polygons in the model, a polygon attribute called 'material'.\r\n * needs to be created. The value for each polygon must either be null, or must be a material name.\r\n * ~\r\n * @param name The name of the material.\r\n * @param color The diffuse color, as [r, g, b] values between 0 and 1. White is [1, 1, 1].\r\n * @param opacity The opacity of the glass, between 0 (totally transparent) and 1 (totally opaque).\r\n * @param select_side Enum, select front, back, or both.\r\n * @param select_vert_colors Enum, select whether to use vertex colors if they exist.\r\n * @returns void\r\n */\r\nexport function Basic(__model__: GIModel, name: string,\r\n            color: Txyz,\r\n            opacity: number,\r\n            select_side: _ESide,\r\n            select_vert_colors: _Ecolors\r\n        ): void {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'material.Basic';\r\n        checkArgs(fn_name, 'name', name, [ArgCh.isStr]);\r\n        checkArgs(fn_name, 'color', color, [ArgCh.isColor]);\r\n        checkArgs(fn_name, 'opacity', opacity, [ArgCh.isNum01]);\r\n    }\r\n    // --- Error Check ---\r\n    const side: number = _convertSelectESideToNum(select_side);\r\n    const vert_colors: number = _convertSelectEcolorsToNum(select_vert_colors);\r\n    opacity = _clamp01(opacity);\r\n    const transparent: boolean = opacity < 1;\r\n    _clampArr01(color);\r\n\r\n    const settings_obj = {\r\n        type: _EMaterialType.BASIC,\r\n        side: side,\r\n        vertexColors: vert_colors,\r\n        opacity: opacity,\r\n        transparent: transparent,\r\n        color: _getTjsColor(color)\r\n    };\r\n    _setMaterialModelAttrib(__model__, name, settings_obj);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Creates a Lambert material and saves it in the model attributes.\r\n * If a Basic material with the same name already exits, these settings will be added to the basic material.\r\n * ~\r\n * [See the threejs docs](https://threejs.org/docs/#api/en/materials/MeshLambertMaterial)\r\n * ~\r\n * In order to assign a material to polygons in the model, a polygon attribute called 'material'\r\n * needs to be created. The value for each polygon must either be null, or must be a material name.\r\n * ~\r\n * @param name The name of the material.\r\n * @param emissive The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1].\r\n * @returns void\r\n */\r\nexport function Lambert(__model__: GIModel, name: string, emissive: Txyz): void {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'material.Lambert';\r\n        checkArgs(fn_name, 'name', name, [ArgCh.isStr]);\r\n        checkArgs(fn_name, 'emissive', emissive, [ArgCh.isXYZ]);\r\n    }\r\n    // --- Error Check ---\r\n    _clampArr01(emissive);\r\n    const settings_obj = {\r\n        type: _EMaterialType.LAMBERT,\r\n        emissive: _getTjsColor(emissive)\r\n    };\r\n    _setMaterialModelAttrib(__model__, name, settings_obj);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Creates a Phong material and saves it in the model attributes.\r\n * If a Basic material with the same name already exits, these settings will be added to the basic material.\r\n * ~\r\n * [See the threejs docs](https://threejs.org/docs/#api/en/materials/MeshPhongMaterial)\r\n * ~\r\n * In order to assign a material to polygons in the model, a polygon attribute called 'material'\r\n * needs to be created. The value for each polygon must either be null, or must be a material name.\r\n * ~\r\n * @param name The name of the material.\r\n * @param emissive The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1].\r\n * @param specular The specular color, as [r, g, b] values between 0 and 1. White is [1, 1, 1].\r\n * @param shininess The shininess, between 0 and 100.\r\n * @returns void\r\n */\r\nexport function Phong(__model__: GIModel, name: string,\r\n            emissive: Txyz,\r\n            specular: Txyz,\r\n            shininess: number\r\n        ): void {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'material.Phong';\r\n        checkArgs(fn_name, 'name', name, [ArgCh.isStr]);\r\n        checkArgs(fn_name, 'emissive', emissive, [ArgCh.isXYZ]);\r\n        checkArgs(fn_name, 'emissive', specular, [ArgCh.isXYZ]);\r\n        checkArgs(fn_name, 'shininess', shininess, [ArgCh.isNum]);\r\n    }\r\n    // --- Error Check ---\r\n    _clampArr01(emissive);\r\n    _clampArr01(specular);\r\n    shininess = Math.floor(_clamp0100(shininess));\r\n\r\n    const settings_obj = {\r\n        type: _EMaterialType.PHONG,\r\n        emissive: _getTjsColor(emissive),\r\n        specular: _getTjsColor(specular),\r\n        shininess: shininess\r\n    };\r\n    _setMaterialModelAttrib(__model__, name, settings_obj);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Creates a Standard material and saves it in the model attributes.\r\n * If a Basic material with the same name already exits, these settings will be added to the basic material.\r\n * ~\r\n * [See the threejs docs](https://threejs.org/docs/#api/en/materials/MeshStandardMaterial)\r\n * ~\r\n * In order to assign a material to polygons in the model, a polygon attribute called 'material'\r\n * needs to be created. The value for each polygon must either be null, or must be a material name.\r\n * ~\r\n * @param name The name of the material.\r\n * @param emissive The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1].\r\n * @param roughness The roughness, between 0 (smooth) and 1 (rough).\r\n * @param metalness The metalness, between 0 (non-metalic) and 1 (metalic).\r\n * @param reflectivity The reflectivity, between 0 (non-reflective) and 1 (reflective).\r\n * @returns void\r\n */\r\nexport function Standard(__model__: GIModel, name: string,\r\n            emissive: Txyz,\r\n            roughness: number,\r\n            metalness: number\r\n        ): void {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'material.Standard';\r\n        checkArgs(fn_name, 'name', name, [ArgCh.isStr]);\r\n        checkArgs(fn_name, 'emissive', emissive, [ArgCh.isXYZ]);\r\n        checkArgs(fn_name, 'roughness', roughness, [ArgCh.isNum]);\r\n        checkArgs(fn_name, 'metalness', metalness, [ArgCh.isNum]);\r\n    }\r\n    // --- Error Check ---\r\n    _clampArr01(emissive);\r\n    roughness = _clamp01(roughness);\r\n    metalness = _clamp01(metalness);\r\n\r\n    const settings_obj = {\r\n        type: _EMaterialType.STANDARD,\r\n        emissive: _getTjsColor(emissive),\r\n        roughness: roughness,\r\n        metalness: metalness\r\n    };\r\n    _setMaterialModelAttrib(__model__, name, settings_obj);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Creates a Physical material and saves it in the model attributes.\r\n * If a Basic material with the same name already exits, these settings will be added to the basic material.\r\n * ~\r\n * [See the threejs docs](https://threejs.org/docs/#api/en/materials/MeshPhysicalMaterial)\r\n * ~\r\n * In order to assign a material to polygons in the model, a polygon attribute called 'material'\r\n * needs to be created. The value for each polygon must either be null, or must be a material name.\r\n * ~\r\n * @param name The name of the material.\r\n * @param emissive The emissive color, as [r, g, b] values between 0 and 1. White is [1, 1, 1].\r\n * @param roughness The roughness, between 0 (smooth) and 1 (rough).\r\n * @param metalness The metalness, between 0 (non-metalic) and 1 (metalic).\r\n * @param reflectivity The reflectivity, between 0 (non-reflective) and 1 (reflective).\r\n * @returns void\r\n */\r\nexport function Physical(__model__: GIModel, name: string,\r\n            emissive: Txyz,\r\n            roughness: number,\r\n            metalness: number,\r\n            reflectivity: number\r\n        ): void {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'material.Physical';\r\n        checkArgs(fn_name, 'name', name, [ArgCh.isStr]);\r\n        checkArgs(fn_name, 'emissive', emissive, [ArgCh.isXYZ]);\r\n        checkArgs(fn_name, 'roughness', roughness, [ArgCh.isNum]);\r\n        checkArgs(fn_name, 'metalness', metalness, [ArgCh.isNum]);\r\n        checkArgs(fn_name, 'reflectivity', reflectivity, [ArgCh.isNum]);\r\n    }\r\n    // --- Error Check ---\r\n    _clampArr01(emissive);\r\n    roughness = _clamp01(roughness);\r\n    metalness = _clamp01(metalness);\r\n    reflectivity = _clamp01(reflectivity);\r\n\r\n    const settings_obj = {\r\n        type: _EMaterialType.PHYSICAL,\r\n        emissive: _getTjsColor(emissive),\r\n        roughness: roughness,\r\n        metalness: metalness,\r\n        reflectivity: reflectivity\r\n    };\r\n    _setMaterialModelAttrib(__model__, name, settings_obj);\r\n}\r\n// ================================================================================================\r\n","/**\r\n * The `modify` module has functions for modifying existing entities in the model.\r\n * These functions do not make any new entities, but they may change attribute values.\r\n * All these functions all return void.\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { TId, TPlane, Txyz, EEntType, TEntTypeIdx, TRay, IEntSets} from '@libs/geo-info/common';\r\nimport { getArrDepth, isEmptyArr, idsBreak } from '@libs/geo-info/id';\r\nimport { vecAdd, vecSum, vecDiv, vecFromTo, vecNorm, vecCross, vecSetLen, vecLen, vecDot } from '@libs/geom/vectors';\r\nimport { rotateMatrix, multMatrix, scaleMatrix, mirrorMatrix, xfromSourceTargetMatrix } from '@libs/geom/matrix';\r\nimport { Matrix4 } from 'three';\r\nimport { arrMakeFlat, isEmptyArr2 } from '@assets/libs/util/arrs';\r\nimport { getRay, getPlane } from './_common';\r\nimport * as THREE from 'three';\r\nimport { TypedArrayUtils } from '@libs/TypedArrayUtils.js';\r\n\r\n// ================================================================================================\r\n/**\r\n * Moves entities. The directio and distance if movement is specified as a vector.\r\n * ~\r\n * If only one vector is given, then all entities are moved by the same vector.\r\n * If a list of vectors is given, the each entity will be moved by a different vector.\r\n * In this case, the number of vectors should be equal to the number of entities.\r\n * ~\r\n * If a position is shared between entites that are being moved by different vectors,\r\n * then the position will be moved by the average of the vectors.\r\n * ~\r\n * @param __model__\r\n * @param entities An entity or list of entities to move.\r\n * @param vector A vector or a list of vectors.\r\n * @returns void\r\n * @example modify.Move(pline1, [1,2,3])\r\n * @example_info Moves pline1 by [1,2,3].\r\n * @example modify.Move([pos1, pos2, pos3], [[0,0,1], [0,0,1], [0,1,0]] )\r\n * @example_info Moves pos1 by [0,0,1], pos2 by [0,0,1], and pos3 by [0,1,0].\r\n * @example modify.Move([pgon1, pgon2], [1,2,3] )\r\n * @example_info Moves both pgon1 and pgon2 by [1,2,3].\r\n */\r\nexport function Move(__model__: GIModel, entities: TId|TId[], vectors: Txyz|Txyz[]): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        const fn_name = 'modify.Move';\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n            checkArgs(fn_name, 'vectors', vectors, [ArgCh.isXYZ, ArgCh.isXYZL]);\r\n        } else {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList],\r\n            // [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n            // EEntType.FACE, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        // --- Error Check ---\r\n        _move(__model__, ents_arr, vectors);\r\n    }\r\n}\r\nfunction _move(__model__: GIModel, ents_arr: TEntTypeIdx[], vectors: Txyz|Txyz[]): void {\r\n    if (getArrDepth(vectors) === 1) {\r\n        const posis_i: number[] = [];\r\n        const vec: Txyz = vectors as Txyz;\r\n        for (const ents of ents_arr) {\r\n            __model__.modeldata.geom.nav.navAnyToPosi(ents[0], ents[1]).forEach(posi_i => posis_i.push(posi_i));\r\n        }\r\n        const unique_posis_i: number[] = Array.from(new Set(posis_i));\r\n        for (const unique_posi_i of unique_posis_i) {\r\n            const old_xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(unique_posi_i);\r\n            const new_xyz: Txyz = vecAdd(old_xyz, vec);\r\n            __model__.modeldata.attribs.add.setPosiCoords(unique_posi_i, new_xyz);\r\n        }\r\n    } else {\r\n        if (ents_arr.length !== vectors.length) {\r\n            throw new Error('If multiple vectors are given, then the number of vectors must be equal to the number of entities.');\r\n        }\r\n        const posis_i: number[] = [];\r\n        const vecs_map: Map<number, Txyz[]> = new Map();\r\n        for (let i = 0; i < ents_arr.length; i++) {\r\n            const [ent_type, index]: [EEntType, number] = ents_arr[i] as TEntTypeIdx;\r\n            const vec: Txyz = vectors[i] as Txyz;\r\n            const ent_posis_i: number [] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, index);\r\n            for (const ent_posi_i of ent_posis_i) {\r\n                posis_i.push(ent_posi_i);\r\n                if (! vecs_map.has(ent_posi_i)) {\r\n                    vecs_map.set(ent_posi_i, []);\r\n                }\r\n                vecs_map.get(ent_posi_i).push(vec);\r\n            }\r\n        }\r\n        for (const posi_i of posis_i) {\r\n            const old_xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n            const vecs: Txyz[] = vecs_map.get(posi_i);\r\n            const vec: Txyz = vecDiv( vecSum( vecs ), vecs.length);\r\n            const new_xyz: Txyz = vecAdd(old_xyz, vec);\r\n            __model__.modeldata.attribs.add.setPosiCoords(posi_i, new_xyz);\r\n        }\r\n    }\r\n    return; // specifies that nothing is returned\r\n}\r\n// ================================================================================================\r\n/**\r\n * Rotates entities on plane by angle.\r\n * ~\r\n * @param __model__\r\n * @param entities  An entity or list of entities to rotate.\r\n * @param ray A ray to rotate around. \\\r\n * Given a plane, a ray will be created from the plane z axis. \\\r\n * Given an `xyz` location, a ray will be generated with an origin at this location, and a direction `[0, 0, 1]`. \\\r\n * Given any entities, the centroid will be extracted, \\\r\n * and a ray will be generated with an origin at this centroid, and a direction `[0, 0, 1]`.\r\n * @param angle Angle (in radians).\r\n * @returns void\r\n * @example modify.Rotate(polyline1, plane1, PI)\r\n * @example_info Rotates polyline1 around the z-axis of plane1 by PI (i.e. 180 degrees).\r\n */\r\nexport function Rotate(__model__: GIModel, entities: TId|TId[], ray: Txyz|TRay|TPlane|TId|TId[], angle: number): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        const fn_name = 'modify.Rotate';\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL],\r\n                [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n                EEntType.FACE, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            checkArgs(fn_name, 'angle', angle, [ArgCh.isNum]);\r\n        } else {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList],\r\n            //     [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n            //     EEntType.FACE, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        ray = getRay(__model__, ray, fn_name) as TRay;\r\n        // --- Error Check ---\r\n        _rotate(__model__, ents_arr, ray, angle);\r\n    }\r\n}\r\nfunction _rotate(__model__: GIModel, ents_arr: TEntTypeIdx[], ray: TRay, angle: number): void {\r\n    // rotate all positions\r\n    const posis_i: number[] = [];\r\n    for (const ents of ents_arr) {\r\n        posis_i.push(...__model__.modeldata.geom.nav.navAnyToPosi(ents[0], ents[1]));\r\n    }\r\n    const unique_posis_i: number[] = Array.from(new Set(posis_i));\r\n    const matrix: Matrix4 = rotateMatrix(ray, angle);\r\n    for (const unique_posi_i of unique_posis_i) {\r\n        const old_xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(unique_posi_i);\r\n        const new_xyz: Txyz = multMatrix(old_xyz, matrix);\r\n        __model__.modeldata.attribs.add.setPosiCoords(unique_posi_i, new_xyz);\r\n    }\r\n    return; // specifies that nothing is returned\r\n}\r\n// ================================================================================================\r\n/**\r\n * Scales entities relative to a plane.\r\n * ~\r\n * @param __model__\r\n * @param entities  An entity or list of entities to scale.\r\n * @param plane A plane to scale around. \\\r\n * Given a ray, a plane will be generated that is perpendicular to the ray. \\\r\n * Given an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\\r\n * Given any entities, the centroid will be extracted, \\\r\n * and a plane will be generated with an origin at the centroid, and with axes parallel to the global axes.\r\n * @param scale Scale factor, a single number to scale equally, or [scale_x, scale_y, scale_z] relative to the plane.\r\n * @returns void\r\n * @example modify.Scale(entities, plane1, 0.5)\r\n * @example_info Scales entities by 0.5 on plane1.\r\n * @example modify.Scale(entities, plane1, [0.5, 1, 1])\r\n * @example_info Scales entities by 0.5 along the x axis of plane1, with no scaling along the y and z axes.\r\n */\r\nexport function Scale(__model__: GIModel, entities: TId|TId[], plane: Txyz|TRay|TPlane|TId|TId[], scale: number|Txyz): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        const fn_name = 'modify.Scale';\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL],\r\n                [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n                EEntType.FACE, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            checkArgs(fn_name, 'scale', scale, [ArgCh.isNum, ArgCh.isXYZ]);\r\n        } else {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList],\r\n            //     [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n            //     EEntType.FACE, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        plane = getPlane(__model__, plane, fn_name) as TPlane;\r\n        // --- Error Check ---\r\n        _scale(__model__, ents_arr, plane, scale);\r\n    }\r\n}\r\nfunction _scale(__model__: GIModel, ents_arr: TEntTypeIdx[], plane: TPlane, scale: number|Txyz): void {\r\n    // handle scale type\r\n    if (!Array.isArray(scale)) {\r\n        scale = [scale, scale, scale];\r\n    }\r\n    // scale all positions\r\n    const posis_i: number[] = [];\r\n    for (const ents of ents_arr) {\r\n        posis_i.push(...__model__.modeldata.geom.nav.navAnyToPosi(ents[0], ents[1]));\r\n    }\r\n    const unique_posis_i: number[] = Array.from(new Set(posis_i));\r\n    const matrix: Matrix4 = scaleMatrix(plane, scale);\r\n    for (const unique_posi_i of unique_posis_i) {\r\n        const old_xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(unique_posi_i);\r\n        const new_xyz: Txyz = multMatrix(old_xyz, matrix);\r\n        __model__.modeldata.attribs.add.setPosiCoords(unique_posi_i, new_xyz);\r\n    }\r\n    return; // specifies that nothing is returned\r\n}\r\n// ================================================================================================\r\n/**\r\n * Mirrors entities across a plane.\r\n * ~\r\n * @param __model__\r\n * @param entities An entity or list of entities to mirros.\r\n * @param plane A plane to scale around. \\\r\n * Given a ray, a plane will be generated that is perpendicular to the ray. \\\r\n * Given an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\\r\n * Given any entities, the centroid will be extracted, \\\r\n * and a plane will be generated with an origin at the centroid, and with axes parallel to the global axes.\r\n * @returns void\r\n * @example modify.Mirror(polygon1, plane1)\r\n * @example_info Mirrors polygon1 across plane1.\r\n */\r\nexport function Mirror(__model__: GIModel, entities: TId|TId[], plane: Txyz|TRay|TPlane|TId|TId[]): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        const fn_name = 'modify.Mirror';\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL],\r\n                [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n                EEntType.FACE, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        } else {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList],\r\n            //     [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n            //     EEntType.FACE, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        plane = getPlane(__model__, plane, fn_name) as TPlane;\r\n        // --- Error Check ---\r\n        _mirror(__model__, ents_arr, plane);\r\n    }\r\n}\r\nfunction _mirror(__model__: GIModel, ents_arr: TEntTypeIdx[], plane: TPlane): void {\r\n    // mirror all positions\r\n    const posis_i: number[] = [];\r\n    for (const ents of ents_arr) {\r\n        const [ent_type, index]: TEntTypeIdx = ents as TEntTypeIdx;\r\n        posis_i.push(...__model__.modeldata.geom.nav.navAnyToPosi(ent_type, index));\r\n    }\r\n    const unique_posis_i: number[] = Array.from(new Set(posis_i));\r\n    const matrix: Matrix4 = mirrorMatrix(plane);\r\n    for (const unique_posi_i of unique_posis_i) {\r\n        const old_xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(unique_posi_i);\r\n        const new_xyz: Txyz = multMatrix(old_xyz, matrix);\r\n        __model__.modeldata.attribs.add.setPosiCoords(unique_posi_i, new_xyz);\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Transforms entities from a source plane to a target plane.\r\n * ~\r\n * @param __model__\r\n * @param entities Vertex, edge, wire, face, position, point, polyline, polygon, collection.\r\n * @param from_plane Plane defining source plane for the transformation. \\\r\n * Given a ray, a plane will be generated that is perpendicular to the ray. \\\r\n * Given an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\\r\n * Given any entities, the centroid will be extracted, \\\r\n * and a plane will be generated with an origin at the centroid, and with axes parallel to the global axes.\r\n * @param to_plane Plane defining target plane for the transformation. \\\r\n * Given a ray, a plane will be generated that is perpendicular to the ray. \\\r\n * Given an `xyz` location, a plane will be generated with an origin at that location and with axes parallel to the global axes. \\\r\n * Given any entities, the centroid will be extracted, \\\r\n * and a plane will be generated with an origin at the centroid, and with axes parallel to the global axes.\r\n * @returns void\r\n * @example modify.XForm(polygon1, plane1, plane2)\r\n * @example_info Transforms polygon1 from plane1 to plane2.\r\n */\r\nexport function XForm(__model__: GIModel, entities: TId|TId[],\r\n        from_plane: Txyz|TRay|TPlane|TId|TId[], to_plane: Txyz|TRay|TPlane|TId|TId[]): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        const fn_name = 'modify.XForm';\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL],\r\n                [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n                EEntType.FACE, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        } else {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList],\r\n            //     [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE,\r\n            //     EEntType.FACE, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        from_plane = getPlane(__model__, from_plane, fn_name) as TPlane;\r\n        to_plane = getPlane(__model__, to_plane, fn_name) as TPlane;\r\n        // --- Error Check ---\r\n        _xform(__model__, ents_arr, from_plane, to_plane);\r\n    }\r\n}\r\nfunction _xform(__model__: GIModel, ents_arr: TEntTypeIdx[], from: TPlane, to: TPlane): void {\r\n    // xform all positions\r\n    const posis_i: number[] = [];\r\n    for (const ents of ents_arr) {\r\n        const [ent_type, index]: [EEntType, number] = ents as TEntTypeIdx;\r\n        posis_i.push(...__model__.modeldata.geom.nav.navAnyToPosi(ent_type, index));\r\n    }\r\n    const unique_posis_i: number[] = Array.from(new Set(posis_i));\r\n    const matrix: Matrix4 = xfromSourceTargetMatrix(from, to);\r\n    for (const unique_posi_i of unique_posis_i) {\r\n        const old_xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(unique_posi_i);\r\n        const new_xyz: Txyz = multMatrix(old_xyz, matrix);\r\n        __model__.modeldata.attribs.add.setPosiCoords(unique_posi_i, new_xyz);\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Offsets wires.\r\n * ~\r\n * @param __model__\r\n * @param entities Edges, wires, faces, polylines, polygons, collections.\r\n * @param dist The distance to offset by, can be either positive or negative\r\n * @returns void\r\n * @example modify.Offset(polygon1, 10)\r\n * @example_info Offsets the wires inside polygon1 by 10 units. Holes will also be offset.\r\n */\r\nexport function Offset(__model__: GIModel, entities: TId|TId[], dist: number): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        const fn_name = 'modify.Offset';\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL],\r\n                [EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            checkArgs(fn_name, 'dist', dist, [ArgCh.isNum]);\r\n        } else {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList],\r\n            //     [EEntType.WIRE, EEntType.FACE, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        // --- Error Check ---\r\n        _offset(__model__, ents_arr, dist);\r\n    }\r\n}\r\nfunction _offset(__model__: GIModel, ents_arr: TEntTypeIdx[], dist: number): void {\r\n    // get all wires and offset\r\n    const pgons_i: number[] = [];\r\n    for (const ents of ents_arr) {\r\n        const [ent_type, index]: [EEntType, number] = ents as TEntTypeIdx;\r\n        const wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(ent_type, index);\r\n        for (const wire_i of wires_i) {\r\n            _offsetWire(__model__, wire_i, dist);\r\n        }\r\n        // save all pgons for re-tri\r\n        const pgon_i: number[] = __model__.modeldata.geom.nav.navAnyToPgon(ent_type, index);\r\n        if (pgon_i.length === 1) {\r\n            if (pgons_i.indexOf(pgon_i[0]) === -1) {\r\n                pgons_i.push(pgon_i[0]);\r\n            }\r\n        }\r\n    }\r\n    // re-tri all polygons\r\n    if (pgons_i.length > 0) {\r\n        __model__.modeldata.geom.modify_pgon.triPgons(pgons_i);\r\n    }\r\n}\r\nfunction _offsetWire(__model__: GIModel, wire_i: number, dist: number): void {\r\n    // get the normal of the wire\r\n    const vec_norm: Txyz = __model__.modeldata.geom.query.getWireNormal(wire_i);\r\n    // if (vecLen(vec_norm) === 0) {\r\n    //     vec_norm = [0, 0, 1];\r\n    // }\r\n    // loop through all edges and collect the required data\r\n    const edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(EEntType.WIRE, wire_i).slice(); // make a copy\r\n    const is_closed: boolean = __model__.modeldata.geom.query.isWireClosed(wire_i);\r\n    // the index to these arrays is the edge_i\r\n    let perp_vec: Txyz = null;\r\n    let has_bad_edges = false;\r\n    const perp_vecs: Txyz[] = [];       // index is edge_i\r\n    const pairs_xyzs: [Txyz, Txyz][] = [];        // index is edge_i\r\n    const pairs_posis_i: [number, number][] = [];   // index is edge_i\r\n    for (const edge_i of edges_i) {\r\n        const posis_i: [number, number] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i) as [number, number];\r\n        const xyzs: [Txyz, Txyz] = posis_i.map(posi_i => __model__.modeldata.attribs.query.getPosiCoords(posi_i)) as [Txyz, Txyz];\r\n        const edge_vec: Txyz = vecFromTo(xyzs[0], xyzs[1]);\r\n        const edge_len: number = vecLen(edge_vec);\r\n        pairs_xyzs[edge_i] = xyzs;\r\n        pairs_posis_i[edge_i] = posis_i;\r\n        if (edge_len > 0) {\r\n            perp_vec = vecCross(vecNorm(edge_vec), vec_norm);\r\n        } else {\r\n            if (perp_vec === null) {\r\n                has_bad_edges = true;\r\n            }\r\n        }\r\n        perp_vecs[edge_i] = perp_vec;\r\n    }\r\n    // fix any bad edges, by setting the perp vec to its next neighbour\r\n    if (has_bad_edges) {\r\n        if (perp_vecs[perp_vecs.length - 1] === null) {\r\n            throw new Error('Error: could not offset wire.');\r\n        }\r\n        for (let i = perp_vecs.length - 1; i >= 0; i--) {\r\n            if (perp_vecs[i] === null) {\r\n                perp_vecs[i] = perp_vec;\r\n            } else {\r\n                perp_vec = perp_vecs[i];\r\n            }\r\n        }\r\n    }\r\n    // add edge if this is a closed wire\r\n    // make sure the edges_i is a copy, otherwise we are pushing into the model data structure\r\n    if (is_closed) {\r\n        edges_i.push(edges_i[0]); // add to the end\r\n    }\r\n    // loop through all the valid edges\r\n    for (let i = 0; i < edges_i.length - 1; i++) {\r\n        // get the two edges\r\n        const this_edge_i: number = edges_i[i];\r\n        const next_edge_i: number = edges_i[i + 1];\r\n        // get the end posi_i and xyz of this edge\r\n        const posi_i: number = pairs_posis_i[this_edge_i][1];\r\n        const old_xyz: Txyz = pairs_xyzs[this_edge_i][1];\r\n        // get the two perpendicular vectors\r\n        const this_perp_vec: Txyz = perp_vecs[this_edge_i];\r\n        const next_perp_vec: Txyz = perp_vecs[next_edge_i];\r\n        // calculate the offset vector\r\n        let offset_vec: Txyz = vecNorm(vecAdd(this_perp_vec, next_perp_vec));\r\n        const dot: number = vecDot(this_perp_vec, offset_vec);\r\n        const vec_len = dist / dot;\r\n        offset_vec = vecSetLen(offset_vec, vec_len);\r\n        // move the posi\r\n        const new_xyz: Txyz = vecAdd(old_xyz, offset_vec);\r\n        __model__.modeldata.attribs.add.setPosiCoords(posi_i, new_xyz);\r\n    }\r\n    // if this is not a closed wire we have to move first and last posis\r\n    if (!is_closed) {\r\n        // first posi\r\n        const first_edge_i: number = edges_i[0];\r\n        const first_posi_i: number = pairs_posis_i[first_edge_i][0];\r\n        const first_old_xyz: Txyz = pairs_xyzs[first_edge_i][0];\r\n        const first_perp_vec: Txyz =  vecSetLen(perp_vecs[first_edge_i], dist);\r\n        const first_new_xyz: Txyz = vecAdd(first_old_xyz, first_perp_vec);\r\n        __model__.modeldata.attribs.add.setPosiCoords(first_posi_i, first_new_xyz);\r\n        // last posi\r\n        const last_edge_i: number = edges_i[edges_i.length - 1];\r\n        const last_posi_i: number = pairs_posis_i[last_edge_i][1];\r\n        const last_old_xyz: Txyz = pairs_xyzs[last_edge_i][1];\r\n        const last_perp_vec: Txyz =  vecSetLen(perp_vecs[last_edge_i], dist);\r\n        const last_new_xyz: Txyz = vecAdd(last_old_xyz, last_perp_vec);\r\n        __model__.modeldata.attribs.add.setPosiCoords(last_posi_i, last_new_xyz);\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Reverses direction of entities.\r\n * @param __model__\r\n * @param entities Wire, face, polyline, polygon.\r\n * @returns void\r\n * @example modify.Reverse(face1)\r\n * @example_info Flips face1 and reverses its normal.\r\n * @example modify.Reverse(polyline1)\r\n * @example_info Reverses the order of vertices to reverse the direction of the polyline.\r\n */\r\nexport function Reverse(__model__: GIModel, entities: TId|TId[]): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs('modify.Reverse', 'entities', entities,\r\n                [IdCh.isId, IdCh.isIdL],\r\n                [EEntType.WIRE, EEntType.PLINE, EEntType.FACE, EEntType.PGON])  as TEntTypeIdx[];\r\n        } else {\r\n            // ents_arr = splitIDs('modify.Reverse', 'entities', entities,\r\n            //     [IDcheckObj.isID, IDcheckObj.isIDList],\r\n            //     [EEntType.WIRE, EEntType.PLINE, EEntType.FACE, EEntType.PGON])  as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        // --- Error Check ---\r\n        _reverse(__model__, ents_arr);\r\n    }\r\n}\r\nfunction _reverse(__model__: GIModel, ents_arr: TEntTypeIdx[]): void {\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        const wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(ent_type, ent_i);\r\n        wires_i.forEach( wire_i => __model__.modeldata.geom.modify.reverse(wire_i) );\r\n        __model__.modeldata.geom.time_stamp.updateObjsTs(ent_type, ent_i);\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Shifts the order of the edges in a closed wire.\r\n * ~\r\n * In a closed wire, any edge (or vertex) could be the first edge of the ring.\r\n * In some cases, it is useful to have an edge in a particular position in a ring.\r\n * This function allows the edges to be shifted either forwards or backwards around the ring.\r\n * The order of the edges in the ring will remain unchanged.\r\n *\r\n * @param __model__\r\n * @param entities Wire, face, polyline, polygon.\r\n * @returns void\r\n * @example modify.Shift(face1, 1)\r\n * @example_info Shifts the edges in the face wire, so that the every edge moves up by one position\r\n * in the ring. The last edge will become the first edge .\r\n * @example modify.Shift(polyline1, -1)\r\n * @example_info Shifts the edges in the closed polyline wire, so that every edge moves back by one position\r\n * in the ring. The first edge will become the last edge.\r\n */\r\nexport function Shift(__model__: GIModel, entities: TId|TId[], offset: number): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs('modify.Reverse', 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL],\r\n            [EEntType.WIRE, EEntType.PLINE, EEntType.FACE, EEntType.PGON])  as TEntTypeIdx[];\r\n        } else {\r\n            // ents_arr = splitIDs('modify.Reverse', 'entities', entities,\r\n            // [IDcheckObj.isID, IDcheckObj.isIDList],\r\n            // [EEntType.WIRE, EEntType.PLINE, EEntType.FACE, EEntType.PGON])  as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        // --- Error Check ---\r\n        _shift(__model__, ents_arr, offset);\r\n    }\r\n}\r\nfunction _shift(__model__: GIModel, ents_arr: TEntTypeIdx[], offset: number): void {\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        const wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(ent_type, ent_i);\r\n        wires_i.forEach( wire_i => __model__.modeldata.geom.modify.shift(wire_i, offset) );\r\n        __model__.modeldata.geom.time_stamp.updateObjsTs(ent_type, ent_i);\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Opens or closes a polyline.\r\n * ~\r\n * @param __model__\r\n * @param lines Polyline(s).\r\n * @returns void\r\n * @example modify.Close([polyline1,polyline2,...], method='close')\r\n * @example_info If open, polylines are changed to closed; if already closed, nothing happens.\r\n */\r\nexport function Ring(__model__: GIModel, entities: TId|TId[], method: _ERingMethod): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        const fn_name = 'modify.Ring';\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], [EEntType.PLINE]) as TEntTypeIdx[];\r\n        } else {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n            // [IDcheckObj.isID, IDcheckObj.isIDList], [EEntType.PLINE]) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        // --- Error Check ---\r\n        _ring(__model__, ents_arr, method);\r\n    }\r\n}\r\nexport enum _ERingMethod {\r\n    OPEN =  'open',\r\n    CLOSE  =  'close',\r\n}\r\nfunction _ring(__model__: GIModel, ents_arr: TEntTypeIdx[], method: _ERingMethod): void {\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        switch (method) {\r\n            case _ERingMethod.CLOSE:\r\n                __model__.modeldata.geom.modify_pline.closePline(ent_i);\r\n                break;\r\n            case _ERingMethod.OPEN:\r\n                __model__.modeldata.geom.modify_pline.openPline(ent_i);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        __model__.modeldata.geom.time_stamp.updateObjsTs(ent_type, ent_i);\r\n    }\r\n}\r\n// ================================================================================================\r\nexport enum _EWeldMethod {\r\n    MAKE_WELD =  'make_weld',\r\n    BREAK_WELD  =  'break_weld',\r\n}\r\n/**\r\n * Make or break welds between vertices.\r\n * If two vertices are welded, then they share the same position.\r\n * ~\r\n * @param __model__\r\n * @param entities Entities, a list of vertices, or entities from which vertices can be extracted.\r\n * @param method Enum; the method to use for welding.\r\n * @returns void\r\n */\r\nexport function Weld(__model__: GIModel, entities: TId|TId[], method: _EWeldMethod): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'modify.Weld';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL],\r\n            [EEntType.VERT, EEntType.EDGE, EEntType.WIRE, EEntType.FACE,\r\n            EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        //     [EEntType.VERT, EEntType.EDGE, EEntType.WIRE, EEntType.FACE,\r\n        //     EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    _weld(__model__, ents_arr, method);\r\n}\r\nfunction _weld(__model__: GIModel, ents_arr: TEntTypeIdx[], method: _EWeldMethod): void {\r\n    // get unique ents\r\n    const map: Map<number, Set<number>> = __model__.modeldata.geom.query.getEntSets(ents_arr,\r\n        [EEntType.VERT, EEntType.POINT, EEntType.PLINE, EEntType.PGON] );\r\n    // time stamp\r\n    __model__.modeldata.geom.time_stamp.updateEntsTs(EEntType.POINT, map.get(EEntType.POINT));\r\n    __model__.modeldata.geom.time_stamp.updateEntsTs(EEntType.PLINE, map.get(EEntType.PLINE));\r\n    __model__.modeldata.geom.time_stamp.updateEntsTs(EEntType.PGON, map.get(EEntType.PGON));\r\n    // get verts_i\r\n    const all_verts_i: number[] = Array.from(map.get(EEntType.VERT));\r\n    switch (method) {\r\n        case _EWeldMethod.BREAK_WELD:\r\n            __model__.modeldata.geom.modify.cloneVertPositions(all_verts_i);\r\n            break;\r\n        case _EWeldMethod.MAKE_WELD:\r\n            __model__.modeldata.geom.modify.mergeVertPositions(all_verts_i);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Fuse positions that lie within a certain tolerance of one another.\r\n * New positions will be created.\r\n * If the positions that are fuse have vertices attached, then the vertices will become welded.\r\n * ~\r\n * In some cases, if edges are shorter than the tolerance, this can result in edges being deleted.\r\n * The deletion of edges may also result in polylines or polygpns being deleted.\r\n * ~\r\n * @param __model__\r\n * @param entities Entities, a list of positions, or entities from which positions can be extracted.\r\n * @param tolerance The distance tolerance for fusing positions.\r\n *  @returns void\r\n */\r\nexport function Fuse(__model__: GIModel, entities: TId|TId[], tolerance: number): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'modify.Fuse';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    _fuse(__model__, ents_arr, tolerance);\r\n}\r\nfunction _fuseDistSq(xyz1: number[], xyz2: number[]): number {\r\n    return Math.pow(xyz1[0] - xyz2[0], 2) +  Math.pow(xyz1[1] - xyz2[1], 2) +  Math.pow(xyz1[2] - xyz2[2], 2);\r\n}\r\nfunction _fuse(__model__: GIModel, ents_arr: TEntTypeIdx[], tolerance: number): void {\r\n    // get unique ents\r\n    const map: Map<number, Set<number>> = __model__.modeldata.geom.query.getEntSets(ents_arr,\r\n        [EEntType.POSI, EEntType.POINT, EEntType.PLINE, EEntType.PGON] );\r\n    // time stamp\r\n    __model__.modeldata.geom.time_stamp.updateEntsTs(EEntType.POINT, map.get(EEntType.POINT));\r\n    __model__.modeldata.geom.time_stamp.updateEntsTs(EEntType.PLINE, map.get(EEntType.PLINE));\r\n    __model__.modeldata.geom.time_stamp.updateEntsTs(EEntType.PGON, map.get(EEntType.PGON));\r\n    // get posis\r\n    const posis_i: number[] = Array.from(map.get(EEntType.POSI));\r\n    // find neighbour\r\n    const map_posi_i_to_xyz: Map<number, Txyz> = new Map();\r\n    const typed_positions = new Float32Array( posis_i.length * 4 );\r\n    const typed_buff = new THREE.BufferGeometry();\r\n    typed_buff.setAttribute( 'position', new THREE.BufferAttribute( typed_positions, 4 ) );\r\n    for (let i = 0; i < posis_i.length; i++) {\r\n        const posi_i: number = posis_i[i];\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        map_posi_i_to_xyz.set(posi_i, xyz);\r\n        typed_positions[ i * 4 + 0 ] = xyz[0];\r\n        typed_positions[ i * 4 + 1 ] = xyz[1];\r\n        typed_positions[ i * 4 + 2 ] = xyz[2];\r\n        typed_positions[ i * 4 + 3 ] = posi_i;\r\n    }\r\n    const kdtree = new TypedArrayUtils.Kdtree( typed_positions, _fuseDistSq, 4 );\r\n    // create a neighbours list\r\n    const nns: [number, number, number[]][] = []; // [posi_i, num_neighbours, neighbour_poisi_i]\r\n    for (let i = 0; i < posis_i.length; i++) {\r\n        const posi_i: number = posis_i[i];\r\n        const nn = kdtree.nearest( map_posi_i_to_xyz.get(posi_i) as any, posis_i.length, tolerance * tolerance );\r\n        const nn_posis_i: number[] = [];\r\n        for (const a_nn of nn) {\r\n            const obj: object = a_nn[0].obj;\r\n            const nn_posi_i: number = obj[3];\r\n            nn_posis_i.push(nn_posi_i);\r\n        }\r\n        nns.push([posis_i[i], nn_posis_i.length, nn_posis_i]);\r\n    }\r\n    // sort so that positions with most neighbours win\r\n    nns.sort( (a, b) => b[1] - a[1] );\r\n    // create new positions, replace posis for existing vertices\r\n    const nns_filt: [number, number, number[]][] = []; // [posi_i, num_neighbours, neighbour_poisi_i]\r\n    const exclude_posis_i: Set<number> = new Set(); // exclude any posis that have already been moved\r\n    for (const nn of nns) {\r\n        if (!exclude_posis_i.has(nn[0]) && nn[1] > 1) {\r\n            nns_filt.push(nn);\r\n            const new_xyz: Txyz = [0, 0, 0];\r\n            for (const n_posi_i of nn[2]) {\r\n                exclude_posis_i.add(n_posi_i);\r\n                const xyz: Txyz = map_posi_i_to_xyz.get(n_posi_i);\r\n                new_xyz[0] += xyz[0];\r\n                new_xyz[1] += xyz[1];\r\n                new_xyz[2] += xyz[2];\r\n            }\r\n            new_xyz[0] = new_xyz[0] / nn[1];\r\n            new_xyz[1] = new_xyz[1] / nn[1];\r\n            new_xyz[2] = new_xyz[2] / nn[1];\r\n            const new_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n            __model__.modeldata.attribs.add.setPosiCoords(new_posi_i, new_xyz);\r\n            for (const n_posi_i of nn[2]) {\r\n                const verts_i: number[] = __model__.modeldata.geom.nav.navPosiToVert(n_posi_i);\r\n                for (const vert_i of verts_i) {\r\n                    __model__.modeldata.geom.modify.replaceVertPosi(vert_i, new_posi_i);\r\n                }\r\n                // __model__.modeldata.geom.add.addPline([new_posi_i, n_posi_i], false); // temp\r\n            }\r\n        }\r\n    }\r\n    // delete the posis if they are unused\r\n    __model__.modeldata.geom.del.delUnusedPosis(Array.from(exclude_posis_i));\r\n}\r\n// ================================================================================================\r\n/**\r\n * Remesh a face or polygon.\r\n * ~\r\n * When a face or polygon is deformed, the triangles that make up that face will sometimes become incorrect.\r\n * Remeshing will regenerate the triangulated mesh for the face.\r\n * Remeshing is not performed automatically as it would degrade performance.\r\n * Instead, it is left up to the user to remesh only when it is actually required.\r\n * ~\r\n * @param __model__\r\n * @param entities Single or list of faces, polygons, collections.\r\n * @returns void\r\n * @example modify.Remesh(polygon1)\r\n * @example_info Remeshs the face of the polygon.\r\n */\r\nexport function Remesh(__model__: GIModel, entities: TId[]): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        let ents_arr: TEntTypeIdx[];\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs('modify.Remesh', 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], [EEntType.FACE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        } else {\r\n            // ents_arr = splitIDs('modify.Remesh', 'entities', entities,\r\n            // [IDcheckObj.isID, IDcheckObj.isIDList], [EEntType.FACE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        // --- Error Check ---\r\n        _remesh(__model__, ents_arr);\r\n    }\r\n}\r\nfunction _remesh(__model__: GIModel, ents_arr: TEntTypeIdx[]): void {\r\n    for (const [ent_type, index] of ents_arr) {\r\n        if (ent_type === EEntType.PGON) {\r\n            __model__.modeldata.geom.modify_pgon.triPgons(index);\r\n        } else {\r\n            const pgons_i: number[] = __model__.modeldata.geom.nav.navAnyToPgon(ent_type, index);\r\n            __model__.modeldata.geom.modify_pgon.triPgons(pgons_i);\r\n        }\r\n    }\r\n    // time stamp is updated by triPgons()\r\n}\r\n\r\n// ================================================================================================\r\nexport enum _EDeleteMethod {\r\n    DELETE_SELECTED  =  'delete_selected',\r\n    KEEP_SELECTED =  'keep_selected'\r\n}\r\n/**\r\n * Deletes geometric entities: positions, points, polylines, polygons, and collections.\r\n * ~\r\n * When deleting positions, any topology that requires those positions will also be deleted.\r\n * (For example, any vertices linked to the deleted position will also be deleted,\r\n * which may in turn result in some edges being deleted, and so forth.)\r\n * ~\r\n * When deleting objects (point, polyline, and polygons), topology is also deleted.\r\n * ~\r\n * When deleting collections, the objects and other collections in the collection are also deleted.\r\n * ~\r\n * @param __model__\r\n * @param entities Positions, points, polylines, polygons, collections.\r\n * @param method Enum, delete or keep unused positions.\r\n * @returns void\r\n * @example modify.Delete(polygon1, 'delete_selected')\r\n * @example_info Deletes polygon1 from the model.\r\n */\r\nexport function Delete(__model__: GIModel, entities: TId|TId[], method: _EDeleteMethod): void {\r\n    if (entities === null) {\r\n        if (method === _EDeleteMethod.KEEP_SELECTED) { return; }\r\n        if (method === _EDeleteMethod.DELETE_SELECTED) { __model__.delete(null, false);  return; }\r\n    }\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'modify.Delete';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL],\r\n        [EEntType.POSI, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        // [EEntType.POSI, EEntType.POINT, EEntType.PLINE, EEntType.PGON, EEntType.COLL]) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const ent_sets: IEntSets = __model__.modeldata.geom.query.getDelEntSets(ents_arr);\r\n    switch (method) {\r\n        case _EDeleteMethod.DELETE_SELECTED:\r\n            if (isEmptyArr2(entities)) { return; }\r\n            __model__.delete(ent_sets, false); //  do not invert\r\n            return;\r\n        case _EDeleteMethod.KEEP_SELECTED:\r\n            if (isEmptyArr2(entities)) { __model__.delete(null, false); return; }\r\n            __model__.delete(ent_sets, true); // invert\r\n            return;\r\n        default:\r\n            throw new Error(fn_name + ' : Method not recognised.');\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// ExtendPline\r\n\r\n// ProjectPosition\r\n\r\n// Move position along vector (normals)\r\n// ================================================================================================\r\n// // AttribPush modelling operation\r\n// export enum _EPromoteMethod {\r\n//     FIRST = 'first',\r\n//     LAST = 'last',\r\n//     AVERAGE = 'average',\r\n//     MEDIAN = 'median',\r\n//     SUM = 'sum',\r\n//     MIN = 'min',\r\n//     MAX = 'max'\r\n// }\r\n// // Promote modelling operation\r\n// export enum _EPromoteTarget {\r\n//     POSI = 'positions',\r\n//     VERT = 'vertices',\r\n//     EDGE = 'edges',\r\n//     WIRE = 'wires',\r\n//     FACE = 'faces',\r\n//     POINT = 'points',\r\n//     PLINE = 'plines',\r\n//     PGON = 'pgons',\r\n//     COLL = 'collections',\r\n//     MOD = 'model'\r\n// }\r\n// function _convertPromoteMethod(selection: _EPromoteMethod): EAttribPromote {\r\n//     switch (selection) {\r\n//         case _EPromoteMethod.AVERAGE:\r\n//             return EAttribPromote.AVERAGE;\r\n//         case _EPromoteMethod.MEDIAN:\r\n//             return EAttribPromote.MEDIAN;\r\n//         case _EPromoteMethod.SUM:\r\n//             return EAttribPromote.SUM;\r\n//         case _EPromoteMethod.MIN:\r\n//             return EAttribPromote.MIN;\r\n//         case _EPromoteMethod.MAX:\r\n//             return EAttribPromote.MAX;\r\n//         case _EPromoteMethod.FIRST:\r\n//             return EAttribPromote.FIRST;\r\n//         case _EPromoteMethod.LAST:\r\n//             return EAttribPromote.LAST;\r\n//         default:\r\n//             break;\r\n//     }\r\n// }\r\n// function _convertPromoteTarget(selection: _EPromoteTarget): EEntType {\r\n//     switch (selection) {\r\n//         case _EPromoteTarget.POSI:\r\n//             return EEntType.POSI;\r\n//         case _EPromoteTarget.VERT:\r\n//             return EEntType.VERT;\r\n//         case _EPromoteTarget.EDGE:\r\n//             return EEntType.EDGE;\r\n//         case _EPromoteTarget.WIRE:\r\n//             return EEntType.WIRE;\r\n//         case _EPromoteTarget.FACE:\r\n//             return EEntType.FACE;\r\n//         case _EPromoteTarget.POINT:\r\n//             return EEntType.POINT;\r\n//         case _EPromoteTarget.PLINE:\r\n//             return EEntType.PLINE;\r\n//         case _EPromoteTarget.PGON:\r\n//             return EEntType.PGON;\r\n//         case _EPromoteTarget.COLL:\r\n//             return EEntType.COLL;\r\n//         case _EPromoteTarget.MOD:\r\n//             return EEntType.MOD;\r\n//         default:\r\n//             break;\r\n//     }\r\n// }\r\n// /**\r\n//  * Pushes existing attribute values onto other entities.\r\n//  * Attribute values can be promoted up the hierarchy, demoted down the hierarchy, or transferred across the hierarchy.\r\n//  * ~\r\n//  * In certain cases, when attributes are pushed, they may be aggregated. For example, if you are pushing attributes\r\n//  * from vertices to polygons, then there will be multiple vertex attributes that can be combined in\r\n//  * different ways.\r\n//  * The 'method' specifies how the attributes should be aggregated. Note that if no aggregation is required\r\n//  * then the aggregation method is ignored.\r\n//  * ~\r\n//  * The aggregation methods consist of numerical functions such as average, median, sum, max, and min. These will\r\n//  * only work if the attribute values are numbers or lists of numbers. If the attribute values are string, then\r\n//  * the numerical functions are ignored.\r\n//  * ~\r\n//  * If the attribute values are lists of numbers, then these aggregation methods work on the individual items in the list.\r\n//  * For example, lets say you have an attribute consisting of normal vectors on vertices. If you push these attributes\r\n//  * down to the positions, then aggregation may be required, since multiple vertices can share the same position.\r\n//  * In this case, if you choose the `average` aggregation method, then resulting vectors on the positions will be the\r\n//  * average of vertex vectors.\r\n//  *\r\n//  * @param __model__\r\n//  * @param entities The entities that currently contain the attribute values.\r\n//  * @param attrib_name The name of the attribute to be promoted, demoted, or transferred.\r\n//  * @param to_level Enum; The level to which to promote, demote, or transfer the attribute values.\r\n//  * @param method Enum; The method to use when attribute values need to be aggregated.\r\n//  * @returns void\r\n//  * @example promote1 = modify.PushAttribs([pgon1, pgon2], 'area', collections, sum)\r\n//  * @example_info For the two polygons (pgon1 and pgon2), it gets the attribute values from the attribute called `area`,\r\n//  * and pushes them up to the collection level. The `sum` method specifies that the two areas should be added up.\r\n//  * Note that in order to create an attribute at the collection level, the two polygons should be part of a\r\n//  * collection. If they are not part of the collection, then no attribute values will be push.\r\n//  */\r\n// export function PushAttribs(__model__: GIModel, entities: TId|TId[], attrib_name: string,\r\n//         to_level: _EPromoteTarget, method: _EPromoteMethod): void {\r\n//     // --- Error Check ---\r\n//     let ents_arr: TEntTypeIdx|TEntTypeIdx[];\r\n//     if (entities !== null) {\r\n//         ents_arr = checkIDs('modify.Attribute', 'entities', entities,\r\n//                             [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx|TEntTypeIdx[];\r\n//     } else {\r\n//         ents_arr = null;\r\n//     }\r\n//     // --- Error Check ---\r\n//     let from_ent_type: EEntType;\r\n//     const indices: number[] = [];\r\n//     if (ents_arr !== null) {\r\n//         const ents_arrs: TEntTypeIdx[] = ((getArrDepth(ents_arr) === 1) ? [ents_arr] : ents_arr) as TEntTypeIdx[];\r\n//         from_ent_type = ents_arrs[0][0];\r\n//         for (const [ent_type, index] of ents_arrs) {\r\n//             if (ent_type !== from_ent_type) {\r\n//                 throw new Error('All entities must be of the same type.');\r\n//             }\r\n//             indices.push(index);\r\n//         }\r\n//     } else {\r\n//         from_ent_type = EEntType.MOD;\r\n//     }\r\n//     const to_ent_type: EEntType = _convertPromoteTarget(to_level);\r\n//     const promote_method: EAttribPromote = _convertPromoteMethod(method);\r\n//     if (from_ent_type === to_ent_type) {\r\n//         __model__.modeldata.attribs.add.transferAttribValues(from_ent_type, attrib_name, indices, promote_method);\r\n//     } else {\r\n//         __model__.modeldata.attribs.add.promoteAttribValues(from_ent_type, attrib_name, indices, to_ent_type, promote_method);\r\n//     }\r\n// }\r\n","/**\r\n * The `pattern` module has functions for creating patters of positions in the model.\r\n * All these functions all return lists of position IDs.\r\n * The list may be nested, depending on which function is selected.\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { Txyz, TPlane, XYPLANE, TId, EEntType } from '@libs/geo-info/common';\r\nimport { getArrDepth, idsMakeFromIndicies } from '@libs/geo-info/id';\r\nimport { vecAdd, vecFromTo, vecDiv, vecMult } from '@libs/geom/vectors';\r\nimport { xfromSourceTargetMatrix, multMatrix } from '@libs/geom/matrix';\r\nimport { Matrix4 } from 'three';\r\nimport { __merge__ } from '../_model';\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport * as THREE from 'three';\r\nimport * as VERB from '@assets/libs/verb/verb';\r\nimport { arrFill, arrMakeFlat } from '@assets/libs/util/arrs';\r\n// import * as VERB from 'verb';\r\n// ================================================================================================\r\n/**\r\n * Creates a row of positions in a line pattern. Returns a list of new positions.\r\n * @param __model__\r\n * @param origin XYZ coordinates as a list of three numbers.\r\n * @param size Size of the line.\r\n * @returns Entities, a list of four positions.\r\n */\r\nexport function Line(__model__: GIModel, origin: Txyz|TPlane, size: number, num_positions: number): TId[] {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'pattern.Line';\r\n        checkArgs(fn_name, 'origin', origin, [ArgCh.isXYZ, ArgCh.isPln]);\r\n        checkArgs(fn_name, 'size', size, [ArgCh.isNum]);\r\n        checkArgs(fn_name, 'num_positions', num_positions, [ArgCh.isInt]);\r\n    }\r\n    // --- Error Check ---\r\n    // create the matrix one time\r\n    let matrix: Matrix4;\r\n    const origin_is_plane = getArrDepth(origin) === 2;\r\n    if (origin_is_plane) {\r\n        matrix = xfromSourceTargetMatrix(XYPLANE, origin as TPlane);\r\n    }\r\n    // create the positions\r\n    const posis_i: number[] = [];\r\n    const coords: Txyz[] = [];\r\n    const step: number = size / (num_positions - 1);\r\n    for (let i = 0; i < num_positions; i++) {\r\n        coords.push([-(size / 2) + i * step, 0, 0]);\r\n    }\r\n    for (const coord of coords) {\r\n        let xyz: Txyz = coord;\r\n        if (origin_is_plane) {\r\n            xyz = multMatrix(xyz, matrix);\r\n        } else { // we have a plane\r\n            xyz = vecAdd(xyz, origin as Txyz);\r\n        }\r\n        const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(posi_i, xyz);\r\n        posis_i.push(posi_i);\r\n    }\r\n    // return\r\n    return idsMakeFromIndicies(EEntType.POSI, posis_i) as TId[];\r\n}\r\n// ================================================================================================\r\n/**\r\n * Creates four positions in a rectangle pattern. Returns a list of new positions.\r\n * @param __model__\r\n * @param origin XYZ coordinates as a list of three numbers.\r\n * @param size Size of rectangle. If number, assume square of that length; if list of two numbers, x and y lengths respectively.\r\n * @returns Entities, a list of four positions.\r\n * @example coordinates1 = pattern.Rectangle([0,0,0], 10)\r\n * @example_info Creates a list of 4 coords, being the vertices of a 10 by 10 square.\r\n * @example coordinates1 = pattern.Rectangle([0,0,0], [10,20])\r\n * @example_info Creates a list of 4 coords, being the vertices of a 10 by 20 rectangle.\r\n */\r\nexport function Rectangle(__model__: GIModel, origin: Txyz|TPlane, size: number|[number, number]): TId[] {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'pattern.Rectangle';\r\n        checkArgs(fn_name, 'origin', origin, [ArgCh.isXYZ, ArgCh.isPln]);\r\n        checkArgs(fn_name, 'size', size, [ArgCh.isNum, ArgCh.isXY]);\r\n    }\r\n    // --- Error Check ---\r\n    // create the matrix one time\r\n    let matrix: Matrix4;\r\n    const origin_is_plane = getArrDepth(origin) === 2;\r\n    if (origin_is_plane) {\r\n        matrix = xfromSourceTargetMatrix(XYPLANE, origin as TPlane);\r\n    }\r\n    // create the positions\r\n    const posis_i: number[] = [];\r\n    const xy_size: [number, number] = (Array.isArray(size) ? size : [size, size]) as [number, number];\r\n    const coords: Txyz[] = [\r\n        [-(xy_size[0] / 2), -(xy_size[1] / 2), 0],\r\n        [ (xy_size[0] / 2), -(xy_size[1] / 2), 0],\r\n        [ (xy_size[0] / 2),  (xy_size[1] / 2), 0],\r\n        [-(xy_size[0] / 2),  (xy_size[1] / 2), 0]\r\n    ];\r\n    for (const coord of coords) {\r\n        let xyz: Txyz = coord;\r\n        if (origin_is_plane) {\r\n            xyz = multMatrix(xyz, matrix);\r\n        } else { // we have a plane\r\n            xyz = vecAdd(xyz, origin as Txyz);\r\n        }\r\n        const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(posi_i, xyz);\r\n        posis_i.push(posi_i);\r\n    }\r\n    // return\r\n    return idsMakeFromIndicies(EEntType.POSI, posis_i) as TId[];\r\n}\r\n// ================================================================================================\r\nexport enum _EGridMethod {\r\n    FLAT = 'flat',\r\n    COLUMNS = 'columns',\r\n    ROWS = 'rows',\r\n    QUADS = 'quads'\r\n}\r\n/**\r\n* Creates positions in a grid pattern. Returns a list (or list of lists) of new positions.\r\n* @param __model__\r\n* @param origin XYZ coordinates as a list of three numbers.\r\n* @param size Size of grid. If number, assume equal lengths, i.e. a square grid.\r\n* If list of two numbers, specifies x and y lengths respectively.\r\n* @param num_positions Number of positions. If a number, assume equal number of positions.\r\n* If a list of two numbers, specifies x and y number of positions respectivley.\r\n* @param method Enum, define the way the coords will be return as lists.\r\n* If integer, same number for x and y; if list of two numbers, number for x and y respectively.\r\n* @returns Entities, a list of positions, or a list of lists of positions (depending on the 'method' setting).\r\n* @example coordinates1 = pattern.Grid([0,0,0], 10, 3)\r\n* @example_info Creates a list of 9 XYZ coordinates on a 3x3 square grid of length 10.\r\n* @example coordinates1 = pattern.Grid([0,0,0], [10,20], [2,4])\r\n* @example_info Creates a list of 8 XYZ coordinates on a 2x4 grid of length 10 by 20.\r\n*/\r\nexport function Grid(__model__: GIModel, origin: Txyz|TPlane, size: number|[number, number],\r\n        num_positions: number|[number, number], method: _EGridMethod): TId[]|TId[][] {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'pattern.Grid';\r\n        checkArgs(fn_name, 'origin', origin, [ArgCh.isXYZ, ArgCh.isPln]);\r\n        checkArgs(fn_name, 'size', size, [ArgCh.isNum, ArgCh.isXY]);\r\n        checkArgs(fn_name, 'num_positions', num_positions, [ArgCh.isInt, ArgCh.isXYInt]);\r\n    }\r\n    // --- Error Check ---\r\n    // create the matrix one time\r\n    let matrix: Matrix4;\r\n    const origin_is_plane = getArrDepth(origin) === 2;\r\n    if (origin_is_plane) {\r\n        matrix = xfromSourceTargetMatrix(XYPLANE, origin as  TPlane);\r\n    }\r\n    // create the positions\r\n    const posis_i: number[] = [];\r\n    const xy_size: [number, number] = (Array.isArray(size) ? size : [size, size]) as [number, number];\r\n    const xy_num_positions: [number, number] =\r\n        (Array.isArray(num_positions) ? num_positions : [num_positions, num_positions]) as [number, number];\r\n    const x_offset: number = xy_size[0] / (xy_num_positions[0] - 1);\r\n    const y_offset: number = xy_size[1] / (xy_num_positions[1] - 1);\r\n    for (let i = 0; i < xy_num_positions[1]; i++) {\r\n        const y: number = (i * y_offset) - (xy_size[1] / 2);\r\n        for (let j = 0; j < xy_num_positions[0]; j++) {\r\n            const x: number = (j * x_offset) - (xy_size[0] / 2);\r\n            let xyz: Txyz = [x, y, 0];\r\n            if (origin_is_plane) {\r\n                xyz = multMatrix(xyz, matrix);\r\n            } else { // we have a plane\r\n                xyz = vecAdd(xyz, origin as Txyz);\r\n            }\r\n            const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n            __model__.modeldata.attribs.add.setPosiCoords(posi_i, xyz);\r\n            posis_i.push(posi_i);\r\n        }\r\n    }\r\n    // structure the grid of posis, and return\r\n    const posis_i2: number[][] = [];\r\n    if (method === _EGridMethod.FLAT) {\r\n        return idsMakeFromIndicies(EEntType.POSI, posis_i) as TId[];\r\n    } else if (method === _EGridMethod.ROWS) {\r\n        for (let i = 0; i < xy_num_positions[1]; i++) {\r\n            const row: number[] = [];\r\n            for (let j = 0; j < xy_num_positions[0]; j++) {\r\n                const index: number = (i * xy_num_positions[0]) + j;\r\n                row.push( posis_i[index] );\r\n            }\r\n            posis_i2.push(row);\r\n        }\r\n    } else if (method === _EGridMethod.COLUMNS) {\r\n        for (let i = 0; i < xy_num_positions[0]; i++) {\r\n            const col: number[] = [];\r\n            for (let j = 0; j < xy_num_positions[1]; j++) {\r\n                const index: number = (j * xy_num_positions[0]) + i;\r\n                col.push( posis_i[index] );\r\n            }\r\n            posis_i2.push(col);\r\n        }\r\n    } else if (method === _EGridMethod.QUADS) {\r\n        for (let i = 0; i < xy_num_positions[1] - 1; i++) {\r\n            for (let j = 0; j < xy_num_positions[0] - 1; j++) {\r\n                const index: number = (i * xy_num_positions[0]) + j;\r\n                const square: number[] = [\r\n                    posis_i[index],\r\n                    posis_i[index + 1],\r\n                    posis_i[index + xy_num_positions[0] + 1],\r\n                    posis_i[index + xy_num_positions[0]]\r\n                ];\r\n                posis_i2.push( square );\r\n            }\r\n        }\r\n    }\r\n    return idsMakeFromIndicies(EEntType.POSI, posis_i2) as TId[][];\r\n}\r\n// ================================================================================================\r\nexport enum _EBoxMethod {\r\n    FLAT = 'flat',\r\n    ROWS = 'rows',\r\n    COLUMNS = 'columns',\r\n    LAYERS = 'layers',\r\n    // SIDES = 'sides',\r\n    QUADS = 'quads'\r\n}\r\n/**\r\n * Creates positions in a box pattern. Returns a list of new positions.\r\n * @param __model__\r\n * @param origin XYZ coordinates as a list of three numbers.\r\n * @param size Size of the box. If one number, assume equal lengths.\r\n * If list of two or three numbers, specifies x y z lengths respectively.\r\n * @param num_positions Number of positions. If number, assume equal number of positions.\r\n * If list of two or three numbers, specifies x y z numbers respectively.\r\n * @param method Enum\r\n * @returns Entities, a list of 6 positions.\r\n */\r\nexport function Box(__model__: GIModel, origin: Txyz | TPlane,\r\n    size: number | [number, number] | [number, number, number],\r\n    num_positions: number | [number, number] | [number, number, number],\r\n    method: _EBoxMethod): TId[] | TId[][] {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'pattern.Box';\r\n        checkArgs(fn_name, 'origin', origin, [ArgCh.isXYZ, ArgCh.isPln]);\r\n        checkArgs(fn_name, 'size', size, [ArgCh.isNum, ArgCh.isXY, ArgCh.isXYZ]);\r\n    }\r\n    // --- Error Check ---\r\n    // create the matrix one time\r\n    let matrix: Matrix4;\r\n    const origin_is_plane = getArrDepth(origin) === 2;\r\n    if (origin_is_plane) {\r\n        matrix = xfromSourceTargetMatrix(XYPLANE, origin as TPlane);\r\n    }\r\n    // create params\r\n    const xyz_size: Txyz = arrFill(size, 3) as [number, number, number];\r\n    const xyz_num_positions: [number, number, number] = arrFill(num_positions, 3) as [number, number, number];\r\n    // create the positions\r\n    const layer_top_posis_i: number[] = [];\r\n    const layer_bot_posis_i: number[] = [];\r\n    const posis_i: number[][][] = [];\r\n    const x_offset: number = xyz_size[0] / (xyz_num_positions[0] - 1);\r\n    const y_offset: number = xyz_size[1] / (xyz_num_positions[1] - 1);\r\n    const z_offset: number = xyz_size[2] / (xyz_num_positions[2] - 1);\r\n    for (let k = 0; k < xyz_num_positions[2]; k++) {\r\n        const layer_perim_x0_posis_i: number[] = [];\r\n        const layer_perim_y0_posis_i: number[] = [];\r\n        const layer_perim_x1_posis_i: number[] = [];\r\n        const layer_perim_y1_posis_i: number[] = [];\r\n        const z: number = (k * z_offset) - (xyz_size[2] / 2);\r\n        for (let i = 0; i < xyz_num_positions[1]; i++) {\r\n            const y: number = (i * y_offset) - (xyz_size[1] / 2);\r\n            for (let j = 0; j < xyz_num_positions[0]; j++) {\r\n                const x: number = (j * x_offset) - (xyz_size[0] / 2);\r\n                let create_perim_layer = false;\r\n                // perimeter layers\r\n                if (i === 0 || i === xyz_num_positions[1] - 1) { create_perim_layer = true; }\r\n                if (j === 0 || j === xyz_num_positions[0] - 1) { create_perim_layer = true; }\r\n                // top layer\r\n                let create_top_layer = false;\r\n                if (k === xyz_num_positions[2] - 1) { create_top_layer = true; }\r\n                // bot layer\r\n                let create_bot_layer = false;\r\n                if (k === 0) { create_bot_layer = true; }\r\n                // create posis\r\n                if (create_perim_layer || create_top_layer || create_bot_layer) {\r\n                    let xyz: Txyz = [x, y, z];\r\n                    if (origin_is_plane) {\r\n                        xyz = multMatrix(xyz, matrix);\r\n                    } else { // we have a plane\r\n                        xyz = vecAdd(xyz, origin as Txyz);\r\n                    }\r\n                    const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n                    __model__.modeldata.attribs.add.setPosiCoords(posi_i, xyz);\r\n                    if (create_perim_layer) {\r\n                        if (i === 0) {\r\n                            layer_perim_x0_posis_i.push(posi_i);\r\n                        } else if (i === xyz_num_positions[1] - 1) {\r\n                            layer_perim_x1_posis_i.push(posi_i);\r\n                        } else if (j === xyz_num_positions[0] - 1) {\r\n                            layer_perim_y0_posis_i.push(posi_i);\r\n                        } else if (j === 0) {\r\n                            layer_perim_y1_posis_i.push(posi_i);\r\n                        }\r\n                    }\r\n                    if (create_top_layer) {\r\n                        layer_top_posis_i.push(posi_i);\r\n                    }\r\n                    if (create_bot_layer) {\r\n                        layer_bot_posis_i.push(posi_i);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        posis_i.push([layer_perim_x0_posis_i, layer_perim_y0_posis_i, layer_perim_x1_posis_i, layer_perim_y1_posis_i]);\r\n    }\r\n    // structure the grid of posis, and return\r\n    if (method === _EBoxMethod.FLAT) {\r\n        const layers_posis_i: number[][] = [];\r\n        for (let k = 1; k < posis_i.length - 2; k++) {\r\n            layers_posis_i.push(\r\n                arrMakeFlat([\r\n                    posis_i[k][0],\r\n                    posis_i[k][1],\r\n                    posis_i[k][2].reverse(),\r\n                    posis_i[k][3].reverse(),\r\n                ])\r\n            );\r\n        }\r\n        const all_posis: number[] = arrMakeFlat([layer_bot_posis_i, layers_posis_i, layer_top_posis_i]);\r\n        return idsMakeFromIndicies(EEntType.POSI, all_posis) as TId[];\r\n    } else if (method === _EBoxMethod.ROWS) {\r\n        // rows that are parallel to x axis\r\n        const posis_i2: number[][] = [];\r\n        for (let i = 0; i < xyz_num_positions[1]; i++) {\r\n            const row: number[] = [];\r\n            // bottom\r\n            for (let j = 0; j < xyz_num_positions[0]; j++) {\r\n                const index: number = (i * xyz_num_positions[0]) + j;\r\n                row.push(layer_bot_posis_i[index]);\r\n            }\r\n            // mid\r\n            if (posis_i.length > 2) {\r\n                for (let k = 1; k < posis_i.length - 1; k++) {\r\n                    if (i === 0) {\r\n                        row.push(...posis_i[k][0]);\r\n                    } else if (i === xyz_num_positions[1] - 1) {\r\n                        row.push(...posis_i[k][2]);\r\n                    } else {\r\n                        row.push(posis_i[k][3][i - 1]);\r\n                        row.push(posis_i[k][1][i - 1]);\r\n                    }\r\n                }\r\n            }\r\n            // top\r\n            for (let j = 0; j < xyz_num_positions[0]; j++) {\r\n                const index: number = (i * xyz_num_positions[0]) + j;\r\n                row.push(layer_top_posis_i[index]);\r\n            }\r\n            posis_i2.push(row);\r\n        }\r\n        return idsMakeFromIndicies(EEntType.POSI, posis_i2) as TId[][];\r\n    } else if (method === _EBoxMethod.COLUMNS) {\r\n        // columns that are parallel to the y axis\r\n        // i is moving along x axis\r\n        const posis_i2: number[][] = [];\r\n        for (let i = 0; i < xyz_num_positions[0]; i++) {\r\n            const col: number[] = [];\r\n            // bot\r\n            for (let j = 0; j < xyz_num_positions[1]; j++) {\r\n                const index: number = (j * xyz_num_positions[0]) + i;\r\n                col.push(layer_bot_posis_i[index]);\r\n            }\r\n            // mid\r\n            if (posis_i.length > 2) {\r\n                for (let k = 1; k < posis_i.length - 1; k++) {\r\n                    if (i === 0) {\r\n                        col.push(posis_i[k][0][0]);\r\n                        col.push(...posis_i[k][3]);\r\n                        col.push(posis_i[k][2][0]);\r\n                    } else if (i === xyz_num_positions[1] - 1) {\r\n                        col.push(posis_i[k][0][xyz_num_positions[0] - 1]);\r\n                        col.push(...posis_i[k][1]);\r\n                        col.push(posis_i[k][0][xyz_num_positions[0] - 1]);\r\n                    } else {\r\n                        col.push(posis_i[k][0][i]);\r\n                        col.push(posis_i[k][2][i]);\r\n                    }\r\n                }\r\n            }\r\n            // top\r\n            for (let j = 0; j < xyz_num_positions[1]; j++) {\r\n                const index: number = (j * xyz_num_positions[0]) + i;\r\n                col.push(layer_top_posis_i[index]);\r\n            }\r\n            posis_i2.push(col);\r\n        }\r\n        return idsMakeFromIndicies(EEntType.POSI, posis_i2) as TId[][];\r\n    } else if (method === _EBoxMethod.LAYERS) {\r\n        // layers that are parallel to the xy plane\r\n        // i is moving along z axis\r\n        // bottom\r\n        const posis_i2: number[][] = [layer_bot_posis_i];\r\n        // mid\r\n        for (let i = 1; i < xyz_num_positions[2] - 1; i++) {\r\n            if (posis_i.length > 2) {\r\n                const layer: number[] = posis_i[i][0].slice();\r\n                for (let j = 0; j < xyz_num_positions[1] - 2; j++) {\r\n                    layer.push(posis_i[i][3][j]);\r\n                    layer.push(posis_i[i][1][j]);\r\n                }\r\n                layer.push(...posis_i[i][2]);\r\n                posis_i2.push(layer);\r\n            }\r\n        }\r\n        // top\r\n        posis_i2.push(layer_top_posis_i);\r\n        return idsMakeFromIndicies(EEntType.POSI, posis_i2) as TId[][];\r\n    } else if (method === _EBoxMethod.QUADS) {\r\n        const posis_i2: number[][] = [];\r\n        // bottom\r\n        for (let i = 0; i < xyz_num_positions[1] - 1; i++) {\r\n            for (let j = 0; j < xyz_num_positions[0] - 1; j++) {\r\n                const index: number = (i * xyz_num_positions[0]) + j;\r\n                const quad: number[] = [\r\n                    layer_bot_posis_i[index],\r\n                    layer_bot_posis_i[index + xyz_num_positions[0]],\r\n                    layer_bot_posis_i[index + xyz_num_positions[0] + 1],\r\n                    layer_bot_posis_i[index + 1]\r\n                ];\r\n                posis_i2.push(quad);\r\n            }\r\n        }\r\n        // mid\r\n        const layers_posis_i: number[][] = [];\r\n        for (let k = 0; k < posis_i.length; k++) {\r\n            layers_posis_i.push(\r\n                arrMakeFlat([\r\n                    posis_i[k][0],\r\n                    posis_i[k][1],\r\n                    posis_i[k][2].reverse(),\r\n                    posis_i[k][3].reverse(),\r\n                ])\r\n            );\r\n        }\r\n        for (let k = 0; k < layers_posis_i.length - 1; k++) {\r\n            const layer_posis_i: number[] = layers_posis_i[k];\r\n            const next_layer_posis_i: number[] = layers_posis_i[k + 1];\r\n            for (let i = 0; i < layer_posis_i.length; i++) {\r\n                const index: number = i;\r\n                const next_index: number = i === layer_posis_i.length - 1 ? 0 : i + 1;\r\n                const quad: number[] = [\r\n                    layer_posis_i[index],\r\n                    layer_posis_i[next_index],\r\n                    next_layer_posis_i[next_index],\r\n                    next_layer_posis_i[index]\r\n                ];\r\n                posis_i2.push(quad);\r\n            }\r\n        }\r\n        // top\r\n        for (let i = 0; i < xyz_num_positions[1] - 1; i++) {\r\n            for (let j = 0; j < xyz_num_positions[0] - 1; j++) {\r\n                const index: number = (i * xyz_num_positions[0]) + j;\r\n                const quad: number[] = [\r\n                    layer_top_posis_i[index],\r\n                    layer_top_posis_i[index + 1],\r\n                    layer_top_posis_i[index + xyz_num_positions[0] + 1],\r\n                    layer_top_posis_i[index + xyz_num_positions[0]]\r\n                ];\r\n                posis_i2.push(quad);\r\n            }\r\n        }\r\n        return idsMakeFromIndicies(EEntType.POSI, posis_i2) as TId[][];\r\n    }\r\n    return [];\r\n}\r\n// ================================================================================================\r\n/**\r\n * Creates positions in a polyhedron pattern. Returns a list of new positions.\r\n * ~\r\n * @param __model__\r\n * @param origin XYZ coordinates as a list of three numbers.\r\n * @param radius xxx\r\n * @param detail xxx\r\n * @param method Enum\r\n * @returns Entities, a list of positions.\r\n */\r\nexport function Polyhedron(__model__: GIModel, origin: Txyz | TPlane, radius: number, detail: number,\r\n        method: _EPolyhedronMethod): TId[]|TId[][] {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'pattern.Polyhedron';\r\n        checkArgs(fn_name, 'origin', origin, [ArgCh.isXYZ, ArgCh.isPln]);\r\n        checkArgs(fn_name, 'radius', radius, [ArgCh.isNum]);\r\n        checkArgs(fn_name, 'detail', detail, [ArgCh.isInt]);\r\n        if (detail > 6) {\r\n            throw new Error('pattern.Polyhedron: The \"detail\" argument is too high, the maximum is 6.');\r\n        }\r\n    }\r\n    // --- Error Check ---\r\n    // create the matrix one time\r\n    let matrix: Matrix4 = null;\r\n    const origin_is_plane = getArrDepth(origin) === 2;\r\n    if (origin_is_plane) {\r\n        matrix = xfromSourceTargetMatrix(XYPLANE, origin as TPlane);\r\n    } else {\r\n        matrix = new Matrix4();\r\n        matrix.makeTranslation(...origin as Txyz);\r\n    }\r\n    // make polyhedron posis\r\n    const posis_i: number[]|number[][] = _polyhedron(__model__, matrix, radius, detail, method);\r\n    return idsMakeFromIndicies(EEntType.POSI, posis_i) as TId[][];\r\n}\r\nexport enum _EPolyhedronMethod {\r\n    FLAT_TETRA = 'flat_tetra',\r\n    FLAT_OCTA = 'flat_octa',\r\n    FLAT_ICOSA = 'flat_icosa',\r\n    FLAT_DODECA = 'flat_dodeca',\r\n    FACE_TETRA = 'face_tetra',\r\n    FACE_OCTA = 'face_octa',\r\n    FACE_ICOSA = 'face_icosa',\r\n    FACE_DODECA = 'face_dodeca'\r\n}\r\nexport function _polyhedron(__model__: GIModel, matrix: Matrix4, radius: number, detail: number,\r\n    method: _EPolyhedronMethod): number[]|number[][] {\r\n    // create the posis\r\n    let hedron_tjs: THREE.TetrahedronGeometry|THREE.OctahedronGeometry|THREE.IcosahedronGeometry|THREE.DodecahedronGeometry = null;\r\n    switch (method) {\r\n        case _EPolyhedronMethod.FLAT_TETRA:\r\n        case _EPolyhedronMethod.FACE_TETRA:\r\n            hedron_tjs = new THREE.TetrahedronGeometry(radius, detail);\r\n            break;\r\n        case _EPolyhedronMethod.FLAT_OCTA:\r\n        case _EPolyhedronMethod.FACE_OCTA:\r\n            hedron_tjs = new THREE.OctahedronGeometry(radius, detail);\r\n            break;\r\n        case _EPolyhedronMethod.FLAT_ICOSA:\r\n        case _EPolyhedronMethod.FACE_ICOSA:\r\n            hedron_tjs = new THREE.IcosahedronGeometry(radius, detail);\r\n            break;\r\n        case _EPolyhedronMethod.FLAT_DODECA:\r\n        case _EPolyhedronMethod.FACE_DODECA:\r\n            hedron_tjs = new THREE.DodecahedronGeometry(radius, detail);\r\n            break;\r\n        default:\r\n            throw new Error('pattern.Polyhedron: method not recognised.');\r\n    }\r\n    // create the posis\r\n    const posis_i: number[] = [];\r\n    for (const vert_tjs of hedron_tjs.vertices) {\r\n        const xyz: Txyz = multMatrix(vert_tjs.toArray() as Txyz, matrix);\r\n        const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(posi_i, xyz);\r\n        posis_i.push(posi_i);\r\n    }\r\n    // if the method is flat, then we are done, return the posis\r\n    switch (method) {\r\n        case _EPolyhedronMethod.FLAT_TETRA:\r\n        case _EPolyhedronMethod.FLAT_OCTA:\r\n        case _EPolyhedronMethod.FLAT_ICOSA:\r\n        case _EPolyhedronMethod.FLAT_DODECA:\r\n            return posis_i;\r\n    }\r\n    // get the posis into the arrays\r\n    const posis_arrs_i: number[][] = [];\r\n    for (const face_tjs of hedron_tjs.faces) {\r\n        posis_arrs_i.push([\r\n            posis_i[face_tjs.a],\r\n            posis_i[face_tjs.b],\r\n            posis_i[face_tjs.c]\r\n        ]);\r\n    }\r\n    // dispose the tjs polyhedron\r\n    hedron_tjs.dispose();\r\n    // return the result\r\n    return posis_arrs_i;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Creates positions in an arc pattern. Returns a list of new positions.\r\n * If the angle of the arc is set to null, then circular patterns will be created.\r\n * For circular patterns, duplicates at start and end are automatically removed.\r\n *\r\n * @param __model__\r\n * @param origin XYZ coordinates as a list of three numbers.\r\n * @param radius Radius of circle as a number.\r\n * @param num_positions Number of positions to be distributed equally along the arc.\r\n * @param arc_angle Angle of arc (in radians).\r\n * @returns Entities, a list of positions.\r\n * @example coordinates1 = pattern.Arc([0,0,0], 10, 12, PI)\r\n * @example_info Creates a list of 12 positions distributed equally along a semicircle of radius 10.\r\n */\r\nexport function Arc(__model__: GIModel, origin: Txyz|TPlane, radius: number, num_positions: number, arc_angle: number): TId[] {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'pattern.Arc';\r\n        checkArgs(fn_name, 'origin', origin, [ArgCh.isXYZ, ArgCh.isPln]);\r\n        checkArgs(fn_name, 'radius', radius, [ArgCh.isNum]);\r\n        checkArgs(fn_name, 'num_positions', num_positions, [ArgCh.isInt]);\r\n        checkArgs(fn_name, 'arc_angle', arc_angle, [ArgCh.isNum, ArgCh.isNull]);\r\n    }\r\n    // --- Error Check ---\r\n    // create the matrix one time\r\n    let matrix: Matrix4;\r\n    const origin_is_plane = getArrDepth(origin) === 2;\r\n    if (origin_is_plane) {\r\n        matrix = xfromSourceTargetMatrix(XYPLANE, origin as  TPlane);\r\n    }\r\n    // calc the rot angle per position\r\n    const rot: number = (arc_angle === null) ? (2 * Math.PI) / num_positions : arc_angle / (num_positions - 1);\r\n    // create positions\r\n    const posis_i: number[] = [];\r\n    for (let i = 0; i < num_positions; i++) {\r\n        const angle: number = rot * i; // CCW\r\n        const x: number = (Math.cos(angle) * radius);\r\n        const y: number = (Math.sin(angle) * radius);\r\n        let xyz: Txyz = [x, y, 0];\r\n        if (origin_is_plane) {\r\n            xyz = multMatrix(xyz, matrix);\r\n        } else { // we have a plane\r\n            xyz = vecAdd(xyz, origin as Txyz);\r\n        }\r\n        const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(posi_i, xyz);\r\n        posis_i.push(posi_i);\r\n    }\r\n    // return the list of posis\r\n    return idsMakeFromIndicies(EEntType.POSI, posis_i) as TId[];\r\n}\r\n// ================================================================================================\r\n/**\r\n * Creates positions in an Bezier curve pattern. Returns a list of new positions.\r\n * The Bezier is created as either a qadratic or cubic Bezier. It is always an open curve.\r\n * ~\r\n * The input is a list of XYZ coordinates (three coords for quadratics, four coords for cubics).\r\n * The first and last coordinates in the list are the start and end positions of the Bezier curve.\r\n * The middle coordinates act as the control points for controlling the shape of the Bezier curve.\r\n * ~\r\n * For the quadratic Bezier, three XYZ coordinates are required.\r\n * For the cubic Bezier, four XYZ coordinates are required.\r\n * ~\r\n * For more information, see the wikipedia article: <a href=\"https://en.wikipedia.org/wiki/B%C3%A9zier_curve\">B%C3%A9zier_curve</a>.\r\n * ~\r\n * @param __model__\r\n * @param coords A list of XYZ coordinates (three coords for quadratics, four coords for cubics).\r\n * @param num_positions Number of positions to be distributed along the Bezier.\r\n * @returns Entities, a list of positions.\r\n * @example coordinates1 = pattern.Bezier([[0,0,0], [10,0,50], [20,0,10]], 20)\r\n * @example_info Creates a list of 20 positions distributed along a Bezier curve pattern.\r\n */\r\nexport function Bezier(__model__: GIModel, coords: Txyz[], num_positions: number): TId[] {\r\n    // --- Error Check ---\r\n    const fn_name = 'pattern.Bezier';\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'coords', coords, [ArgCh.isXYZL]);\r\n        checkArgs(fn_name, 'num_positions', num_positions, [ArgCh.isInt]);\r\n    }\r\n    // --- Error Check ---\r\n    // create the curve\r\n    const coords_tjs: THREE.Vector3[] = coords.map(coord => new THREE.Vector3(coord[0], coord[1], coord[2]));\r\n    let points_tjs: THREE.Vector3[] = [];\r\n    let curve_tjs: THREE.CubicBezierCurve3|THREE.QuadraticBezierCurve3 = null;\r\n    if (coords.length === 4) {\r\n        curve_tjs = new THREE.CubicBezierCurve3(coords_tjs[0], coords_tjs[1], coords_tjs[2], coords_tjs[3]);\r\n        points_tjs = curve_tjs.getPoints(num_positions - 1);\r\n    } else if (coords.length === 3) {\r\n        curve_tjs = new THREE.QuadraticBezierCurve3(coords_tjs[0], coords_tjs[1], coords_tjs[2]);\r\n        points_tjs = curve_tjs.getPoints(num_positions - 1);\r\n    } else {\r\n        throw new Error (fn_name + ': \"coords\" should be a list of either three or four XYZ coords.');\r\n    }\r\n    // create positions\r\n    const posis_i: number[] = [];\r\n    for (let i = 0; i < num_positions; i++) {\r\n        const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(posi_i, points_tjs[i].toArray() as Txyz);\r\n        posis_i.push(posi_i);\r\n    }\r\n    // return the list of posis\r\n    return idsMakeFromIndicies(EEntType.POSI, posis_i) as TId[];\r\n}\r\n// ================================================================================================\r\nexport enum _EClose {\r\n    OPEN = 'open',\r\n    CLOSE = 'close'\r\n}\r\n/**\r\n * Creates positions in an NURBS curve pattern, by using the XYZ positions as control points.\r\n * Returns a list of new positions.\r\n * ~\r\n * The positions are created along the curve at equal parameter values.\r\n * This means that the euclidean distance between the positions will not necessarily be equal.\r\n * ~\r\n * The input is a list of XYZ coordinates that will act as control points for the curve.\r\n * If the curve is open, then the first and last coordinates in the list are the start and end positions of the curve.\r\n * ~\r\n * The number of positions should be at least one greater than the degree of the curve.\r\n * ~\r\n * The degree (between 2 and 5) of the urve defines how smooth the curve is.\r\n * Quadratic: degree = 2\r\n * Cubic: degree = 3\r\n * Quartic: degree = 4.\r\n * ~\r\n * @param __model__\r\n * @param coords A list of XYZ coordinates (must be at least three XYZ coords).\r\n * @param degree The degree of the curve, and integer between 2 and 5.\r\n * @param close Enum, 'close' or 'open'\r\n * @param num_positions Number of positions to be distributed along the Bezier.\r\n * @returns Entities, a list of positions.\r\n * @example coordinates1 = pattern.Nurbs([[0,0,0], [10,0,50], [20,0,10]], 20)\r\n * @example_info Creates a list of 20 positions distributed along a Bezier curve pattern.\r\n */\r\nexport function Nurbs(__model__: GIModel, coords: Txyz[], degree: number, close: _EClose, num_positions: number): TId[] {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'pattern.Nurbs';\r\n        checkArgs(fn_name, 'coords', coords, [ArgCh.isXYZL]);\r\n        checkArgs(fn_name, 'num_positions', num_positions, [ArgCh.isInt]);\r\n        if (coords.length < 3) {\r\n            throw new Error (fn_name + ': \"coords\" should be a list of at least three XYZ coords.');\r\n        }\r\n        if (degree < 2  || degree > 5) {\r\n            throw new Error (fn_name + ': \"degree\" should be between 2 and 5.');\r\n        }\r\n        if (degree > (coords.length - 1)) {\r\n            throw new Error (fn_name + ': a curve of degree ' + degree + ' requires at least ' + (degree + 1) + ' coords.' );\r\n        }\r\n    }\r\n    // --- Error Check ---\r\n    const closed: boolean = close === _EClose.CLOSE;\r\n    // create the curve using the VERBS library\r\n    const offset = degree + 1;\r\n    const coords2: Txyz[] = coords.slice();\r\n    if (closed) {\r\n        const start: Txyz[] = coords2.slice(0, offset);\r\n        const end: Txyz[] = coords2.slice(coords2.length - offset, coords2.length);\r\n        coords2.splice(0, 0, ...end);\r\n        coords2.splice(coords2.length, 0, ...start);\r\n    }\r\n    const weights = coords2.forEach( _ => 1);\r\n    const num_knots: number = coords2.length + degree + 1;\r\n    const knots: number [] = [];\r\n    const uniform_knots = num_knots - (2 * degree);\r\n    for (let i = 0; i < degree; i++) {\r\n        knots.push(0);\r\n    }\r\n    for (let i = 0; i < uniform_knots; i++) {\r\n        knots.push(i / (uniform_knots - 1));\r\n    }\r\n    for (let i = 0; i < degree; i++) {\r\n        knots.push(1);\r\n    }\r\n    const curve_verb = new VERB.geom.NurbsCurve.byKnotsControlPointsWeights(degree, knots, coords2, weights);\r\n    // Testing VERB closed curve\r\n    // const k: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n    // const c: number[][] = [[0, 0, 0], [10, 0, 0], [10, 10, 0], [0, 10, 0], [0, 0, 0], [10, 0, 0]];\r\n    // const w: number[] = [1, 1, 1, 1, 1, 1];\r\n    // const curve_verb2 = new VERB.geom.NurbsCurve.byKnotsControlPointsWeights(2, k, c, w);\r\n    // This gives an error: Error:\r\n    // Invalid knot vector format! Should begin with degree + 1 repeats and end with degree + 1 repeats!\r\n    const posis_i: number[] = nurbsToPosis(__model__, curve_verb, degree, closed, num_positions, coords[0]);\r\n    // return the list of posis\r\n    return idsMakeFromIndicies(EEntType.POSI, posis_i) as TId[];\r\n}\r\n// ================================================================================================\r\n/**\r\n * Creates positions in an NURBS curve pattern, by iterpolating between the XYZ positions.\r\n * Returns a list of new positions.\r\n * ~\r\n * THe positions are created along the curve at equal parameter values.\r\n * This means that the euclidean distance between the positions will not necessarily be equal.\r\n * ~\r\n * The input is a list of XYZ coordinates that will act as control points for the curve.\r\n * If the curve is open, then the first and last coordinates in the list are the start and end positions of the curve.\r\n * ~\r\n * The number of positions should be at least one greater than the degree of the curve.\r\n * ~\r\n * The degree (between 2 and 5) of the urve defines how smooth the curve is.\r\n * Quadratic: degree = 2\r\n * Cubic: degree = 3\r\n * Quartic: degree = 4.\r\n * ~\r\n * @param __model__\r\n * @param coords A list of XYZ coordinates (must be at least three XYZ coords).\r\n * @param degree The degree of the curve, and integer between 2 and 5.\r\n * @param close Enum, 'close' or 'open'\r\n * @param num_positions Number of positions to be distributed along the Bezier.\r\n * @returns Entities, a list of positions.\r\n * @example coordinates1 = pattern.Nurbs([[0,0,0], [10,0,50], [20,0,10]], 20)\r\n * @example_info Creates a list of 20 positions distributed along a Bezier curve pattern.\r\n */\r\nexport function _Interpolate(__model__: GIModel, coords: Txyz[], degree: number, close: _EClose, num_positions: number): TId[] {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'pattern._Interpolate';\r\n        checkArgs(fn_name, 'coords', coords, [ArgCh.isXYZL]);\r\n        checkArgs(fn_name, 'num_positions', num_positions, [ArgCh.isInt]);\r\n        // --- Error Check ---\r\n        if (coords.length < 3) {\r\n            throw new Error (fn_name + ': \"coords\" should be a list of at least three XYZ coords.');\r\n        }\r\n        if (degree < 2  || degree > 5) {\r\n            throw new Error (fn_name + ': \"degree\" should be between 2 and 5.');\r\n        }\r\n        if (degree > (coords.length - 1)) {\r\n            throw new Error (fn_name + ': a curve of degree ' + degree + ' requires at least ' + (degree + 1) + ' coords.' );\r\n        }\r\n    }\r\n    const closed: boolean = close === _EClose.CLOSE;\r\n    // create the curve using the VERBS library\r\n    const offset = degree + 1;\r\n    const coords2: Txyz[] = coords.slice();\r\n    if (closed) {\r\n        const start: Txyz[] = coords2.slice(0, offset);\r\n        const end: Txyz[] = coords2.slice(coords2.length - offset, coords2.length);\r\n        coords2.splice(0, 0, ...end);\r\n        coords2.splice(coords2.length, 0, ...start);\r\n    }\r\n    const curve_verb = new VERB.geom.NurbsCurve.byPoints( coords2, degree );\r\n    // return the list of posis\r\n    const posis_i: number[] = nurbsToPosis(__model__, curve_verb, degree, closed, num_positions, coords[0]);\r\n    return idsMakeFromIndicies(EEntType.POSI, posis_i) as TId[];\r\n}\r\nfunction nurbsToPosis(__model__: GIModel, curve_verb: any, degree: number, closed: boolean,\r\n        num_positions: number, start: Txyz, ): number[] {\r\n    // create positions\r\n    const posis_i: number[] = [];\r\n    const [offset_start, offset_end] = {2: [5, 3], 3: [6, 5], 4: [8, 6], 5: [9, 8]}[degree];\r\n    const knots: number[] = curve_verb.knots();\r\n    const u_start = knots[offset_start];\r\n    const u_end = knots[knots.length - offset_end - 1];\r\n    const u_range = u_end - u_start;\r\n    // trying split\r\n    // const [c1, c2] = curve_verb.split(u_start);\r\n    // const [c3, c4] = c2.split(u_end);\r\n    // const curve_length_samples_verb: any[] = c3.divideByEqualArcLength(num_positions - 1);\r\n    // const u_values_verb: number[] = curve_length_samples_verb.map( cls => cls.u as number );\r\n    let min_dist_to_start = Infinity;\r\n    let closest_to_start = -1;\r\n    for (let i = 0; i < num_positions; i++) {\r\n        let u: number;\r\n        if (closed) {\r\n            u = u_start + ((i / num_positions) * u_range);\r\n        } else {\r\n            u = i / (num_positions - 1);\r\n        }\r\n        const xyz: Txyz  = curve_verb.point(u) as Txyz;\r\n        // xyz[2] = i / 10;\r\n        const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(posi_i, xyz);\r\n        posis_i.push(posi_i);\r\n        const dist =    Math.abs(start[0] - xyz[0]) +\r\n                        Math.abs(start[1] - xyz[1]) +\r\n                        Math.abs(start[2] - xyz[2]);\r\n        if (dist < min_dist_to_start) {\r\n            min_dist_to_start = dist;\r\n            closest_to_start = i;\r\n        }\r\n    }\r\n    const posis_i_start: number[] = posis_i.slice(closest_to_start, posis_i.length);\r\n    const posis_i_end: number[] = posis_i.slice(0, closest_to_start);\r\n    const posis_i_sorted: number[] = posis_i_start.concat(posis_i_end);\r\n    // return the list of posis\r\n    return posis_i_sorted;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Creates positions in an spline pattern. Returns a list of new positions.\r\n * The spline is created using the Catmull-Rom algorithm.\r\n * It is a type of interpolating spline (a curve that goes through its control points).\r\n * ~\r\n * The input is a list of XYZ coordinates. These act as the control points for creating the Spline curve.\r\n * The positions that get generated will be divided equally between the control points.\r\n * For example, if you define 4 control points for a cosed spline, and set 'num_positions' to be 40,\r\n * then you will get 8 positions between each pair of control points,\r\n * irrespective of the distance between the control points.\r\n * ~\r\n * The spline curve can be created in three ways: 'centripetal', 'chordal', or 'catmullrom'.\r\n * ~\r\n * For more information, see the wikipedia article:\r\n * <a href=\"https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\">Catmull–Rom spline</a>.\r\n * ~\r\n * <img src=\"https://upload.wikimedia.org/wikipedia/commons/2/2f/Catmull-Rom_examples_with_parameters..png\"\r\n * alt=\"Curve types\" width=\"100\">\r\n * ~\r\n * @param __model__\r\n * @param coords A list of XYZ coordinates.\r\n * @param type Enum, the type of interpolation algorithm.\r\n * @param tension Curve tension, between 0 and 1. This only has an effect when the 'type' is set to 'catmullrom'.\r\n * @param close Enum, 'open' or 'close'.\r\n * @param num_positions Number of positions to be distributed distributed along the spline.\r\n * @returns Entities, a list of positions.\r\n * @example coordinates1 = pattern.Spline([[0,0,0], [10,0,50], [20,0,0], [30,0,20], [40,0,10]], 'chordal','close', 0.2, 50)\r\n * @example_info Creates a list of 50 positions distributed along a spline curve pattern.\r\n */\r\nexport function Interpolate(__model__: GIModel, coords: Txyz[], type: _ECurveCatRomType, tension: number, close: _EClose,\r\n    num_positions: number): TId[] {\r\n    // --- Error Check ---\r\n    if (__model__.debug) {\r\n        const fn_name = 'pattern.Interpolate';\r\n        checkArgs(fn_name, 'coords', coords, [ArgCh.isXYZL]);\r\n        checkArgs(fn_name, 'tension', tension, [ArgCh.isNum01]);\r\n        checkArgs(fn_name, 'num_positions', num_positions, [ArgCh.isInt]);\r\n        if (coords.length < 3) {\r\n            throw new Error(fn_name + ': \"coords\" should be a list of at least three XYZ coords.');\r\n        }\r\n    }\r\n    // --- Error Check ---\r\n    const closed_tjs: boolean = close === _EClose.CLOSE;\r\n    const num_positions_tjs: number = closed_tjs ? num_positions : num_positions - 1;\r\n    if (tension === 0) { tension = 1e-16; } // There seems to be a bug in threejs, so this is a fix\r\n    // Check we have enough coords\r\n    // create the curve\r\n    const coords_tjs: THREE.Vector3[] = coords.map(coord => new THREE.Vector3(coord[0], coord[1], coord[2]));\r\n    const curve_tjs: THREE.CatmullRomCurve3 = new THREE.CatmullRomCurve3(coords_tjs, closed_tjs, type, tension);\r\n    const points_tjs: THREE.Vector3[] = curve_tjs.getPoints(num_positions_tjs);\r\n    // create positions\r\n    const posis_i: number[] = [];\r\n    for (let i = 0; i < num_positions; i++) {\r\n        const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(posi_i, points_tjs[i].toArray() as Txyz);\r\n        posis_i.push(posi_i);\r\n    }\r\n    // return the list of posis\r\n    return idsMakeFromIndicies(EEntType.POSI, posis_i) as TId[];\r\n}\r\n// Enums for CurveCatRom()\r\nexport enum _ECurveCatRomType {\r\n    CENTRIPETAL = 'centripetal',\r\n    CHORDAL = 'chordal',\r\n    CATMULLROM = 'catmullrom'\r\n}\r\n// ================================================================================================\r\n","/**\r\n * The `poly2D` module has a set of functions for working with 2D polygons, on the XY plane.\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { EEntType, TId, TEntTypeIdx, Txyz, Txy, TPlane } from '@libs/geo-info/common';\r\nimport { arrMakeFlat } from '@assets/libs/util/arrs';\r\nimport Shape from '@doodle3d/clipper-js';\r\nimport { isEmptyArr, idsMake, idsBreak } from '@assets/libs/geo-info/id';\r\nimport * as d3del from 'd3-delaunay';\r\nimport * as d3poly from 'd3-polygon';\r\nimport * as d3vor from 'd3-voronoi';\r\nimport { distance } from '@assets/libs/geom/distance';\r\nimport { vecFromTo, vecNorm, vecMult, vecAdd } from '@assets/libs/geom/vectors';\r\nimport { xfromSourceTargetMatrix, multMatrix } from '@assets/libs/geom/matrix';\r\nimport { Matrix4 } from 'three';\r\nimport { _copyGeom, _copyGeomPosis } from './_common';\r\nimport { distanceManhattan } from '@assets/libs/geom/distance';\r\n\r\nconst SCALE = 1e9;\r\ntype TPosisMap = Map<number, Map<number, number>>;\r\n// Clipper types\r\nexport enum _EClipJointType {\r\n    SQUARE = 'jtSquare',\r\n    ROUND = 'jtRound',\r\n    MITER = 'jtMiter'\r\n}\r\nexport enum _EClipEndType {\r\n    OPEN_SQUARE = 'etOpenSquare',\r\n    OPEN_ROUND = 'etOpenRound',\r\n    OPEN_BUTT = 'etOpenButt',\r\n    CLOSED_PLINE = 'etClosedLine',\r\n    CLOSED_PGON = 'etClosedPolygon'\r\n}\r\ninterface IClipCoord {\r\n    X: number;\r\n    Y: number;\r\n}\r\ntype TClipPath = IClipCoord[];\r\ntype TClipPaths = TClipPath[];\r\ninterface IClipResult {\r\n    closed: boolean;\r\n    paths: TClipPaths;\r\n}\r\ninterface IClipOffsetOptions {\r\n    jointType: string;\r\n    endType: string;\r\n    miterLimit?: number;\r\n    roundPrecision?: number;\r\n}\r\nconst MClipOffsetEndType: Map<string, string> = new Map([\r\n    ['square_end', _EClipEndType.OPEN_SQUARE],\r\n    ['round_end', _EClipEndType.OPEN_ROUND],\r\n    ['butt_end', _EClipEndType.OPEN_BUTT]\r\n]);\r\n// Function enums\r\nexport enum _EOffset {\r\n    SQUARE_END = 'square_end',\r\n    BUTT_END = 'butt_end'\r\n}\r\nexport enum _EOffsetRound {\r\n    SQUARE_END = 'square_end',\r\n    BUTT_END = 'butt_end',\r\n    ROUND_END = 'round_end'\r\n}\r\nexport enum _EBooleanMethod {\r\n    INTERSECT = 'intersect',\r\n    DIFFERENCE = 'difference',\r\n    SYMMETRIC = 'symmetric'\r\n}\r\n// ================================================================================================\r\n// get polygons from the model\r\nfunction _getPgons(__model__: GIModel, ents_arr: TEntTypeIdx[]): number[] {\r\n    const set_pgons_i: Set<number> = new Set();\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        switch (ent_type) {\r\n            case EEntType.PLINE:\r\n            case EEntType.POINT:\r\n                break;\r\n            case EEntType.PGON:\r\n                set_pgons_i.add(ent_i);\r\n                break;\r\n            case EEntType.COLL:\r\n                const coll_pgons_i: number[] = __model__.modeldata.geom.nav.navCollToPgon(ent_i);\r\n                for (const coll_pgon_i of coll_pgons_i) {\r\n                    set_pgons_i.add(coll_pgon_i);\r\n                }\r\n                break;\r\n            default:\r\n                const ent_pgons_i: number[] = __model__.modeldata.geom.nav.navAnyToPgon(ent_type, ent_i);\r\n                for (const ent_pgon_i of ent_pgons_i) {\r\n                    set_pgons_i.add(ent_pgon_i);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    return Array.from(set_pgons_i);\r\n}\r\n// get polygons and polylines from the model\r\nfunction _getPgonsPlines(__model__: GIModel, ents_arr: TEntTypeIdx[]): [number[], number[]] {\r\n    const set_pgons_i: Set<number> = new Set();\r\n    const set_plines_i: Set<number> = new Set();\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        switch (ent_type) {\r\n            case EEntType.PLINE:\r\n                set_plines_i.add(ent_i);\r\n                break;\r\n            case EEntType.POINT:\r\n                break;\r\n            case EEntType.PGON:\r\n                set_pgons_i.add(ent_i);\r\n                break;\r\n            case EEntType.COLL:\r\n                const coll_pgons_i: number[] = __model__.modeldata.geom.nav.navCollToPgon(ent_i);\r\n                for (const coll_pgon_i of coll_pgons_i) {\r\n                    set_pgons_i.add(coll_pgon_i);\r\n                }\r\n                const coll_plines_i: number[] = __model__.modeldata.geom.nav.navCollToPline(ent_i);\r\n                for (const coll_pline_i of coll_plines_i) {\r\n                    set_plines_i.add(coll_pline_i);\r\n                }\r\n                break;\r\n            default:\r\n                const ent_pgons_i: number[] = __model__.modeldata.geom.nav.navAnyToPgon(ent_type, ent_i);\r\n                for (const ent_pgon_i of ent_pgons_i) {\r\n                    set_pgons_i.add(ent_pgon_i);\r\n                }\r\n                const ent_plines_i: number[] = __model__.modeldata.geom.nav.navAnyToPline(ent_type, ent_i);\r\n                for (const ent_pline_i of ent_plines_i) {\r\n                    set_plines_i.add(ent_pline_i);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    return [Array.from(set_pgons_i), Array.from(set_plines_i)];\r\n}\r\n// get posis from the model\r\nfunction _getPosis(__model__: GIModel, ents_arr: TEntTypeIdx[]): number[] {\r\n    const set_posis_i: Set<number> = new Set();\r\n    for (const [ent_type, ent_i] of ents_arr) {\r\n        switch (ent_type) {\r\n            case EEntType.POSI:\r\n                set_posis_i.add(ent_i);\r\n                break;\r\n            default:\r\n                const ent_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n                for (const ent_posi_i of ent_posis_i) {\r\n                    set_posis_i.add(ent_posi_i);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    return Array.from(set_posis_i);\r\n}\r\n// ================================================================================================\r\n// clipperjs -> Mobius Posi\r\nfunction _getPosiFromMap(__model__: GIModel, x: number, y: number, posis_map: TPosisMap): number {\r\n    // TODO consider using a hash function insetad of a double map\r\n    // try to find this coord in the map\r\n    // if not found, create a new posi and add it to the map\r\n    let posi_i: number;\r\n    let map1 = posis_map.get(x);\r\n    if (map1 !== undefined) {\r\n        posi_i = map1.get(y);\r\n    } else {\r\n        map1 = new Map();\r\n        posis_map.set( x, map1 );\r\n    }\r\n    if (posi_i === undefined) {\r\n        posi_i = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(posi_i, [x, y, 0]);\r\n        map1.set(y, posi_i);\r\n    }\r\n    return posi_i;\r\n}\r\nfunction _putPosiInMap(x: number, y: number, posi_i: number, posis_map: TPosisMap): void {\r\n    let map1 = posis_map.get(x);\r\n    if (map1 === undefined) {\r\n        map1 = new Map();\r\n    }\r\n    map1.set(y, posi_i);\r\n}\r\n// mobius -> clipperjs\r\nfunction _convertPgonToShape(__model__: GIModel, pgon_i: number, posis_map: TPosisMap): Shape {\r\n    const wires_i: number[] = __model__.modeldata.geom.nav.navAnyToWire(EEntType.PGON, pgon_i);\r\n    const shape_coords: TClipPaths = [];\r\n    for (const wire_i of wires_i) {\r\n        const len: number = shape_coords.push([]);\r\n        const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, wire_i);\r\n        for (const posi_i of posis_i) {\r\n            const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n            const coord: IClipCoord = {X: xyz[0], Y: xyz[1]};\r\n            shape_coords[len - 1].push( coord );\r\n            _putPosiInMap(xyz[0], xyz[1], posi_i, posis_map);\r\n        }\r\n    }\r\n    const shape: Shape = new Shape(shape_coords, true);\r\n    shape.scaleUp(SCALE);\r\n    return shape;\r\n}\r\n// clipperjs\r\nfunction _convertPgonsToShapeUnion(__model__: GIModel, pgons_i: number[], posis_map: TPosisMap): Shape {\r\n    let result_shape: Shape = null;\r\n    for (const pgon_i of pgons_i) {\r\n        const shape: Shape = _convertPgonToShape(__model__, pgon_i, posis_map);\r\n        if (result_shape == null) {\r\n            result_shape = shape;\r\n        } else {\r\n            result_shape = result_shape.union(shape);\r\n        }\r\n    }\r\n    return result_shape;\r\n}\r\n// clipperjs\r\nfunction _convertPgonsToShapeJoin(__model__: GIModel, pgons_i: number[], posis_map: TPosisMap): Shape {\r\n    let result_shape: Shape = null;\r\n    for (const pgon_i of pgons_i) {\r\n        const shape: Shape = _convertPgonToShape(__model__, pgon_i, posis_map);\r\n        if (result_shape == null) {\r\n            result_shape = shape;\r\n        } else {\r\n            result_shape = result_shape.join(shape);\r\n        }\r\n    }\r\n    return result_shape;\r\n}\r\n// mobius -> clipperjs\r\nfunction _convertWireToShape(__model__: GIModel, wire_i: number, is_closed: boolean, posis_map: TPosisMap): Shape {\r\n    const shape_coords: TClipPaths = [];\r\n    shape_coords.push([]);\r\n    const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, wire_i);\r\n    for (const posi_i of posis_i) {\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        const coord: IClipCoord = {X: xyz[0], Y: xyz[1]};\r\n        shape_coords[0].push( coord );\r\n        _putPosiInMap(xyz[0], xyz[1], posi_i, posis_map);\r\n    }\r\n    const shape: Shape = new Shape(shape_coords, is_closed);\r\n    shape.scaleUp(SCALE);\r\n    return shape;\r\n}\r\n// clipperjs -> mobius\r\nfunction _convertShapesToPgons(__model__: GIModel, shapes: Shape|Shape[], posis_map: TPosisMap): number[] {\r\n    shapes = Array.isArray(shapes) ? shapes : [shapes];\r\n    const pgons_i: number[] = [];\r\n    for (const shape of shapes) {\r\n        shape.scaleDown(SCALE);\r\n        const sep_shapes: Shape[] = shape.separateShapes();\r\n        for (const sep_shape of sep_shapes) {\r\n            const posis_i: number[][] = [];\r\n            const paths: TClipPaths = sep_shape.paths;\r\n            for (const path of paths) {\r\n                if (path.length === 0) { continue; }\r\n                const len: number = posis_i.push([]);\r\n                for (const coord of path) {\r\n                    const posi_i: number = _getPosiFromMap(__model__, coord.X, coord.Y, posis_map);\r\n                    posis_i[len - 1].push(posi_i);\r\n                }\r\n            }\r\n            if (posis_i.length === 0) { continue; }\r\n            const outer_posis_i: number[] = posis_i[0];\r\n            const holes_posis_i: number[][] = posis_i.slice(1);\r\n            const pgon_i: number =  __model__.modeldata.geom.add.addPgon(outer_posis_i, holes_posis_i);\r\n            pgons_i.push(pgon_i);\r\n        }\r\n    }\r\n    return pgons_i;\r\n}\r\n// clipperjs\r\nfunction _convertShapeToPlines(__model__: GIModel, shape: Shape, is_closed: boolean, posis_map: TPosisMap): number[] {\r\n    shape.scaleDown(SCALE);\r\n    const sep_shapes: Shape[] = shape.separateShapes();\r\n    const plines_i: number[] = [];\r\n    for (const sep_shape of sep_shapes) {\r\n        const paths: TClipPaths = sep_shape.paths;\r\n        for (const path of paths) {\r\n            if (path.length === 0) { continue; }\r\n            const list_posis_i: number[] = [];\r\n            for (const coord of path) {\r\n                const posi_i: number = _getPosiFromMap(__model__, coord.X, coord.Y, posis_map);\r\n                list_posis_i.push(posi_i);\r\n            }\r\n            if (list_posis_i.length < 2) { continue; }\r\n            const pgon_i: number =  __model__.modeldata.geom.add.addPline(list_posis_i, is_closed);\r\n            plines_i.push(pgon_i);\r\n        }\r\n    }\r\n    return plines_i;\r\n}\r\n// clipperjs\r\nfunction _printPaths(paths: TClipPaths, mesage: string) {\r\n    console.log(mesage);\r\n    for (const path of paths) {\r\n        console.log('    PATH');\r\n        for (const coord of path) {\r\n            console.log('        ', JSON.stringify(coord));\r\n        }\r\n    }\r\n}\r\n// ================================================================================================\r\n// d3\r\n// ================================================================================================\r\n/**\r\n * Create a voronoi subdivision of one or more polygons.\r\n * ~\r\n * @param __model__\r\n * @param pgons A list of polygons, or entities from which polygons can be extracted.\r\n * @param entities A list of positions, or entities from which positions can be extracted.\r\n * @returns A list of new polygons.\r\n */\r\nexport function Voronoi(__model__: GIModel, pgons: TId|TId[], entities: TId|TId[]): TId[] {\r\n    pgons = arrMakeFlat(pgons) as TId[];\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(pgons)) { return []; }\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'poly2d.Voronoi';\r\n    let pgons_ents_arr: TEntTypeIdx[];\r\n    let posis_ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        pgons_ents_arr = checkIDs(fn_name, 'pgons', pgons,\r\n            [IdCh.isIdL], null) as TEntTypeIdx[];\r\n        posis_ents_arr = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // pgons_ents_arr = splitIDs(fn_name, 'pgons', pgons,\r\n        //     [IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        // posis_ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        pgons_ents_arr = idsBreak(pgons) as TEntTypeIdx[];\r\n        posis_ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const posis_map: TPosisMap = new Map();\r\n    // pgons\r\n    const pgons_i: number[] = _getPgons(__model__, pgons_ents_arr);\r\n    if (pgons_i.length === 0) { return []; }\r\n    // posis\r\n    const posis_i: number[] = _getPosis(__model__, posis_ents_arr);\r\n    if (posis_i.length === 0) { return []; }\r\n    // posis\r\n    const d3_cell_points: [number, number][] = [];\r\n    for (const posi_i of posis_i) {\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        d3_cell_points.push([xyz[0], xyz[1]]);\r\n    }\r\n    // loop and create cells\r\n    const all_cells_i: number[] = [];\r\n    for (const pgon_i of pgons_i) {\r\n        // pgon and bounds\r\n        const bounds: number[] = [Infinity, Infinity, -Infinity, -Infinity]; // xmin, ymin, xmax, ymax\r\n        // const pgon_shape_coords: IClipCoord[] = [];\r\n        for (const posi_i of __model__.modeldata.geom.nav.navAnyToPosi(EEntType.PGON, pgon_i)) {\r\n            const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n            // pgon_shape_coords.push( { X: xyz[0], Y: xyz[1]} );\r\n            if (xyz[0] < bounds[0]) { bounds[0] = xyz[0]; }\r\n            if (xyz[1] < bounds[1]) { bounds[1] = xyz[1]; }\r\n            if (xyz[0] > bounds[2]) { bounds[2] = xyz[0]; }\r\n            if (xyz[1] > bounds[3]) { bounds[3] = xyz[1]; }\r\n        }\r\n        // const pgon_shape: Shape = new Shape([pgon_shape_coords], true); // TODO holes\r\n        const pgon_shape: Shape = _convertPgonToShape(__model__, pgon_i, posis_map);\r\n        // pgon_shape.scaleUp(SCALE);\r\n        // create voronoi\r\n        const cells_i: number[] = _voronoiOld(__model__, pgon_shape, d3_cell_points, bounds, posis_map);\r\n        for (const cell_i of cells_i) {\r\n            all_cells_i.push(cell_i);\r\n        }\r\n    }\r\n    // return cell pgons\r\n    return idsMake(all_cells_i.map( cell_i => [EEntType.PGON, cell_i] as TEntTypeIdx )) as TId[];\r\n}\r\n// There is a bug in d3 new voronoi, it produces wrong results...\r\n// function _voronoi(__model__: GIModel, pgon_shape: Shape, d3_cell_points: [number, number][],\r\n//         bounds: number[], posis_map: TPosisMap): number[] {\r\n//     const d3_delaunay = Delaunay.from(d3_cell_points);\r\n//     const d3_voronoi = d3_delaunay.voronoi(bounds);\r\n//     const shapes: Shape[] = [];\r\n//     for (const d3_cell_coords of Array.from(d3_voronoi.cellPolygons())) {\r\n//         const clipped_shape: Shape = _voronoiClip(__model__, pgon_shape, d3_cell_coords as [number, number][]);\r\n//         shapes.push(clipped_shape);\r\n//     }\r\n//     return _convertShapesToPgons(__model__, shapes, posis_map);\r\n// }\r\n// function _voronoiClip(__model__: GIModel, pgon_shape: Shape, d3_cell_coords: [number, number][]): Shape {\r\n//     const cell_shape_coords: IClipCoord[] = [];\r\n//     // for (const d3_cell_coord of d3_cell_coords) {\r\n//     for (let i = 0; i < d3_cell_coords.length - 1; i++) {\r\n//         cell_shape_coords.push( {X: d3_cell_coords[i][0], Y: d3_cell_coords[i][1]} );\r\n//     }\r\n//     const cell_shape: Shape = new Shape([cell_shape_coords], true);\r\n//     cell_shape.scaleUp(SCALE);\r\n//     const clipped_shape: Shape = pgon_shape.intersect(cell_shape);\r\n//     return clipped_shape;\r\n// }\r\nfunction _voronoiOld(__model__: GIModel, pgon_shape: Shape, d3_cell_points: [number, number][],\r\n        bounds: number[], posis_map: TPosisMap): number[] {\r\n    const d3_voronoi = d3vor.voronoi().extent([   [bounds[0], bounds[1]],    [bounds[2], bounds[3]]   ]);\r\n    const d3_voronoi_diag = d3_voronoi(d3_cell_points);\r\n    const shapes: Shape[] = [];\r\n    for (const d3_cell_coords of d3_voronoi_diag.polygons()) {\r\n        if (d3_cell_coords !== undefined) {\r\n            const clipped_shape: Shape = _voronoiClipOld(__model__, pgon_shape, d3_cell_coords as [number, number][]);\r\n            shapes.push(clipped_shape);\r\n        }\r\n    }\r\n    return _convertShapesToPgons(__model__, shapes, posis_map);\r\n}\r\nfunction _voronoiClipOld(__model__: GIModel, pgon_shape: Shape, d3_cell_coords: [number, number][]): Shape {\r\n    const cell_shape_coords: IClipCoord[] = [];\r\n    // for (const d3_cell_coord of d3_cell_coords) {\r\n    for (let i = 0; i < d3_cell_coords.length; i++) {\r\n        cell_shape_coords.push( {X: d3_cell_coords[i][0], Y: d3_cell_coords[i][1]} );\r\n    }\r\n    const cell_shape: Shape = new Shape([cell_shape_coords], true);\r\n    cell_shape.scaleUp(SCALE);\r\n    const clipped_shape: Shape = pgon_shape.intersect(cell_shape);\r\n    return clipped_shape;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Create a delaunay triangulation of set of positions.\r\n * ~\r\n * @param __model__\r\n * @param entities A list of positions, or entities from which positions can be extracted.\r\n * @returns A list of new polygons.\r\n */\r\nexport function Delaunay(__model__: GIModel, entities: TId|TId[]): TId[] {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'poly2d.Delaunay';\r\n    let posis_ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        posis_ents_arr = checkIDs(fn_name, 'entities1', entities,\r\n            [IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // posis_ents_arr = splitIDs(fn_name, 'entities1', entities,\r\n        // [IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        posis_ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const posis_map: TPosisMap = new Map();\r\n    // posis\r\n    const posis_i: number[] = _getPosis(__model__, posis_ents_arr);\r\n    if (posis_i.length === 0) { return []; }\r\n    // posis\r\n    const d3_tri_coords: [number, number][] = [];\r\n    for (const posi_i of posis_i) {\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        d3_tri_coords.push([xyz[0], xyz[1]]);\r\n        _putPosiInMap(xyz[0], xyz[1], posi_i, posis_map);\r\n    }\r\n    // create delaunay triangulation\r\n    const cells_i: number[] = _delaunay(__model__, d3_tri_coords, posis_map);\r\n    // return cell pgons\r\n    return idsMake(cells_i.map( cell_i => [EEntType.PGON, cell_i] as TEntTypeIdx )) as TId[];\r\n}\r\nfunction _delaunay(__model__: GIModel, d3_tri_coords: [number, number][], posis_map: TPosisMap): number[] {\r\n    const new_pgons_i: number[] = [];\r\n    const delaunay = d3del.Delaunay.from(d3_tri_coords);\r\n    const delaunay_posis_i: number[] = [];\r\n    for (const d3_tri_coord of d3_tri_coords) {\r\n        // TODO use the posis_map!!\r\n        // const deauny_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        // __model__.modeldata.attribs.add.setPosiCoords(deauny_posi_i, [point[0], point[1], 0]);\r\n        const delaunay_posi_i: number = _getPosiFromMap(__model__, d3_tri_coord[0], d3_tri_coord[1], posis_map);\r\n        delaunay_posis_i.push(delaunay_posi_i);\r\n    }\r\n    for (let i = 0; i < delaunay.triangles.length; i += 3) {\r\n        const a: number = delaunay_posis_i[delaunay.triangles[i]];\r\n        const b: number = delaunay_posis_i[delaunay.triangles[i + 1]];\r\n        const c: number = delaunay_posis_i[delaunay.triangles[i + 2]];\r\n        new_pgons_i.push(__model__.modeldata.geom.add.addPgon([c, b, a]));\r\n    }\r\n    return new_pgons_i;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Create a voronoi subdivision of a polygon.\r\n *\r\n * @param __model__\r\n * @param entities A list of positions, or entities from which positions can bet extracted.\r\n * @returns A new polygons, the convex hull of the positions.\r\n */\r\nexport function ConvexHull(__model__: GIModel, entities: TId|TId[]): TId {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) { return null; }\r\n    // --- Error Check ---\r\n    const fn_name = 'poly2d.ConvexHull';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    // posis\r\n    const posis_i: number[] = _getPosis(__model__, ents_arr);\r\n    if (posis_i.length === 0) { return null; }\r\n    const hull_posis_i: number[] = _convexHull(__model__, posis_i);\r\n    // return cell pgons\r\n    const hull_pgon_i: number = __model__.modeldata.geom.add.addPgon(hull_posis_i);\r\n    return idsMake([EEntType.PGON, hull_pgon_i]) as TId;\r\n}\r\nfunction _convexHull(__model__: GIModel, posis_i: number[]): number[] {\r\n    const points: [number, number][] = [];\r\n    const posis_map: TPosisMap = new Map();\r\n    for (const posi_i of posis_i) {\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        points.push([xyz[0], xyz[1]]);\r\n        _putPosiInMap(xyz[0], xyz[1], posi_i, posis_map);\r\n    }\r\n    if (points.length < 3) { return null; }\r\n    // loop and create hull\r\n    const hull_points: [number, number][] = d3poly.polygonHull(points);\r\n    const hull_posis_i: number[] = [];\r\n    for (const hull_point of hull_points) {\r\n        const hull_posi_i: number = _getPosiFromMap(__model__, hull_point[0], hull_point[1], posis_map);\r\n        hull_posis_i.push(hull_posi_i);\r\n    }\r\n    hull_posis_i.reverse();\r\n    return hull_posis_i;\r\n}\r\n// ================================================================================================\r\nexport enum _EBBoxMethod {\r\n    AABB = 'aabb',\r\n    OBB = 'obb'\r\n}\r\n/**\r\n * Create a polygon that is a 2D bounding box of the entities.\r\n * ~\r\n * For the method, 'aabb' generates an Axis Aligned Bounding Box, and 'obb' generates an Oriented Bounding Box.\r\n * ~\r\n *\r\n * @param __model__\r\n * @param entities A list of positions, or entities from which positions can bet extracted.\r\n * @param method Enum, the method for generating the bounding box.\r\n * @returns A new polygon, the bounding box of the positions.\r\n */\r\nexport function BBoxPolygon(__model__: GIModel, entities: TId|TId[], method: _EBBoxMethod): TId {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) { return null; }\r\n    // --- Error Check ---\r\n    const fn_name = 'poly2d.BBoxPolygon';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    // posis\r\n    const posis_i: number[] = _getPosis(__model__, ents_arr);\r\n    if (posis_i.length === 0) { return null; }\r\n    let pgon_i: number;\r\n    switch (method) {\r\n        case _EBBoxMethod.AABB:\r\n            pgon_i = _bboxAABB(__model__, posis_i);\r\n            break;\r\n        case _EBBoxMethod.OBB:\r\n            pgon_i = _bboxOBB(__model__, posis_i);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return idsMake([EEntType.PGON, pgon_i]) as TId;\r\n}\r\nfunction _bboxAABB(__model__: GIModel, posis_i: number[]): number {\r\n    const bbox: [number, number, number, number] = [Infinity, Infinity, -Infinity, -Infinity];\r\n    for (const posi_i of posis_i) {\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        if (xyz[0] < bbox[0]) { bbox[0] = xyz[0]; }\r\n        if (xyz[1] < bbox[1]) { bbox[1] = xyz[1]; }\r\n        if (xyz[0] > bbox[2]) { bbox[2] = xyz[0]; }\r\n        if (xyz[1] > bbox[3]) { bbox[3] = xyz[1]; }\r\n    }\r\n    const a: Txyz = [bbox[0], bbox[1], 0];\r\n    const b: Txyz = [bbox[2], bbox[1], 0];\r\n    const c: Txyz = [bbox[2], bbox[3], 0];\r\n    const d: Txyz = [bbox[0], bbox[3], 0];\r\n    const box_posis_i: number[] = [];\r\n    for (const xyz of [a, b, c, d]) {\r\n        const box_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(box_posi_i, xyz);\r\n        box_posis_i.push(box_posi_i);\r\n    }\r\n    const box_pgon_i: number = __model__.modeldata.geom.add.addPgon(box_posis_i);\r\n    return box_pgon_i;\r\n}\r\nfunction _bboxOBB(__model__: GIModel, posis_i: number[]): number {\r\n    // posis\r\n    const hull_posis_i: number[] = _convexHull(__model__, posis_i);\r\n    hull_posis_i.push(hull_posis_i[0]);\r\n    const first: Txyz = __model__.modeldata.attribs.query.getPosiCoords(hull_posis_i[0]);\r\n    const hull_xyzs: Txyz[] = [[first[0], first[1], 0]];\r\n    let longest_len = 0;\r\n    let origin_index = -1;\r\n    for (let i = 1; i < hull_posis_i.length; i++) {\r\n        // add xy to list\r\n        const next: Txyz = __model__.modeldata.attribs.query.getPosiCoords(hull_posis_i[i]);\r\n        hull_xyzs.push([next[0], next[1], 0]);\r\n        // get dist\r\n        const curr_len = distance(hull_xyzs[i - 1], hull_xyzs[i]);\r\n        if (curr_len > longest_len) {\r\n            longest_len = curr_len;\r\n            origin_index = i - 1;\r\n        }\r\n    }\r\n    // get the plane\r\n    const origin: Txyz = hull_xyzs[origin_index];\r\n    const x_vec: Txyz = vecNorm(vecFromTo( origin, hull_xyzs[origin_index + 1] ));\r\n    const y_vec: Txyz = [-x_vec[1], x_vec[0], 0]; // vecCross([0, 0, 1], x_vec);\r\n    const source_pln: TPlane = [origin, x_vec, y_vec];\r\n    // xform posis and get min max\r\n    const bbox: [number, number, number, number] = [Infinity, Infinity, -Infinity, -Infinity];\r\n    const target_pln: TPlane = [[0, 0, 0], [1, 0, 0], [0, 1, 0]];\r\n    const matrix: Matrix4 = xfromSourceTargetMatrix(source_pln, target_pln);\r\n    for (const xyz of hull_xyzs) {\r\n        const new_xyz: Txyz = multMatrix(xyz, matrix);\r\n        if (new_xyz[0] < bbox[0]) { bbox[0] = new_xyz[0]; }\r\n        if (new_xyz[1] < bbox[1]) { bbox[1] = new_xyz[1]; }\r\n        if (new_xyz[0] > bbox[2]) { bbox[2] = new_xyz[0]; }\r\n        if (new_xyz[1] > bbox[3]) { bbox[3] = new_xyz[1]; }\r\n    }\r\n    // calc the bbx\r\n    const a: Txyz = vecAdd(origin, vecMult(x_vec, bbox[0]));\r\n    const b: Txyz = vecAdd(origin, vecMult(x_vec, bbox[2]));\r\n    const height_vec: Txyz = vecMult(y_vec, bbox[3] - bbox[1]);\r\n    const c: Txyz = vecAdd(b, height_vec);\r\n    const d: Txyz = vecAdd(a, height_vec);\r\n    const box_posis_i: number[] = [];\r\n    for (const xyz of [a, b, c, d]) {\r\n        const box_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(box_posi_i, xyz);\r\n        box_posis_i.push(box_posi_i);\r\n    }\r\n    const box_pgon_i: number = __model__.modeldata.geom.add.addPgon(box_posis_i);\r\n    return box_pgon_i;\r\n}\r\nfunction _distance2d(xy1: Txy, xy2: Txy): number {\r\n    const x = xy1[0] - xy2[0];\r\n    const y = xy1[1] - xy2[1];\r\n    return Math.sqrt(x * x + y * y);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Create the union of a set of polygons.\r\n *\r\n * @param __model__\r\n * @param entities A list of polygons, or entities from which polygons can bet extracted.\r\n * @returns A list of new polygons.\r\n */\r\nexport function Union(__model__: GIModel, entities: TId|TId[]): TId[] {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'poly2d.Union';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const posis_map: TPosisMap = new Map();\r\n    const pgons_i: number[] = _getPgons(__model__, ents_arr);\r\n    if (pgons_i.length === 0) { return []; }\r\n    const result_shape: Shape = _convertPgonsToShapeUnion(__model__, pgons_i, posis_map);\r\n    if (result_shape === null) { return []; }\r\n    const all_new_pgons: number[] = _convertShapesToPgons(__model__, result_shape, posis_map);\r\n    return idsMake(all_new_pgons.map( pgon_i => [EEntType.PGON, pgon_i] as TEntTypeIdx )) as TId[];\r\n}\r\n// ================================================================================================\r\n/**\r\n * Perform a boolean operation on polylines or polygons.\r\n * ~\r\n * The entities in A can be either polyline or polygons.\r\n * The entities in B must be polygons.\r\n * The polygons in B are first unioned before the operation is performed.\r\n * The boolean operation is then performed between each polyline or polygon in A, and the unioned B polygons.\r\n * ~\r\n * If A is an empty list, then an empty list is returned.\r\n * If B is an empty list, then the A list is returned.\r\n * ~\r\n * @param __model__\r\n * @param a_entities A list of polyline or polygons, or entities from which polyline or polygons can be extracted.\r\n * @param b_entities A list of polygons, or entities from which polygons can be extracted.\r\n * @param method Enum, the boolean operator to apply.\r\n * @returns A list of new polylines and polygons.\r\n */\r\nexport function Boolean(__model__: GIModel, a_entities: TId|TId[], b_entities: TId|TId[], method: _EBooleanMethod): TId[] {\r\n    a_entities = arrMakeFlat(a_entities) as TId[];\r\n    if (isEmptyArr(a_entities)) { return []; }\r\n    b_entities = arrMakeFlat(b_entities) as TId[];\r\n    if (isEmptyArr(b_entities)) { return a_entities; }\r\n    // --- Error Check ---\r\n    const fn_name = 'poly2d.Boolean';\r\n    let a_ents_arr: TEntTypeIdx[];\r\n    let b_ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        a_ents_arr = checkIDs(fn_name, 'a_entities', a_entities,\r\n        [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n        b_ents_arr = checkIDs(fn_name, 'b_entities', b_entities,\r\n        [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx[];\r\n    } else {\r\n        // a_ents_arr = splitIDs(fn_name, 'a_entities', a_entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        // b_ents_arr = splitIDs(fn_name, 'b_entities', b_entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        a_ents_arr = idsBreak(a_entities) as TEntTypeIdx[];\r\n        b_ents_arr = idsBreak(b_entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const posis_map: TPosisMap = new Map();\r\n    const [a_pgons_i, a_plines_i]: [number[], number[]] = _getPgonsPlines(__model__, a_ents_arr);\r\n    const b_pgons_i: number[] = _getPgons(__model__, b_ents_arr);\r\n    if (a_pgons_i.length === 0 && a_plines_i.length === 0) { return []; }\r\n    if (b_pgons_i.length === 0) { return []; }\r\n    // const a_shape: Shape = _convertPgonsToShapeUnion(__model__, a_pgons_i, posis_map);\r\n    const b_shape: Shape = _convertPgonsToShapeUnion(__model__, b_pgons_i, posis_map);\r\n    // call the boolean function\r\n    const new_pgons_i: number[] = _booleanPgons(__model__, a_pgons_i, b_shape, method, posis_map);\r\n    const new_plines_i: number[] = _booleanPlines(__model__, a_plines_i, b_shape, method, posis_map);\r\n    // make the list of polylines and polygons\r\n    const result_ents: TId[] = [];\r\n    const new_pgons: TId[] = idsMake(new_pgons_i.map( pgon_i => [EEntType.PGON, pgon_i] as TEntTypeIdx )) as TId[];\r\n    for (const new_pgon of new_pgons) {\r\n        result_ents.push(new_pgon);\r\n    }\r\n    const new_plines: TId[] = idsMake(new_plines_i.map( pline_i => [EEntType.PLINE, pline_i] as TEntTypeIdx )) as TId[];\r\n    for (const new_pline of new_plines) {\r\n        result_ents.push(new_pline);\r\n    }\r\n    // always return a list\r\n    return result_ents;\r\n}\r\nfunction _booleanPgons(__model__: GIModel, pgons_i: number|number[], b_shape: Shape,\r\n        method: _EBooleanMethod, posis_map: TPosisMap): number[] {\r\n    if (!Array.isArray(pgons_i)) {\r\n        pgons_i = pgons_i as number;\r\n        const a_shape: Shape = _convertPgonToShape(__model__, pgons_i, posis_map);\r\n        let result_shape: Shape;\r\n        switch (method) {\r\n            case _EBooleanMethod.INTERSECT:\r\n                result_shape = a_shape.intersect(b_shape);\r\n                break;\r\n            case _EBooleanMethod.DIFFERENCE:\r\n                result_shape = a_shape.difference(b_shape);\r\n                break;\r\n            case _EBooleanMethod.SYMMETRIC:\r\n                result_shape = a_shape.xor(b_shape);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return _convertShapesToPgons(__model__, result_shape, posis_map);\r\n    } else {\r\n        pgons_i = pgons_i as number[];\r\n        const all_new_pgons: number[] = [];\r\n        for (const pgon_i of pgons_i) {\r\n            const result_pgons_i: number[] = _booleanPgons(__model__, pgon_i, b_shape, method, posis_map);\r\n            for (const result_pgon_i of result_pgons_i) {\r\n                all_new_pgons.push(result_pgon_i);\r\n            }\r\n        }\r\n        return all_new_pgons;\r\n    }\r\n}\r\nfunction _booleanPlines(__model__: GIModel, plines_i: number|number[], b_shape: Shape,\r\n        method: _EBooleanMethod, posis_map: TPosisMap): number[] {\r\n    if (!Array.isArray(plines_i)) {\r\n        plines_i = plines_i as number;\r\n        const wire_i: number = __model__.modeldata.geom.nav.navPlineToWire(plines_i);\r\n        const is_closed: boolean = __model__.modeldata.geom.query.isWireClosed(wire_i);\r\n        const a_shape: Shape = _convertWireToShape(__model__, wire_i, is_closed, posis_map);\r\n        let result_shape: Shape;\r\n        switch (method) {\r\n            case _EBooleanMethod.INTERSECT:\r\n                result_shape = a_shape.intersect(b_shape);\r\n                break;\r\n            case _EBooleanMethod.DIFFERENCE:\r\n                result_shape = a_shape.difference(b_shape);\r\n                break;\r\n            case _EBooleanMethod.SYMMETRIC:\r\n                // the perimeter of the B polygon is included in the output\r\n                // but the perimeter is not closed, which seems strange\r\n                result_shape = a_shape.xor(b_shape);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return _convertShapeToPlines(__model__, result_shape, is_closed, posis_map);\r\n    } else {\r\n        plines_i = plines_i as number[];\r\n        const all_new_plines: number[] = [];\r\n        for (const pline_i of plines_i) {\r\n            const result_plines_i: number[] = _booleanPlines(__model__, pline_i, b_shape, method, posis_map);\r\n            for (const result_pline_i of result_plines_i) {\r\n                all_new_plines.push(result_pline_i);\r\n            }\r\n        }\r\n        return all_new_plines;\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Offset a polyline or polygon, with mitered joints.\r\n *\r\n * @param __model__\r\n * @param entities A list of pollines or polygons, or entities from which polylines or polygons can be extracted.\r\n * @param dist Offset distance\r\n * @param limit Mitre limit\r\n * @param end_type Enum, the type of end shape for open polylines'.\r\n * @returns A list of new polygons.\r\n */\r\nexport function OffsetMitre(__model__: GIModel, entities: TId|TId[], dist: number,\r\n        limit: number, end_type: _EOffset): TId[] {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) {\r\n        return [];\r\n    }\r\n    // --- Error Check ---\r\n    const fn_name = 'poly2d.OffsetMitre';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], [EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        checkArgs(fn_name, 'miter_limit', limit, [ArgCh.isNum]);\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], [EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const posis_map: TPosisMap = new Map();\r\n    const all_new_pgons: TEntTypeIdx[] = [];\r\n    const options: IClipOffsetOptions = {\r\n        jointType: _EClipJointType.MITER,\r\n        endType: MClipOffsetEndType.get(end_type),\r\n        miterLimit: limit / dist\r\n    };\r\n    const [pgons_i, plines_i]: [number[], number[]] = _getPgonsPlines(__model__, ents_arr);\r\n    for (const pgon_i of pgons_i) {\r\n        const new_pgons_i: number[] = _offsetPgon(__model__, pgon_i, dist, options, posis_map);\r\n        for (const new_pgon_i of new_pgons_i) {\r\n            all_new_pgons.push([EEntType.PGON, new_pgon_i]);\r\n        }\r\n    }\r\n    for (const pline_i of plines_i) {\r\n        const new_pgons_i: number[] = _offsetPline(__model__, pline_i, dist, options, posis_map);\r\n        for (const new_pgon_i of new_pgons_i) {\r\n            all_new_pgons.push([EEntType.PGON, new_pgon_i]);\r\n        }\r\n    }\r\n    // for (const [ent_type, ent_i] of ents_arr) {\r\n    //     const new_pgons_i: number[] = _offset(__model__, ent_type, ent_i, dist, options);\r\n    //     if (new_pgons_i !== null) {\r\n    //         for (const new_pgon_i of new_pgons_i) {\r\n    //             all_new_pgons.push([EEntType.PGON, new_pgon_i]);\r\n    //         }\r\n    //     }\r\n    // }\r\n    return idsMake(all_new_pgons) as TId[];\r\n}\r\n/**\r\n * Offset a polyline or polygon, with chamfered joints.\r\n *\r\n * @param __model__\r\n * @param entities A list of pollines or polygons, or entities from which polylines or polygons can be extracted.\r\n * @param dist Offset distance\r\n * @param end_type Enum, the type of end shape for open polylines'.\r\n * @returns A list of new polygons.\r\n */\r\nexport function OffsetChamfer(__model__: GIModel, entities: TId|TId[], dist: number,\r\n        end_type: _EOffset): TId[] {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) {\r\n        return [];\r\n    }\r\n    // --- Error Check ---\r\n    const fn_name = 'poly2d.OffsetChamfer';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isId, IdCh.isIdL], [EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList], [EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const posis_map: TPosisMap = new Map();\r\n    const all_new_pgons: TEntTypeIdx[] = [];\r\n    const options: IClipOffsetOptions = {\r\n        jointType: _EClipJointType.SQUARE,\r\n        endType: MClipOffsetEndType.get(end_type)\r\n    };\r\n    const [pgons_i, plines_i]: [number[], number[]] = _getPgonsPlines(__model__, ents_arr);\r\n    for (const pgon_i of pgons_i) {\r\n        const new_pgons_i: number[] = _offsetPgon(__model__, pgon_i, dist, options, posis_map);\r\n        for (const new_pgon_i of new_pgons_i) {\r\n            all_new_pgons.push([EEntType.PGON, new_pgon_i]);\r\n        }\r\n    }\r\n    for (const pline_i of plines_i) {\r\n        const new_pgons_i: number[] = _offsetPline(__model__, pline_i, dist, options, posis_map);\r\n        for (const new_pgon_i of new_pgons_i) {\r\n            all_new_pgons.push([EEntType.PGON, new_pgon_i]);\r\n        }\r\n    }\r\n    // for (const [ent_type, ent_i] of ents_arr) {\r\n    //     const new_pgons_i: number[] = _offset(__model__, ent_type, ent_i, dist, options);\r\n    //     if (new_pgons_i !== null) {\r\n    //         for (const new_pgon_i of new_pgons_i) {\r\n    //             all_new_pgons.push([EEntType.PGON, new_pgon_i]);\r\n    //         }\r\n    //     }\r\n    // }\r\n    return idsMake(all_new_pgons) as TId[];\r\n}\r\n/**\r\n * Offset a polyline or polygon, with round joints.\r\n *\r\n * @param __model__\r\n * @param entities A list of pollines or polygons, or entities from which polylines or polygons can be extracted.\r\n * @param dist Offset distance\r\n * @param tolerance The tolerance for the rounded corners.\r\n * @param end_type Enum, the type of end shape for open polylines'.\r\n * @returns A list of new polygons.\r\n */\r\nexport function OffsetRound(__model__: GIModel, entities: TId|TId[], dist: number,\r\n        tolerance: number, end_type: _EOffsetRound): TId[] {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) {\r\n        return [];\r\n    }\r\n    // --- Error Check ---\r\n    const fn_name = 'poly2d.OffsetRound';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], [EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        checkArgs(fn_name, 'tolerance', tolerance, [ArgCh.isNum]);\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isID, IDcheckObj.isIDList], [EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const posis_map: TPosisMap = new Map();\r\n    const all_new_pgons: TEntTypeIdx[] = [];\r\n    const options: IClipOffsetOptions = {\r\n        jointType: _EClipJointType.ROUND,\r\n        endType: MClipOffsetEndType.get(end_type),\r\n        roundPrecision: tolerance * SCALE\r\n    };\r\n    const [pgons_i, plines_i]: [number[], number[]] = _getPgonsPlines(__model__, ents_arr);\r\n    for (const pgon_i of pgons_i) {\r\n        const new_pgons_i: number[] = _offsetPgon(__model__, pgon_i, dist, options, posis_map);\r\n        for (const new_pgon_i of new_pgons_i) {\r\n            all_new_pgons.push([EEntType.PGON, new_pgon_i]);\r\n        }\r\n    }\r\n    for (const pline_i of plines_i) {\r\n        const new_pgons_i: number[] = _offsetPline(__model__, pline_i, dist, options, posis_map);\r\n        for (const new_pgon_i of new_pgons_i) {\r\n            all_new_pgons.push([EEntType.PGON, new_pgon_i]);\r\n        }\r\n    }\r\n    return idsMake(all_new_pgons) as TId[];\r\n}\r\nfunction _offsetPgon(__model__: GIModel, pgon_i: number, dist: number,\r\n        options: IClipOffsetOptions, posis_map: TPosisMap): number[] {\r\n    options.endType = _EClipEndType.CLOSED_PGON;\r\n    const shape: Shape = _convertPgonToShape(__model__, pgon_i, posis_map);\r\n    const result: IClipResult = shape.offset(dist * SCALE, options);\r\n    const result_shape: Shape = new Shape(result.paths, result.closed);\r\n    return _convertShapesToPgons(__model__, result_shape, posis_map);\r\n}\r\nfunction _offsetPline(__model__: GIModel, pline_i: number, dist: number,\r\n        options: IClipOffsetOptions, posis_map: TPosisMap): number[] {\r\n    const wire_i: number = __model__.modeldata.geom.nav.navPlineToWire(pline_i);\r\n    const is_closed: boolean = __model__.modeldata.geom.query.isWireClosed(wire_i);\r\n    if (is_closed) {\r\n        options.endType = _EClipEndType.CLOSED_PLINE;\r\n    }\r\n    const shape: Shape = _convertWireToShape(__model__, wire_i, is_closed, posis_map);\r\n    const result: IClipResult = shape.offset(dist * SCALE, options);\r\n    const result_shape: Shape = new Shape(result.paths, result.closed);\r\n    return _convertShapesToPgons(__model__, result_shape, posis_map);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Adds vertices to polyline and polygons at all locations where egdes intersect one another.\r\n * The vertices are welded.\r\n * This can be useful for creating networks that can be used for shortest path calculations.\r\n * ~\r\n * The input polyline and polygons are copied.\r\n * ~\r\n * @param __model__\r\n * @param entities A list polylines or polygons, or entities from which polylines or polygons can be extracted.\r\n * @returns Copies of the input polyline and polygons, stiched.\r\n */\r\nexport function Stitch(__model__: GIModel, entities: TId|TId[]): TId[] {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) {\r\n        return [];\r\n    }\r\n    // --- Error Check ---\r\n    const fn_name = 'poly2d.Stitch';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n        [IdCh.isIdL], [EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        // [IDcheckObj.isIDList], [EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    // copy the list of entities\r\n    const new_ents_arr: TEntTypeIdx[] = _copyGeom(__model__, ents_arr, true) as TEntTypeIdx[];\r\n    _copyGeomPosis(__model__, new_ents_arr, true, [0, 0, 0]);\r\n    // create maps for data\r\n    const map_edge_i_to_posi_i: Map<number, [number, number]> = new Map();\r\n    const map_edge_i_to_bbox: Map<number, [Txy, Txy]> = new Map();\r\n    const map_posi_i_to_xyz: Map<number, Txyz> = new Map();\r\n    // get the edges\r\n    // const ents_arr2: TEntTypeIdx[] = [];\r\n    // const edges_i: number[] = [];\r\n    // for (const pline_i of __model__.modeldata.geom.add.copyPlines(Array.from(set_plines_i), true) as number[]) {\r\n    //     ents_arr2.push([EEntType.PLINE, pline_i]);\r\n    //     const ent_edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(EEntType.PLINE, pline_i);\r\n    //     for (const edge_i of ent_edges_i) {\r\n    //         edges_i.push(edge_i);\r\n    //         _knifeGetEdgeData(__model__, edge_i, map_edge_i_to_posi_i, map_edge_i_to_bbox, map_posi_i_to_xyz);\r\n    //     }\r\n    // }\r\n    const edges_i: number[] = [];\r\n    for (const [ent_type, ent_i] of new_ents_arr) {\r\n        const ent_edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, ent_i);\r\n        for (const ent_edge_i of ent_edges_i) {\r\n            edges_i.push(ent_edge_i);\r\n            _knifeGetEdgeData(__model__, ent_edge_i, map_edge_i_to_posi_i, map_edge_i_to_bbox, map_posi_i_to_xyz);\r\n        }\r\n    }\r\n    // get the edges and the data for each edge\r\n    const map_edge_i_to_isects: Map<number, [number, number][]> = new Map();\r\n    const map_edge_i_to_edge_i: Map<number, Set<number>> = new Map();\r\n    for (const a_edge_i of edges_i) {\r\n        const a_posis_i: [number, number] = map_edge_i_to_posi_i.get(a_edge_i);\r\n        const a_xyz0: Txyz = map_posi_i_to_xyz.get(a_posis_i[0]);\r\n        const a_xyz1: Txyz = map_posi_i_to_xyz.get(a_posis_i[1]);\r\n        const a_xys: [Txy, Txy] = [[a_xyz0[0], a_xyz0[1]], [a_xyz1[0], a_xyz1[1]]];\r\n        const a_bbox: [Txy, Txy] = map_edge_i_to_bbox.get(a_edge_i);\r\n        for (const b_edge_i of edges_i) {\r\n            // if this is same edge, continue\r\n            if (a_edge_i === b_edge_i) { continue; }\r\n            // if we have already done this pair of edges, continue\r\n            if (map_edge_i_to_edge_i.has(a_edge_i)) {\r\n                if (map_edge_i_to_edge_i.get(a_edge_i).has(b_edge_i)) { continue; }\r\n            }\r\n            const b_posis_i: [number, number] = map_edge_i_to_posi_i.get(b_edge_i);\r\n            const b_xyz0: Txyz = map_posi_i_to_xyz.get(b_posis_i[0]);\r\n            const b_xyz1: Txyz = map_posi_i_to_xyz.get(b_posis_i[1]);\r\n            const b_xys: [Txy, Txy] = [[b_xyz0[0], b_xyz0[1]], [b_xyz1[0], b_xyz1[1]]];\r\n            const b_bbox: [Txy, Txy] = map_edge_i_to_bbox.get(b_edge_i);\r\n            if (_knifeOverlap(a_bbox, b_bbox)) {\r\n                const isect: [number, number, Txy] = _knifeIntersect(a_xys, b_xys);\r\n                if (isect !== null) {\r\n                    let a_isect = true;\r\n                    let b_isect = true;\r\n                    const s = isect[0];\r\n                    const t = isect[1];\r\n                    const new_xy = isect[2];\r\n                    // get or create the new posi\r\n                    let new_posi_i: number = null;\r\n                    // check if we are at the start or end of 'a' edge\r\n                    if (s === 0) {\r\n                        a_isect = false;\r\n                        new_posi_i = a_posis_i[0];\r\n                    } else if (s === 1) {\r\n                        a_isect = false;\r\n                        new_posi_i = a_posis_i[1];\r\n                    }\r\n                    // check if we are at the start or end of 'b' edge\r\n                    if (t === 0) {\r\n                        b_isect = false;\r\n                        new_posi_i = b_posis_i[0];\r\n                    } else if (t === 1) {\r\n                        b_isect = false;\r\n                        new_posi_i = b_posis_i[1];\r\n                    }\r\n                    // make a new position if we have an isect,\r\n                    if (new_posi_i === null && (a_isect || b_isect)) {\r\n                        new_posi_i = __model__.modeldata.geom.add.addPosi();\r\n                        __model__.modeldata.attribs.add.setPosiCoords(new_posi_i, [new_xy[0], new_xy[1], 0]);\r\n                    }\r\n                    // store the isects if there are any\r\n                    if (a_isect) {\r\n                        if (!map_edge_i_to_isects.has(a_edge_i)) {\r\n                            map_edge_i_to_isects.set(a_edge_i, []);\r\n                        }\r\n                        map_edge_i_to_isects.get(a_edge_i).push( [s, new_posi_i] );\r\n                    }\r\n                    if (b_isect) {\r\n                        if (!map_edge_i_to_isects.has(b_edge_i)) {\r\n                            map_edge_i_to_isects.set(b_edge_i, []);\r\n                        }\r\n                        map_edge_i_to_isects.get(b_edge_i).push( [t, new_posi_i] );\r\n                    }\r\n                    // now remember that we did this pair already, so we don't do it again\r\n                    if (!map_edge_i_to_edge_i.has(b_edge_i)) {\r\n                        map_edge_i_to_edge_i.set(b_edge_i, new Set());\r\n                    }\r\n                    map_edge_i_to_edge_i.get(b_edge_i).add(a_edge_i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // const all_new_edges_i: number[] = [];\r\n    const all_new_edges_i: number[] = [];\r\n    for (const edge_i of map_edge_i_to_isects.keys()) {\r\n        // isect [t, posi_i]\r\n        const isects: [number, number][] = map_edge_i_to_isects.get(edge_i);\r\n        isects.sort( (a, b) => a[0] - b[0] );\r\n        const posis_i: number[] = isects.map(isect => isect[1]);\r\n        const new_edges_i: number[] = __model__.modeldata.geom.modify.insertVertsIntoWire(edge_i, posis_i);\r\n        for (const new_edge_i of new_edges_i) {\r\n            all_new_edges_i.push(new_edge_i);\r\n        }\r\n    }\r\n    // check if any new edges are zero length\r\n    const del_posis_i: number[] = [];\r\n    for (const edge_i of all_new_edges_i) {\r\n        const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n        const xyzs: Txyz[] = posis_i.map(posi_i => __model__.modeldata.attribs.query.getPosiCoords(posi_i));\r\n        const dist: number = distanceManhattan(xyzs[0], xyzs[1]);\r\n        if (dist === 0) {\r\n            // we are going to del this posi\r\n            const del_posi_i: number = posis_i[0];\r\n            // get the vert of this edge\r\n            const verts_i: number[] = __model__.modeldata.geom.nav.navEdgeToVert(edge_i);\r\n            const del_vert_i: number = verts_i[0];\r\n            // we need to make sure we dont disconnect any edges in the process\r\n            // so we get all the verts connected to this edge\r\n            // for each other edge, we will replace the posi for the vert that would have been deleted\r\n            // the posi will be posis_i[1]\r\n            const replc_verts_i: number[] = __model__.modeldata.geom.nav.navPosiToVert(del_posi_i);\r\n            for (const replc_vert_i of replc_verts_i) {\r\n                if (replc_vert_i === del_vert_i) { continue; }\r\n                __model__.modeldata.geom.modify.replaceVertPosi(replc_vert_i, posis_i[1], false); // false = do nothing if edge becomes invalid\r\n            }\r\n            del_posis_i.push(posis_i[0]);\r\n        }\r\n    }\r\n    __model__.modeldata.geom.del.delPosis(del_posis_i);\r\n    // return\r\n    return idsMake(new_ents_arr) as TId[];\r\n}\r\nfunction _knifeGetEdgeData(__model__: GIModel, edge_i: number,\r\n        map_edge_i_to_posi_i: Map<number, [number, number]>,\r\n        map_edge_i_to_bbox: Map<number, [Txy, Txy]>,\r\n        map_posi_i_to_xyz: Map<number, Txyz>): void {\r\n    // get the two posis\r\n    const posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.EDGE, edge_i);\r\n    // save the two posis_i\r\n    map_edge_i_to_posi_i.set(edge_i, [posis_i[0], posis_i[1]]);\r\n    // save the xy value of the two posis\r\n    if (!map_posi_i_to_xyz.has(posis_i[0])) {\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[0]);\r\n        __model__.modeldata.attribs.add.setPosiCoords(posis_i[0], [xyz[0], xyz[1], 0]);\r\n        // Why is this not working? It also moves the original geom...\r\n        // if (xyz[2] !== 0) { xyz[2] = 0; } // TODO <<<<<<<<<<<<<<<<<<<<<<\r\n        map_posi_i_to_xyz.set(posis_i[0], xyz);\r\n    }\r\n    if (!map_posi_i_to_xyz.has(posis_i[1])) {\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posis_i[1]);\r\n        __model__.modeldata.attribs.add.setPosiCoords(posis_i[1], [xyz[0], xyz[1], 0]);\r\n        // Why is this not working? It also moves the original geom...\r\n        // if (xyz[2] !== 0) { xyz[2] = 0; } // TODO <<<<<<<<<<<<<<<<<<<<<<\r\n        map_posi_i_to_xyz.set(posis_i[1], xyz);\r\n    }\r\n    // save the bbox\r\n    const xyz0: Txyz = map_posi_i_to_xyz.get(posis_i[0]);\r\n    const xyz1: Txyz = map_posi_i_to_xyz.get(posis_i[1]);\r\n    const xys: [Txy, Txy] = [[xyz0[0], xyz0[1]], [xyz1[0], xyz1[1]]];\r\n    const x_min: number = xys[0][0] < xys[1][0] ? xys[0][0] : xys[1][0];\r\n    const x_max: number = xys[0][0] > xys[1][0] ? xys[0][0] : xys[1][0];\r\n    const y_min: number = xys[0][1] < xys[1][1] ? xys[0][1] : xys[1][1];\r\n    const y_max: number = xys[0][1] > xys[1][1] ? xys[0][1] : xys[1][1];\r\n    map_edge_i_to_bbox.set( edge_i, [[x_min, y_min], [x_max, y_max]] );\r\n}\r\nfunction _knifeOverlap(bbox1: [Txy, Txy], bbox2: [Txy, Txy]): boolean {\r\n    if (bbox2[1][0] < bbox1[0][0]) { return false; }\r\n    if (bbox2[0][0] > bbox1[1][0]) { return false; }\r\n    if (bbox2[1][1] < bbox1[0][1]) { return false; }\r\n    if (bbox2[0][1] > bbox1[1][1]) { return false; }\r\n    return true;\r\n}\r\nfunction _knifeIntersect(l1: [Txy, Txy], l2: [Txy, Txy]): [number, number, Txy] {\r\n    // https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\r\n    const x1 = l1[0][0];\r\n    const y1 = l1[0][1];\r\n    const x2 = l1[1][0];\r\n    const y2 = l1[1][1];\r\n    const x3 = l2[0][0];\r\n    const y3 = l2[0][1];\r\n    const x4 = l2[1][0];\r\n    const y4 = l2[1][1];\r\n    const denominator  = ((x1 - x2) * (y3 - y4)) - ((y1 - y2) * (x3 - x4));\r\n    if (denominator === 0) { return null; }\r\n    const t = (((x1 - x3) * (y3 - y4)) - ((y1 - y3) * (x3 - x4))) / denominator;\r\n    const u = -(((x1 - x2) * (y1 - y3)) - ((y1 - y2) * (x1 - x3))) / denominator;\r\n    if ((t >= 0 && t <= 1) && (u >= 0 && u <= 1)) {\r\n        const new_xy: Txy = [x1 + (t * x2) - (t * x1), y1 + (t * y2) - (t * y1)];\r\n        return [t, u, new_xy];\r\n    }\r\n    return null;\r\n}\r\n\r\n// ================================================================================================\r\n/**\r\n * Clean a polyline or polygon.\r\n * ~\r\n * Vertices that are closer together than the specified tolerance will be merged.\r\n * Vertices that are colinear within the tolerance distance will be deleted.\r\n * ~\r\n * @param __model__\r\n * @param entities A list of polylines or polygons, or entities from which polylines or polygons can be extracted.\r\n * @param tolerance The tolerance for deleting vertices from the polyline.\r\n * @returns A list of new polygons.\r\n */\r\nexport function Clean(__model__: GIModel, entities: TId|TId[], tolerance: number): TId[] {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'poly2d.Clean';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities,\r\n            [IdCh.isId, IdCh.isIdL], [EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        checkArgs(fn_name, 'tolerance', tolerance, [ArgCh.isNum]);\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList], [EEntType.PLINE, EEntType.PGON]) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    const posis_map: TPosisMap = new Map();\r\n    const all_new_pgons: TEntTypeIdx[] = [];\r\n    const [pgons_i, plines_i]: [number[], number[]] = _getPgonsPlines(__model__, ents_arr);\r\n    for (const pgon_i of pgons_i) {\r\n        const new_pgons_i: number[] = _cleanPgon(__model__, pgon_i, tolerance, posis_map);\r\n        for (const new_pgon_i of new_pgons_i) {\r\n            all_new_pgons.push([EEntType.PGON, new_pgon_i]);\r\n        }\r\n    }\r\n    for (const pline_i of plines_i) {\r\n        const new_plines_i: number[] = _cleanPline(__model__, pline_i, tolerance, posis_map);\r\n        for (const new_pline_i of new_plines_i) {\r\n            all_new_pgons.push([EEntType.PLINE, new_pline_i]);\r\n        }\r\n    }\r\n    return idsMake(all_new_pgons) as TId[];\r\n}\r\nfunction _cleanPgon(__model__: GIModel, pgon_i: number, tolerance: number, posis_map: TPosisMap): number[] {\r\n    const shape: Shape = _convertPgonToShape(__model__, pgon_i, posis_map);\r\n    const result: IClipResult = shape.clean(tolerance * SCALE);\r\n    const result_shape: Shape = new Shape(result.paths, result.closed);\r\n    return _convertShapesToPgons(__model__, result_shape, posis_map);\r\n}\r\nfunction _cleanPline(__model__: GIModel, pline_i: number, tolerance: number, posis_map: TPosisMap): number[] {\r\n    const wire_i: number = __model__.modeldata.geom.nav.navPlineToWire(pline_i);\r\n    const verts_i: number[] = __model__.modeldata.geom.nav.navAnyToVert(EEntType.WIRE,  wire_i);\r\n    if (verts_i.length === 2) { return [pline_i]; }\r\n    const is_closed: boolean = __model__.modeldata.geom.query.isWireClosed(wire_i);\r\n    const shape: Shape = _convertWireToShape(__model__, wire_i, is_closed, posis_map);\r\n    const result: IClipResult = shape.clean(tolerance * SCALE);\r\n    const result_shape: Shape = new Shape(result.paths, result.closed);\r\n    const shape_num_verts: number = result_shape.paths[0].length;\r\n    if (shape_num_verts === 0 || shape_num_verts === verts_i.length) { return [pline_i]; }\r\n    return _convertShapeToPlines(__model__, result_shape, result.closed, posis_map);\r\n}\r\n","/**\r\n * The `query` module has functions for querying entities in the the model.\r\n * Most of these functions all return a list of IDs of entities in the model.\r\n * ~\r\n * ~\r\n */\r\n\r\n/**\r\n *\r\n */\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkAttribNameIdxKey, checkAttribValue, splitAttribNameIdxKey } from '../_check_attribs';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { TId, EEntType, ESort, TEntTypeIdx, EFilterOperatorTypes, TAttribDataTypes} from '@libs/geo-info/common';\r\nimport { idsMake, getArrDepth, isEmptyArr, idsBreak } from '@libs/geo-info/id';\r\nimport { isEmptyArr2, arrMakeFlat } from '@assets/libs/util/arrs';\r\n// ================================================================================================\r\nexport enum _EEntType {\r\n    POSI =   'ps',\r\n    VERT =   '_v',\r\n    EDGE =   '_e',\r\n    WIRE =   '_w',\r\n    FACE =   '_f',\r\n    POINT =  'pt',\r\n    PLINE =  'pl',\r\n    PGON =   'pg',\r\n    COLL =   'co'\r\n}\r\nexport enum _EEntTypeAndMod {\r\n    POSI =   'ps',\r\n    VERT =   '_v',\r\n    EDGE =   '_e',\r\n    WIRE =   '_w',\r\n    FACE =   '_f',\r\n    POINT =  'pt',\r\n    PLINE =  'pl',\r\n    PGON =   'pg',\r\n    COLL =   'co',\r\n    MOD =    'mo'\r\n}\r\nfunction _getEntTypeFromStr(ent_type_str: _EEntType|_EEntTypeAndMod): EEntType {\r\n    switch (ent_type_str) {\r\n        case _EEntTypeAndMod.POSI:\r\n            return EEntType.POSI;\r\n        case _EEntTypeAndMod.VERT:\r\n            return EEntType.VERT;\r\n        case _EEntTypeAndMod.EDGE:\r\n            return EEntType.EDGE;\r\n        case _EEntTypeAndMod.WIRE:\r\n            return EEntType.WIRE;\r\n        case _EEntTypeAndMod.FACE:\r\n            return EEntType.FACE;\r\n        case _EEntTypeAndMod.POINT:\r\n            return EEntType.POINT;\r\n        case _EEntTypeAndMod.PLINE:\r\n            return EEntType.PLINE;\r\n        case _EEntTypeAndMod.PGON:\r\n            return EEntType.PGON;\r\n        case _EEntTypeAndMod.COLL:\r\n            return EEntType.COLL;\r\n        case _EEntTypeAndMod.MOD:\r\n            return EEntType.MOD;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n// ================================================================================================\r\nexport enum _EDataType {\r\n    NUMBER =   'number',\r\n    STRING =   'string',\r\n    BOOLEAN = 'boolean',\r\n    LIST =   'list',\r\n    DICT = 'dict'\r\n}\r\n// ================================================================================================\r\n/**\r\n * Get entities from a list of entities.\r\n * For example, you can get the position entities from a list of polygon entities.\r\n * ~\r\n * The result will always be a list of entities, even if there is only one entity.\r\n * In a case where you want only one entity, remember to get the first item in the list.\r\n * ~\r\n * The resulting list of entities will not contain duplicate entities.\r\n * ~\r\n * @param __model__\r\n * @param ent_type_enum Enum, the type of entity to get.\r\n * @param entities Optional, list of entities to get entities from, or null to get all entities in the model.\r\n * @returns Entities, a list of entities.\r\n * @example positions = query.Get('positions', [polyline1, polyline2])\r\n * @example_info Returns a list of positions that are part of polyline1 and polyline2.\r\n */\r\nexport function Get(__model__: GIModel, ent_type_enum: _EEntType, entities: TId|TId[]): TId[]|TId[][] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'query.Get';\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][] = null;\r\n    if (__model__.debug) {\r\n        if (entities !== null && entities !== undefined) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities,\r\n                [IdCh.isId, IdCh.isIdL, IdCh.isIdLL], null) as TEntTypeIdx|TEntTypeIdx[];\r\n        }\r\n    } else {\r\n        if (entities !== null && entities !== undefined) {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n            //     [IDcheckObj.isID, IDcheckObj.isIDList, IDcheckObj.isIDListOfLists], null) as TEntTypeIdx|TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n    }\r\n    // --- Error Check ---\r\n    // get the entity type // TODO deal with multiple ent types\r\n    const ent_type: EEntType = _getEntTypeFromStr(ent_type_enum) as EEntType;\r\n    // if ents_arr is null, then get all entities in the model of type ent_type\r\n    if (ents_arr === null) {\r\n        // return the result\r\n        return idsMake(_getAll(__model__, ent_type)) as TId[];\r\n    }\r\n    if (isEmptyArr(ents_arr)) { return []; }\r\n    // make sure that the ents_arr is at least depth 2\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 1) { ents_arr = [ents_arr] as TEntTypeIdx[]; }\r\n    ents_arr = ents_arr as TEntTypeIdx[]|TEntTypeIdx[][];\r\n    // get the entities\r\n    const found_ents_arr: TEntTypeIdx[]|TEntTypeIdx[][] = _getFrom(__model__, ent_type, ents_arr);\r\n    // return the result\r\n    return idsMake(found_ents_arr) as TId[]|TId[][];\r\n}\r\nfunction _getAll(__model__: GIModel, ent_type: EEntType): TEntTypeIdx[] {\r\n    const ents_i: number[] = __model__.modeldata.geom.query.getEnts(ent_type);\r\n    return ents_i.map(ent_i => [ent_type, ent_i]) as TEntTypeIdx[];\r\n}\r\nfunction _getFrom(__model__: GIModel, ent_type: EEntType, ents_arr: TEntTypeIdx[]|TEntTypeIdx[][]): TEntTypeIdx[]|TEntTypeIdx[][] {\r\n    if (ents_arr.length === 0) { return []; }\r\n    // do the query\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 2) {\r\n        ents_arr = ents_arr as TEntTypeIdx[];\r\n        // get the list of entities that are found\r\n        const found_ents_i_set: Set<number> = new Set();\r\n        for (const ent_arr of ents_arr) {\r\n            if (__model__.modeldata.geom.query.entExists(ent_arr[0], ent_arr[1])) {\r\n                const ents_i: number[] = __model__.modeldata.geom.nav.navAnyToAny(ent_arr[0], ent_type, ent_arr[1]);\r\n                if (ents_i) {\r\n                    for (const ent_i of ents_i) {\r\n                        if (ent_i !== undefined) {\r\n                            found_ents_i_set.add(ent_i);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // return the found ents\r\n        const found_ents_i: number[] = Array.from(found_ents_i_set);\r\n        return found_ents_i.map( entity_i => [ent_type, entity_i]) as TEntTypeIdx[];\r\n    } else { // depth === 3\r\n        // TODO Why do we want this option?\r\n        // TODO I cannot see any reason to return anything buy a flat list\r\n        ents_arr = ents_arr as TEntTypeIdx[][];\r\n        return ents_arr.map(ents_arr_item => _getFrom(__model__, ent_type, ents_arr_item)) as TEntTypeIdx[][];\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Filter a list of entities based on an attribute value.\r\n * ~\r\n * The result will always be a list of entities, even if there is only one entity.\r\n * In a case where you want only one entity, remember to get the first item in the list.\r\n * ~\r\n * @param __model__\r\n * @param entities List of entities to filter. The entities must all be of the same type\r\n * @param attrib The attribute to use for filtering. Can be `name`, `[name, index]`, or `[name, key]`.\r\n * @param operator_enum Enum, the operator to use for filtering\r\n * @param value The attribute value to use for filtering.\r\n * @returns Entities, a list of entities that match the conditions specified in 'expr'.\r\n */\r\nexport function Filter(__model__: GIModel,\r\n        entities: TId|TId[],\r\n        attrib: string|[string, number|string],\r\n        operator_enum: _EFilterOperator, value: TAttribDataTypes): TId[]|TId[][] {\r\n    if (entities === null) { return []; }\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'query.Filter';\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][] = null;\r\n    let attrib_name: string, attrib_idx_key: number|string;\r\n    if (__model__.debug) {\r\n        if (entities !== null && entities !== undefined) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities,\r\n                [IdCh.isId, IdCh.isIdL, IdCh.isIdLL], null) as TEntTypeIdx|TEntTypeIdx[];\r\n        }\r\n        [attrib_name, attrib_idx_key] = checkAttribNameIdxKey(fn_name, attrib);\r\n        checkAttribValue(fn_name, value);\r\n    } else {\r\n        if (entities !== null && entities !== undefined) {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n            //     [IDcheckObj.isID, IDcheckObj.isIDList, IDcheckObj.isIDListOfLists], null) as TEntTypeIdx|TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n        [attrib_name, attrib_idx_key] = splitAttribNameIdxKey(fn_name, attrib);\r\n    }\r\n    // --- Error Check ---\r\n    // make sure that the ents_arr is at least depth 2\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 1) { ents_arr = [ents_arr] as TEntTypeIdx[]; }\r\n    ents_arr = ents_arr as TEntTypeIdx[]|TEntTypeIdx[][];\r\n    // get the oeprator\r\n    const op_type: EFilterOperatorTypes = _filterOperator(operator_enum);\r\n    // do the query\r\n    const found_ents_arr: TEntTypeIdx[]|TEntTypeIdx[][] = _filter(__model__, ents_arr, attrib_name, attrib_idx_key, op_type, value);\r\n    // return the result\r\n    return idsMake(found_ents_arr) as TId[]|TId[][];\r\n}\r\nexport enum _EFilterOperator {\r\n    IS_EQUAL =              '==',\r\n    IS_NOT_EQUAL =          '!=',\r\n    IS_GREATER_OR_EQUAL =   '>=',\r\n    IS_LESS_OR_EQUAL =      '<=',\r\n    IS_GREATER =            '>',\r\n    IS_LESS =               '<',\r\n    EQUAL =                 '='\r\n}\r\nfunction _filterOperator(select: _EFilterOperator): EFilterOperatorTypes {\r\n    switch (select) {\r\n        case _EFilterOperator.IS_EQUAL:\r\n            return EFilterOperatorTypes.IS_EQUAL;\r\n        case _EFilterOperator.IS_NOT_EQUAL:\r\n            return EFilterOperatorTypes.IS_NOT_EQUAL;\r\n        case _EFilterOperator.IS_GREATER_OR_EQUAL:\r\n            return EFilterOperatorTypes.IS_GREATER_OR_EQUAL;\r\n        case _EFilterOperator.IS_LESS_OR_EQUAL:\r\n            return EFilterOperatorTypes.IS_LESS_OR_EQUAL;\r\n        case _EFilterOperator.IS_GREATER:\r\n            return EFilterOperatorTypes.IS_GREATER;\r\n        case _EFilterOperator.IS_LESS:\r\n            return EFilterOperatorTypes.IS_LESS;\r\n        default:\r\n            throw new Error('Query operator type not recognised.');\r\n    }\r\n}\r\nfunction _filter(__model__: GIModel, ents_arr: TEntTypeIdx[]|TEntTypeIdx[][],\r\n        name: string, idx_or_key: number|string, op_type: EFilterOperatorTypes, value: TAttribDataTypes): TEntTypeIdx[]|TEntTypeIdx[][] {\r\n    if (ents_arr.length === 0) { return []; }\r\n    // do the filter\r\n    const depth: number = getArrDepth(ents_arr);\r\n    if (depth === 2) {\r\n        ents_arr = ents_arr as TEntTypeIdx[];\r\n        const ent_type: EEntType = ents_arr[0][0];\r\n        // get the list of entities\r\n        // const found_ents_i: number[] = [];\r\n        // for (const ent_arr of ents_arr) {\r\n        //     found_ents_i.push(...__model__.modeldata.geom.nav.navAnyToAny(ent_arr[0], ent_type, ent_arr[1]));\r\n        // }\r\n        const ents_i: number[] = [];\r\n        for (const ent_arr of ents_arr) {\r\n            if (ent_arr[0] !== ent_type) {\r\n                throw new Error('Error filtering list of entities: The entities must all be of the same type.');\r\n            }\r\n            ents_i.push(ent_arr[1]);\r\n        }\r\n        // filter the entities\r\n        const query_result: number[] =\r\n            __model__.modeldata.attribs.query.filterByAttribs(ent_type, ents_i, name, idx_or_key, op_type, value);\r\n        if (query_result.length === 0) { return []; }\r\n        return query_result.map( entity_i => [ent_type, entity_i]) as TEntTypeIdx[];\r\n    } else { // depth === 3\r\n        // TODO Why do we want this option?\r\n        // TODO I cannot see any reason to return anything buy a flat list\r\n        ents_arr = ents_arr as TEntTypeIdx[][];\r\n        return ents_arr.map(ents_arr_item => _filter(__model__, ents_arr_item, name, idx_or_key, op_type, value)) as TEntTypeIdx[][];\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Returns a list of entities that are not part of the specified entities.\r\n * For example, you can get the position entities that are not part of a list of polygon entities.\r\n * ~\r\n * This function does the opposite of query.Get().\r\n * While query.Get() gets entities that are part of of the list of entities,\r\n * this function gets the entities that are not part of the list of entities.\r\n * ~\r\n * @param __model__\r\n * @param ent_type_enum Enum, specifies what type of entities will be returned.\r\n * @param entities List of entities to be excluded.\r\n * @returns Entities, a list of entities that match the type specified in 'ent_type_enum', and that are not in entities.\r\n * @example positions = query.Invert('positions', [polyline1, polyline2])\r\n * @example_info Returns a list of positions that are not part of polyline1 and polyline2.\r\n */\r\nexport function Invert(__model__: GIModel, ent_type_enum: _EEntType, entities: TId|TId[]): TId[] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    let ents_arr: TEntTypeIdx[] = null;\r\n    if (__model__.debug) {\r\n        if (entities !== null && entities !== undefined) {\r\n            ents_arr = checkIDs('query.Invert', 'entities', entities, [IdCh.isIdL], null) as TEntTypeIdx[];\r\n        }\r\n    } else {\r\n        if (entities !== null && entities !== undefined) {\r\n            // ents_arr = splitIDs('query.Invert', 'entities', entities, [IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n    }\r\n    // --- Error Check ---\r\n    const select_ent_types: EEntType = _getEntTypeFromStr(ent_type_enum);\r\n    const found_ents_arr: TEntTypeIdx[] = _invert(__model__, select_ent_types, ents_arr);\r\n    return idsMake(found_ents_arr) as TId[];\r\n}\r\nfunction _invert(__model__: GIModel, select_ent_type: EEntType, ents_arr: TEntTypeIdx[]): TEntTypeIdx[] {\r\n    // get the ents to exclude\r\n    const excl_ents_i: number[] = (ents_arr as TEntTypeIdx[])\r\n        .filter(ent_arr => ent_arr[0] === select_ent_type).map(ent_arr => ent_arr[1]);\r\n    // get the list of entities\r\n    const found_entities_i: number[] = [];\r\n    const ents_i: number[] = __model__.modeldata.geom.query.getEnts(select_ent_type);\r\n    for (const ent_i of ents_i) {\r\n        if (excl_ents_i.indexOf(ent_i) === -1) { found_entities_i.push(ent_i); }\r\n    }\r\n    return found_entities_i.map( entity_i => [select_ent_type, entity_i]) as TEntTypeIdx[];\r\n}\r\n// ================================================================================================\r\nexport enum _ESortMethod {\r\n    DESCENDING = 'descending',\r\n    ASCENDING = 'ascending'\r\n}\r\n/**\r\n * Sorts entities based on an attribute.\r\n * ~\r\n * If the attribute is a list, and index can also be specified as follows: #@name1[index].\r\n * ~\r\n * @param __model__\r\n * @param entities List of two or more entities to be sorted, all of the same entity type.\r\n * @param attrib Attribute name to use for sorting. Can be `name`, `[name, index]`, or `[name, key]`.\r\n * @param method_enum Enum, sort descending or ascending.\r\n * @returns Entities, a list of sorted entities.\r\n * @example sorted_list = query.Sort( [pos1, pos2, pos3], #@xyz[2], descending)\r\n * @example_info Returns a list of three positions, sorted according to the descending z value.\r\n */\r\nexport function Sort(__model__: GIModel, entities: TId[], attrib: string|[string, number|string], method_enum: _ESortMethod): TId[] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'query.Sort';\r\n    let ents_arr: TEntTypeIdx[];\r\n    let attrib_name: string, attrib_idx_key: number|string;\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isIdL], null) as TEntTypeIdx[];\r\n        [attrib_name, attrib_idx_key] = checkAttribNameIdxKey(fn_name, attrib);\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities, [IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        [attrib_name, attrib_idx_key] = splitAttribNameIdxKey(fn_name, attrib);\r\n    }\r\n    // --- Error Check ---\r\n    const sort_method: ESort = (method_enum === _ESortMethod.DESCENDING) ? ESort.DESCENDING : ESort.ASCENDING;\r\n    const sorted_ents_arr: TEntTypeIdx[] = _sort(__model__, ents_arr, attrib_name, attrib_idx_key, sort_method);\r\n    return idsMake(sorted_ents_arr) as TId[];\r\n}\r\nfunction _sort(__model__: GIModel, ents_arr: TEntTypeIdx[], attrib_name: string, idx_or_key: number|string, method: ESort): TEntTypeIdx[] {\r\n    // get the list of ents_i\r\n    const ent_type: EEntType = ents_arr[0][0];\r\n    const ents_i: number[] = ents_arr.filter( ent_arr => ent_arr[0] === ent_type ).map( ent_arr => ent_arr[1] );\r\n    // check if we are sorting by '_id'\r\n    if (attrib_name === '_id') {\r\n        const ents_arr_copy: TEntTypeIdx[] = ents_arr.slice();\r\n        ents_arr_copy.sort(_compareID);\r\n        if (method === ESort.DESCENDING) { ents_arr_copy.reverse(); }\r\n        return ents_arr_copy;\r\n    }\r\n    // do the sort on the list of entities\r\n    const sort_result: number[] = __model__.modeldata.attribs.query.sortByAttribs(ent_type, ents_i, attrib_name, idx_or_key, method);\r\n    return sort_result.map( entity_i => [ent_type, entity_i]) as TEntTypeIdx[];\r\n}\r\nfunction _compareID(id1: TEntTypeIdx, id2: TEntTypeIdx): number {\r\n    const [ent_type1, index1] = id1;\r\n    const [ent_type2, index2] = id2;\r\n    if (ent_type1 !== ent_type2) { return ent_type1 -  ent_type2; }\r\n    if (index1 !== index2) { return index1 -  index2; }\r\n    return 0;\r\n}\r\n// ================================================================================================\r\n/**\r\n* Returns a list of perimeter entities. In order to qualify as a perimeter entity,\r\n* entities must be part of the set of input entities and must have naked edges.\r\n* ~\r\n* @param __model__\r\n* @param ent_type Enum, select the type of perimeter entities to return\r\n* @param entities List of entities.\r\n* @returns Entities, a list of perimeter entities.\r\n* @example query.Perimeter('edges', [polygon1,polygon2,polygon])\r\n* @example_info Returns list of edges that are at the perimeter of polygon1, polygon2, or polygon3.\r\n*/\r\nexport function Perimeter(__model__: GIModel, ent_type: _EEntType, entities: TId|TId[]): TId[] {\r\n    if (isEmptyArr2(entities)) { return []; }\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    let ents_arr: TEntTypeIdx[] = null;\r\n    if (__model__.debug) {\r\n        if (entities !== null && entities !== undefined) {\r\n            ents_arr = checkIDs('query.Perimeter', 'entities', entities, [IdCh.isIdL], null) as TEntTypeIdx[];\r\n        }\r\n    } else {\r\n        if (entities !== null && entities !== undefined) {\r\n            // ents_arr = splitIDs('query.Perimeter', 'entities', entities, [IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n    }\r\n    // --- Error Check ---\r\n    const select_ent_type: EEntType = _getEntTypeFromStr(ent_type);\r\n    const found_ents_arr: TEntTypeIdx[] = _perimeter(__model__, select_ent_type, ents_arr);\r\n    return idsMake(found_ents_arr) as TId[];\r\n}\r\nexport function _perimeter(__model__: GIModel,  select_ent_type: EEntType, ents_arr: TEntTypeIdx[]): TEntTypeIdx[] {\r\n    // get an array of all edges\r\n    const edges_i: number[] = [];\r\n    for (const ent_arr of ents_arr) {\r\n        const [ent_type, index]: TEntTypeIdx = ent_arr as TEntTypeIdx ;\r\n        const edges_ent_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, index);\r\n        for (const edge_ent_i of edges_ent_i) {\r\n            edges_i.push(edge_ent_i);\r\n        }\r\n    }\r\n    // get the perimeter entities\r\n    const all_perim_ents_i: number[] = __model__.modeldata.geom.query.perimeter(select_ent_type, edges_i);\r\n    return all_perim_ents_i.map(perim_ent_i => [select_ent_type, perim_ent_i]) as TEntTypeIdx[];\r\n}\r\n// ================================================================================================\r\n/**\r\n* Returns a list of neighboring entities. In order to qualify as a neighbor,\r\n* entities must not be part of the set of input entities, but must be welded to one or more entities in the input.\r\n* ~\r\n* @param __model__\r\n* @param ent_type_enum Enum, select the types of neighbors to return\r\n* @param entities List of entities.\r\n* @returns Entities, a list of welded neighbors\r\n* @example query.neighbor('edges', [polyline1,polyline2,polyline3])\r\n* @example_info Returns list of edges that are welded to polyline1, polyline2, or polyline3.\r\n*/\r\nexport function Neighbor(__model__: GIModel, ent_type_enum: _EEntType, entities: TId|TId[]): TId[] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    let ents_arr: TEntTypeIdx[] = null;\r\n    if (__model__.debug) {\r\n        if (entities !== null && entities !== undefined) {\r\n            ents_arr = checkIDs('query.Neighbor', 'entities', entities, [IdCh.isIdL], null) as TEntTypeIdx[];\r\n        }\r\n    } else {\r\n        if (entities !== null && entities !== undefined) {\r\n            // ents_arr = splitIDs('query.neighbor', 'entities', entities, [IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n        }\r\n    }\r\n    // --- Error Check ---\r\n    const select_ent_type: EEntType = _getEntTypeFromStr(ent_type_enum);\r\n    const found_ents_arr: TEntTypeIdx[] = _neighbors(__model__, select_ent_type, ents_arr);\r\n    return idsMake(found_ents_arr) as TId[];\r\n}\r\nexport function _neighbors(__model__: GIModel,  select_ent_type: EEntType, ents_arr: TEntTypeIdx[]): TEntTypeIdx[] {\r\n    // get an array of all vertices\r\n    const verts_i: number[] = [];\r\n    for (const ent_arr of ents_arr) {\r\n        const [ent_type, index]: TEntTypeIdx = ent_arr as TEntTypeIdx ;\r\n        const verts_ent_i: number[] = __model__.modeldata.geom.nav.navAnyToVert(ent_type, index);\r\n        for (const vert_ent_i of verts_ent_i) {\r\n            verts_i.push(vert_ent_i);\r\n        }\r\n    }\r\n    // get the neighbor entities\r\n    const all_nbor_ents_i: number[] = __model__.modeldata.geom.query.neighbor(select_ent_type, verts_i);\r\n    return all_nbor_ents_i.map(nbor_ent_i => [select_ent_type, nbor_ent_i]) as TEntTypeIdx[];\r\n}\r\n// ================================================================================================\r\n/**\r\n * Checks the type of an entity.\r\n * ~\r\n * For is_used_posi, returns true if the entity is a posi, and it is used by at least one vertex.\r\n * For is_unused_posi, it returns the opposite of is_used_posi.\r\n * For is_object, returns true if the entity is a point, a polyline, or a polygon.\r\n * For is_topology, returns true if the entity is a vertex, an edge, a wire, or a face.\r\n * For is_point_topology, is_polyline_topology, and is_polygon_topology, returns true\r\n * if the entity is a topological entity, and it is part of an object of the specified type.\r\n * ~\r\n * For is_open, returns true if the entity is a wire or polyline and is open. For is_closed, it returns the opposite of is_open.\r\n * For is_hole, returns ture if the entity is a wire, and it defines a hole in a face.\r\n * For has_holes, returns true if the entity is a face or polygon, and it has holes.\r\n * For has_no_holes, it returns the opposite of has_holes.\r\n *\r\n * @param __model__\r\n * @param entities An entity, or a list of entities.\r\n * @param type_query_enum Enum, select the conditions to test agains.\r\n * @returns Boolean or list of boolean in input sequence.\r\n * @example query.Type([polyline1, polyline2, polygon1], is_polyline )\r\n * @example_info Returns a list [true, true, false] if polyline1 and polyline2 are polylines but polygon1 is not a polyline.\r\n */\r\nexport function Type(__model__: GIModel, entities: TId|TId[], type_query_enum: _ETypeQueryEnum): boolean|boolean[] {\r\n    if (isEmptyArr(entities)) { return []; }\r\n    // --- Error Check ---\r\n    const fn_name = 'query.Type';\r\n    let ents_arr: TEntTypeIdx|TEntTypeIdx[] = null;\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'entities', entities, [IdCh.isId, IdCh.isIdL], null) as TEntTypeIdx|TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'entities', entities, [IDcheckObj.isID, IDcheckObj.isIDList], null) as TEntTypeIdx|TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx|TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    return _type(__model__, ents_arr, type_query_enum);\r\n}\r\nfunction _isClosed(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[]): boolean|boolean[] {\r\n    if (!Array.isArray(ents_arr[0])) {\r\n        const [ent_type, index]: TEntTypeIdx = ents_arr as TEntTypeIdx;\r\n        if (ent_type === EEntType.PGON) {\r\n            return true;\r\n        } else if (ent_type !== EEntType.WIRE && ent_type !== EEntType.PLINE) {\r\n            return false;\r\n        }\r\n        let wire_i: number = index;\r\n        if (ent_type === EEntType.PLINE) {\r\n            wire_i = __model__.modeldata.geom.nav.navPlineToWire(index);\r\n        }\r\n        return __model__.modeldata.geom.query.isWireClosed(wire_i) as boolean;\r\n    } else {\r\n        return (ents_arr as TEntTypeIdx[]).map(ents => _isClosed(__model__, ents)) as boolean[];\r\n    }\r\n}\r\n\r\nexport enum _ETypeQueryEnum {\r\n    EXISTS = 'exists',\r\n    IS_POSI =   'is_position',\r\n    IS_USED_POSI = 'is_used_posi',\r\n    IS_UNUSED_POSI = 'is_unused_posi',\r\n    IS_VERT =   'is_vertex',\r\n    IS_EDGE =   'is_edge',\r\n    IS_WIRE =   'is_wire',\r\n    IS_FACE =   'is_face',\r\n    IS_POINT =  'is_point',\r\n    IS_PLINE =  'is_polyline',\r\n    IS_PGON =   'is_polygon',\r\n    IS_COLL =   'is_collection',\r\n    IS_OBJ =    'is_object',\r\n    IS_TOPO =   'is_topology',\r\n    IS_POINT_TOPO =   'is_point_topology',\r\n    IS_PLINE_TOPO =   'is_polyline_topology',\r\n    IS_PGON_TOPO =   'is_polygon_topology',\r\n    IS_OPEN =      'is_open',\r\n    IS_CLOSED =    'is_closed',\r\n    IS_HOLE =      'is_hole',\r\n    HAS_HOLES =    'has_holes',\r\n    HAS_NO_HOLES = 'has_no_holes'\r\n}\r\nfunction _exists(__model__: GIModel, ent_arr: TEntTypeIdx): boolean {\r\n    const [ent_type, index]: TEntTypeIdx = ent_arr;\r\n    return __model__.modeldata.geom.query.entExists(ent_type, index);\r\n}\r\nfunction _isUsedPosi(__model__: GIModel, ent_arr: TEntTypeIdx): boolean {\r\n    const [ent_type, index]: TEntTypeIdx = ent_arr;\r\n    if (ent_type !== EEntType.POSI) {\r\n        return false;\r\n    }\r\n    const verts_i: number[] = __model__.modeldata.geom.nav.navPosiToVert(index);\r\n    if (verts_i === undefined || verts_i === null) {\r\n        return false;\r\n    }\r\n    return verts_i.length > 0;\r\n}\r\nfunction _isObj(__model__: GIModel, ent_arr: TEntTypeIdx): boolean {\r\n    const [ent_type, index]: TEntTypeIdx = ent_arr;\r\n    if (ent_type === EEntType.POINT || ent_type === EEntType.PLINE || ent_type === EEntType.PGON) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction _isTopo(__model__: GIModel, ent_arr: TEntTypeIdx): boolean {\r\n    const [ent_type, index]: TEntTypeIdx = ent_arr;\r\n    if (ent_type === EEntType.VERT || ent_type === EEntType.EDGE || ent_type === EEntType.WIRE || ent_type === EEntType.FACE) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction _isPointTopo(__model__: GIModel, ent_arr: TEntTypeIdx): boolean {\r\n    const [ent_type, index]: TEntTypeIdx = ent_arr;\r\n    if (ent_type === EEntType.VERT || ent_type === EEntType.EDGE || ent_type === EEntType.WIRE || ent_type === EEntType.FACE) {\r\n        const points_i: number[] = __model__.modeldata.geom.nav.navAnyToPoint(ent_type, index);\r\n        if (points_i !== undefined && points_i !== null && points_i.length) { return true; }\r\n    }\r\n    return false;\r\n}\r\nfunction _isPlineTopo(__model__: GIModel, ent_arr: TEntTypeIdx): boolean {\r\n    const [ent_type, index]: TEntTypeIdx = ent_arr;\r\n    if (ent_type === EEntType.VERT || ent_type === EEntType.EDGE || ent_type === EEntType.WIRE || ent_type === EEntType.FACE) {\r\n        const plines_i: number[] = __model__.modeldata.geom.nav.navAnyToPline(ent_type, index);\r\n        if (plines_i !== undefined && plines_i !== null && plines_i.length) { return true; }\r\n    }\r\n    return false;\r\n}\r\nfunction _isPgonTopo(__model__: GIModel, ent_arr: TEntTypeIdx): boolean {\r\n    const [ent_type, index]: TEntTypeIdx = ent_arr;\r\n    if (ent_type === EEntType.VERT || ent_type === EEntType.EDGE || ent_type === EEntType.WIRE || ent_type === EEntType.FACE) {\r\n        const pgons_i: number[] = __model__.modeldata.geom.nav.navAnyToPgon(ent_type, index);\r\n        if (pgons_i !== undefined && pgons_i !== null && pgons_i.length) { return true; }\r\n    }\r\n    return false;\r\n}\r\nfunction _isClosed2(__model__: GIModel, ent_arr: TEntTypeIdx): boolean {\r\n    const [ent_type, index]: TEntTypeIdx = ent_arr;\r\n    if (ent_type === EEntType.PGON) {\r\n        return true;\r\n    } else if (ent_type !== EEntType.WIRE && ent_type !== EEntType.PLINE) {\r\n        return false;\r\n    }\r\n    let wire_i: number = index;\r\n    if (ent_type === EEntType.PLINE) {\r\n        wire_i = __model__.modeldata.geom.nav.navPlineToWire(index);\r\n    }\r\n    return __model__.modeldata.geom.query.isWireClosed(wire_i) as boolean;\r\n}\r\nfunction _isHole(__model__: GIModel, ent_arr: TEntTypeIdx): boolean {\r\n    const [ent_type, index]: TEntTypeIdx = ent_arr;\r\n    if (ent_type !== EEntType.WIRE) {\r\n        return false;\r\n    }\r\n    const face_i: number = __model__.modeldata.geom.nav.navWireToFace(index);\r\n    if (face_i === undefined || face_i === null) {\r\n        return false;\r\n    }\r\n    const wires_i: number[] = __model__.modeldata.geom.nav.navFaceToWire(face_i);\r\n    return wires_i.indexOf(index) > 0;\r\n}\r\nfunction _hasNoHoles(__model__: GIModel, ent_arr: TEntTypeIdx): boolean {\r\n    const [ent_type, index]: TEntTypeIdx = ent_arr;\r\n    if (ent_type !== EEntType.FACE && ent_type !== EEntType.PGON) {\r\n        return false;\r\n    }\r\n    let face_i: number = index;\r\n    if (ent_type === EEntType.PGON) {\r\n        face_i = __model__.modeldata.geom.nav.navPgonToFace(index);\r\n    }\r\n    const wires_i: number[] = __model__.modeldata.geom.nav.navFaceToWire(face_i);\r\n    return wires_i.length === 1;\r\n}\r\nfunction _type(__model__: GIModel, ents_arr: TEntTypeIdx|TEntTypeIdx[], query_ent_type: _ETypeQueryEnum): boolean|boolean[] {\r\n    if (getArrDepth(ents_arr) === 1) {\r\n        const ent_arr: TEntTypeIdx = ents_arr as TEntTypeIdx;\r\n        const [ent_type, _]: TEntTypeIdx = ent_arr;\r\n        switch (query_ent_type) {\r\n            case _ETypeQueryEnum.EXISTS:\r\n                return _exists(__model__, ent_arr);\r\n            case _ETypeQueryEnum.IS_POSI:\r\n                return ent_type === EEntType.POSI;\r\n            case _ETypeQueryEnum.IS_USED_POSI:\r\n                return _isUsedPosi(__model__, ent_arr);\r\n            case _ETypeQueryEnum.IS_UNUSED_POSI:\r\n                return !_isUsedPosi(__model__, ent_arr);\r\n            case _ETypeQueryEnum.IS_VERT:\r\n                return ent_type === EEntType.VERT;\r\n            case _ETypeQueryEnum.IS_EDGE:\r\n                return ent_type === EEntType.EDGE;\r\n            case _ETypeQueryEnum.IS_WIRE:\r\n                return ent_type === EEntType.WIRE;\r\n            case _ETypeQueryEnum.IS_FACE:\r\n                return ent_type === EEntType.FACE;\r\n            case _ETypeQueryEnum.IS_POINT:\r\n                return ent_type === EEntType.POINT;\r\n            case _ETypeQueryEnum.IS_PLINE:\r\n                return ent_type === EEntType.PLINE;\r\n            case _ETypeQueryEnum.IS_PGON:\r\n                return ent_type === EEntType.PGON;\r\n            case _ETypeQueryEnum.IS_COLL:\r\n                return ent_type === EEntType.COLL;\r\n            case _ETypeQueryEnum.IS_OBJ:\r\n                return _isObj(__model__, ent_arr);\r\n            case _ETypeQueryEnum.IS_TOPO:\r\n                return _isTopo(__model__, ent_arr);\r\n            case _ETypeQueryEnum.IS_POINT_TOPO:\r\n                return _isPointTopo(__model__, ent_arr);\r\n            case _ETypeQueryEnum.IS_PLINE_TOPO:\r\n                return _isPlineTopo(__model__, ent_arr);\r\n            case _ETypeQueryEnum.IS_PGON_TOPO:\r\n                return _isPgonTopo(__model__, ent_arr);\r\n            case _ETypeQueryEnum.IS_OPEN:\r\n                return !_isClosed2(__model__, ent_arr);\r\n            case _ETypeQueryEnum.IS_CLOSED:\r\n                return _isClosed2(__model__, ent_arr);\r\n            case _ETypeQueryEnum.IS_HOLE:\r\n                return _isHole(__model__, ent_arr);\r\n            case _ETypeQueryEnum.HAS_HOLES:\r\n                return !_hasNoHoles(__model__, ent_arr);\r\n            case _ETypeQueryEnum.HAS_NO_HOLES:\r\n                return _hasNoHoles(__model__, ent_arr);\r\n            default:\r\n                break;\r\n        }\r\n    } else {\r\n        return (ents_arr as TEntTypeIdx[]).map(ent_arr => _type(__model__, ent_arr, query_ent_type)) as boolean[];\r\n    }\r\n\r\n}\r\n// TODO IS_PLANAR\r\n// TODO IS_QUAD\r\n// ================================================================================================\r\n\r\n","/**\r\n * The `util` module has some utility functions used for debugging.\r\n */\r\n\r\n/**\r\n *\r\n */\r\n\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { download } from '@libs/filesys/download';\r\nimport { EEntType, IModelJSONData, TId, TEntTypeIdx } from '@libs/geo-info/common';\r\nimport { __merge__ } from '../_model';\r\nimport { _model } from '..';\r\nimport { arrMakeFlat } from '@assets/libs/util/arrs';\r\nimport { idsBreak } from '@assets/libs/geo-info/id';\r\nimport { _getFile } from './io';\r\n\r\nexport enum _ECOmpareMethod {\r\n    THIS_IS_SUBSET = 'subset',\r\n    THIS_IS_SUPERSET = 'superset',\r\n    THIS_IS_EQUAL = 'equal'\r\n}\r\n// ================================================================================================\r\n/**\r\n * Removes all deleted entities from the model.\r\n * The IDs of other entities may change as a result.\r\n * ~\r\n * For example, if 'pg0' was deleted and 'pg1' still exists, then after purge\r\n * 'pg1' will get renumbered, and will get the ID 'pg0'.\r\n *\r\n * @param __model__\r\n * @returns void\r\n */\r\nexport function ModelPurge(__model__: GIModel): void {\r\n    __model__.purge();\r\n}\r\n// ================================================================================================\r\n/**\r\n * Returns an html string representation of the contents of this model\r\n *\r\n * @param __model__\r\n * @returns Text that summarises what is in the model, click print to see this text.\r\n */\r\nexport function ModelInfo(__model__: GIModel): string {\r\n    let info = '<h4>Model Information:</h4>';\r\n    info += '<ul>';\r\n    // model attribs\r\n    const model_attribs: string[] = __model__.modeldata.attribs.query.getAttribNames(EEntType.MOD);\r\n    if (model_attribs.length !== 0) { info += '<li>Model attribs: ' + model_attribs.join(', ') + '</li>'; }\r\n    // collections\r\n    const num_colls: number = __model__.modeldata.geom.query.numEnts(EEntType.COLL);\r\n    // const num_del_colls: number = __model__.modeldata.geom.query.numEnts(EEntType.COLL, true) - num_colls;\r\n    const coll_attribs: string[] = __model__.modeldata.attribs.query.getAttribNames(EEntType.COLL);\r\n    info += '<li>';\r\n    info += '<b>Collections</b>: ' + num_colls; // + ' (Deleted: ' + num_del_colls + ') ';\r\n    if (coll_attribs.length !== 0) { info += 'Attribs: ' + coll_attribs.join(', '); }\r\n    info += '</li>';\r\n    // pgons\r\n    const num_pgons: number = __model__.modeldata.geom.query.numEnts(EEntType.PGON);\r\n    // const num_del_pgons: number = __model__.modeldata.geom.query.numEnts(EEntType.PGON, true) - num_pgons;\r\n    const pgon_attribs: string[] = __model__.modeldata.attribs.query.getAttribNames(EEntType.PGON);\r\n    info += '<li>';\r\n    info += '<b>Polygons</b>: ' + num_pgons; // + ' (Deleted: ' + num_del_pgons + ') ';\r\n    if (pgon_attribs.length !== 0) { info += 'Attribs: ' + pgon_attribs.join(', '); }\r\n    info += '</li>';\r\n    // plines\r\n    const num_plines: number = __model__.modeldata.geom.query.numEnts(EEntType.PLINE);\r\n    // const num_del_plines: number = __model__.modeldata.geom.query.numEnts(EEntType.PLINE, true) - num_plines;\r\n    const pline_attribs: string[] = __model__.modeldata.attribs.query.getAttribNames(EEntType.PLINE);\r\n    info += '<li>';\r\n    info += '<b>Polylines</b>: ' + num_plines; // + ' (Deleted: ' + num_del_plines + ') ';\r\n    if (pline_attribs.length !== 0) { info += 'Attribs: ' + pline_attribs.join(', '); }\r\n    info += '</li>';\r\n    // points\r\n    const num_points: number = __model__.modeldata.geom.query.numEnts(EEntType.POINT);\r\n    // const num_del_points: number = __model__.modeldata.geom.query.numEnts(EEntType.POINT, true) - num_points;\r\n    const point_attribs: string[] = __model__.modeldata.attribs.query.getAttribNames(EEntType.POINT);\r\n    info += '<li>';\r\n    info += '<b>Points</b>: ' + num_points; // + ' (Deleted: ' + num_del_points + ') ';\r\n    if (point_attribs.length !== 0) { info += 'Attribs: ' + point_attribs.join(', '); }\r\n    info += '</li>';\r\n    // faces\r\n    const num_faces: number = __model__.modeldata.geom.query.numEnts(EEntType.FACE);\r\n    // const num_del_faces: number = __model__.modeldata.geom.query.numEnts(EEntType.FACE, true) - num_faces;\r\n    const face_attribs: string[] = __model__.modeldata.attribs.query.getAttribNames(EEntType.FACE);\r\n    info += '<li>';\r\n    info += '<b>Faces</b>: ' + num_faces; // + ' (Deleted: ' + num_del_faces + ') ';\r\n    if (face_attribs.length !== 0) { info += 'Attribs: ' + face_attribs.join(', '); }\r\n    info += '</li>';\r\n    // wires\r\n    const num_wires: number = __model__.modeldata.geom.query.numEnts(EEntType.WIRE);\r\n    // const num_del_wires: number = __model__.modeldata.geom.query.numEnts(EEntType.WIRE, true) - num_wires;\r\n    const wire_attribs: string[] = __model__.modeldata.attribs.query.getAttribNames(EEntType.WIRE);\r\n    info += '<li>';\r\n    info += '<b>Wires</b>: ' + num_wires; // + ' (Deleted: ' + num_del_wires + ') ';\r\n    if (wire_attribs.length !== 0) { info += 'Attribs: ' + wire_attribs.join(', '); }\r\n    info += '</li>';\r\n    // edges\r\n    const num_edges: number = __model__.modeldata.geom.query.numEnts(EEntType.EDGE);\r\n    // const num_del_edges: number = __model__.modeldata.geom.query.numEnts(EEntType.EDGE, true) - num_edges;\r\n    const edge_attribs: string[] = __model__.modeldata.attribs.query.getAttribNames(EEntType.EDGE);\r\n    info += '<li>';\r\n    info += '<b>Edges</b>: ' + num_edges; // + ' (Deleted: ' + num_del_edges + ') ';\r\n    if (edge_attribs.length !== 0) { info += 'Attribs: ' + edge_attribs.join(', '); }\r\n    info += '</li>';\r\n    // verts\r\n    const num_verts: number = __model__.modeldata.geom.query.numEnts(EEntType.VERT);\r\n    // const num_del_verts: number = __model__.modeldata.geom.query.numEnts(EEntType.VERT, true) - num_verts;\r\n    const vert_attribs: string[] = __model__.modeldata.attribs.query.getAttribNames(EEntType.VERT);\r\n    info += '<li>';\r\n    info += '<b>Vertices</b>: ' + num_verts; // + ' (Deleted: ' + num_del_verts + ') ';\r\n    if (vert_attribs.length !== 0) { info += 'Attribs: ' + vert_attribs.join(', '); }\r\n    info += '</li>';\r\n    // posis\r\n    const num_posis: number = __model__.modeldata.geom.query.numEnts(EEntType.POSI);\r\n    // const num_del_posis: number = __model__.modeldata.geom.query.numEnts(EEntType.POSI, true) - num_posis;\r\n    const posi_attribs: string[] = __model__.modeldata.attribs.query.getAttribNames(EEntType.POSI);\r\n    info += '<li>';\r\n    info += '<b>Positions</b>: ' + num_posis; // + ' (Deleted: ' + num_del_posis + ') ';\r\n    if (posi_attribs.length !== 0) { info += 'Attribs: ' + posi_attribs.join(', '); }\r\n    info += '</li>';\r\n    // end\r\n    info += '</ul>';\r\n    // return the string\r\n    return info;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Returns am html string representation of the parameters in this model\r\n *\r\n * @param __model__\r\n * @param __constList__\r\n * @returns Text that summarises what is in the model.\r\n */\r\nexport function ParamInfo(__model__: GIModel, __constList__: {}): string {\r\n    return JSON.stringify(__constList__);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Returns an html string representation of one or more entities in the model.\r\n * ~\r\n * @param __model__\r\n * @param entities One or more objects ot collections.\r\n * @returns void\r\n */\r\nexport function EntityInfo(__model__: GIModel, entities: TId|TId[]): string {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    // --- Error Check ---\r\n    const fn_name = 'collection.Info';\r\n    let ents_arr: TEntTypeIdx[];\r\n    if (__model__.debug) {\r\n        ents_arr = checkIDs(fn_name, 'coll', entities,\r\n            [IdCh.isId, IdCh.isIdL],\r\n            [EEntType.COLL, EEntType.PGON, EEntType.PLINE, EEntType.POINT]) as TEntTypeIdx[];\r\n    } else {\r\n        // ents_arr = splitIDs(fn_name, 'coll', entities,\r\n        //     [IDcheckObj.isID, IDcheckObj.isIDList],\r\n        //     [EEntType.COLL, EEntType.PGON, EEntType.PLINE, EEntType.POINT]) as TEntTypeIdx[];\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    let result = '<h4>Entity Information:</h4>';\r\n    for (const ent_arr of ents_arr) {\r\n        const [ent_type, ent_i] = ent_arr;\r\n        switch (ent_type) {\r\n            case EEntType.COLL:\r\n                result += _collInfo(__model__, ent_i);\r\n                break;\r\n            case EEntType.PGON:\r\n                result += _pgonInfo(__model__, ent_i);\r\n                break;\r\n            case EEntType.PLINE:\r\n                result += _plineInfo(__model__, ent_i);\r\n                break;\r\n            case EEntType.POINT:\r\n                result += _pointInfo(__model__, ent_i);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nfunction _getAttribs(__model__: GIModel, ent_type: EEntType, ent_i: number): string[] {\r\n    const names: string[] = __model__.modeldata.attribs.query.getAttribNames(ent_type);\r\n    const attribs_with_vals = [];\r\n    for (const name of names) {\r\n        const val = __model__.modeldata.attribs.query.getAttribVal(ent_type, name, ent_i);\r\n        if (val !== undefined) {\r\n            attribs_with_vals.push(name);\r\n        }\r\n    }\r\n    return attribs_with_vals;\r\n}\r\nfunction _getColls(__model__: GIModel, ent_type: EEntType, ent_i: number): string[] {\r\n    let colls_i: number[] = [];\r\n    if (ent_type === EEntType.COLL) {\r\n        const parent: number = __model__.modeldata.geom.query.getCollParent(ent_i);\r\n        if (parent !== -1) { colls_i = [parent]; }\r\n    } else {\r\n        colls_i = __model__.modeldata.geom.nav.navAnyToColl(ent_type, ent_i);\r\n    }\r\n    const colls_names = [];\r\n    for (const coll_i of colls_i) {\r\n        let coll_name = 'No name';\r\n        if (__model__.modeldata.attribs.query.hasAttrib(EEntType.COLL, 'name')) {\r\n            coll_name = __model__.modeldata.attribs.query.getAttribVal(EEntType.COLL, 'name', coll_i) as string;\r\n        }\r\n        colls_names.push(coll_name);\r\n    }\r\n    return colls_names;\r\n}\r\nfunction _pointInfo(__model__: GIModel, point_i: number): string {\r\n    let info = '';\r\n    // get the data\r\n    const attribs: string[] = _getAttribs(__model__, EEntType.POINT, point_i);\r\n    const colls_names = _getColls(__model__, EEntType.POINT, point_i);\r\n    // make str\r\n    info += '<ul>';\r\n    info += '<li>Type: <b>Point</b></li>';\r\n    info += '<ul>';\r\n    if (attribs.length !== 0) { info += '<li>Attribs: ' + attribs.join(', ') + '</li>'; }\r\n    if (colls_names.length === 1) {\r\n        info += '<li>In collection: ' + colls_names[0] + '</li>';\r\n    } else if (colls_names.length > 1) {\r\n        info += '<li>In ' + colls_names.length + ' collections: ' + colls_names.join(', ') + '</li>';\r\n    }\r\n    info += '</ul>';\r\n    info += '</ul>';\r\n    return info;\r\n}\r\nfunction _plineInfo(__model__: GIModel, pline_i: number): string {\r\n    let info = '';\r\n    // get the data\r\n    const attribs: string[] = _getAttribs(__model__, EEntType.PLINE, pline_i);\r\n    const num_verts: number = __model__.modeldata.geom.nav.navAnyToVert(EEntType.PLINE, pline_i).length;\r\n    const num_edges: number = __model__.modeldata.geom.nav.navAnyToEdge(EEntType.PLINE, pline_i).length;\r\n    const colls_names = _getColls(__model__, EEntType.PLINE, pline_i);\r\n    // make str\r\n    info += '<ul>';\r\n    info += '<li>Type: <b>Polyline</b></li>';\r\n    info += '<ul>';\r\n    if (attribs.length !== 0) { info += '<li>Attribs: ' + attribs.join(', ') + '</li>'; }\r\n    if (num_verts) { info += '<li>Num verts: ' + num_verts + '</li>'; }\r\n    if (num_edges) { info += '<li>Num edges: ' + num_edges + '</li>'; }\r\n    if (colls_names.length === 1) {\r\n        info += '<li>In collection: ' + colls_names[0] + '</li>';\r\n    } else if (colls_names.length > 1) {\r\n        info += '<li>In ' + colls_names.length + ' collections: ' + colls_names.join(', ') + '</li>';\r\n    }\r\n    info += '</ul>';\r\n    info += '</ul>';\r\n    return info;\r\n}\r\nfunction _pgonInfo(__model__: GIModel, pgon_i: number): string {\r\n    let info = '';\r\n    // get the data\r\n    const attribs: string[] = _getAttribs(__model__, EEntType.PGON, pgon_i);\r\n    const num_verts: number = __model__.modeldata.geom.nav.navAnyToVert(EEntType.PGON, pgon_i).length;\r\n    const num_edges: number = __model__.modeldata.geom.nav.navAnyToEdge(EEntType.PGON, pgon_i).length;\r\n    const num_wires: number = __model__.modeldata.geom.nav.navAnyToWire(EEntType.PGON, pgon_i).length;\r\n    const colls_i: number[] = __model__.modeldata.geom.nav.navPgonToColl(pgon_i);\r\n    const colls_names = _getColls(__model__, EEntType.PGON, pgon_i);\r\n    // make str\r\n    info += '<ul>';\r\n    info += '<li>Type: <b>Polygon</b></li>';\r\n    info += '<ul>';\r\n    if (attribs.length !== 0) { info += '<li>Attribs: ' + attribs.join(', ') + '</li>'; }\r\n    if (num_verts) { info += '<li>Num verts: ' + num_verts + '</li>'; }\r\n    if (num_edges) { info += '<li>Num edges: ' + num_edges + '</li>'; }\r\n    if (num_wires) { info += '<li>Num wires: ' + num_wires + '</li>'; }\r\n    if (colls_i.length === 1) {\r\n        info += '<li>In collection: ' + colls_names[0] + '</li>';\r\n    } else if (colls_i.length > 1) {\r\n        info += '<li>In ' + colls_i.length + ' collections: ' + colls_names.join(', ') + '</li>';\r\n    }\r\n    info += '</ul>';\r\n    info += '</ul>';\r\n    return info;\r\n}\r\nfunction _collInfo(__model__: GIModel, coll_i: number): string {\r\n    let info = '';\r\n    // get the data\r\n    let coll_name = 'None';\r\n    if (__model__.modeldata.attribs.query.hasAttrib(EEntType.COLL, 'name')) {\r\n        coll_name = __model__.modeldata.attribs.query.getAttribVal(EEntType.COLL, 'name', coll_i) as string;\r\n    }\r\n    const attribs: string[] = _getAttribs(__model__, EEntType.COLL, coll_i);\r\n    const num_pgons: number = __model__.modeldata.geom.nav.navCollToPgon(coll_i).length;\r\n    const num_plines: number = __model__.modeldata.geom.nav.navCollToPline(coll_i).length;\r\n    const num_points: number = __model__.modeldata.geom.nav.navCollToPoint(coll_i).length;\r\n    const colls_names = _getColls(__model__, EEntType.COLL, coll_i);\r\n    // make str\r\n    info += '<ul>';\r\n    info += '<li>Type: <b>Collection</b></li>';\r\n    info += '<ul>';\r\n    info += '<li>Name: <b>' + coll_name + '</b></li>';\r\n    if (attribs.length !== 0) { info += '<li>Attribs: ' + attribs.join(', ') + '</li>'; }\r\n    if (num_pgons) { info += '<li>Num pgons: ' + num_pgons + '</li>'; }\r\n    if (num_plines) { info += '<li>Num plines: ' + num_plines + '</li>'; }\r\n    if (num_points) { info += '<li>Num points: ' + num_points + '</li>'; }\r\n    if (colls_names.length === 1) {\r\n        info += '<li>In collection: ' + colls_names[0] + '</li>';\r\n    } else if (colls_names.length > 1) {\r\n        info += '<li>In ' + colls_names.length + ' collections: ' + colls_names.join(', ') + '</li>';\r\n    }\r\n    const children: number[] = __model__.modeldata.geom.query.getCollChildren(coll_i);\r\n    if (children.length > 0) {\r\n        info += '<li>Child collections: </li>';\r\n        for (const child of children) {\r\n            info += _collInfo(__model__, child);\r\n        }\r\n    }\r\n    info += '</ul>';\r\n    info += '</ul>';\r\n    return info;\r\n}\r\n// ================================================================================================\r\n\r\nexport enum _EIOExportParams {\r\n    YES = 'Add Params',\r\n    NO = 'No Params'\r\n}\r\nexport enum _EIOExportContents {\r\n    BOTH = 'Both',\r\n    CONSOLE = 'Console Only',\r\n    MODEL = 'Model Only'\r\n}\r\n/**\r\n * Export data from the model as a file.\r\n * This will result in a popup in your browser, asking you to save the filel.\r\n * @param __model__\r\n * @param __console__\r\n * @param __constList__\r\n * @param __fileName__\r\n * @param file_name Name of the file as a string.\r\n * @param exportParams Enum.\r\n * @param exportContent Enum.\r\n * @returns Boolean.\r\n * @example util.ExportIO('my_model.json')\r\n * @example_info Exports all the data in the model as an OBJ.\r\n */\r\nexport function ExportIO(__model__: GIModel, __console__: string[], __constList__: any, __fileName__: string,\r\n                        file_name: string, exportParams: _EIOExportParams, exportContent: _EIOExportContents): boolean {\r\n    // let gi_data: string = JSON.stringify(__model__.getData());\r\n    // gi_data = gi_data.replace(/\\\\\\\"/g, '\\\\\\\\\\\\\"'); // TODO temporary fix\r\n    const consolidatedConsole = [];\r\n    for (const logStr of __console__) {\r\n        if (!logStr.match('<p style=\"padding: 2px 0px 2px 10px;\"><b><i>')) {\r\n            continue;\r\n        }\r\n        const replacedStr = logStr.replace('<p style=\"padding: 2px 0px 2px 10px;\"><b><i>', '')\r\n                               .replace('</i></b> ', '').replace('</p>', '').replace('<br>', '\\n');\r\n        consolidatedConsole.push(replacedStr);\r\n    }\r\n    const newConstList = {};\r\n    for (const obj in __constList__) {\r\n        if (__constList__.hasOwnProperty(obj)) {\r\n            newConstList[obj] = convertString(__constList__[obj]);\r\n        }\r\n    }\r\n    const edxAnswer = {\r\n        'fileName': __fileName__,\r\n        'params' : newConstList,\r\n        'console': consolidatedConsole.join('\\n'),\r\n        'model'  : __model__.getModelData()\r\n    };\r\n    if (exportParams === _EIOExportParams.NO) {\r\n        edxAnswer['params'] = undefined;\r\n    }\r\n    if (exportContent === _EIOExportContents.CONSOLE) {\r\n        edxAnswer['model'] = undefined;\r\n    } else if (exportContent === _EIOExportContents.MODEL) {\r\n        edxAnswer['console'] = undefined;\r\n    }\r\n\r\n    return download(JSON.stringify(edxAnswer) , file_name);\r\n}\r\nfunction convertString(value) {\r\n    let val;\r\n    if (!value) {\r\n        val = value;\r\n    } else if (typeof value === 'number' || value === undefined) {\r\n        val = value;\r\n    } else if (typeof value === 'string') {\r\n        val = '\"' + value + '\"';\r\n    } else if (value.constructor === [].constructor) {\r\n        val = JSON.stringify(value);\r\n    } else if (value.constructor === {}.constructor) {\r\n        val = JSON.stringify(value);\r\n    } else {\r\n        val = value;\r\n    }\r\n    return val;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Compare the GI data in this model to the GI data in another model.\r\n * ~\r\n * If method = subset, then this model is the answer, and the other model is the submitted model.\r\n * It will check that all entites in this model also exist in the other model.\r\n * ~\r\n * If method = superset, then this model is the submitted model, and the other model is the answer model.\r\n * It will check that all entites in the other model also exist in this model.\r\n * ~\r\n * For specifying the location of the GI Model, you can either specify a URL,\r\n * or the name of a file in LocalStorage.\r\n * In the latter case, you do not specify a path, you just specify the file name, e.g. 'my_model.gi'\r\n *\r\n * @param __model__\r\n * @param input_data The location of the GI Model to compare this model to.\r\n * @param method Enum, method used to compare this model to the other model specified in the gi_model parameter.\r\n * @returns Text that summarises the comparison between the two models.\r\n */\r\nexport async function ModelCompare(__model__: GIModel, input_data: string, method: _ECOmpareMethod): Promise<string> {\r\n    const gi_model = await _getFile(input_data);\r\n    const gi_obj: IModelJSONData = JSON.parse(gi_model) as IModelJSONData;\r\n    const other_model = new GIModel();\r\n    other_model.setModelData(gi_obj);\r\n    let result: {score: number, total: number, comment: string} = null;\r\n    // compare function has three boolean args\r\n    // normalize: boolean\r\n    // check_geom_equality: boolean\r\n    // check_attrib_equality: boolean\r\n    switch (method) {\r\n        case _ECOmpareMethod.THIS_IS_SUBSET:\r\n            result = __model__.compare(other_model, true, false, false);\r\n            break;\r\n        case _ECOmpareMethod.THIS_IS_SUPERSET:\r\n            result = other_model.compare(__model__, true, false, false);\r\n            break;\r\n        case _ECOmpareMethod.THIS_IS_EQUAL:\r\n            result = __model__.compare(other_model, true, true, false);\r\n            break;\r\n        default:\r\n            throw new Error('Compare method not recognised');\r\n    }\r\n    return result.comment;\r\n}\r\n// ================================================================================================\r\n/**\r\n * Check the internal consistency of the model.\r\n *\r\n * @param __model__\r\n * @returns Text that summarises what is in the model, click print to see this text.\r\n */\r\nexport function ModelCheck(__model__: GIModel): string {\r\n    console.log('==== ==== ==== ====');\r\n    console.log('MODEL GEOM\\n', __model__.modeldata.geom.toStr());\r\n    console.log('MODEL ATTRIBS\\n', __model__.modeldata.attribs.toStr());\r\n    console.log('META\\n', __model__.metadata.toDebugStr());\r\n    console.log('==== ==== ==== ====');\r\n    console.log(__model__);\r\n    const check: string[] = __model__.check();\r\n    if (check.length > 0) {\r\n        return String(check);\r\n    }\r\n    return 'No internal inconsistencies have been found.';\r\n}\r\n// ================================================================================================\r\n/**\r\n * Post a message to the parent window.\r\n *\r\n * @param __model__\r\n * @param data The data to send, a list or a dictionary.\r\n * @returns Text that summarises what is in the model, click print to see this text.\r\n */\r\nexport function SendData(__model__: GIModel, data: any): void {\r\n    window.parent.postMessage(data, '*');\r\n}\r\n// ================================================================================================\r\n","/**\r\n * The `visualize` module has functions for defining various settings for the 3D viewer.\r\n * Color is saved as vertex attributes.\r\n */\r\n\r\n/**\r\n *\r\n */\r\n\r\nimport { checkIDs, IdCh } from '../_check_ids';\r\nimport { checkArgs, ArgCh } from '../_check_args';\r\n\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { Txyz, TColor, EAttribNames, EAttribDataTypeStrs, EAttribPush, TRay, TPlane, TBBox } from '@libs/geo-info/common';\r\nimport { TId, EEntType, TEntTypeIdx } from '@libs/geo-info/common';\r\nimport { isEmptyArr, getArrDepth, idsMake, idsBreak } from '@libs/geo-info/id';\r\nimport { arrMakeFlat } from '@assets/libs/util/arrs';\r\nimport { min, max } from '@assets/core/inline/_math';\r\nimport { vecMult, vecAdd, vecSetLen, vecCross, vecNorm, vecSub, vecDot } from '@assets/libs/geom/vectors';\r\nimport * as ch from 'chroma-js';\r\n// ================================================================================================\r\nexport enum _ESide {\r\n    FRONT =   'front',\r\n    BACK =   'back',\r\n    BOTH =   'both'\r\n}\r\nexport enum _Ecolors {\r\n    NO_VERT_COLORS =   'none',\r\n    VERT_COLORS =   'apply_rgb'\r\n}\r\n// ================================================================================================\r\n/**\r\n * Sets color by creating a vertex attribute called 'rgb' and setting the value.\r\n * ~\r\n * @param entities The entities for which to set the color.\r\n * @param color The color, [0,0,0] is black, [1,1,1] is white.\r\n * @returns void\r\n */\r\nexport function Color(__model__: GIModel, entities: TId|TId[], color: TColor): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) { return; }\r\n    // --- Error Check ---\r\n    const fn_name = 'visualize.Color';\r\n    let ents_arr: TEntTypeIdx[] = null;\r\n    if (__model__.debug) {\r\n        if (entities !== null) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities,\r\n                [IdCh.isId, IdCh.isIdL, IdCh.isIdLL], null) as TEntTypeIdx[];\r\n        }\r\n        checkArgs(fn_name, 'color', color, [ArgCh.isColor]);\r\n    } else {\r\n        // if (entities !== null) {\r\n        //     ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        //         [IDcheckObj.isID, IDcheckObj.isIDList, IDcheckObj.isIDListOfLists], null) as TEntTypeIdx[];\r\n        // }\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    _color(__model__, ents_arr, color);\r\n}\r\nfunction _color(__model__: GIModel, ents_arr: TEntTypeIdx[], color: TColor): void {\r\n    if (!__model__.modeldata.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.COLOR)) {\r\n        __model__.modeldata.attribs.add.addAttrib(EEntType.VERT, EAttribNames.COLOR, EAttribDataTypeStrs.LIST);\r\n    }\r\n    // make a list of all the verts\r\n    let all_verts_i: number[] = [];\r\n    if (ents_arr === null) {\r\n        all_verts_i = __model__.modeldata.geom.query.getEnts(EEntType.VERT);\r\n    } else {\r\n        for (const ent_arr of ents_arr) {\r\n            const [ent_type, ent_i]: [number, number] = ent_arr as TEntTypeIdx;\r\n            if (ent_type === EEntType.VERT) {\r\n                all_verts_i.push(ent_i);\r\n            } else {\r\n                const verts_i: number[] = __model__.modeldata.geom.nav.navAnyToVert(ent_type, ent_i);\r\n                for (const vert_i of verts_i) {\r\n                    all_verts_i.push(vert_i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // set all verts to have same color\r\n    __model__.modeldata.attribs.add.setEntAttribVal(EEntType.VERT, all_verts_i, EAttribNames.COLOR, color);\r\n}\r\n// ================================================================================================\r\n/**\r\n * Generates a colour range based on a numeric attribute.\r\n * Sets the color by creating a vertex attribute called 'rgb' and setting the value.\r\n * ~\r\n * @param entities The entities for which to set the color.\r\n * @param attrib The numeric attribute to be used to create the gradient.\r\n * You can spacify an attribute with an index. For example, ['xyz', 2] will create a gradient based on height.\r\n * @param range The range of the attribute, [minimum, maximum].\r\n * If only one number, it defaults to [0, maximum]. If null, then the range will be auto-calculated.\r\n * @param method Enum, the colour gradient to use.\r\n * @returns void\r\n */\r\nexport function Gradient(__model__: GIModel, entities: TId|TId[], attrib: string|[string, number]|[string, string],\r\n        range: number|[number, number], method: _EColorRampMethod): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (!isEmptyArr(entities)) {\r\n        // --- Error Check ---\r\n        const fn_name = 'visualize.Gradient';\r\n        let ents_arr: TEntTypeIdx[] = null;\r\n        let attrib_name: string;\r\n        let attrib_idx_or_key: number|string;\r\n        if (__model__.debug) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities,\r\n                [IdCh.isId, IdCh.isIdL, IdCh.isIdLL], null) as TEntTypeIdx[];\r\n            checkArgs(fn_name, 'attrib', attrib,\r\n                [ArgCh.isStr, ArgCh.isStrStr, ArgCh.isStrNum]);\r\n            checkArgs(fn_name, 'range', range, [ArgCh.isNull, ArgCh.isNum, ArgCh.isNumL]);\r\n            attrib_name = Array.isArray(attrib) ? attrib[0] : attrib;\r\n            attrib_idx_or_key = Array.isArray(attrib) ? attrib[1] : null;\r\n            if (!__model__.modeldata.attribs.query.hasAttrib(ents_arr[0][0], attrib_name)) {\r\n                throw new Error(fn_name + ': The attribute with name \"' + attrib + '\" does not exist on these entities.');\r\n            } else {\r\n                let data_type = null;\r\n                if (attrib_idx_or_key === null) {\r\n                    data_type = __model__.modeldata.attribs.query.getAttribDataType(ents_arr[0][0], attrib_name);\r\n                } else {\r\n                    const first_val = __model__.modeldata.attribs.query.getAttribValAny(ents_arr[0][0], attrib_name,\r\n                                                                              ents_arr[0][1], attrib_idx_or_key);\r\n                }\r\n                if (data_type !== EAttribDataTypeStrs.NUMBER) {\r\n                    throw new Error(fn_name + ': The attribute with name \"' + attrib_name + '\" is not a number data type.' +\r\n                    'For generating a gradient, the attribute must be a number.');\r\n                }\r\n            }\r\n        } else {\r\n            // ents_arr = splitIDs(fn_name, 'entities', entities,\r\n            //     [IDcheckObj.isID, IDcheckObj.isIDList, IDcheckObj.isIDListOfLists], null) as TEntTypeIdx[];\r\n            ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n            attrib_name = Array.isArray(attrib) ? attrib[0] : attrib;\r\n            attrib_idx_or_key = Array.isArray(attrib) ? attrib[1] : null;\r\n        }\r\n        // --- Error Check ---\r\n        if (range === null) {\r\n            range = [null, null];\r\n        }\r\n        range = Array.isArray(range) ? range : [0, range];\r\n        _gradient(__model__, ents_arr, attrib_name, attrib_idx_or_key, range as [number, number], method);\r\n    }\r\n}\r\n// https://codesandbox.io/s/5w573r54w4\r\nexport enum _EColorRampMethod {\r\n    FALSE_COLOR = 'false_color',\r\n    BLACK_BODY = 'black_body',\r\n    WHITE_RED = 'white_red',\r\n    WHITE_GREEN = 'white_green',\r\n    WHITE_BLUE = 'white_blue',\r\n    BLUE_RED = 'blue_red',\r\n    GREEN_RED = 'green_red',\r\n    BLUE_GREEN = 'blue_green',\r\n    GREY_SCALE = 'grey_scale',\r\n    ORRD= 'OrRd',\r\n    PUBU= 'PuBu',\r\n    BUPU= 'BuPu',\r\n    ORANGES= 'Oranges',\r\n    BUGN= 'BuGn',\r\n    YLORBR= 'YlOrBr',\r\n    YLGN= 'YlGn',\r\n    REDS= 'Reds',\r\n    RDPU= 'RdPu',\r\n    GREENS= 'Greens',\r\n    YLGNBU= 'YlGnBu',\r\n    PURPLES= 'Purples',\r\n    GNBU= 'GnBu',\r\n    GREYS= 'Greys',\r\n    YLORRD= 'YlOrRd',\r\n    PURD= 'PuRd',\r\n    BLUES= 'Blues',\r\n    PUBUGN= 'PuBuGn',\r\n    VIRIDIS= 'Viridis',\r\n    SPECTRAL= 'Spectral',\r\n    RDYLGN= 'RdYlGn',\r\n    RDBU= 'RdBu',\r\n    PIYG= 'PiYG',\r\n    PRGN= 'PRGn',\r\n    RDYLBU= 'RdYlBu',\r\n    BRBG= 'BrBG',\r\n    RDGY= 'RdGy',\r\n    PUOR= 'PuOr',\r\n    SET2= 'Set2',\r\n    ACCENT= 'Accent',\r\n    SET1= 'Set1',\r\n    SET3= 'Set3',\r\n    DARK2= 'Dark2',\r\n    PAIRED= 'Paired',\r\n    PASTEL2= 'Pastel2',\r\n    PASTEL1= 'Pastel1',\r\n}\r\nfunction _gradient(__model__: GIModel, ents_arr: TEntTypeIdx[], attrib_name: string, idx_or_key: number|string, range: [number, number],\r\n        method: _EColorRampMethod): void {\r\n    if (!__model__.modeldata.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.COLOR)) {\r\n        __model__.modeldata.attribs.add.addAttrib(EEntType.VERT, EAttribNames.COLOR, EAttribDataTypeStrs.LIST);\r\n    }\r\n    // get the ents\r\n    const first_ent_type: number = ents_arr[0][0];\r\n    const ents_i: number[] = ents_arr.map( ent_arr => ent_arr[1] );\r\n    // push the attrib down from the ent to its verts\r\n    if (first_ent_type !== EEntType.VERT) {\r\n        __model__.modeldata.attribs.add.pushAttribVals(first_ent_type, attrib_name, idx_or_key, ents_i,\r\n            EEntType.VERT, attrib_name, null, EAttribPush.AVERAGE);\r\n    }\r\n    // make a list of all the verts\r\n    const all_verts_i: number[] = [];\r\n    for (const ent_arr of ents_arr) {\r\n        const [ent_type, ent_i]: [number, number] = ent_arr as TEntTypeIdx;\r\n        if (ent_type === EEntType.VERT) {\r\n            all_verts_i.push(ent_i);\r\n        } else {\r\n            const verts_i: number[] = __model__.modeldata.geom.nav.navAnyToVert(ent_type, ent_i);\r\n            for (const vert_i of verts_i) {\r\n                all_verts_i.push(vert_i);\r\n            }\r\n        }\r\n    }\r\n    // get the attribute values\r\n    const vert_values: number[] = __model__.modeldata.attribs.query.getAttribVal(EEntType.VERT, attrib_name, all_verts_i) as number[];\r\n    // if range[0] is null, get min value\r\n    if (range[0] === null) {\r\n        range[0] = min(vert_values);\r\n    }\r\n    // if range[1] is null. get max value\r\n    if (range[1] === null) {\r\n        range[1] = max(vert_values);\r\n    }\r\n    // create color scale\r\n    const scales = {\r\n        'false_color': ['blue', 'cyan', 'green', 'yellow', 'red'],\r\n        'black_body': ['black', 'red', 'yellow', 'white'],\r\n        'white_red': ['white', 'red'],\r\n        'white_blue': ['white', 'blue'],\r\n        'white_green': ['white', 'green'],\r\n        'blue_red': ['blue', 'red'],\r\n        'green_red': ['green', 'red'],\r\n        'blue_green': ['blue', 'green'],\r\n        'grey_scale': ['white', 'black']\r\n    };\r\n    let scale: any = null;\r\n    if (method in scales) {\r\n        scale = scales[method];\r\n    } else {\r\n        scale = method;\r\n    }\r\n    const col_scale = ch.scale(scale);\r\n    const col_domain  = col_scale.domain(range);\r\n\r\n    // make a values map, grouping together all the verts that have the same value\r\n    const values_map: Map<number, [TColor, number[]]> = new Map();\r\n    for (let i = 0; i < all_verts_i.length; i++) {\r\n        if (!values_map.has(vert_values[i])) {\r\n            // const col: TColor = colFalse(vert_values[i], range[0], range[1]);\r\n            const ch_col = col_domain(vert_values[i]).gl();\r\n            const col: TColor = [ch_col[0], ch_col[1], ch_col[2]];\r\n            values_map.set(vert_values[i], [col, [all_verts_i[i]]]);\r\n        } else {\r\n            values_map.get(vert_values[i])[1].push(all_verts_i[i]);\r\n        }\r\n    }\r\n    // set color of each group of verts\r\n    values_map.forEach((col_and_verts_i) => {\r\n        const col: TColor = col_and_verts_i[0];\r\n        const verts_i: number[] = col_and_verts_i[1];\r\n        __model__.modeldata.attribs.add.setEntAttribVal(EEntType.VERT, verts_i, EAttribNames.COLOR, col);\r\n    });\r\n}\r\n// ================================================================================================\r\nexport enum _EEdgeMethod {\r\n    VISIBLE = 'visible',\r\n    HIDDEN = 'hidden'\r\n}\r\n\r\n/**\r\n * Controls how edges are visualized by setting the visibility of the edge.\r\n * ~\r\n * The method can either be 'visible' or 'hidden'.\r\n * 'visible' means that an edge line will be visible.\r\n * 'hidden' means that no edge lines will be visible.\r\n * ~\r\n * @param entities A list of edges, or other entities from which edges can be extracted.\r\n * @param method Enum, visible or hidden.\r\n * @returns void\r\n */\r\nexport function Edge(__model__: GIModel, entities: TId|TId[], method: _EEdgeMethod): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) { return; }\r\n    // --- Error Check ---\r\n    const fn_name = 'visualize.Edge';\r\n    let ents_arr: TEntTypeIdx[] = null;\r\n    if (__model__.debug) {\r\n        if (entities !== null) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities,\r\n                [IdCh.isIdL], null) as TEntTypeIdx[];\r\n        }\r\n    } else {\r\n        // if (entities !== null) {\r\n        //     ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        //         [IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        // }\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    if (!__model__.modeldata.attribs.query.hasAttrib(EEntType.EDGE, EAttribNames.VISIBILITY)) {\r\n        if (method === _EEdgeMethod.VISIBLE) {\r\n            return;\r\n        } else {\r\n            __model__.modeldata.attribs.add.addAttrib(EEntType.EDGE, EAttribNames.VISIBILITY, EAttribDataTypeStrs.STRING);\r\n        }\r\n    }\r\n    // Get the unique edges\r\n    let edges_i: number[] = [];\r\n    if (ents_arr !== null) {\r\n        const set_edges_i: Set<number> = new Set();\r\n        for (const [ent_type, ent_i] of ents_arr) {\r\n            if (ent_type === EEntType.EDGE) {\r\n                set_edges_i.add(ent_i);\r\n            } else {\r\n                const ent_edges_i: number[] = __model__.modeldata.geom.nav.navAnyToEdge(ent_type, ent_i);\r\n                for (const ent_edge_i of ent_edges_i) {\r\n                    set_edges_i.add(ent_edge_i);\r\n                }\r\n            }\r\n        }\r\n        edges_i = Array.from(set_edges_i);\r\n    } else {\r\n        edges_i = __model__.modeldata.geom.query.getEnts(EEntType.EDGE);\r\n    }\r\n    // Set edge visibility\r\n    const setting: string = method === _EEdgeMethod.VISIBLE ? null : 'hidden';\r\n    __model__.modeldata.attribs.add.setEntAttribVal(EEntType.EDGE, edges_i, EAttribNames.VISIBILITY, setting);\r\n}\r\n// ================================================================================================\r\nexport enum _EMeshMethod {\r\n    FACETED = 'faceted',\r\n    SMOOTH = 'smooth'\r\n}\r\n/**\r\n * Controls how polygon meshes are visualized by creating normals on vertices.\r\n * ~\r\n * The method can either be 'faceted' or 'smooth'.\r\n * 'faceted' means that the normal direction for each vertex will be perpendicular to the polygon to which it belongs.\r\n * 'smooth' means that the normal direction for each vertex will be the average of all polygons welded to this vertex.\r\n * ~\r\n * @param entities Vertices belonging to polygons, or entities from which polygon vertices can be extracted.\r\n * @param method Enum, the types of normals to create, faceted or smooth.\r\n * @returns void\r\n */\r\nexport function Mesh(__model__: GIModel, entities: TId|TId[], method: _EMeshMethod): void {\r\n    entities = arrMakeFlat(entities) as TId[];\r\n    if (isEmptyArr(entities)) { return; }\r\n    // --- Error Check ---\r\n    const fn_name = 'visualize.Mesh';\r\n    let ents_arr: TEntTypeIdx[] = null;\r\n    if (__model__.debug) {\r\n        if (entities !== null) {\r\n            ents_arr = checkIDs(fn_name, 'entities', entities,\r\n                [IdCh.isIdL], null) as TEntTypeIdx[];\r\n        }\r\n    } else {\r\n        // if (entities !== null) {\r\n        //     ents_arr = splitIDs(fn_name, 'entities', entities,\r\n        //         [IDcheckObj.isIDList], null) as TEntTypeIdx[];\r\n        // }\r\n        ents_arr = idsBreak(entities) as TEntTypeIdx[];\r\n    }\r\n    // --- Error Check ---\r\n    // Get the unique verts that belong to pgons\r\n    let verts_i: number[] = [];\r\n    if (ents_arr !== null) {\r\n        const set_verts_i: Set<number> = new Set();\r\n        for (const [ent_type, ent_i] of ents_arr) {\r\n            if (ent_type === EEntType.VERT) {\r\n                if (__model__.modeldata.geom.query.getTopoObjType(EEntType.VERT, ent_i) === EEntType.PGON) {\r\n                    set_verts_i.add(ent_i);\r\n                }\r\n            } else if (ent_type === EEntType.POINT) {\r\n                 // skip\r\n            } else if (ent_type === EEntType.PLINE) {\r\n                // skip\r\n            } else if (ent_type === EEntType.PGON) {\r\n                const ent_verts_i: number[] = __model__.modeldata.geom.nav.navAnyToVert(EEntType.PGON, ent_i);\r\n                for (const ent_vert_i of ent_verts_i) {\r\n                    set_verts_i.add(ent_vert_i);\r\n                }\r\n            } else if (ent_type === EEntType.COLL) {\r\n                const coll_pgons_i: number[] = __model__.modeldata.geom.nav.navCollToPgon(ent_i);\r\n                for (const coll_pgon_i of coll_pgons_i) {\r\n                    const ent_verts_i: number[] = __model__.modeldata.geom.nav.navAnyToVert(EEntType.PGON, coll_pgon_i);\r\n                    for (const ent_vert_i of ent_verts_i) {\r\n                        set_verts_i.add(ent_vert_i);\r\n                    }\r\n                }\r\n            }  else {\r\n                const ent_verts_i: number[] = __model__.modeldata.geom.nav.navAnyToVert(ent_type, ent_i);\r\n                for (const ent_vert_i of ent_verts_i) {\r\n                    if (__model__.modeldata.geom.query.getTopoObjType(EEntType.VERT, ent_vert_i) === EEntType.PGON) {\r\n                        set_verts_i.add(ent_vert_i);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        verts_i = Array.from(set_verts_i);\r\n    } else {\r\n        verts_i = __model__.modeldata.geom.query.getEnts(EEntType.VERT);\r\n    }\r\n    // calc vertex normals and set edge visibility\r\n    switch (method) {\r\n        case _EMeshMethod.FACETED:\r\n            _meshFaceted(__model__, verts_i);\r\n            break;\r\n        case _EMeshMethod.SMOOTH:\r\n            _meshSmooth(__model__, verts_i);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\nfunction _meshFaceted(__model__: GIModel, verts_i: number[]): void {\r\n    if (!__model__.modeldata.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.NORMAL)) {\r\n        __model__.modeldata.attribs.add.addAttrib(EEntType.VERT, EAttribNames.NORMAL, EAttribDataTypeStrs.LIST);\r\n    }\r\n    // get the polygons\r\n    const map_vert_pgons: Map<number, number> = new Map();\r\n    const set_pgons_i: Set<number> = new Set();\r\n    for (const vert_i of verts_i) {\r\n        const pgons_i: number[] = __model__.modeldata.geom.nav.navAnyToPgon(EEntType.VERT, vert_i); // TODO optimize\r\n        if (pgons_i.length === 1) { // one polygon\r\n            map_vert_pgons.set(vert_i, pgons_i[0]);\r\n            set_pgons_i.add(pgons_i[0]);\r\n        }\r\n    }\r\n    // calc the normals one time\r\n    const normals: Txyz[] = [];\r\n    for (const pgon_i of Array.from(set_pgons_i)) {\r\n        const normal: Txyz = __model__.modeldata.geom.query.getFaceNormal(__model__.modeldata.geom.nav.navPgonToFace(pgon_i));\r\n        normals[pgon_i] = normal;\r\n    }\r\n    // set the normal\r\n    map_vert_pgons.forEach( (pgon_i, vert_i) => {\r\n        const normal: Txyz = normals[pgon_i];\r\n        __model__.modeldata.attribs.add.setEntAttribVal(EEntType.VERT, vert_i, EAttribNames.NORMAL, normal);\r\n    });\r\n}\r\nfunction _meshSmooth(__model__: GIModel, verts_i: number[]): void {\r\n    if (!__model__.modeldata.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.NORMAL)) {\r\n        __model__.modeldata.attribs.add.addAttrib(EEntType.VERT, EAttribNames.NORMAL, EAttribDataTypeStrs.LIST);\r\n    }\r\n    // get the polygons\r\n    const map_posi_pgons: Map<number, number[]> = new Map();\r\n    const set_pgons_i: Set<number> = new Set();\r\n    const vert_to_posi: number[] = [];\r\n    for (const vert_i of verts_i) {\r\n        const posi_i: number = __model__.modeldata.geom.nav.navVertToPosi(vert_i);\r\n        vert_to_posi[vert_i] = posi_i;\r\n        if (!map_posi_pgons.has(posi_i)) {\r\n            const posi_pgons_i: number[] = __model__.modeldata.geom.nav.navAnyToPgon(EEntType.VERT, vert_i);\r\n            map_posi_pgons.set(posi_i, posi_pgons_i);\r\n            for (const posi_pgon_i of posi_pgons_i) {\r\n                set_pgons_i.add(posi_pgon_i);\r\n            }\r\n        }\r\n    }\r\n    // calc all normals one time\r\n    const normals: Txyz[] = [];\r\n    for (const pgon_i of Array.from(set_pgons_i)) {\r\n        const normal: Txyz = __model__.modeldata.geom.query.getFaceNormal(__model__.modeldata.geom.nav.navPgonToFace(pgon_i));\r\n        normals[pgon_i] = normal;\r\n    }\r\n    // set normals on all verts\r\n    for (const vert_i of verts_i) {\r\n        const posi_i: number = vert_to_posi[vert_i];\r\n        let normal: Txyz = [0, 0, 0];\r\n        const posi_pgons_i: number[] = map_posi_pgons.get(posi_i);\r\n        for (const posi_pgon_i of posi_pgons_i) {\r\n            normal = [\r\n                normal[0] + normals[posi_pgon_i][0],\r\n                normal[1] + normals[posi_pgon_i][1],\r\n                normal[2] + normals[posi_pgon_i][2]\r\n            ];\r\n        }\r\n        const div: number = posi_pgons_i.length;\r\n        normal = [normal[0] / div, normal[1] / div, normal[2] / div];\r\n        normal = vecNorm(normal);\r\n        __model__.modeldata.attribs.add.setEntAttribVal(EEntType.VERT, vert_i, EAttribNames.NORMAL, normal);\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Visualises a ray or a list of rays by creating a polyline with an arrow head.\r\n *\r\n * @param __model__\r\n * @param rays Polylines representing the ray or rays.\r\n * @param scale Scales the arrow head of the vector.\r\n * @returns entities, a line with an arrow head representing the ray.\r\n * @example ray1 = visualize.Ray([[1,2,3],[0,0,1]])\r\n */\r\nexport function Ray(__model__: GIModel, rays: TRay|TRay[], scale: number): TId[] {\r\n    // --- Error Check ---\r\n    const fn_name = 'visualize.Ray';\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'ray', rays, [ArgCh.isRay, ArgCh.isRayL]);\r\n        checkArgs(fn_name, 'scale', scale, [ArgCh.isNum]);\r\n    }\r\n    // --- Error Check ---\r\n   return idsMake(_visRay(__model__, rays, scale)) as TId[];\r\n}\r\nfunction _visRay(__model__: GIModel, rays: TRay|TRay[], scale: number): TEntTypeIdx[] {\r\n    if (getArrDepth(rays) === 2) {\r\n        const ray: TRay = rays as TRay;\r\n        const origin: Txyz = ray[0];\r\n        const vec: Txyz = ray[1]; // vecMult(ray[1], scale);\r\n        const end: Txyz = vecAdd(origin, vec);\r\n        // create orign point\r\n        const origin_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(origin_posi_i, origin);\r\n        // create pline\r\n        const end_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(end_posi_i, end);\r\n        const pline_i = __model__.modeldata.geom.add.addPline([origin_posi_i, end_posi_i]);\r\n        // create the arrow heads\r\n        const vec_unit: Txyz = vecNorm(ray[1]);\r\n        const head_scale = scale;\r\n        let vec_norm: Txyz = null;\r\n        if (vecDot([0, 0, 1], vec)) {\r\n            vec_norm = vecSetLen(vecCross(vec_unit, [0, 1, 0]), head_scale);\r\n        } else {\r\n            vec_norm = vecSetLen(vecCross(vec_unit, [0, 0, 1]), head_scale);\r\n        }\r\n        const vec_rev: Txyz = vecSetLen(vecMult(vec, -1), head_scale);\r\n        const arrow_a: Txyz = vecAdd(vecAdd(end, vec_rev), vec_norm);\r\n        const arrow_a_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(arrow_a_posi_i, arrow_a);\r\n        const arrow_a_pline_i: number = __model__.modeldata.geom.add.addPline([end_posi_i, arrow_a_posi_i]);\r\n        const arrow_b: Txyz = vecSub(vecAdd(end, vec_rev), vec_norm);\r\n        const arrow_b_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(arrow_b_posi_i, arrow_b);\r\n        const arrow_b_pline_i = __model__.modeldata.geom.add.addPline([end_posi_i, arrow_b_posi_i]);\r\n        // return the geometry IDs\r\n        return [\r\n            [EEntType.PLINE, pline_i],\r\n            [EEntType.PLINE, arrow_a_pline_i],\r\n            [EEntType.PLINE, arrow_b_pline_i]\r\n        ];\r\n    } else {\r\n        const ents_arr: TEntTypeIdx[] = [];\r\n        for (const ray of rays) {\r\n            const ray_ents: TEntTypeIdx[] = _visRay(__model__, ray as TRay, scale);\r\n            for (const ray_ent of ray_ents) {\r\n                ents_arr.push(ray_ent);\r\n            }\r\n        }\r\n        return ents_arr;\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Visualises a plane or a list of planes by creating polylines.\r\n *\r\n * @param __model__\r\n * @param plane A plane or a list of planes.\r\n * @returns Entities, a square plane polyline and three axis polyline.\r\n * @example plane1 = visualize.Plane(position1, vector1, [0,1,0])\r\n * @example_info Creates a plane with position1 on it and normal = cross product of vector1 with y-axis.\r\n */\r\nexport function Plane(__model__: GIModel, planes: TPlane|TPlane[], scale: number): TId[] {\r\n    // --- Error Check ---\r\n    const fn_name = 'visualize.Plane';\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'planes', planes,\r\n            [ArgCh.isPln, ArgCh.isPlnL]);\r\n        checkArgs(fn_name, 'scale', scale, [ArgCh.isNum]);\r\n    }\r\n    // --- Error Check ---\r\n    return idsMake(_visPlane(__model__, planes, scale)) as TId[];\r\n}\r\nfunction _visPlane(__model__: GIModel, planes: TPlane|TPlane[], scale: number): TEntTypeIdx[] {\r\n    if (getArrDepth(planes) === 2) {\r\n        const plane: TPlane = planes as TPlane;\r\n        const origin: Txyz = plane[0];\r\n        const x_vec: Txyz = vecMult(plane[1], scale);\r\n        const y_vec: Txyz = vecMult(plane[2], scale);\r\n        let x_end: Txyz = vecAdd(origin, x_vec);\r\n        let y_end: Txyz = vecAdd(origin, y_vec);\r\n        const z_end: Txyz = vecAdd(origin, vecSetLen(vecCross(x_vec, y_vec), scale) );\r\n        const plane_corners: Txyz[] = [\r\n            vecAdd(x_end, y_vec),\r\n            vecSub(y_end, x_vec),\r\n            vecSub(vecSub(origin, x_vec), y_vec),\r\n            vecSub(x_end, y_vec),\r\n        ];\r\n        x_end = vecAdd(x_end, vecMult(x_vec, 0.1));\r\n        y_end = vecSub(y_end, vecMult(y_vec, 0.1));\r\n        // create the point\r\n        const origin_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(origin_posi_i, origin);\r\n        // create the x axis\r\n        const x_end_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(x_end_posi_i, x_end);\r\n        const x_pline_i = __model__.modeldata.geom.add.addPline([origin_posi_i, x_end_posi_i]);\r\n        // create the y axis\r\n        const y_end_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(y_end_posi_i, y_end);\r\n        const y_pline_i = __model__.modeldata.geom.add.addPline([origin_posi_i, y_end_posi_i]);\r\n        // create the z axis\r\n        const z_end_posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(z_end_posi_i, z_end);\r\n        const z_pline_i = __model__.modeldata.geom.add.addPline([origin_posi_i, z_end_posi_i]);\r\n        // create pline for plane\r\n        const corner_posis_i: number[] = [];\r\n        for (const corner of plane_corners) {\r\n            const posi_i: number = __model__.modeldata.geom.add.addPosi();\r\n            __model__.modeldata.attribs.add.setPosiCoords(posi_i, corner);\r\n            corner_posis_i.push(posi_i);\r\n        }\r\n        const plane_i = __model__.modeldata.geom.add.addPline(corner_posis_i, true);\r\n        // return the geometry IDs\r\n        return [\r\n            [EEntType.PLINE, x_pline_i],\r\n            [EEntType.PLINE, y_pline_i],\r\n            [EEntType.PLINE, z_pline_i],\r\n            [EEntType.PLINE, plane_i]\r\n        ];\r\n    } else {\r\n        const ents_arr: TEntTypeIdx[] = [];\r\n        for (const plane of planes) {\r\n            const plane_ents: TEntTypeIdx[] = _visPlane(__model__, plane as TPlane, scale);\r\n            for (const plane_ent of plane_ents) {\r\n                ents_arr.push(plane_ent);\r\n            }\r\n        }\r\n        return ents_arr;\r\n    }\r\n}\r\n// ================================================================================================\r\n/**\r\n * Visualises a bounding box by adding geometry to the model.\r\n *\r\n * @param __model__\r\n * @param bboxes A list of lists.\r\n * @returns Entities, twelve polylines representing the box.\r\n * @example bbox1 = virtual.viBBox(position1, vector1, [0,1,0])\r\n * @example_info Creates a plane with position1 on it and normal = cross product of vector1 with y-axis.\r\n */\r\nexport function BBox(__model__: GIModel, bboxes: TBBox|TBBox): TId[] {\r\n    // --- Error Check ---\r\n    const fn_name = 'visualize.BBox';\r\n    if (__model__.debug) {\r\n        checkArgs(fn_name, 'bbox', bboxes, [ArgCh.isBBox]); // TODO bboxs can be a list // add isBBoxList to enable check\r\n    }\r\n    // --- Error Check ---\r\n    return  idsMake(_visBBox(__model__, bboxes)) as TId[];\r\n}\r\nfunction _visBBox(__model__: GIModel, bboxs: TBBox|TBBox[]): TEntTypeIdx[] {\r\n    if (getArrDepth(bboxs) === 2) {\r\n        const bbox: TBBox = bboxs as TBBox;\r\n        const _min: Txyz = bbox[1];\r\n        const _max: Txyz = bbox[2];\r\n        // bottom\r\n        const ps0: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(ps0, _min);\r\n        const ps1: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(ps1, [_max[0], _min[1], _min[2]]);\r\n        const ps2: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(ps2, [_max[0], _max[1], _min[2]]);\r\n        const ps3: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(ps3, [_min[0], _max[1], _min[2]]);\r\n        // top\r\n        const ps4: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(ps4, [_min[0], _min[1], _max[2]]);\r\n        const ps5: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(ps5, [_max[0], _min[1], _max[2]]);\r\n        const ps6: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(ps6, _max);\r\n        const ps7: number = __model__.modeldata.geom.add.addPosi();\r\n        __model__.modeldata.attribs.add.setPosiCoords(ps7, [_min[0], _max[1], _max[2]]);\r\n        // plines bottom\r\n        const pl0 = __model__.modeldata.geom.add.addPline([ps0, ps1]);\r\n        const pl1 = __model__.modeldata.geom.add.addPline([ps1, ps2]);\r\n        const pl2 = __model__.modeldata.geom.add.addPline([ps2, ps3]);\r\n        const pl3 = __model__.modeldata.geom.add.addPline([ps3, ps0]);\r\n        // plines top\r\n        const pl4 = __model__.modeldata.geom.add.addPline([ps4, ps5]);\r\n        const pl5 = __model__.modeldata.geom.add.addPline([ps5, ps6]);\r\n        const pl6 = __model__.modeldata.geom.add.addPline([ps6, ps7]);\r\n        const pl7 = __model__.modeldata.geom.add.addPline([ps7, ps4]);\r\n        // plines vertical\r\n        const pl8 = __model__.modeldata.geom.add.addPline([ps0, ps4]);\r\n        const pl9 = __model__.modeldata.geom.add.addPline([ps1, ps5]);\r\n        const pl10 = __model__.modeldata.geom.add.addPline([ps2, ps6]);\r\n        const pl11 = __model__.modeldata.geom.add.addPline([ps3, ps7]);\r\n        // return\r\n        return [pl0, pl1, pl2, pl3, pl4, pl5, pl6, pl7, pl8, pl9, pl10, pl11].map(pl => [EEntType.PLINE, pl]) as TEntTypeIdx[];\r\n    } else {\r\n        const ents_arr: TEntTypeIdx[] = [];\r\n        for (const bbox of bboxs) {\r\n            const bbox_ents: TEntTypeIdx[] = _visBBox(__model__, bbox as TBBox);\r\n            for (const bbox_ent of bbox_ents) {\r\n                ents_arr.push(bbox_ent);\r\n            }\r\n        }\r\n        return ents_arr;\r\n    }\r\n}\r\n","// functions used by mobius\r\n\r\n// import * as Model from './Model';\r\n// export {Model};\r\n\r\nimport * as _model from './_model';\r\nexport {_model};\r\n\r\n// import * as _model from './Model';\r\n// export {_model};\r\n\r\n// functions for end users\r\n\r\n\r\nimport * as query from './basic/query';\r\nexport {query};\r\n\r\nimport * as pattern from './basic/pattern';\r\nexport {pattern};\r\n\r\nimport * as make from './basic/make';\r\nexport {make};\r\n\r\nimport * as modify from './basic/modify';\r\nexport {modify};\r\n\r\nimport * as attrib from './basic/attrib';\r\nexport {attrib};\r\n\r\nimport * as calc from './basic/calc';\r\nexport {calc};\r\n\r\nimport * as intersect from './basic/intersect';\r\nexport {intersect};\r\n\r\nimport * as collection from './basic/collection';\r\nexport {collection};\r\n\r\nimport * as list from './basic/list';\r\nexport {list};\r\n\r\nimport * as dict from './basic/dict';\r\nexport {dict};\r\n\r\nimport * as analyze from './basic/analyze';\r\nexport {analyze};\r\n\r\nimport * as visualize from './basic/visualize';\r\nexport {visualize};\r\n\r\nimport * as material from './basic/material';\r\nexport {material};\r\n\r\nimport * as io from './basic/io';\r\nexport {io};\r\n\r\nimport * as util from './basic/util';\r\nexport {util};\r\n\r\nimport * as poly2d from './basic/poly2d';\r\nexport {poly2d};\r\n\r\n// helpers\r\n\r\nimport * as _math from '../inline/_math';\r\nexport {_math};\r\n\r\nimport * as _mathjs from '../inline/_mathjs';\r\nexport {_mathjs};\r\n\r\nimport * as _types from '../inline/_types';\r\nexport {_types};\r\n\r\nimport * as _strs from '../inline/_strs';\r\nexport {_strs};\r\n\r\nimport * as _rand from '../inline/_rand';\r\nexport {_rand};\r\n\r\nimport * as _vec from '../inline/_vec';\r\nexport {_vec};\r\n\r\nimport * as _ray from '../inline/_ray';\r\nexport {_ray};\r\n\r\nimport * as _plane from '../inline/_plane';\r\nexport {_plane};\r\n\r\nimport * as _geometry from '../inline/_geometry';\r\nexport {_geometry};\r\n\r\nimport * as _list from '../inline/_list';\r\nexport {_list};\r\n\r\nimport * as _set from '../inline/_set';\r\nexport {_set};\r\n\r\nimport * as _colors from '../inline/_colors';\r\nexport {_colors};\r\n\r\nimport * as _conversion from '../inline/_conversion';\r\nexport {_conversion};\r\n\r\nimport * as _constants from '../inline/_constants';\r\nexport {_constants};\r\n\r\nimport * as _util from '../inline/_util';\r\nexport {_util};\r\n\r\nimport * as _arithmetic from '../inline/_arithmetic';\r\nexport {_arithmetic};\r\n\r\n// input, output ports\r\n\r\nimport * as _Output from './_output';\r\nexport {_Output};\r\n\r\nexport * from '../_parameterTypes';\r\n","\r\nvar TypedArrayUtils = {};\r\n\r\n/**\r\n * In-place quicksort for typed arrays (e.g. for Float32Array)\r\n * provides fast sorting\r\n * useful e.g. for a custom shader and/or BufferGeometry\r\n *\r\n * @author Roman Bolzern <roman.bolzern@fhnw.ch>, 2013\r\n * @author I4DS http://www.fhnw.ch/i4ds, 2013\r\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\r\n *\r\n * Complexity: http://bigocheatsheet.com/ see Quicksort\r\n *\r\n * Example:\r\n * points: [x, y, z, x, y, z, x, y, z, ...]\r\n * eleSize: 3 //because of (x, y, z)\r\n * orderElement: 0 //order according to x\r\n */\r\n\r\nTypedArrayUtils.quicksortIP = function ( arr, eleSize, orderElement ) {\r\n\r\n\tvar stack = [];\r\n\tvar sp = - 1;\r\n\tvar left = 0;\r\n\tvar right = arr.length / eleSize - 1;\r\n\tvar tmp = 0.0, x = 0, y = 0;\r\n\r\n\tvar swapF = function ( a, b ) {\r\n\r\n\t\ta *= eleSize; b *= eleSize;\r\n\r\n\t\tfor ( y = 0; y < eleSize; y ++ ) {\r\n\r\n\t\t\ttmp = arr[ a + y ];\r\n\t\t\tarr[ a + y ] = arr[ b + y ];\r\n\t\t\tarr[ b + y ] = tmp;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tvar i, j, swap = new Float32Array( eleSize ), temp = new Float32Array( eleSize );\r\n\r\n\twhile ( true ) {\r\n\r\n\t\tif ( right - left <= 25 ) {\r\n\r\n\t\t\tfor ( j = left + 1; j <= right; j ++ ) {\r\n\r\n\t\t\t\tfor ( x = 0; x < eleSize; x ++ ) {\r\n\r\n\t\t\t\t\tswap[ x ] = arr[ j * eleSize + x ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ti = j - 1;\r\n\r\n\t\t\t\twhile ( i >= left && arr[ i * eleSize + orderElement ] > swap[ orderElement ] ) {\r\n\r\n\t\t\t\t\tfor ( x = 0; x < eleSize; x ++ ) {\r\n\r\n\t\t\t\t\t\tarr[ ( i + 1 ) * eleSize + x ] = arr[ i * eleSize + x ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ti --;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( x = 0; x < eleSize; x ++ ) {\r\n\r\n\t\t\t\t\tarr[ ( i + 1 ) * eleSize + x ] = swap[ x ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( sp == - 1 ) break;\r\n\r\n\t\t\tright = stack[ sp -- ]; //?\r\n\t\t\tleft = stack[ sp -- ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar median = ( left + right ) >> 1;\r\n\r\n\t\t\ti = left + 1;\r\n\t\t\tj = right;\r\n\r\n\t\t\tswapF( median, i );\r\n\r\n\t\t\tif ( arr[ left * eleSize + orderElement ] > arr[ right * eleSize + orderElement ] ) {\r\n\r\n\t\t\t\tswapF( left, right );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( arr[ i * eleSize + orderElement ] > arr[ right * eleSize + orderElement ] ) {\r\n\r\n\t\t\t\tswapF( i, right );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( arr[ left * eleSize + orderElement ] > arr[ i * eleSize + orderElement ] ) {\r\n\r\n\t\t\t\tswapF( left, i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( x = 0; x < eleSize; x ++ ) {\r\n\r\n\t\t\t\ttemp[ x ] = arr[ i * eleSize + x ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\twhile ( true ) {\r\n\r\n\t\t\t\tdo i ++; while ( arr[ i * eleSize + orderElement ] < temp[ orderElement ] );\r\n\t\t\t\tdo j --; while ( arr[ j * eleSize + orderElement ] > temp[ orderElement ] );\r\n\r\n\t\t\t\tif ( j < i ) break;\r\n\r\n\t\t\t\tswapF( i, j );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( x = 0; x < eleSize; x ++ ) {\r\n\r\n\t\t\t\tarr[ ( left + 1 ) * eleSize + x ] = arr[ j * eleSize + x ];\r\n\t\t\t\tarr[ j * eleSize + x ] = temp[ x ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( right - i + 1 >= j - left ) {\r\n\r\n\t\t\t\tstack[ ++ sp ] = i;\r\n\t\t\t\tstack[ ++ sp ] = right;\r\n\t\t\t\tright = j - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstack[ ++ sp ] = left;\r\n\t\t\t\tstack[ ++ sp ] = j - 1;\r\n\t\t\t\tleft = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn arr;\r\n\r\n};\r\n\r\n\r\n\r\n/**\r\n * k-d Tree for typed arrays (e.g. for Float32Array), in-place\r\n * provides fast nearest neighbour search\r\n * useful e.g. for a custom shader and/or BufferGeometry, saves tons of memory\r\n * has no insert and remove, only buildup and neares neighbour search\r\n *\r\n * Based on https://github.com/ubilabs/kd-tree-javascript by Ubilabs\r\n *\r\n * @author Roman Bolzern <roman.bolzern@fhnw.ch>, 2013\r\n * @author I4DS http://www.fhnw.ch/i4ds, 2013\r\n * @license MIT License <http://www.opensource.org/licenses/mit-license.php>\r\n *\r\n * Requires typed array quicksort\r\n *\r\n * Example:\r\n * points: [x, y, z, x, y, z, x, y, z, ...]\r\n * metric: function(a, b){\treturn Math.pow(a[0] - b[0], 2) +  Math.pow(a[1] - b[1], 2) +  Math.pow(a[2] - b[2], 2); }  //Manhatten distance\r\n * eleSize: 3 //because of (x, y, z)\r\n *\r\n * Further information (including mathematical properties)\r\n * http://en.wikipedia.org/wiki/Binary_tree\r\n * http://en.wikipedia.org/wiki/K-d_tree\r\n *\r\n * If you want to further minimize memory usage, remove Node.depth and replace in search algorithm with a traversal to root node (see comments at TypedArrayUtils.Kdtree.prototype.Node)\r\n */\r\n\r\nTypedArrayUtils.Kdtree = function ( points, metric, eleSize ) {\r\n\r\n\tvar self = this;\r\n\r\n\tvar maxDepth = 0;\r\n\r\n\tvar getPointSet = function ( points, pos ) {\r\n\r\n\t\treturn points.subarray( pos * eleSize, pos * eleSize + eleSize );\r\n\r\n\t};\r\n\r\n\tfunction buildTree( points, depth, parent, pos ) {\r\n\r\n\t\tvar dim = depth % eleSize,\r\n\t\t\tmedian,\r\n\t\t\tnode,\r\n\t\t\tplength = points.length / eleSize;\r\n\r\n\t\tif ( depth > maxDepth ) maxDepth = depth;\r\n\r\n\t\tif ( plength === 0 ) return null;\r\n\t\tif ( plength === 1 ) {\r\n\r\n\t\t\treturn new self.Node( getPointSet( points, 0 ), depth, parent, pos );\r\n\r\n\t\t}\r\n\r\n\t\tTypedArrayUtils.quicksortIP( points, eleSize, dim );\r\n\r\n\t\tmedian = Math.floor( plength / 2 );\r\n\r\n\t\tnode = new self.Node( getPointSet( points, median ), depth, parent, median + pos );\r\n\t\tnode.left = buildTree( points.subarray( 0, median * eleSize ), depth + 1, node, pos );\r\n\t\tnode.right = buildTree( points.subarray( ( median + 1 ) * eleSize, points.length ), depth + 1, node, pos + median + 1 );\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\tthis.root = buildTree( points, 0, null, 0 );\r\n\r\n\tthis.getMaxDepth = function () {\r\n\r\n\t\treturn maxDepth;\r\n\r\n\t};\r\n\r\n\tthis.nearest = function ( point, maxNodes, maxDistance ) {\r\n\r\n\t\t /* point: array of size eleSize\r\n\t\t\tmaxNodes: max amount of nodes to return\r\n\t\t\tmaxDistance: maximum distance to point result nodes should have\r\n\t\t\tcondition (not implemented): function to test node before it's added to the result list, e.g. test for view frustum\r\n\t\t*/\r\n\r\n\t\tvar i,\r\n\t\t\tresult,\r\n\t\t\tbestNodes;\r\n\r\n\t\tbestNodes = new TypedArrayUtils.Kdtree.BinaryHeap(\r\n\r\n\t\t\tfunction ( e ) {\r\n\r\n\t\t\t\treturn - e[ 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t);\r\n\r\n\t\tfunction nearestSearch( node ) {\r\n\r\n\t\t\tvar bestChild,\r\n\t\t\t\tdimension = node.depth % eleSize,\r\n\t\t\t\townDistance = metric( point, node.obj ),\r\n\t\t\t\tlinearDistance = 0,\r\n\t\t\t\totherChild,\r\n\t\t\t\ti,\r\n\t\t\t\tlinearPoint = [];\r\n\r\n\t\t\tfunction saveNode( node, distance ) {\r\n\r\n\t\t\t\tbestNodes.push( [ node, distance ] );\r\n\r\n\t\t\t\tif ( bestNodes.size() > maxNodes ) {\r\n\r\n\t\t\t\t\tbestNodes.pop();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = 0; i < eleSize; i += 1 ) {\r\n\r\n\t\t\t\tif ( i === node.depth % eleSize ) {\r\n\r\n\t\t\t\t\tlinearPoint[ i ] = point[ i ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlinearPoint[ i ] = node.obj[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlinearDistance = metric( linearPoint, node.obj );\r\n\r\n\t\t\t// if it's a leaf\r\n\r\n\t\t\tif ( node.right === null && node.left === null ) {\r\n\r\n\t\t\t\tif ( bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[ 1 ] ) {\r\n\r\n\t\t\t\t\tsaveNode( node, ownDistance );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( node.right === null ) {\r\n\r\n\t\t\t\tbestChild = node.left;\r\n\r\n\t\t\t} else if ( node.left === null ) {\r\n\r\n\t\t\t\tbestChild = node.right;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( point[ dimension ] < node.obj[ dimension ] ) {\r\n\r\n\t\t\t\t\tbestChild = node.left;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbestChild = node.right;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// recursive search\r\n\r\n\t\t\tnearestSearch( bestChild );\r\n\r\n\t\t\tif ( bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[ 1 ] ) {\r\n\r\n\t\t\t\tsaveNode( node, ownDistance );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// if there's still room or the current distance is nearer than the best distance\r\n\r\n\t\t\tif ( bestNodes.size() < maxNodes || Math.abs( linearDistance ) < bestNodes.peek()[ 1 ] ) {\r\n\r\n\t\t\t\tif ( bestChild === node.left ) {\r\n\r\n\t\t\t\t\totherChild = node.right;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\totherChild = node.left;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( otherChild !== null ) {\r\n\r\n\t\t\t\t\tnearestSearch( otherChild );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( maxDistance ) {\r\n\r\n\t\t\tfor ( i = 0; i < maxNodes; i += 1 ) {\r\n\r\n\t\t\t\tbestNodes.push( [ null, maxDistance ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tnearestSearch( self.root );\r\n\r\n\t\tresult = [];\r\n\r\n\t\tfor ( i = 0; i < maxNodes; i += 1 ) {\r\n\r\n\t\t\tif ( bestNodes.content[ i ][ 0 ] ) {\r\n\r\n\t\t\t\tresult.push( [ bestNodes.content[ i ][ 0 ], bestNodes.content[ i ][ 1 ] ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t};\r\n\r\n};\r\n\r\n/**\r\n * If you need to free up additional memory and agree with an additional O( log n ) traversal time you can get rid of \"depth\" and \"pos\" in Node:\r\n * Depth can be easily done by adding 1 for every parent (care: root node has depth 0, not 1)\r\n * Pos is a bit tricky: Assuming the tree is balanced (which is the case when after we built it up), perform the following steps:\r\n *   By traversing to the root store the path e.g. in a bit pattern (01001011, 0 is left, 1 is right)\r\n *   From buildTree we know that \"median = Math.floor( plength / 2 );\", therefore for each bit...\r\n *     0: amountOfNodesRelevantForUs = Math.floor( (pamountOfNodesRelevantForUs - 1) / 2 );\r\n *     1: amountOfNodesRelevantForUs = Math.ceil( (pamountOfNodesRelevantForUs - 1) / 2 );\r\n *        pos += Math.floor( (pamountOfNodesRelevantForUs - 1) / 2 );\r\n *     when recursion done, we still need to add all left children of target node:\r\n *        pos += Math.floor( (pamountOfNodesRelevantForUs - 1) / 2 );\r\n *        and I think you need to +1 for the current position, not sure.. depends, try it out ^^\r\n *\r\n * I experienced that for 200'000 nodes you can get rid of 4 MB memory each, leading to 8 MB memory saved.\r\n */\r\nTypedArrayUtils.Kdtree.prototype.Node = function ( obj, depth, parent, pos ) {\r\n\r\n\tthis.obj = obj;\r\n\tthis.left = null;\r\n\tthis.right = null;\r\n\tthis.parent = parent;\r\n\tthis.depth = depth;\r\n\tthis.pos = pos;\r\n\r\n};\r\n\r\n/**\r\n * Binary heap implementation\r\n * @author http://eloquentjavascript.net/appendix2.htm\r\n */\r\n\r\nTypedArrayUtils.Kdtree.BinaryHeap = function ( scoreFunction ) {\r\n\r\n\tthis.content = [];\r\n\tthis.scoreFunction = scoreFunction;\r\n\r\n};\r\n\r\nTypedArrayUtils.Kdtree.BinaryHeap.prototype = {\r\n\r\n\tpush: function ( element ) {\r\n\r\n\t\t// Add the new element to the end of the array.\r\n\t\tthis.content.push( element );\r\n\r\n\t\t// Allow it to bubble up.\r\n\t\tthis.bubbleUp( this.content.length - 1 );\r\n\r\n\t},\r\n\r\n\tpop: function () {\r\n\r\n\t\t// Store the first element so we can return it later.\r\n\t\tvar result = this.content[ 0 ];\r\n\r\n\t\t// Get the element at the end of the array.\r\n\t\tvar end = this.content.pop();\r\n\r\n\t\t// If there are any elements left, put the end element at the\r\n\t\t// start, and let it sink down.\r\n\t\tif ( this.content.length > 0 ) {\r\n\r\n\t\t\tthis.content[ 0 ] = end;\r\n\t\t\tthis.sinkDown( 0 );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tpeek: function () {\r\n\r\n\t\treturn this.content[ 0 ];\r\n\r\n\t},\r\n\r\n\tremove: function ( node ) {\r\n\r\n\t\tvar len = this.content.length;\r\n\r\n\t\t// To remove a value, we must search through the array to find it.\r\n\t\tfor ( var i = 0; i < len; i ++ ) {\r\n\r\n\t\t\tif ( this.content[ i ] == node ) {\r\n\r\n\t\t\t\t// When it is found, the process seen in 'pop' is repeated\r\n\t\t\t\t// to fill up the hole.\r\n\t\t\t\tvar end = this.content.pop();\r\n\r\n\t\t\t\tif ( i != len - 1 ) {\r\n\r\n\t\t\t\t\tthis.content[ i ] = end;\r\n\r\n\t\t\t\t\tif ( this.scoreFunction( end ) < this.scoreFunction( node ) ) {\r\n\r\n\t\t\t\t\t\tthis.bubbleUp( i );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.sinkDown( i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthrow new Error( \"Node not found.\" );\r\n\r\n\t},\r\n\r\n\tsize: function () {\r\n\r\n\t\treturn this.content.length;\r\n\r\n\t},\r\n\r\n\tbubbleUp: function ( n ) {\r\n\r\n\t\t// Fetch the element that has to be moved.\r\n\t\tvar element = this.content[ n ];\r\n\r\n\t\t// When at 0, an element can not go up any further.\r\n\t\twhile ( n > 0 ) {\r\n\r\n\t\t\t// Compute the parent element's index, and fetch it.\r\n\t\t\tvar parentN = Math.floor( ( n + 1 ) / 2 ) - 1,\r\n\t\t\t\tparent = this.content[ parentN ];\r\n\r\n\t\t\t// Swap the elements if the parent is greater.\r\n\t\t\tif ( this.scoreFunction( element ) < this.scoreFunction( parent ) ) {\r\n\r\n\t\t\t\tthis.content[ parentN ] = element;\r\n\t\t\t\tthis.content[ n ] = parent;\r\n\r\n\t\t\t\t// Update 'n' to continue at the new position.\r\n\t\t\t\tn = parentN;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Found a parent that is less, no need to move it further.\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tsinkDown: function ( n ) {\r\n\r\n\t\t// Look up the target element and its score.\r\n\t\tvar length = this.content.length,\r\n\t\t\telement = this.content[ n ],\r\n\t\t\telemScore = this.scoreFunction( element );\r\n\r\n\t\twhile ( true ) {\r\n\r\n\t\t\t// Compute the indices of the child elements.\r\n\t\t\tvar child2N = ( n + 1 ) * 2, child1N = child2N - 1;\r\n\r\n\t\t\t// This is used to store the new position of the element, if any.\r\n\t\t\tvar swap = null;\r\n\r\n\t\t\t// If the first child exists (is inside the array)...\r\n\t\t\tif ( child1N < length ) {\r\n\r\n\t\t\t\t// Look it up and compute its score.\r\n\t\t\t\tvar child1 = this.content[ child1N ],\r\n\t\t\t\t\tchild1Score = this.scoreFunction( child1 );\r\n\r\n\t\t\t\t// If the score is less than our element's, we need to swap.\r\n\t\t\t\tif ( child1Score < elemScore ) swap = child1N;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Do the same checks for the other child.\r\n\t\t\tif ( child2N < length ) {\r\n\r\n\t\t\t\tvar child2 = this.content[ child2N ],\r\n\t\t\t\t\tchild2Score = this.scoreFunction( child2 );\r\n\r\n\t\t\t\tif ( child2Score < ( swap === null ? elemScore : child1Score ) ) swap = child2N;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// If the element needs to be moved, swap it, and continue.\r\n\t\t\tif ( swap !== null ) {\r\n\r\n\t\t\t\tthis.content[ n ] = this.content[ swap ];\r\n\t\t\t\tthis.content[ swap ] = element;\r\n\t\t\t\tn = swap;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Otherwise, we are done.\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nexport { TypedArrayUtils };\r\n","/**\r\n * Download a file.\r\n * @param data\r\n * @param filename\r\n */\r\nexport function download(data: string, filename: string): boolean {\r\n    // console.log('Downloading');\r\n\r\n    const file = new File([data], filename, { type: 'plain/text;charset=utf-8' });\r\n    // console.log(file.name);\r\n\r\n    const link = document.createElement('a');\r\n    link.href = window.URL.createObjectURL(file);\r\n    link.download = filename;\r\n    document.body.appendChild(link);\r\n    link.click();\r\n\r\n    return true;\r\n}\r\n","import { EFilterOperatorTypes, EAttribDataTypeStrs, TAttribDataTypes, IAttribJSONData, EEntStrToGeomMaps, EEntType } from './common';\r\nimport { arrRem } from '../util/arrs';\r\nimport { GIModelData } from './GIModelData';\r\nimport * as lodash from 'lodash';\r\nimport { cloneDeepMapArr } from './common_func';\r\n\r\n/**\r\n * Geo-info attribute class for one attribute.\r\n * The attributs stores key-value pairs.\r\n * Multiple keys point to the same value.\r\n * So for example, [[1,3], \"a\"],[[0,4], \"b\"] can be converted into sequential arrays.\r\n * The values would be [\"a\", \"b\"]\r\n * The keys would be [1,0,,0,1] (Note the undefined value in the middle.)\r\n *\r\n */\r\nexport class GIAttribMap {\r\n    protected _modeldata: GIModelData;\r\n    protected _name: string;\r\n    protected _ent_type: EEntType;\r\n    protected _data_type: EAttribDataTypeStrs;\r\n    protected _data_length: number;\r\n    // the two data maps that store attrib pointers\r\n    // private _map_val_k_to_val_i: Map<string|number, number>; // unique, no duplicates\r\n    // private _map_val_i_to_val: Map<number, TAttribDataTypes>; // unique, no duplicates\r\n    protected _map_val_i_to_ents_i: Map<number, number[]>;\r\n    protected _map_ent_i_to_val_i: Map<number, number>;\r\n    /**\r\n     * Creates an attribute.\r\n     * @param attrib_data\r\n     */\r\n    constructor(modeldata: GIModelData, name: string, ent_type: EEntType, data_type: EAttribDataTypeStrs) {\r\n        this._modeldata = modeldata;\r\n        this._name = name;\r\n        this._ent_type = ent_type;\r\n        this._data_type = data_type;\r\n        if (data_type === EAttribDataTypeStrs.LIST || data_type === EAttribDataTypeStrs.DICT) {\r\n            this._data_length = 0;\r\n        } else {\r\n            this._data_length = 1;\r\n        }\r\n        // the maps\r\n        this._map_val_i_to_ents_i = new Map();\r\n        this._map_ent_i_to_val_i = new Map();\r\n    }\r\n    /**\r\n     * Returns the JSON data for this attribute.\r\n     */\r\n    public getJSONData(): IAttribJSONData {\r\n        return {\r\n            name: this._name,\r\n            data_type: this._data_type,\r\n            data_length: this._data_length,\r\n            data: Array.from(this._map_val_i_to_ents_i)\r\n        };\r\n    }\r\n    /**\r\n     * Sets the JSON data for this attribute.\r\n     * Any existing data is deleted.\r\n     */\r\n    public setJSONData(attrib_data: IAttribJSONData): void {\r\n        this._name = attrib_data.name;\r\n        this._data_type = attrib_data.data_type;\r\n        this._data_length = attrib_data.data_length;\r\n        this._map_val_i_to_ents_i = new Map(attrib_data.data);\r\n        this._map_ent_i_to_val_i = new Map();\r\n        this._map_val_i_to_ents_i.forEach( (ents_i, val_i) => {\r\n            ents_i.forEach( ent_i => {\r\n                this._map_ent_i_to_val_i.set(ent_i, val_i);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Gets the name of this attribute.\r\n     */\r\n    public getName(): string {\r\n        return this._name;\r\n    }\r\n    /**\r\n     * Sets the name of this attribute.\r\n     */\r\n    public setName(name: string): void {\r\n        this._name = name;\r\n    }\r\n    /**\r\n     * Returns the data type of this attribute.\r\n     */\r\n    public getDataType(): EAttribDataTypeStrs {\r\n        return this._data_type;\r\n    }\r\n    /**\r\n     * Returns the length of the data.\r\n     * ~\r\n     * If _data_type is NUMBER, STRING, BOOLEAN, then length = 1\r\n     * ~\r\n     * If _data_type is LIST, length is the list of the longest length, can be 0\r\n     * ~\r\n     * If _data_type is OBJECT, length is the obect with the longest Object.keys, can be 0\r\n     */\r\n    public getDataLength(): number {\r\n        return this._data_length;\r\n    }\r\n    // /**\r\n    //  * Returns true if the data has non null/undefined value.\r\n    //  */\r\n    // public hasNonNullVal(): boolean {\r\n    //     return this._num_vals > 0;\r\n    // }\r\n    // /**\r\n    //  * Returns true if this value exists in the attributes.\r\n    //  */\r\n    // public hasVal(val: TAttribDataTypes): boolean {\r\n    //     return this._map_val_k_to_val_i.has(this._valToValkey(val));\r\n    // }\r\n    /**\r\n     * Returns true if there is an entity that has a value (i.e. the value is not undefined).\r\n     */\r\n    public hasEnt(ent_i: number): boolean {\r\n        return this._map_ent_i_to_val_i.has(ent_i);\r\n    }\r\n    /**\r\n     * Returns the number of entities that have a value (i.e. is not undefined).\r\n     */\r\n    public numEnts(): number {\r\n        return this._map_ent_i_to_val_i.size;\r\n    }\r\n    /**\r\n     * Returns the number of values.\r\n     */\r\n    public numVals(): number {\r\n        return this._map_val_i_to_ents_i.size;\r\n    }\r\n    /**\r\n     * Returns the IDs of all ents that have a value.\r\n     */\r\n    public getEnts(): number[] {\r\n        return Array.from(this._map_ent_i_to_val_i.keys());\r\n    }\r\n    /**\r\n     * Delete the entities from this attribute map.\r\n     */\r\n    public delEnt(ents_i: number|number[]): void {\r\n        ents_i = (Array.isArray(ents_i)) ? ents_i : [ents_i];\r\n        ents_i.forEach(ent_i => {\r\n            // _map_ent_i_to_val_i: Map<number, number>\r\n            const val_i: number = this._map_ent_i_to_val_i.get(ent_i);\r\n            if (val_i !== undefined) {\r\n                // del the entity from _map_ent_i_to_val_i\r\n                this._map_ent_i_to_val_i.delete(ent_i);\r\n                // del the entity from _map_val_i_to_ents_i\r\n                const other_ents_i: number[] = this._map_val_i_to_ents_i.get(val_i);\r\n                other_ents_i.splice(other_ents_i.indexOf(ent_i), 1);\r\n                // clean up just in case that was the last entity with this value\r\n                this._cleanUp(val_i);\r\n                // update time stamp\r\n                this._modeldata.geom.time_stamp.updateEntTs(this._ent_type, ent_i);\r\n            }\r\n        });\r\n        // TODO\r\n        // this._data_length may need to be reduced\r\n    }\r\n    /**\r\n     * Returns a nested array of entities and values, like this:\r\n     * [ [[2,4,6,8], 'hello'], [[9,10], 'world']]\r\n     * This is the same format as used in gi-json\r\n     * This matches the method setEntsVals()\r\n     */\r\n    public getEntsVals(): [number[], TAttribDataTypes][] {\r\n        const ents_i_values: [number[], TAttribDataTypes][] = [];\r\n        this._map_val_i_to_ents_i.forEach( (ents_i, val_i) => {\r\n            // const value: TAttribDataTypes = this._map_val_i_to_val.get(val_i);\r\n            const value: TAttribDataTypes = this._modeldata.model.metadata.getAttribValFromIdx(val_i, this._data_type);\r\n            ents_i_values.push([ents_i, value]);\r\n        });\r\n        return ents_i_values;\r\n    }\r\n    /**\r\n     * Sets the value for a given entity or entities.\r\n     *\r\n     * If the value is undefined, no action is taken.\r\n     *\r\n     * The value can be null, in which case it is equivalent to deleting the entities from this attrib map.\r\n     *\r\n     * @param ent_i\r\n     * @param val\r\n     */\r\n    public setEntVal(ents_i: number|number[], val: TAttribDataTypes, check_type = true): void {\r\n        // console.log(\"xxxx\", val)\r\n\r\n        // if indefined, do nothing\r\n        if (val === undefined) { return; }\r\n        // if null, delete\r\n        if (val === null) {\r\n            this.delEnt(ents_i);\r\n            return;\r\n        }\r\n        // check the type\r\n        if (check_type) {\r\n            if (this._data_type === EAttribDataTypeStrs.NUMBER && typeof val !== 'number') {\r\n                throw new Error('Error setting attribute value. Attribute is of type \"number\" but the value is not a number.');\r\n            } else if (this._data_type === EAttribDataTypeStrs.STRING && typeof val !== 'string') {\r\n                throw new Error('Error setting attribute value. Attribute is of type \"string\" but the value is not a string.');\r\n            } else if (this._data_type === EAttribDataTypeStrs.BOOLEAN && typeof val !== 'boolean') {\r\n                throw new Error('Error setting attribute value. Attribute is of type \"boolean\" but the value is not a boolean.');\r\n            } else if (this._data_type === EAttribDataTypeStrs.LIST && !Array.isArray(val)) {\r\n                throw new Error('Error setting attribute value. Attribute is of type \"list\" but the value is not a list.');\r\n            } else if (this._data_type === EAttribDataTypeStrs.DICT && typeof val !== 'object') {\r\n                throw new Error('Error setting attribute value. Attribute is of type \"list\" but the value is not a list.');\r\n            }\r\n        }\r\n        const val_k: string | number = this._valToValkey(val);\r\n        // get the index to the value\r\n        let val_i: number;\r\n        if (this._modeldata.model.metadata.hasAttribKey(val_k, this._data_type)) {\r\n            val_i = this._modeldata.model.metadata.getAttribIdxFromKey(val_k, this._data_type);\r\n            if (!this._map_val_i_to_ents_i.has(val_i)) {\r\n                this._map_val_i_to_ents_i.set(val_i, []);\r\n            }\r\n        } else {\r\n            val_i = this._modeldata.model.metadata.addAttribByKeyVal(val_k, val, this._data_type);\r\n            this._map_val_i_to_ents_i.set(val_i, []);\r\n        }\r\n        // an array of ents\r\n        ents_i = (Array.isArray(ents_i)) ? ents_i : [ents_i];\r\n        // loop through all the unique ents, and set _map_ent_i_to_val_i\r\n        let unique_ents_i: number[] = ents_i;\r\n        if (ents_i.length > 1) {\r\n            unique_ents_i = Array.from(new Set(ents_i));\r\n        }\r\n        unique_ents_i.forEach( ent_i => {\r\n            // keep the old value for later\r\n            const old_val_i: number = this._map_ent_i_to_val_i.get(ent_i);\r\n            // for each ent_i, set the new val_i\r\n            this._map_ent_i_to_val_i.set(ent_i, val_i);\r\n            // clean up the old val_i\r\n            if (old_val_i !== undefined && old_val_i !== val_i) {\r\n                arrRem(this._map_val_i_to_ents_i.get(old_val_i), ent_i);\r\n                // clean up just in case that was the last entity with this value\r\n                this._cleanUp(old_val_i);\r\n            }\r\n            // update the time stamp for this entity\r\n            this._modeldata.geom.time_stamp.updateEntTs(this._ent_type, ent_i);\r\n        });\r\n        // for the val_i, set it to point to all the ents that have this value\r\n        const exist_ents_i: number[] = this._map_val_i_to_ents_i.get(val_i);\r\n        const exist_new_ents_i: number[] = exist_ents_i === undefined ?\r\n            ents_i :\r\n            Array.from(new Set(exist_ents_i.concat(ents_i)));\r\n        this._map_val_i_to_ents_i.set(val_i, exist_new_ents_i);\r\n\r\n        // update the _data_length for lists and objects\r\n        if (this._data_type === EAttribDataTypeStrs.LIST) {\r\n            const arr_len: number = (val as any[]).length;\r\n            if (arr_len > this._data_length) {\r\n                this._data_length = arr_len;\r\n            }\r\n        } else if (this._data_type === EAttribDataTypeStrs.DICT) {\r\n            const arr_len: number = Object.keys((val as object)).length;\r\n            if (arr_len > this._data_length) {\r\n                this._data_length = arr_len;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Renumber the entity IDs.\r\n     * This gets called when this data is being meregd into another model.\r\n     * In such a case, entity IDs need to be renumbered to avoid conflicts.\r\n     * The new entity IDs are defined in the renum_map argument.\r\n     * @param renum_map\r\n     */\r\n    public renumEnts(renum_map: Map<number, number>): void {\r\n        // private _map_val_i_to_ents_i: Map<number, number[]>;\r\n        this._map_val_i_to_ents_i.forEach( (ents_i, val_i) => {\r\n            for (let i = 0; i < ents_i.length; i++) {\r\n                const new_ent_i: number = renum_map.get(ents_i[i]); // shift\r\n                ents_i[i] = new_ent_i;\r\n                this._map_ent_i_to_val_i.set(new_ent_i, val_i);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Merges another attrib map into this attrib map\r\n     * @param attrib_map The attrib map to merge into this map\r\n     */\r\n    public merge(attrib_map: GIAttribMap): void {\r\n        attrib_map._map_val_i_to_ents_i.forEach( (other_ents_i, val_i) => {\r\n            // get the ents\r\n            const exist_ents_i: number[] = this._map_val_i_to_ents_i.get(val_i);\r\n            const exist_other_ents_i: number[] = exist_ents_i === undefined ?\r\n                Array.from(other_ents_i) :\r\n                Array.from(new Set(exist_ents_i.concat(other_ents_i)));\r\n            // update the ent maps\r\n            this._map_val_i_to_ents_i.set(val_i, exist_other_ents_i);\r\n            other_ents_i.forEach( ent_i => this._map_ent_i_to_val_i.set(ent_i, val_i));\r\n        });\r\n        // update the data length\r\n        if (this._data_type === EAttribDataTypeStrs.LIST || this._data_type === EAttribDataTypeStrs.DICT) {\r\n            if (attrib_map._data_length > this._data_length) {\r\n                this._data_length = attrib_map._data_length;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Dumps another attrib map into this attrib map\r\n     * Assumes tha this map is empty\r\n     * @param attrib_map The attrib map to merge into this map\r\n     */\r\n    public dump(attrib_map: GIAttribMap): void {\r\n        this._map_val_i_to_ents_i = cloneDeepMapArr(attrib_map._map_val_i_to_ents_i);\r\n        this._map_ent_i_to_val_i = new Map(attrib_map._map_ent_i_to_val_i);\r\n    }\r\n    /**\r\n     * Dumps another attrib map into this attrib map\r\n     * Assumes tha this map is empty\r\n     * @param attrib_map The attrib map to merge into this map\r\n     */\r\n    public dumpSelect(attrib_map: GIAttribMap, selected: Set<number>): void {\r\n        selected.forEach(selected_ent_i => {\r\n            if (attrib_map._map_ent_i_to_val_i.has(selected_ent_i)) {\r\n                const val_i: number = attrib_map._map_ent_i_to_val_i.get(selected_ent_i);\r\n                const ents_i: number[] = attrib_map._map_val_i_to_ents_i.get(val_i);\r\n                const ents2_i: number[] = ents_i.filter( ent_i => selected.has(ent_i) );\r\n                this._map_val_i_to_ents_i.set(val_i, ents2_i);\r\n                ents2_i.forEach( ent_i => this._map_ent_i_to_val_i.set(ent_i, val_i));\r\n                // update the data length\r\n                if (this._data_type === EAttribDataTypeStrs.LIST || this._data_type === EAttribDataTypeStrs.DICT) {\r\n                    const val = this._modeldata.model.metadata.getAttribValFromIdx(val_i, this._data_type);\r\n                    if (this._data_type === EAttribDataTypeStrs.LIST) {\r\n                        const arr_len: number = (val as any[]).length;\r\n                        if (arr_len > this._data_length) {\r\n                            this._data_length = arr_len;\r\n                        }\r\n                    } else if (this._data_type === EAttribDataTypeStrs.DICT) {\r\n                        const arr_len: number = Object.keys((val as object)).length;\r\n                        if (arr_len > this._data_length) {\r\n                            this._data_length = arr_len;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sets the indexed value for a given entity or entities.\r\n     * This assumes that this attribute is a list.\r\n     * @param ent_i\r\n     * @param idx\r\n     * @param val\r\n     */\r\n    public setEntListIdxVal(ents_i: number|number[], idx: number, val: any): void {\r\n        // check this is a list\r\n        if (this._data_type !== EAttribDataTypeStrs.LIST) {\r\n            throw new Error('Setting indexed attribute, but the attribute is not a list: \"' + this._name + '\".');\r\n        }\r\n        // make sure we have an array of ents_i\r\n        ents_i = (Array.isArray(ents_i)) ? ents_i : [ents_i];\r\n        // loop through all the unique ents, and setEntVal\r\n        let unique_ents_i: number[] = ents_i;\r\n        if (ents_i.length > 1) {\r\n            unique_ents_i = Array.from(new Set(ents_i));\r\n        }\r\n        unique_ents_i.forEach( ent_i => {\r\n            const exist_list: any[] = this.getEntVal(ent_i) as any[];\r\n            let new_list: any[] = [];\r\n            if (exist_list !== undefined) {\r\n                new_list = lodash.cloneDeep(exist_list); // IMPORTANT clone the array\r\n            }\r\n            if (idx < 0) {\r\n                idx += new_list.length;\r\n            }\r\n            new_list[idx] = val;\r\n            this.setEntVal(ent_i, new_list);\r\n        });\r\n    }\r\n    /**\r\n     * Sets the keyed value for a given entity or entities.\r\n     * This assumes that this attribute is a dict.\r\n     * @param ents_i\r\n     * @param key\r\n     * @param val\r\n     */\r\n    public setEntDictKeyVal(ents_i: number|number[], key: string, val: any): void {\r\n        // check this is a dict\r\n        if (this._data_type !== EAttribDataTypeStrs.DICT) {\r\n            throw new Error('Setting keyed attribute, but the attribute is not a dict: \"' + this._name + '\".');\r\n        }\r\n        // make sure we have an array of ents_i\r\n        ents_i = (Array.isArray(ents_i)) ? ents_i : [ents_i];\r\n        // loop through all the unique ents, and setEntVal\r\n        let unique_ents_i: number[] = ents_i;\r\n        if (ents_i.length > 1) {\r\n            unique_ents_i = Array.from(new Set(ents_i));\r\n        }\r\n        unique_ents_i.forEach( ent_i => {\r\n            const exist_dict: object = this.getEntVal(ent_i) as object;\r\n            let new_dict: object = {};\r\n            if (exist_dict !== undefined) {\r\n                new_dict = lodash.cloneDeep(exist_dict); // IMPORTANT clone the dict\r\n            }\r\n            new_dict[key] = val;\r\n            this.setEntVal(ent_i, new_dict);\r\n        });\r\n    }\r\n    /**\r\n     * Gets the value for a given entity, or an array of values given an array of entities.\r\n     * ~\r\n     * Returns undefined if the entity does not exist in this map.\r\n     * ~\r\n     * @param ent_i\r\n     */\r\n    public getEntVal(ents_i: number|number[]): TAttribDataTypes {\r\n        if (!Array.isArray(ents_i)) {\r\n            const ent_i: number = ents_i as number;\r\n            const val_i: number = this._map_ent_i_to_val_i.get(ent_i);\r\n            if (val_i === undefined) { return undefined; }\r\n            // return this._map_val_i_to_val.get(val_i) as TAttribDataTypes;\r\n            return this._modeldata.model.metadata.getAttribValFromIdx(val_i, this._data_type);\r\n        } else {\r\n            return ents_i.map(ent_i => this.getEntVal(ent_i)) as TAttribDataTypes;\r\n        }\r\n    }\r\n    /**\r\n     * Gets the indexed value in a list  for a given entity.\r\n     * Returns undefined if the entity does not exist\r\n     * This assumes that this attribute is a list.\r\n     * @param ent_i\r\n     */\r\n    public getEntListIdxVal(ents_i: number|number[], idx: number): any {\r\n        if (this._data_type !== EAttribDataTypeStrs.LIST) {\r\n            throw new Error('Trying to get indexed value, but the attribute data type is not a list.');\r\n        }\r\n        if (!Array.isArray(ents_i)) {\r\n            const ent_i: number = ents_i as number;\r\n            const exist_value_arr: any[] = this.getEntVal(ent_i) as any[];\r\n            return exist_value_arr[idx] as any;\r\n        } else {\r\n            return ents_i.map(ent_i => this.getEntVal(ent_i)[idx]) as any[];\r\n        }\r\n    }\r\n    /**\r\n     * Gets the value in an dict for a given entity.\r\n     * Returns undefined if the entity does not exist\r\n     * This assumes that this attribute is a dict.\r\n     * @param ent_i\r\n     */\r\n    public getEntDictKeyVal(ents_i: number|number[], key: string): any {\r\n        if (this._data_type !== EAttribDataTypeStrs.DICT) {\r\n            throw new Error('Trying to get key value, but the attribute data type is not a dict.');\r\n        }\r\n        if (!Array.isArray(ents_i)) {\r\n            const ent_i: number = ents_i as number;\r\n            const exist_value_arr: any[] = this.getEntVal(ent_i) as any[];\r\n            return exist_value_arr[key] as any;\r\n        } else {\r\n            return ents_i.map(ent_i => this.getEntVal(ent_i)[key]) as any[];\r\n        }\r\n    }\r\n    /**\r\n     * Gets all the keys that have a given value\r\n     * If the value does not exist an empty array is returned\r\n     * The value can be a list or object\r\n     * @param val\r\n     */\r\n    public getEntsFromVal(val: TAttribDataTypes): number[] {\r\n        // const val_i: number = this._map_val_k_to_val_i.get(this._valToValkey(val));\r\n        const val_i: number =  this._modeldata.model.metadata.getAttribIdxFromKey(this._valToValkey(val), this._data_type);\r\n        if (val_i === undefined) { return []; }\r\n        return this._map_val_i_to_ents_i.get(val_i);\r\n    }\r\n    /**\r\n     * Returns an array of entity indices which do not have a value (undefined)\r\n     */\r\n    public getEntsWithoutVal(ents_i: number[]): number[] {\r\n        return ents_i.filter(ent_i => !this._map_ent_i_to_val_i.has(ent_i));\r\n    }\r\n    /**\r\n     * Returns an array of entity indices which have a value (not undefined)\r\n     */\r\n    public getEntsWithVal(ents_i: number[]): number[] {\r\n        return ents_i.filter(ent_i => this._map_ent_i_to_val_i.has(ent_i));\r\n    }\r\n    /**\r\n     * Executes a query.\r\n     * ~\r\n     * The value can be NUMBER, STRING, BOOLEAN, LIST or DICT\r\n     * ~\r\n     * @param ents_i\r\n     * @param operator The relational operator, ==, !=, <=, >=, etc\r\n     * @param search_val The value to search, string or number, or any[].\r\n     */\r\n    public queryVal(ents_i: number[], operator: EFilterOperatorTypes, search_val: TAttribDataTypes): number[] {\r\n        // check the null search case\r\n        if (search_val === null) {\r\n            if (operator !== EFilterOperatorTypes.IS_EQUAL && operator !== EFilterOperatorTypes.IS_NOT_EQUAL) {\r\n                { throw new Error('Query operator \"' + operator + '\" and query \"null\" value are incompatible.'); }\r\n            }\r\n        }\r\n        // search\r\n        if (this._data_type === EAttribDataTypeStrs.NUMBER) {\r\n            if (search_val !== null && typeof search_val !== 'number') {\r\n                throw new Error('Query search value \"' + search_val + '\" is not a number.');\r\n            }\r\n            return this._searchNumVal(ents_i, operator, search_val as number);\r\n        } else if (this._data_type === EAttribDataTypeStrs.STRING) {\r\n            if (operator !== EFilterOperatorTypes.IS_EQUAL && operator !== EFilterOperatorTypes.IS_NOT_EQUAL) {\r\n                throw new Error('Query operator \"' + operator + '\" and query \"' + search_val + '\" value are incompatible.');\r\n            }\r\n            if (search_val !== null && typeof search_val !== 'string') {\r\n                throw new Error('Query search value \"' + search_val + '\" is not a string.');\r\n            }\r\n            return this._searchStrVal(ents_i, operator, search_val as string);\r\n        } else if (this._data_type === EAttribDataTypeStrs.BOOLEAN) {\r\n            if (search_val !== null && typeof search_val !== 'boolean') {\r\n                throw new Error('Query search value \"' + search_val + '\" is not a boolean.');\r\n            }\r\n            return this._searchBoolVal(ents_i, operator, search_val as boolean);\r\n        } else if (this._data_type === EAttribDataTypeStrs.LIST) {\r\n            if (search_val !== null && !Array.isArray(search_val)) {\r\n                throw new Error('Query search value \"' + search_val + '\" is not a list.');\r\n            }\r\n            return this._searchListVal(ents_i, operator, search_val as any[]);\r\n        } else if (this._data_type === EAttribDataTypeStrs.DICT) {\r\n            if (search_val !== null && typeof search_val !== 'object') {\r\n                throw new Error('Query search value \"' + search_val + '\" is not an dictionary.');\r\n            }\r\n            return this._searchObjVal(ents_i, operator, search_val as object);\r\n        } else {\r\n            throw new Error('Bad query.');\r\n        }\r\n    }\r\n    /**\r\n     * Executes a query for an indexed valued in a list\r\n     * @param ents_i\r\n     * @param val_arr_idx The index of the value in the array\r\n     * @param operator The relational operator, ==, !=, <=, >=, etc\r\n     * @param search_val The value to search, string or number, or any[].\r\n     */\r\n    public queryListIdxVal(ents_i: number[], val_arr_idx: number,\r\n            operator: EFilterOperatorTypes, search_val: TAttribDataTypes): number[] {\r\n        // check the null search case\r\n        if (search_val === null) {\r\n            if (operator !== EFilterOperatorTypes.IS_EQUAL && operator !== EFilterOperatorTypes.IS_NOT_EQUAL) {\r\n                { throw new Error('Query operator \"' + operator + '\" and query \"null\" value are incompatible.'); }\r\n            }\r\n        }\r\n        // check\r\n        if (!Number.isInteger(val_arr_idx)) {\r\n            throw new Error('Query index \"' + val_arr_idx + '\" must be of type \"number\", and must be an integer.');\r\n        }\r\n        if (this._data_type !== EAttribDataTypeStrs.LIST)  {\r\n            throw new Error('Query attribute \"' + this._name + '\" is not a list.');\r\n        }\r\n        // search\r\n        return this._searchListIdxVal(ents_i, val_arr_idx, operator, search_val);\r\n    }\r\n    /**\r\n     * Executes a query for an valued in an object, identified by a key\r\n     * @param ents_i\r\n     * @param val_obj_key The key of the value in the object\r\n     * @param operator The relational operator, ==, !=, <=, >=, etc\r\n     * @param search_val The value to search, string or number, or any[].\r\n     */\r\n    public queryDictKeyVal(ents_i: number[], val_obj_key: string,\r\n        operator: EFilterOperatorTypes, search_val: TAttribDataTypes): number[] {\r\n        // check the null search case\r\n        if (search_val === null) {\r\n            if (operator !== EFilterOperatorTypes.IS_EQUAL && operator !== EFilterOperatorTypes.IS_NOT_EQUAL) {\r\n                { throw new Error('Query operator \"' + operator + '\" and query \"null\" value are incompatible.'); }\r\n            }\r\n        }\r\n        // check\r\n        if (typeof val_obj_key !== 'string') {\r\n            throw new Error('Query index \"' + val_obj_key + '\" must be of type \"string\".');\r\n        }\r\n        if (this._data_type !== EAttribDataTypeStrs.DICT)  {\r\n            throw new Error('Query attribute \"' + this._name + '\" is not a dictionary.');\r\n        }\r\n        // search\r\n        return this._searchDictKeyVal(ents_i, val_obj_key, operator, search_val);\r\n    }\r\n    //  ===============================================================================================================\r\n    //  Private methods\r\n    //  ===============================================================================================================\r\n    /**\r\n     * Convert a value into a map key\r\n     *\r\n     * The key can be either a string or a number.\r\n     * string -> string\r\n     * number -> number\r\n     * boolean -> number (1 or 0)\r\n     * list -> string\r\n     */\r\n    protected _valToValkey(val: TAttribDataTypes): string|number {\r\n        if (this._data_type === EAttribDataTypeStrs.STRING) {\r\n            if (typeof val !== 'string') {\r\n                throw new Error('Value must be of type \"string\".');\r\n            }\r\n            return val as string;\r\n        } else if (this._data_type === EAttribDataTypeStrs.NUMBER) {\r\n            if (typeof val !== 'number') {\r\n                throw new Error('Value must be of type \"number\".');\r\n            }\r\n            return val as number;\r\n        } else if (this._data_type === EAttribDataTypeStrs.BOOLEAN) {\r\n            if (typeof val !== 'boolean') {\r\n                throw new Error('Value must be of type \"boolean\".');\r\n            } else {\r\n                if (val) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }\r\n        } else if (this._data_type === EAttribDataTypeStrs.LIST) {\r\n            if (!Array.isArray(val)) {\r\n                throw new Error('Value must be of type \"list\".');\r\n            }\r\n            return JSON.stringify(val);\r\n        } else if (this._data_type === EAttribDataTypeStrs.DICT) {\r\n            if (typeof val !== 'object') {\r\n                throw new Error('Value must be of type \"object\".');\r\n            }\r\n            return JSON.stringify(val);\r\n        }\r\n        // datatype is none of the above\r\n        throw new Error('Datatype not recognised.');\r\n    }\r\n    /**\r\n     * Checks if anything still points to this value\r\n     * If not, cleans up the arrays\r\n     * _map_val_i_to_ents_i\r\n     * _map_val_i_to_val\r\n     * _map_val_k_to_val_i\r\n     */\r\n    protected _cleanUp(val_i: number): void {\r\n        if (val_i !== undefined) {\r\n            // _map_val_i_to_ents_i: Map<number, number[]>\r\n            const ents_i: number[] = this._map_val_i_to_ents_i.get(val_i);\r\n            if (ents_i.length === 0) {\r\n                this._map_val_i_to_ents_i.delete(val_i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Compare two values with a comparison operator, ==, !=, >, >=, <, <=\r\n     * ~\r\n     * If the values are of different types, then false is returned.\r\n     * ~\r\n     * For arrays, true is returned only if a pairwise comparison between the items in the two arrays all return true.\r\n     * The two arrays must also be of equal length.\r\n     * ~\r\n     * Values may be null.\r\n     * Values that are undefined will be treated as null.\r\n     * ~\r\n     * @param operator\r\n     * @param val1\r\n     * @param val2\r\n     */\r\n    protected _compare(operator: EFilterOperatorTypes, val1: any, val2: any): boolean {\r\n        if (Array.isArray(val1)) {\r\n            if (!Array.isArray(val2)) { return false; }\r\n            if (val1.length !== val2.length) { return false; }\r\n            for (let i = 0; i < val1.length; i++) {\r\n                if (!this._compare(operator, val1[i], val2[i])) { return false; }\r\n            }\r\n            return true;\r\n        }\r\n        if (val1 === undefined) { val1 = null; }\r\n        if (val2 === undefined) { val2 = null; }\r\n        if (typeof val1 !== typeof val2) { return false; }\r\n        switch (operator) {\r\n            // ==\r\n            case EFilterOperatorTypes.IS_EQUAL:\r\n                return val1 === val2;\r\n            // !=\r\n            case EFilterOperatorTypes.IS_NOT_EQUAL:\r\n                return val1 !== val2;\r\n            // >\r\n            case EFilterOperatorTypes.IS_GREATER:\r\n                return val1 > val2;\r\n            // >=\r\n            case EFilterOperatorTypes.IS_GREATER_OR_EQUAL:\r\n                return val1 >= val2;\r\n            // <\r\n            case EFilterOperatorTypes.IS_LESS:\r\n                return val1 < val2;\r\n            // <=\r\n            case EFilterOperatorTypes.IS_LESS_OR_EQUAL:\r\n                return val1 <= val2;\r\n            default:\r\n                throw new Error('Query operator not found: ' + operator);\r\n        }\r\n    }\r\n    // ======================================================\r\n    /**\r\n     * Searches for the number value using the operator\r\n     */\r\n    protected _searchNumVal(ents_i: number[], operator: EFilterOperatorTypes, search_val: number): number[] {\r\n        // first deal with null cases\r\n        if (search_val === null && operator === EFilterOperatorTypes.IS_EQUAL ) {\r\n            return this.getEntsWithoutVal(ents_i);\r\n        } else if (search_val === null && operator === EFilterOperatorTypes.IS_NOT_EQUAL ) {\r\n            return this.getEntsWithVal(ents_i);\r\n        }\r\n        // search\r\n        let found_keys: number[];\r\n        switch (operator) {\r\n            case EFilterOperatorTypes.IS_EQUAL:\r\n                found_keys = this.getEntsFromVal(search_val);\r\n                if (found_keys === undefined) { return []; }\r\n                return ents_i.filter(ent_i => found_keys.indexOf(ent_i) !== -1);\r\n            case EFilterOperatorTypes.IS_NOT_EQUAL:\r\n                found_keys = this.getEntsFromVal(search_val);\r\n                if (found_keys === undefined) { return []; }\r\n                return ents_i.filter(ent_i => found_keys.indexOf(ent_i) === -1);\r\n            case EFilterOperatorTypes.IS_GREATER:\r\n            case EFilterOperatorTypes.IS_GREATER_OR_EQUAL:\r\n            case EFilterOperatorTypes.IS_LESS:\r\n            case EFilterOperatorTypes.IS_LESS_OR_EQUAL:\r\n                found_keys = [];\r\n                for (const ent_i of ents_i) {\r\n                    const val: TAttribDataTypes = this.getEntVal(ent_i) as TAttribDataTypes;\r\n                    if ((val !== null && val !== undefined) && this._compare(operator, val, search_val) ) {\r\n                        found_keys.push(ent_i);\r\n                    }\r\n                }\r\n                return found_keys;\r\n            default:\r\n                throw new Error('Query error: Operator not found.');\r\n        }\r\n    }\r\n    /**\r\n     * Searches for the string value using the operator\r\n     */\r\n    protected _searchStrVal(ents_i: number[], operator: EFilterOperatorTypes, search_val: string): number[] {\r\n        // first deal with null cases\r\n        if (search_val === null && operator === EFilterOperatorTypes.IS_EQUAL ) {\r\n            return this.getEntsWithoutVal(ents_i);\r\n        } else if (search_val === null && operator === EFilterOperatorTypes.IS_NOT_EQUAL ) {\r\n            return this.getEntsWithVal(ents_i);\r\n        }\r\n        // search\r\n        let found_keys: number[];\r\n        switch (operator) {\r\n            case EFilterOperatorTypes.IS_EQUAL:\r\n                found_keys = this.getEntsFromVal(search_val);\r\n                if (found_keys === undefined) { return []; }\r\n                return ents_i.filter(ent_i => found_keys.indexOf(ent_i) !== -1);\r\n            case EFilterOperatorTypes.IS_NOT_EQUAL:\r\n                found_keys = this.getEntsFromVal(search_val);\r\n                if (found_keys === undefined) { return []; }\r\n                return ents_i.filter(ent_i => found_keys.indexOf(ent_i) === -1);\r\n            case EFilterOperatorTypes.IS_GREATER:\r\n            case EFilterOperatorTypes.IS_GREATER_OR_EQUAL:\r\n            case EFilterOperatorTypes.IS_LESS:\r\n            case EFilterOperatorTypes.IS_LESS_OR_EQUAL:\r\n                throw new Error('Query error: Operator not allowed with string values.');\r\n            default:\r\n                throw new Error('Query error: Operator not found.');\r\n        }\r\n    }\r\n    /**\r\n     * Searches for the boolean value using the operator\r\n     */\r\n    protected _searchBoolVal(ents_i: number[], operator: EFilterOperatorTypes, search_val: boolean): number[] {\r\n        // first deal with null cases\r\n        if (search_val === null && operator === EFilterOperatorTypes.IS_EQUAL ) {\r\n            return this.getEntsWithoutVal(ents_i);\r\n        } else if (search_val === null && operator === EFilterOperatorTypes.IS_NOT_EQUAL ) {\r\n            return this.getEntsWithVal(ents_i);\r\n        }\r\n        // search\r\n        let found_keys: number[];\r\n        switch (operator) {\r\n            case EFilterOperatorTypes.IS_EQUAL:\r\n                found_keys = this.getEntsFromVal(search_val);\r\n                if (found_keys === undefined) { return []; }\r\n                return ents_i.filter(ent_i => found_keys.indexOf(ent_i) !== -1);\r\n            case EFilterOperatorTypes.IS_NOT_EQUAL:\r\n                found_keys = this.getEntsFromVal(search_val);\r\n                if (found_keys === undefined) { return []; }\r\n                return ents_i.filter(ent_i => found_keys.indexOf(ent_i) === -1);\r\n            case EFilterOperatorTypes.IS_GREATER:\r\n            case EFilterOperatorTypes.IS_GREATER_OR_EQUAL:\r\n            case EFilterOperatorTypes.IS_LESS:\r\n            case EFilterOperatorTypes.IS_LESS_OR_EQUAL:\r\n                throw new Error('Query error: Operator not allowed with boolean values.');\r\n            default:\r\n                throw new Error('Query error: Operator not found.');\r\n        }\r\n    }\r\n    /**\r\n     * Searches for the list value using the operator\r\n     */\r\n    protected _searchListVal(ents_i: number[], operator: EFilterOperatorTypes, search_val: any[]): number[] {\r\n        // first deal with null cases\r\n        if (search_val === null && operator === EFilterOperatorTypes.IS_EQUAL ) {\r\n            return this.getEntsWithoutVal(ents_i);\r\n        } else if (search_val === null && operator === EFilterOperatorTypes.IS_NOT_EQUAL ) {\r\n            return this.getEntsWithVal(ents_i);\r\n        }\r\n        // search\r\n        let found_keys: number[];\r\n        switch (operator) {\r\n            case EFilterOperatorTypes.IS_EQUAL:\r\n                found_keys = this.getEntsFromVal(search_val);\r\n                if (found_keys === undefined) { return []; }\r\n                return ents_i.filter(ent_i => found_keys.indexOf(ent_i) !== -1);\r\n            case EFilterOperatorTypes.IS_NOT_EQUAL:\r\n                found_keys = this.getEntsFromVal(search_val);\r\n                if (found_keys === undefined) { return []; }\r\n                return ents_i.filter(ent_i => found_keys.indexOf(ent_i) === -1);\r\n            case EFilterOperatorTypes.IS_GREATER:\r\n            case EFilterOperatorTypes.IS_GREATER_OR_EQUAL:\r\n            case EFilterOperatorTypes.IS_LESS:\r\n            case EFilterOperatorTypes.IS_LESS_OR_EQUAL:\r\n                found_keys = [];\r\n                for (const ent_i of ents_i) {\r\n                    const val: TAttribDataTypes = this.getEntVal(ent_i) as TAttribDataTypes;\r\n                    if ((val !== null && val !== undefined) && this._compare(operator, val, search_val) ) {\r\n                        found_keys.push(ent_i);\r\n                    }\r\n                }\r\n                return found_keys;\r\n            default:\r\n                throw new Error('Query error: Operator not found.');\r\n        }\r\n    }\r\n    /**\r\n     * Searches for the object value using the operator\r\n     */\r\n    protected _searchObjVal(ents_i: number[], operator: EFilterOperatorTypes, search_val: object): number[] {\r\n        // first deal with null cases\r\n        if (search_val === null && operator === EFilterOperatorTypes.IS_EQUAL ) {\r\n            return this.getEntsWithoutVal(ents_i);\r\n        } else if (search_val === null && operator === EFilterOperatorTypes.IS_NOT_EQUAL ) {\r\n            return this.getEntsWithVal(ents_i);\r\n        }\r\n        // search\r\n        let found_keys: number[];\r\n        switch (operator) {\r\n            case EFilterOperatorTypes.IS_EQUAL:\r\n                found_keys = this.getEntsFromVal(search_val);\r\n                if (found_keys === undefined) { return []; }\r\n                return ents_i.filter(ent_i => found_keys.indexOf(ent_i) !== -1);\r\n            case EFilterOperatorTypes.IS_NOT_EQUAL:\r\n                found_keys = this.getEntsFromVal(search_val);\r\n                if (found_keys === undefined) { return []; }\r\n                return ents_i.filter(ent_i => found_keys.indexOf(ent_i) === -1);\r\n            case EFilterOperatorTypes.IS_GREATER:\r\n            case EFilterOperatorTypes.IS_GREATER_OR_EQUAL:\r\n            case EFilterOperatorTypes.IS_LESS:\r\n            case EFilterOperatorTypes.IS_LESS_OR_EQUAL:\r\n                throw new Error('Query error: Operator not allowed with values of type \"dict\".');\r\n            default:\r\n                throw new Error('Query error: Operator not found.');\r\n        }\r\n    }\r\n    /**\r\n     * Searches for the value using the operator\r\n     */\r\n    protected _searchListIdxVal(ents_i: number[], arr_idx: number, operator: EFilterOperatorTypes, search_val: any): number[] {\r\n        // do the search\r\n        const found_ents_i: number[] = [];\r\n        for (const ent_i of ents_i) {\r\n            const search_value_arr: TAttribDataTypes = this.getEntVal(ent_i) as TAttribDataTypes;\r\n            if (search_value_arr !== undefined) {\r\n                const comp: boolean = this._compare(operator, search_value_arr[arr_idx], search_val);\r\n                if ( comp ) {\r\n                    found_ents_i.push(ent_i);\r\n                }\r\n            }\r\n        }\r\n        return found_ents_i;\r\n    }\r\n/**\r\n     * Searches for the value using the operator\r\n     */\r\n    protected _searchDictKeyVal(ents_i: number[], obj_key: string, operator: EFilterOperatorTypes, search_val: any): number[] {\r\n        // do the search\r\n        const found_ents_i: number[] = [];\r\n        for (const ent_i of ents_i) {\r\n            const search_value_arr: TAttribDataTypes = this.getEntVal(ent_i) as TAttribDataTypes;\r\n            if (search_value_arr !== undefined) {\r\n                const comp: boolean = this._compare(operator, search_value_arr[obj_key], search_val);\r\n                if ( comp ) {\r\n                    found_ents_i.push(ent_i);\r\n                }\r\n            }\r\n        }\r\n        return found_ents_i;\r\n    }\r\n}\r\n","import { TAttribDataTypes, EEntType, EAttribDataTypeStrs } from './common';\r\nimport { arrRem } from '../util/arrs';\r\nimport { GIAttribMap } from './GIAttribMap';\r\nimport { GIModelData } from './GIModelData';\r\n\r\n/**\r\n * Geo-info attribute class for one attribute.\r\n * The attributs stores key-value pairs.\r\n * Multiple keys point to the same value.\r\n * So for example, [[1,3], \"a\"],[[0,4], \"b\"] can be converted into sequential arrays.\r\n * The values would be [\"a\", \"b\"]\r\n * The keys would be [1,0,,0,1] (Note the undefined value in the middle.)\r\n *\r\n */\r\nexport class GIAttribMapBool extends GIAttribMap {\r\n    /**\r\n     * Creates an attribute.\r\n     * @param attrib_data\r\n     */\r\n    constructor(modeldata: GIModelData, name: string, ent_type: EEntType, data_type: EAttribDataTypeStrs) {\r\n        super(modeldata, name, ent_type, data_type);\r\n    }\r\n    /**\r\n     * Returns a nested array of entities and values, like this:\r\n     * [ [[2,4,6,8], 'hello'], [[9,10], 'world']]\r\n     * This is the same format as used in gi-json\r\n     * This matches the method setEntsVals()\r\n     */\r\n    public getEntsVals(): [number[], TAttribDataTypes][] {\r\n        const ents_i_values: [number[], TAttribDataTypes][] = [];\r\n        this._map_val_i_to_ents_i.forEach( (ents_i, val_i) => {\r\n            // val_i is either 0 or 1 (false or true)\r\n            const val: boolean = [false, true][val_i];\r\n            ents_i_values.push([ents_i, val]);\r\n        });\r\n        return ents_i_values;\r\n    }\r\n    /**\r\n     * Sets the value for a given entity or entities.\r\n     *\r\n     * If the value is undefined, no action is taken.\r\n     *\r\n     * The value can be null, in which case it is equivalent to deleting the entities from this attrib map.\r\n     *\r\n     * @param ent_i\r\n     * @param val\r\n     */\r\n    public setEntVal(ents_i: number|number[], val: TAttribDataTypes, check_type = true): void {\r\n        // if indefined, do nothing\r\n        if (val === undefined) { return; }\r\n        // if null, delete\r\n        if (val === null) {\r\n            this.delEnt(ents_i);\r\n            return;\r\n        }\r\n        // check the type\r\n        if (check_type) {\r\n            if (typeof val !== 'boolean') {\r\n                throw new Error('Error setting attribute value. Attribute is of type \"boolean\" but the value is not a boolean.');\r\n            }\r\n        }\r\n        // val_i is either 0 or 1 (false or true)\r\n        const val_i: number = val ? 1 : 0;\r\n        // an array of ents\r\n        ents_i = (Array.isArray(ents_i)) ? ents_i : [ents_i];\r\n        // loop through all the unique ents, and set _map_ent_i_to_val_i\r\n        let unique_ents_i: number[] = ents_i;\r\n        if (ents_i.length > 1) {\r\n            unique_ents_i = Array.from(new Set(ents_i));\r\n        }\r\n        unique_ents_i.forEach( ent_i => {\r\n            // keep the old value for later\r\n            const old_val_i: number = this._map_ent_i_to_val_i.get(ent_i);\r\n            // for each ent_i, set the new val_i\r\n            this._map_ent_i_to_val_i.set(ent_i, val_i);\r\n            // clean up the old val_i\r\n            if (old_val_i !== undefined && old_val_i !== val_i) {\r\n                arrRem(this._map_val_i_to_ents_i.get(old_val_i), ent_i);\r\n                // clean up just in case that was the last entity with this value\r\n                this._cleanUp(old_val_i);\r\n            }\r\n            // update the time stamp for this entity\r\n            this._modeldata.geom.time_stamp.updateEntTs(this._ent_type, ent_i);\r\n        });\r\n        // for the val_i, set it to point to all the ents that have this value\r\n        const exist_ents_i: number[] = this._map_val_i_to_ents_i.get(val_i);\r\n        const exist_new_ents_i: number[] = exist_ents_i === undefined ?\r\n            ents_i :\r\n            Array.from(new Set(exist_ents_i.concat(ents_i)));\r\n        this._map_val_i_to_ents_i.set(val_i, exist_new_ents_i);\r\n    }\r\n    /**\r\n     * Dumps another attrib map into this attrib map\r\n     * Assumes tha this map is empty\r\n     * @param attrib_map The attrib map to merge into this map\r\n     */\r\n    public dumpSelect(attrib_map: GIAttribMapBool, selected: Set<number>): void {\r\n        selected.forEach(selected_ent_i => {\r\n            if (attrib_map._map_ent_i_to_val_i.has(selected_ent_i)) {\r\n                const val_i: number = attrib_map._map_ent_i_to_val_i.get(selected_ent_i);\r\n                const ents_i: number[] = attrib_map._map_val_i_to_ents_i.get(val_i);\r\n                const ents2_i: number[] = ents_i.filter( ent_i => selected.has(ent_i) );\r\n                this._map_val_i_to_ents_i.set(val_i, ents2_i);\r\n                ents2_i.forEach( ent_i => this._map_ent_i_to_val_i.set(ent_i, val_i));\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Gets the value for a given entity, or an array of values given an array of entities.\r\n     * ~\r\n     * Returns undefined if the entity does not exist in this map.\r\n     * ~\r\n     * @param ent_i\r\n     */\r\n    public getEntVal(ents_i: number|number[]): TAttribDataTypes {\r\n        if (!Array.isArray(ents_i)) {\r\n            const ent_i: number = ents_i as number;\r\n            const val_i: number = this._map_ent_i_to_val_i.get(ent_i);\r\n            if (val_i === undefined) { return undefined; }\r\n            return [false, true][val_i];\r\n        } else {\r\n            return ents_i.map(ent_i => this.getEntVal(ent_i)) as TAttribDataTypes;\r\n        }\r\n    }\r\n    /**\r\n     * Gets all the keys that have a given value\r\n     * If the value does not exist an empty array is returned\r\n     * The value can be a list or object\r\n     * @param val\r\n     */\r\n    public getEntsFromVal(val: TAttribDataTypes): number[] {\r\n        const val_i: number = val ? 1 : 0;\r\n        const ents_i: number[] = this._map_val_i_to_ents_i.get(val_i);\r\n        if (ents_i === undefined) { return []; }\r\n        return ents_i;\r\n    }\r\n}\r\n","import { EEntType, IAttribsMaps, EEntTypeStr, TAttribMap } from './common';\r\nimport { GIModelData } from './GIModelData';\r\n\r\n/**\r\n * Class for attributes.\r\n */\r\nexport class GIAttribsModify {\r\n    private _modeldata: GIModelData;\r\n    private _attribs_maps: IAttribsMaps;\r\n   /**\r\n     * Creates an object to store the attribute data.\r\n     * @param modeldata The JSON data\r\n     */\r\n    constructor(modeldata: GIModelData, attribs_maps: IAttribsMaps) {\r\n        this._modeldata = modeldata;\r\n        this._attribs_maps = attribs_maps;\r\n    }\r\n    /**\r\n     * Deletes an existing attribute.\r\n     * Time stamps are not updated.\r\n     *\r\n     * @param ent_type The level at which to create the attribute.\r\n     * @param name The name of the attribute.\r\n     * @return True if the attribute was created, false otherwise.\r\n     */\r\n    public delAttrib(ent_type: EEntType, name: string): boolean {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        // delete\r\n        return attribs.delete(name);\r\n    }\r\n    /**\r\n     * Rename an existing attribute.\r\n     * Time stamps are not updated.\r\n     *\r\n     * @param ent_type The level at which to create the attribute.\r\n     * @param old_name The name of the old attribute.\r\n     * @param new_name The name of the new attribute.\r\n     * @return True if the attribute was renamed, false otherwise.\r\n     */\r\n    public renameAttrib(ent_type: EEntType, old_name: string, new_name: string): boolean {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        if (!attribs.has(old_name)) { return false; }\r\n        if (attribs.has(new_name)) { return false; }\r\n        if (old_name === new_name) { return false; }\r\n        // rename\r\n        const attrib: TAttribMap = attribs.get(old_name);\r\n        attrib.setName(new_name);\r\n        const result = attribs.set(new_name, attrib);\r\n        return attribs.delete(old_name);\r\n    }\r\n    // ============================================================================\r\n    // Private methods\r\n    // ============================================================================\r\n}\r\n","import { GIAttribsAdd } from './GIAttribsAdd';\r\nimport { GIAttribsThreejs } from './GIAttribsThreejs';\r\nimport { GIAttribsQuery } from './GIAttribsQuery';\r\nimport { GIModel } from './GIModel';\r\nimport { EEntType, EAttribNames,  IAttribsJSONData, EAttribDataTypeStrs, IAttribsMaps, TAttribMap } from './common';\r\nimport { GIAttribsIO } from './GIAttribsIO';\r\nimport { GIAttribsModify } from './GIAttribModify';\r\nimport { GIModelData } from './GIModelData';\r\n\r\nfunction hashCode(s: string) {\r\n    let h: number;\r\n    for (let i = 0; i < s.length; i++) {\r\n          // tslint:disable-next-line:no-bitwise\r\n          h = Math.imul(31, h) + s.charCodeAt(i) | 0;\r\n    }\r\n    return h;\r\n}\r\nconst eny_type_array: EEntType[] = [\r\n    EEntType.POSI,\r\n    EEntType.VERT,\r\n    EEntType.EDGE,\r\n    EEntType.WIRE,\r\n    EEntType.FACE,\r\n    EEntType.POINT,\r\n    EEntType.PLINE,\r\n    EEntType.PGON,\r\n    EEntType.COLL,\r\n    EEntType.MOD\r\n];\r\nconst ent_type_strs: Map<EEntType, string> = new Map([\r\n    [EEntType.POSI, 'positions'],\r\n    [EEntType.VERT, 'vertices'],\r\n    [EEntType.EDGE, 'edges'],\r\n    [EEntType.WIRE, 'wires'],\r\n    [EEntType.FACE, 'faces'],\r\n    [EEntType.POINT, 'points'],\r\n    [EEntType.PLINE, 'polylines'],\r\n    [EEntType.PGON, 'polygons'],\r\n    [EEntType.COLL, 'collections'],\r\n    [EEntType.MOD, 'model']\r\n]);\r\n/**\r\n * Class for attributes.\r\n */\r\nexport class GIAttribs {\r\n    private _modeldata: GIModelData;\r\n    // maps, the key is the name, the value is the attrib map clas\r\n    public _attribs_maps: IAttribsMaps = { // TODO this should not be public\r\n        ps: new Map(),\r\n        _v: new Map(),\r\n        _e: new Map(),\r\n        _w: new Map(),\r\n        _f: new Map(),\r\n        pt: new Map(),\r\n        pl: new Map(),\r\n        pg: new Map(),\r\n        co: new Map(),\r\n        mo: new Map()\r\n    };\r\n    // sub classes with methods\r\n    public io: GIAttribsIO;\r\n    public add: GIAttribsAdd;\r\n    public modify: GIAttribsModify;\r\n    public query: GIAttribsQuery;\r\n    public threejs: GIAttribsThreejs;\r\n   /**\r\n     * Creates an object to store the attribute data.\r\n     * @param modeldata The JSON data\r\n     */\r\n    constructor(modeldata: GIModelData) {\r\n        this._modeldata = modeldata;\r\n        this.io = new GIAttribsIO(modeldata, this._attribs_maps);\r\n        this.add = new GIAttribsAdd(modeldata, this._attribs_maps);\r\n        this.modify = new GIAttribsModify(modeldata, this._attribs_maps);\r\n        this.query = new GIAttribsQuery(modeldata, this._attribs_maps);\r\n        this.threejs = new GIAttribsThreejs(modeldata, this._attribs_maps);\r\n        // create xyz on posis\r\n        this.add.addAttrib(EEntType.POSI, EAttribNames.COORDS, EAttribDataTypeStrs.LIST);\r\n    }\r\n    /**\r\n     * Compares this model and another model.\r\n     * ~\r\n     * If check_equality=false, the max total score will be equal to the number of attributes in this model.\r\n     * It checks that each attribute in this model exists in the other model. If it exists, 1 mark is assigned.\r\n     * ~\r\n     * If check_equality=true, the max score will be increased by 10, equal to the number of entity levels.\r\n     * For each entity level, if the other model contains no additional attributes, then one mark is assigned.\r\n     * ~\r\n     * @param other_model The model to compare with.\r\n     */\r\n    compare(other_model: GIModel, result: {score: number, total: number, comment: any[]}): void {\r\n        result.comment.push('Comparing attribute names and types.');\r\n        // compare all attributes except model attributes\r\n        // check that this model is a subset of other model\r\n        // all the attributes in this model must also be in other model\r\n        const attrib_comments: string[] = [];\r\n        let matches = true;\r\n        const attrib_names: Map<EEntType, string[]> = new Map();\r\n        for (const ent_type of eny_type_array) {\r\n            // get the attrib names\r\n            const ent_type_str: string = ent_type_strs.get(ent_type);\r\n            const this_attrib_names: string[] = this._modeldata.attribs.query.getAttribNames(ent_type);\r\n            const other_attrib_names: string[] = other_model.modeldata.attribs.query.getAttribNames(ent_type);\r\n            attrib_names.set(ent_type, this_attrib_names);\r\n            // check that each attribute in this model exists in the other model\r\n            for (const this_attrib_name of this_attrib_names) {\r\n                // check is this is built in\r\n                let is_built_in = false;\r\n                if (this_attrib_name === 'xyz' || this_attrib_name === 'rgb' || this_attrib_name.startsWith('_')) {\r\n                    is_built_in = true;\r\n                }\r\n                // update the total\r\n                if (!is_built_in) { result.total += 1; }\r\n                // compare names\r\n                if (other_attrib_names.indexOf(this_attrib_name) === -1 ) {\r\n                    matches = false;\r\n                    attrib_comments.push('The \"' + this_attrib_name + '\" ' + ent_type_str + ' attribute is missing.');\r\n                } else {\r\n                    // get the data types\r\n                    const data_type_1: EAttribDataTypeStrs =\r\n                        this._modeldata.attribs.query.getAttribDataType(ent_type, this_attrib_name);\r\n                    const data_type_2: EAttribDataTypeStrs =\r\n                        other_model.modeldata.attribs.query.getAttribDataType(ent_type, this_attrib_name);\r\n                    // compare data types\r\n                    if (data_type_1 !== data_type_2) {\r\n                        matches = false;\r\n                        attrib_comments.push('The \"' + this_attrib_name + '\" ' + ent_type_str + ' attribute datatype is wrong. '\r\n                            + 'It is \"' + data_type_1 + '\" but it should be \"' + data_type_1 + '\".');\r\n                    } else {\r\n                        // update the score\r\n                        if (!is_built_in) { result.score += 1; }\r\n                    }\r\n                }\r\n            }\r\n            // check if we have exact equality in attributes\r\n            // total marks is not updated, we deduct marks\r\n            // check that the other model does not have additional attribs\r\n            if (other_attrib_names.length > this_attrib_names.length) {\r\n                const additional_attribs: string[] = [];\r\n                for (const other_attrib_name of other_attrib_names) {\r\n                    if (this_attrib_names.indexOf(other_attrib_name) === -1) {\r\n                        additional_attribs.push(other_attrib_name);\r\n                    }\r\n                }\r\n                attrib_comments.push('There are additional ' + ent_type_str + ' attributes. ' +\r\n                    'The following attributes are not required: [' + additional_attribs.join(',') + ']. ');\r\n                // update the score, deduct 1 mark\r\n                result.score -= 1;\r\n            } else if (other_attrib_names.length < this_attrib_names.length) {\r\n                attrib_comments.push('Mismatch: Model has too few entities of type: ' + ent_type_strs.get(ent_type) + '.');\r\n            } else {\r\n                // correct\r\n            }\r\n        }\r\n        if (attrib_comments.length === 0) {\r\n            attrib_comments.push('Attributes all match, both name and data type.');\r\n        }\r\n        // add to result\r\n        result.comment.push(attrib_comments);\r\n    }\r\n    /**\r\n     * Generate a string for debugging\r\n     */\r\n    public toStr(): string {\r\n        let result = '';\r\n        for (const ent_type of eny_type_array) {\r\n            const ent_type_str: string = ent_type_strs.get(ent_type);\r\n            result += ent_type_str + ': ';\r\n            if (ent_type === EEntType.MOD) {\r\n                // TODO\r\n            } else {\r\n                const attrib_names: string[] = this.query.getAttribNames(ent_type);\r\n                for (const attrib_name of attrib_names) {\r\n                    result += JSON.stringify(this.query.getAttrib(ent_type, attrib_name).getJSONData());\r\n                    result += '\\n';\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","import { GIModel } from './GIModel';\r\nimport { TAttribDataTypes, EEntType,\r\n    EAttribDataTypeStrs, IAttribsMaps, EAttribNames, Txyz, EEntTypeStr, EAttribPush, TAttribMap } from './common';\r\nimport { vecAdd } from '@libs/geom/vectors';\r\nimport * as mathjs from 'mathjs';\r\nimport { GIModelData } from './GIModelData';\r\nimport { GIAttribMapBool } from './GIAttribMapBool';\r\nimport { GIAttribMap } from './GIAttribMap';\r\n\r\n/**\r\n * Class for attributes.\r\n */\r\nexport class GIAttribsAdd {\r\n    private _modeldata: GIModelData;\r\n    private _attribs_maps: IAttribsMaps;\r\n   /**\r\n     * Creates an object to store the attribute data.\r\n     * @param modeldata The JSON data\r\n     */\r\n    constructor(modeldata: GIModelData, attribs_maps: IAttribsMaps) {\r\n        this._modeldata = modeldata;\r\n        this._attribs_maps = attribs_maps;\r\n    }\r\n    /**\r\n     * Creates a new attribte, at either the model level or the entity level.\r\n     * This function is call by var@att_name and by @att_name\r\n     *\r\n     * For entity attributes, if an attribute with the same name but different data_type already exists,\r\n     * then an error is thrown.\r\n     *\r\n     * @param ent_type The level at which to create the attribute.\r\n     * @param name The name of the attribute.\r\n     * @param data_type The data type of the attribute.\r\n     */\r\n    public addAttrib(ent_type: EEntType, name: string, data_type: EAttribDataTypeStrs): void {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, any> = this._attribs_maps[attribs_maps_key];\r\n        if (ent_type === EEntType.MOD) {\r\n            this.addModelAttrib(name);\r\n        } else {\r\n            this.addEntAttrib(ent_type, name, data_type);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new attribte at the model level\r\n     *\r\n     * @param name The name of the attribute.\r\n     */\r\n    public addModelAttrib(name: string): void {\r\n        const attribs: Map<string, any> = this._attribs_maps[EEntTypeStr.mo];\r\n        if (!attribs.has(name)) {\r\n            attribs.set(name, null);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new attribte at an  entity level.\r\n     *\r\n     * For entity attributes, if an attribute with the same name but different data_type already exists,\r\n     * then an error is thrown.\r\n     *\r\n     * @param ent_type The level at which to create the attribute.\r\n     * @param name The name of the attribute.\r\n     * @param data_type The data type of the attribute.\r\n     */\r\n    public addEntAttrib(ent_type: EEntType, name: string, data_type: EAttribDataTypeStrs): TAttribMap {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, any> = this._attribs_maps[attribs_maps_key];\r\n        let attrib: TAttribMap;\r\n        if (!attribs.has(name)) {\r\n            if (data_type === EAttribDataTypeStrs.BOOLEAN) {\r\n                attrib = new GIAttribMapBool(this._modeldata, name, ent_type, data_type);\r\n            } else {\r\n                attrib = new GIAttribMap(this._modeldata, name, ent_type, data_type);\r\n            }\r\n            attribs.set(name, attrib);\r\n        } else {\r\n            attrib = attribs.get(name);\r\n            if (attrib.getDataType() !== data_type) {\r\n                throw new Error('Attribute could not be created due to conflict with existing attribute with same name.');\r\n            }\r\n        }\r\n        return attrib;\r\n    }\r\n    /**\r\n     * Set a model attrib value\r\n     * @param id\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public setModelAttribVal(name: string, value: TAttribDataTypes): void {\r\n        const attribs_maps_key: string = EEntTypeStr[EEntType.MOD];\r\n        const attrib: Map<string, any> = this._attribs_maps[attribs_maps_key];\r\n        attrib.set(name, value);\r\n    }\r\n    /**\r\n     * Set a model attrib indexed value.\r\n     * If the attribute does not exist, it throws an error.\r\n     * @param id\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public setModelAttribListIdxVal(name: string, idx: number, value: any): void {\r\n        const attribs_maps_key: string = EEntTypeStr[EEntType.MOD];\r\n        const attrib: Map<string, any> = this._attribs_maps[attribs_maps_key];\r\n        const list_value: TAttribDataTypes = attrib.get(name);\r\n        if (list_value === undefined) { throw new Error('Attribute with this name does not exist.'); }\r\n        if (!Array.isArray(list_value)) {\r\n            throw new Error('Attribute is not a list, so indexed values are not allowed.');\r\n        }\r\n        list_value[idx] = value;\r\n    }\r\n    /**\r\n     * Set a model attrib indexed value.\r\n     * If the attribute does not exist, it throws an error.\r\n     * @param id\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public setModelAttribDictKeyVal(name: string, key: string, value: any): void {\r\n        const attribs_maps_key: string = EEntTypeStr[EEntType.MOD];\r\n        const attrib: Map<string, any> = this._attribs_maps[attribs_maps_key];\r\n        const dict_value: TAttribDataTypes = attrib.get(name);\r\n        if (dict_value === undefined) { throw new Error('Attribute with this name does not exist.'); }\r\n        if (Array.isArray(dict_value) || typeof dict_value !== 'object') {\r\n            throw new Error('Attribute is not a dictionary, so keyed values are not allowed.');\r\n        }\r\n        dict_value[key] = value;\r\n    }\r\n    /**\r\n     * Set an entity attrib value\r\n     * If the attribute does not exist, then it is created.\r\n     * @param id\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public setEntAttribVal(ent_type: EEntType, ents_i: number|number[], name: string, value: TAttribDataTypes): void {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        if (attribs.get(name) === undefined) {\r\n            const new_data_type: EAttribDataTypeStrs = this._checkDataType(value);\r\n            this.addAttrib(ent_type, name, new_data_type);\r\n        }\r\n        attribs.get(name).setEntVal(ents_i, value);\r\n    }\r\n    /**\r\n     * Set an entity attrib indexed value.\r\n     * If the attribute does not exist, it throws an error.\r\n     * @param id\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public setEntAttribListIdxVal(ent_type: EEntType, ents_i: number|number[], name: string,\r\n            idx: number, value: any): void {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        const attrib: TAttribMap = attribs.get(name);\r\n        if (attrib === undefined) { throw new Error('Attribute does not exist.'); }\r\n        if (attrib.getDataType() !== EAttribDataTypeStrs.LIST) {\r\n            throw new Error('Attribute is not a list, so indexed values are not allowed.');\r\n        }\r\n        attrib.setEntListIdxVal(ents_i, idx, value);\r\n    }\r\n    /**\r\n     * Set an entity attrib indexed value.\r\n     * If the attribute does not exist, it throws an error.\r\n     * @param id\r\n     * @param name\r\n     * @param value\r\n     */\r\n    public setEntAttribDictKeyVal(ent_type: EEntType, ents_i: number|number[], name: string,\r\n        key: string, value: any): void {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        const attrib: TAttribMap = attribs.get(name);\r\n        if (attrib === undefined) { throw new Error('Attribute does not exist.'); }\r\n        if (attrib.getDataType() !== EAttribDataTypeStrs.DICT) {\r\n            throw new Error('Attribute is not a dictionary, so keyed values are not allowed.');\r\n        }\r\n        attrib.setEntDictKeyVal(ents_i, key, value);\r\n    }\r\n    /**\r\n     * Delete the entity from an attribute\r\n     * If there is no value for the entity, then this does nothing\r\n     * If there is a value, then both the entity index and the value are deleted\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public delEntFromAttribs(ent_type: EEntType, ents_i: number|number[]): void {\r\n        // get the attrib names\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        attribs.forEach( attrib => attrib.delEnt(ents_i) );\r\n    }\r\n    /**\r\n     * Set the xyz position by index\r\n     * @param index\r\n     * @param value\r\n     */\r\n    public setPosiCoords(index: number, xyz: Txyz): void {\r\n        this._attribs_maps.ps.get(EAttribNames.COORDS).setEntVal(index, xyz);\r\n    }\r\n    /**\r\n     * Move the xyz position by index\r\n     * @param index\r\n     * @param value\r\n     */\r\n    public movePosiCoords(index: number, xyz: Txyz): void {\r\n        const old_xyz: Txyz = this._attribs_maps.ps.get(EAttribNames.COORDS).getEntVal(index) as Txyz;\r\n        const new_xyz: Txyz = vecAdd(old_xyz, xyz);\r\n        this._attribs_maps.ps.get(EAttribNames.COORDS).setEntVal(index, new_xyz);\r\n    }\r\n    /**\r\n     * Copy all attribs from one entity to another entity\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public copyAttribs(ent_type: EEntType, from_ent_i: number, to_ent_i: number): void {\r\n        // get the attrib names\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        const attrib_names: string[] = Array.from(attribs.keys());\r\n        // copy each attrib\r\n        for (const attrib_name of attrib_names) {\r\n            const attrib: TAttribMap = attribs.get(attrib_name);\r\n            const attrib_value: TAttribDataTypes =  attrib.getEntVal(from_ent_i) as TAttribDataTypes;\r\n            attrib.setEntVal(to_ent_i, attrib_value);\r\n        }\r\n    }\r\n    /**\r\n     * Promotes attrib values up and down the hierarchy.\r\n     */\r\n    public pushAttribVals(\r\n            source_ent_type: EEntType, source_attrib_name: string, source_attrib_idx_key: number|string, source_indices: number[],\r\n            target: EEntType|string,   target_attrib_name: string, target_attrib_idx_key: number|string, method: EAttribPush): void {\r\n        // if source and target are same, then return\r\n        if (source_ent_type === target) { return; }\r\n        // check that the attribute exists\r\n        if (! this._modeldata.attribs.query.hasAttrib(source_ent_type, source_attrib_name)) {\r\n            throw new Error('Error pushing attributes: The attribute does not exist.');\r\n        }\r\n        let target_ent_type: EEntType = null;\r\n        let target_coll: string = null;\r\n        // check if this is coll -> coll\r\n        if (target === 'coll_parent' || target === 'coll_children') {\r\n            if (source_ent_type !== EEntType.COLL) {\r\n                throw new Error('Error pushing attributes between collections: The source and target must both be collections.');\r\n            }\r\n            target_coll = target as string;\r\n            target_ent_type = EEntType.COLL;\r\n        } else {\r\n            target_ent_type = target as EEntType;\r\n        }\r\n        // get the data type and data size of the existing attribute\r\n        const source_data_type: EAttribDataTypeStrs = this._modeldata.attribs.query.getAttribDataType(source_ent_type, source_attrib_name);\r\n        const source_data_size: number = this._modeldata.attribs.query.getAttribDataLength(source_ent_type, source_attrib_name);\r\n        // get the target data type and size\r\n        let target_data_type: EAttribDataTypeStrs = source_data_type;\r\n        let target_data_size: number = source_data_size;\r\n        if (target_attrib_idx_key !== null) {\r\n            // so the target data type must be a list or a dict\r\n            if (typeof target_attrib_idx_key === 'number') {\r\n                target_data_type = EAttribDataTypeStrs.LIST;\r\n            } else if (typeof target_attrib_idx_key === 'string') {\r\n                target_data_type = EAttribDataTypeStrs.DICT;\r\n            } else {\r\n                throw new Error('The target attribute index or key is not valid: \"' + target_attrib_idx_key + '\".');\r\n            }\r\n        } else if (source_attrib_idx_key !== null) {\r\n            // get the first data item as a template to check data type and data size\r\n            const first_val: TAttribDataTypes = this._modeldata.attribs.query.getAttribValAny(\r\n                source_ent_type, source_attrib_name, source_indices[0],\r\n                source_attrib_idx_key) as TAttribDataTypes;\r\n            target_data_type = this._checkDataType(first_val);\r\n            if (target_data_type === EAttribDataTypeStrs.LIST) {\r\n                const first_val_arr = first_val as any[];\r\n                target_data_size = first_val_arr.length;\r\n                for (const val of first_val_arr) {\r\n                    if (typeof val !== 'number') {\r\n                        throw new Error('The attribute value being pushed is a list but the values in the list are not numbers.');\r\n                    }\r\n                }\r\n            } else if (target_data_type === EAttribDataTypeStrs.NUMBER) {\r\n                target_data_size = 0;\r\n            } else {\r\n                throw new Error('The attribute value being pushed is neither a number nor a list of numbers.');\r\n            }\r\n        }\r\n        // move attributes from entities up to the model, or form model down to entities\r\n        if (target_ent_type === EEntType.MOD) {\r\n            this.addAttrib(target_ent_type, target_attrib_name, target_data_type);\r\n            const attrib_values: TAttribDataTypes[] = [];\r\n            for (const index of source_indices) {\r\n                const value: TAttribDataTypes =\r\n                    this._modeldata.attribs.query.getAttribValAny(source_ent_type, source_attrib_name, index,\r\n                        source_attrib_idx_key) as TAttribDataTypes;\r\n                attrib_values.push(value);\r\n            }\r\n            const agg_value: TAttribDataTypes = this._aggregateVals(attrib_values, target_data_size, method);\r\n            if (typeof target_attrib_idx_key === 'number') {\r\n                this.setModelAttribListIdxVal(target_attrib_name, target_attrib_idx_key, agg_value);\r\n            } else if (typeof target_attrib_idx_key === 'string') {\r\n                this.setModelAttribDictKeyVal(target_attrib_name, target_attrib_idx_key, agg_value);\r\n            } else {\r\n                this.setModelAttribVal(target_attrib_name, agg_value);\r\n            }\r\n            return;\r\n        } else if (source_ent_type === EEntType.MOD) {\r\n            const value: TAttribDataTypes = this._modeldata.attribs.query.getModelAttribValAny(source_attrib_name, source_attrib_idx_key);\r\n            this.addAttrib(target_ent_type, target_attrib_name, target_data_type);\r\n            const target_ents_i: number[] = this._modeldata.geom.query.getEnts(target_ent_type);\r\n            for (const target_ent_i of target_ents_i) {\r\n                if (typeof target_attrib_idx_key === 'number') {\r\n                    this.setEntAttribListIdxVal(target_ent_type, target_ent_i, target_attrib_name, target_attrib_idx_key, value);\r\n                } else if (typeof target_attrib_idx_key === 'string') {\r\n                    this.setEntAttribDictKeyVal(target_ent_type, target_ent_i, target_attrib_name, target_attrib_idx_key, value);\r\n                } else {\r\n                    this.setEntAttribVal(target_ent_type, target_ent_i, target_attrib_name, value);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        // get all the values for each target\r\n        const attrib_values_map: Map<number, TAttribDataTypes[]> = new Map();\r\n        for (const index of source_indices) {\r\n            const attrib_value: TAttribDataTypes =\r\n                this._modeldata.attribs.query.getAttribValAny(source_ent_type, source_attrib_name, index,\r\n                    source_attrib_idx_key) as TAttribDataTypes;\r\n            let target_ents_i: number[] = null;\r\n            if (target_coll === 'coll_parent') {\r\n                const parent = this._modeldata.geom.nav.navCollToCollParent(index);\r\n                target_ents_i = (parent === -1) ? [] : [parent];\r\n            } else if (target_coll === 'coll_children') {\r\n                target_ents_i = this._modeldata.geom.nav.navCollToCollChildren(index);\r\n            } else {\r\n                target_ent_type =  target_ent_type as EEntType;\r\n                target_ents_i = this._modeldata.geom.nav.navAnyToAny(source_ent_type, target_ent_type, index);\r\n            }\r\n            for (const target_ent_i of target_ents_i) {\r\n                if (! attrib_values_map.has(target_ent_i)) {\r\n                        attrib_values_map.set(target_ent_i, []);\r\n                }\r\n                attrib_values_map.get(target_ent_i).push(attrib_value);\r\n            }\r\n        }\r\n        // create the new target attribute if it does not already exist\r\n        if (target_coll !== null) {\r\n            target_ent_type =  target_ent_type as EEntType;\r\n            this.addAttrib(target_ent_type, target_attrib_name, target_data_type);\r\n        }\r\n        // calculate the new value and set the attribute\r\n        attrib_values_map.forEach( (attrib_values, target_ent_i) => {\r\n            let value: TAttribDataTypes = attrib_values[0];\r\n            if (attrib_values.length > 1) {\r\n                value = this._aggregateVals(attrib_values, target_data_size, method);\r\n            }\r\n            if (typeof target_attrib_idx_key === 'number') {\r\n                this.setEntAttribListIdxVal(target_ent_type, target_ent_i, target_attrib_name, target_attrib_idx_key, value);\r\n            } else if (typeof target_attrib_idx_key === 'string') {\r\n                this.setEntAttribDictKeyVal(target_ent_type, target_ent_i, target_attrib_name, target_attrib_idx_key, value);\r\n            } else {\r\n                this.setEntAttribVal(target_ent_type, target_ent_i, target_attrib_name, value);\r\n            }\r\n        });\r\n    }\r\n\r\n    // ============================================================================\r\n    // Private methods\r\n    // ============================================================================\r\n    // TODO for mathjs operations, check the values are numbers...\r\n    private _aggregateVals(values: TAttribDataTypes[], data_size: number, method: EAttribPush): TAttribDataTypes {\r\n        switch (method) {\r\n            case EAttribPush.AVERAGE:\r\n                if (data_size > 1) {\r\n                    const result: number[] = [];\r\n                    for (let i = 0; i < data_size; i++) {\r\n                        result[i] = mathjs.mean(values.map(vec => vec[i]));\r\n                    }\r\n                    return result;\r\n                } else {\r\n                    return mathjs.mean(values);\r\n                }\r\n            case EAttribPush.MEDIAN:\r\n                if (data_size > 1) {\r\n                    const result: number[] = [];\r\n                    for (let i = 0; i < data_size; i++) {\r\n                        result[i] = mathjs.median(values.map(vec => vec[i]));\r\n                    }\r\n                    return result;\r\n                } else {\r\n                    return mathjs.median(values);\r\n                }\r\n            case EAttribPush.SUM:\r\n                if (data_size > 1) {\r\n                    const result: number[] = [];\r\n                    for (let i = 0; i < data_size; i++) {\r\n                        result[i] = mathjs.sum(values.map(vec => vec[i]));\r\n                    }\r\n                    return result;\r\n                } else {\r\n                    return mathjs.sum(values);\r\n                }\r\n            case EAttribPush.MIN:\r\n                if (data_size > 1) {\r\n                    const result: number[] = [];\r\n                    for (let i = 0; i < data_size; i++) {\r\n                        result[i] = mathjs.min(values.map(vec => vec[i]));\r\n                    }\r\n                    return result;\r\n                } else {\r\n                    return mathjs.min(values);\r\n                }\r\n            case EAttribPush.MAX:\r\n                if (data_size > 1) {\r\n                    const result: number[] = [];\r\n                    for (let i = 0; i < data_size; i++) {\r\n                        result[i] = mathjs.max(values.map(vec => vec[i]));\r\n                    }\r\n                    return result;\r\n                } else {\r\n                    return mathjs.max(values);\r\n                }\r\n            case EAttribPush.LAST:\r\n                return values[values.length - 1];\r\n            default:\r\n                return values[0]; // EAttribPush.FIRST\r\n        }\r\n    }\r\n    /**\r\n     * Utility method to check the data type of an attribute.\r\n     * @param value\r\n     */\r\n    private _checkDataType(value: TAttribDataTypes): EAttribDataTypeStrs {\r\n        if (typeof value === 'string') {\r\n            return EAttribDataTypeStrs.STRING;\r\n        } else if (typeof value === 'number') {\r\n            return EAttribDataTypeStrs.NUMBER;\r\n        } else if (typeof value === 'boolean') {\r\n            return EAttribDataTypeStrs.BOOLEAN;\r\n        } else if (Array.isArray(value)) {\r\n            return EAttribDataTypeStrs.LIST;\r\n        } else if (typeof value === 'object') {\r\n            return EAttribDataTypeStrs.LIST;\r\n        }\r\n        throw new Error('Data type for new attribute not recognised.');\r\n    }\r\n}\r\n","import { IAttribsJSONData, IAttribJSONData, TAttribDataTypes, EEntType,\r\n    IAttribsMaps, EEntTypeStr, TModelAttribValuesArr, IEntSets, TAttribMap } from './common';\r\nimport { GIModelData } from './GIModelData';\r\nimport * as lodash from 'lodash';\r\n\r\n\r\n/**\r\n * Class for attributes.\r\n */\r\nexport class GIAttribsIO {\r\n    private _modeldata: GIModelData;\r\n    private _attribs_maps: IAttribsMaps;\r\n   /**\r\n     * Creates an object to store the attribute data.\r\n     * @param modeldata The JSON data\r\n     */\r\n    constructor(modeldata: GIModelData, attribs_maps: IAttribsMaps) {\r\n        this._modeldata = modeldata;\r\n        this._attribs_maps = attribs_maps;\r\n    }\r\n    /**\r\n     * Adds data to this model from another model.\r\n     * The existing data in the model is not deleted - checks for conflicts.\r\n     * @param model_data Attribute data from the other model.\r\n     */\r\n    public merge(attribs_maps: IAttribsMaps): void {\r\n        if (attribs_maps.ps !== undefined) { this._mergeAttribs(attribs_maps, EEntType.POSI); }\r\n        if (attribs_maps._v !== undefined) { this._mergeAttribs(attribs_maps, EEntType.VERT); }\r\n        if (attribs_maps._e !== undefined) { this._mergeAttribs(attribs_maps, EEntType.EDGE); }\r\n        if (attribs_maps._w !== undefined) { this._mergeAttribs(attribs_maps, EEntType.WIRE); }\r\n        if (attribs_maps._f !== undefined) { this._mergeAttribs(attribs_maps, EEntType.FACE); }\r\n        if (attribs_maps.pt !== undefined) { this._mergeAttribs(attribs_maps, EEntType.POINT); }\r\n        if (attribs_maps.pl !== undefined) { this._mergeAttribs(attribs_maps, EEntType.PLINE); }\r\n        if (attribs_maps.pg !== undefined) { this._mergeAttribs(attribs_maps, EEntType.PGON); }\r\n        if (attribs_maps.co !== undefined) { this._mergeAttribs(attribs_maps, EEntType.COLL); }\r\n        if (attribs_maps.mo !== undefined) { this._mergeModelAttribs(attribs_maps); }\r\n    }\r\n    /**\r\n     * Adds data to this model from another model.\r\n     * Assumes this model is empty - no conflict detection.\r\n     * @param model_data Attribute data from the other model.\r\n     */\r\n    public dump(attribs_maps: IAttribsMaps): void {\r\n        if (attribs_maps.ps !== undefined) { this._dumpAttribs(attribs_maps, EEntType.POSI); }\r\n        if (attribs_maps._v !== undefined) { this._dumpAttribs(attribs_maps, EEntType.VERT); }\r\n        if (attribs_maps._e !== undefined) { this._dumpAttribs(attribs_maps, EEntType.EDGE); }\r\n        if (attribs_maps._w !== undefined) { this._dumpAttribs(attribs_maps, EEntType.WIRE); }\r\n        if (attribs_maps._f !== undefined) { this._dumpAttribs(attribs_maps, EEntType.FACE); }\r\n        if (attribs_maps.pt !== undefined) { this._dumpAttribs(attribs_maps, EEntType.POINT); }\r\n        if (attribs_maps.pl !== undefined) { this._dumpAttribs(attribs_maps, EEntType.PLINE); }\r\n        if (attribs_maps.pg !== undefined) { this._dumpAttribs(attribs_maps, EEntType.PGON); }\r\n        if (attribs_maps.co !== undefined) { this._dumpAttribs(attribs_maps, EEntType.COLL); }\r\n        if (attribs_maps.mo !== undefined) { this._dumpModelAttribs(attribs_maps); }\r\n    }\r\n    /**\r\n     * Adds selected data to this model from another model.\r\n     * Assumes this model is empty - no conflict detection.\r\n     * If ent_sets is null, then only copy model attribs.\r\n     * @param model_data Attribute data from the other model.\r\n     */\r\n    public dumpSelect(attribs_maps: IAttribsMaps, ent_sets: IEntSets): void {\r\n        if (ent_sets === null) {\r\n            if (attribs_maps.mo !== undefined) { this._dumpModelAttribs(attribs_maps); }\r\n            return;\r\n        }\r\n        if (attribs_maps.ps !== undefined) {\r\n            this._dumpAttribsSelect(attribs_maps, EEntType.POSI, ent_sets.posis_i);\r\n        }\r\n        if (attribs_maps._v !== undefined) {\r\n            this._dumpAttribsSelect(attribs_maps, EEntType.VERT, ent_sets.verts_i);\r\n        }\r\n        if (attribs_maps._e !== undefined) {\r\n            this._dumpAttribsSelect(attribs_maps, EEntType.EDGE, ent_sets.edges_i);\r\n        }\r\n        if (attribs_maps._w !== undefined) {\r\n            this._dumpAttribsSelect(attribs_maps, EEntType.WIRE, ent_sets.wires_i);\r\n        }\r\n        if (attribs_maps._f !== undefined) {\r\n            this._dumpAttribsSelect(attribs_maps, EEntType.FACE, ent_sets.faces_i);\r\n        }\r\n        if (attribs_maps.pt !== undefined) {\r\n            this._dumpAttribsSelect(attribs_maps, EEntType.POINT, ent_sets.points_i);\r\n        }\r\n        if (attribs_maps.pl !== undefined) {\r\n            this._dumpAttribsSelect(attribs_maps, EEntType.PLINE, ent_sets.plines_i);\r\n        }\r\n        if (attribs_maps.pg !== undefined) {\r\n            this._dumpAttribsSelect(attribs_maps, EEntType.PGON, ent_sets.pgons_i);\r\n        }\r\n        if (attribs_maps.co !== undefined) {\r\n            this._dumpAttribsSelect(attribs_maps, EEntType.COLL, ent_sets.colls_i);\r\n        }\r\n        if (attribs_maps.mo !== undefined) { this._dumpModelAttribs(attribs_maps); }\r\n    }\r\n    /**\r\n     * Adds data to this model from another model.\r\n     * The existing data in the model is not deleted.\r\n     * @param model_data Attribute data from the other model.\r\n     */\r\n    public mergeAndPurge(attribs_maps: IAttribsMaps, renum_maps: Map<string, Map<number, number>>): void {\r\n        // add the attribute data\r\n        if (attribs_maps.ps !== undefined) { this._mergeAndPurgeAttribs(attribs_maps, EEntType.POSI, renum_maps.get('posis')); }\r\n        if (attribs_maps._v !== undefined) { this._mergeAndPurgeAttribs(attribs_maps, EEntType.VERT, renum_maps.get('verts')); }\r\n        if (attribs_maps._e !== undefined) { this._mergeAndPurgeAttribs(attribs_maps, EEntType.EDGE, renum_maps.get('edges')); }\r\n        if (attribs_maps._w !== undefined) { this._mergeAndPurgeAttribs(attribs_maps, EEntType.WIRE, renum_maps.get('wires')); }\r\n        if (attribs_maps._f !== undefined) { this._mergeAndPurgeAttribs(attribs_maps, EEntType.FACE, renum_maps.get('faces')); }\r\n        if (attribs_maps.pt !== undefined) { this._mergeAndPurgeAttribs(attribs_maps, EEntType.POINT, renum_maps.get('points')); }\r\n        if (attribs_maps.pl !== undefined) { this._mergeAndPurgeAttribs(attribs_maps, EEntType.PLINE, renum_maps.get('plines')); }\r\n        if (attribs_maps.pg !== undefined) { this._mergeAndPurgeAttribs(attribs_maps, EEntType.PGON, renum_maps.get('pgons')); }\r\n        if (attribs_maps.co !== undefined) { this._mergeAndPurgeAttribs(attribs_maps, EEntType.COLL, renum_maps.get('colls')); }\r\n        if (attribs_maps.mo !== undefined) { this._mergeModelAttribs(attribs_maps); }\r\n    }\r\n    /**\r\n     * Adds data to this model from JSON data.\r\n     * The existing data in the model is deleted.\r\n     * @param model_data The JSON data for the model.\r\n     */\r\n    public setJSONData(attribs_data: IAttribsJSONData): void {\r\n        // add the attribute data\r\n        if (attribs_data.posis !== undefined) {\r\n            this._setAttribsJSONData(attribs_data.posis, EEntType.POSI);\r\n        }\r\n        if (attribs_data.verts !== undefined) {\r\n            this._setAttribsJSONData(attribs_data.verts, EEntType.VERT);\r\n        }\r\n        if (attribs_data.edges !== undefined) {\r\n            this._setAttribsJSONData(attribs_data.edges, EEntType.EDGE);\r\n        }\r\n        if (attribs_data.wires !== undefined) {\r\n            this._setAttribsJSONData(attribs_data.wires, EEntType.WIRE);\r\n        }\r\n        if (attribs_data.faces !== undefined) {\r\n            this._setAttribsJSONData(attribs_data.faces, EEntType.FACE);\r\n        }\r\n        if (attribs_data.points !== undefined) {\r\n            this._setAttribsJSONData(attribs_data.points, EEntType.POINT);\r\n        }\r\n        if (attribs_data.plines !== undefined) {\r\n            this._setAttribsJSONData(attribs_data.plines, EEntType.PLINE);\r\n        }\r\n        if (attribs_data.pgons !== undefined) {\r\n            this._setAttribsJSONData(attribs_data.pgons, EEntType.PGON);\r\n        }\r\n        if (attribs_data.colls !== undefined) {\r\n            this._setAttribsJSONData(attribs_data.colls, EEntType.COLL);\r\n        }\r\n        if (attribs_data.model !== undefined) {\r\n            this._setModelAttribs(attribs_data.model);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the JSON data for this model.\r\n     */\r\n    public getJSONData(): IAttribsJSONData {\r\n        const data: IAttribsJSONData = {\r\n            posis: Array.from(this._attribs_maps.ps.values()).map(attrib => attrib.getJSONData()),\r\n            verts: Array.from(this._attribs_maps._v.values()).map(attrib => attrib.getJSONData()),\r\n            edges: Array.from(this._attribs_maps._e.values()).map(attrib => attrib.getJSONData()),\r\n            wires: Array.from(this._attribs_maps._w.values()).map(attrib => attrib.getJSONData()),\r\n            faces: Array.from(this._attribs_maps._f.values()).map(attrib => attrib.getJSONData()),\r\n            points: Array.from(this._attribs_maps.pt.values()).map(attrib => attrib.getJSONData()),\r\n            plines: Array.from(this._attribs_maps.pl.values()).map(attrib => attrib.getJSONData()),\r\n            pgons: Array.from(this._attribs_maps.pg.values()).map(attrib => attrib.getJSONData()),\r\n            colls: Array.from(this._attribs_maps.co.values()).map(attrib => attrib.getJSONData()),\r\n            model: Array.from(this._attribs_maps.mo)\r\n        };\r\n        return data;\r\n    }\r\n    // ============================================================================\r\n    // Private methods\r\n    // ============================================================================\r\n    /**\r\n     * From another model\r\n     * The existing attributes are not deleted\r\n     * Deep copy of attrib values\r\n     * @param attribs_maps\r\n     */\r\n    private _mergeModelAttribs(attribs_maps: IAttribsMaps): void {\r\n        const other_attribs: Map<string, TAttribDataTypes> = attribs_maps[EEntTypeStr[ EEntType.MOD ]];\r\n        const this_attribs: Map<string, TAttribDataTypes> = this._attribs_maps[EEntTypeStr[ EEntType.MOD ]];\r\n        // TODO this is a hack to fix an error\r\n        if (!(other_attribs instanceof Map)) { return; }\r\n        other_attribs.forEach( (val, key) => {\r\n            this_attribs.set(key, lodash.cloneDeep(val));\r\n        });\r\n    }\r\n    /**\r\n     * From another model\r\n     * The existing attributes are not deleted\r\n     * Deep copy of attrib values\r\n     * @param attribs_maps\r\n     */\r\n    private _dumpModelAttribs(attribs_maps: IAttribsMaps) {\r\n        this._attribs_maps[EEntTypeStr[ EEntType.MOD ]] = lodash.cloneDeep(attribs_maps[EEntTypeStr[ EEntType.MOD ]]);\r\n    }\r\n    /**\r\n     * From JSON data\r\n     * Existing attributes are deleted\r\n     * @param new_attribs_data\r\n     */\r\n    private _setModelAttribs(new_attribs_data: TModelAttribValuesArr) {\r\n        this._attribs_maps[EEntTypeStr[ EEntType.MOD ]] = new Map(new_attribs_data);\r\n    }\r\n    /**\r\n     * merge attributes from another model into this model.\r\n     * The existing attributes are not deleted\r\n     * @param attribs_maps\r\n     */\r\n    private _mergeAttribs(attribs_maps: IAttribsMaps, ent_type: EEntType) {\r\n        const other_attribs: Map<string, TAttribMap> = attribs_maps[EEntTypeStr[ ent_type ]];\r\n        const this_attribs: Map<string, TAttribMap> = this._attribs_maps[EEntTypeStr[ ent_type ]];\r\n        other_attribs.forEach( other_attrib => {\r\n            if (other_attrib.numEnts() > 0) {\r\n                // get the name\r\n                const name: string = other_attrib.getName();\r\n                // get or create the attrib\r\n                let this_attrib: TAttribMap;\r\n                if (!this_attribs.has(name)) {\r\n                    this_attrib = this._modeldata.attribs.add.addEntAttrib(ent_type, name, other_attrib.getDataType());\r\n                } else {\r\n                    this_attrib = this_attribs.get(name);\r\n                    if (this_attrib.getDataType() !== other_attrib.getDataType()) {\r\n                        throw new Error('Merge Error: Cannot merge attributes with different data types.');\r\n                    }\r\n                }\r\n                // merge\r\n                this_attrib.merge(other_attrib);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * merge attributes from another model into this model.\r\n     * It is assumed that a purge has been performed, so the entity IDs will have changed.\r\n     * The new entity IDs are defined in the renum_map argument.\r\n     * The existing attributes are not deleted.\r\n     * @param attribs_maps\r\n     */\r\n    private _mergeAndPurgeAttribs(attribs_maps: IAttribsMaps, ent_type: EEntType, renum_map: Map<number, number>) {\r\n        const other_attribs: Map<string, TAttribMap> = attribs_maps[EEntTypeStr[ ent_type ]];\r\n        const this_attribs: Map<string, TAttribMap> = this._attribs_maps[EEntTypeStr[ ent_type ]];\r\n        other_attribs.forEach( other_attrib => {\r\n            if (other_attrib.numEnts() > 0) {\r\n                // get the name\r\n                const name: string = other_attrib.getName();\r\n                // get or create the attrib\r\n                let this_attrib: TAttribMap;\r\n                if (!this_attribs.has(name)) {\r\n                    this_attrib = this._modeldata.attribs.add.addEntAttrib(ent_type, name, other_attrib.getDataType());\r\n                } else {\r\n                    this_attrib = this_attribs.get(name);\r\n                    if (this_attrib.getDataType() !== other_attrib.getDataType()) {\r\n                        throw new Error('Merge Error: Cannot merge attributes with different data types.');\r\n                    }\r\n                }\r\n                // shift\r\n                other_attrib.renumEnts(renum_map);\r\n                // merge\r\n                this_attrib.merge(other_attrib);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * merge attributes from another model into this model.\r\n     * Assumes that the existing model is empty\r\n     * @param attribs_maps\r\n     */\r\n    private _dumpAttribs(attribs_maps: IAttribsMaps, ent_type: EEntType) {\r\n        const other_attribs: Map<string, TAttribMap> = attribs_maps[EEntTypeStr[ ent_type ]];\r\n        other_attribs.forEach( other_attrib => {\r\n            if (other_attrib.numEnts() > 0) {\r\n                const this_attrib: TAttribMap = this._modeldata.attribs.add.addEntAttrib(\r\n                    ent_type,\r\n                    other_attrib.getName(),\r\n                    other_attrib.getDataType());\r\n                this_attrib.dump(other_attrib);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Dumps selected attributes from another model into this model.\r\n     * Assumes that the existing model is empty\r\n     * @param attribs_maps\r\n     */\r\n    private _dumpAttribsSelect(attribs_maps: IAttribsMaps, ent_type: EEntType, selected: Set<number>): void {\r\n        const other_attribs: Map<string, TAttribMap> = attribs_maps[EEntTypeStr[ ent_type ]];\r\n        other_attribs.forEach( other_attrib => {\r\n            if (other_attrib.numEnts() > 0) {\r\n                const this_attrib = this._modeldata.attribs.add.addEntAttrib(\r\n                    ent_type,\r\n                    other_attrib.getName(),\r\n                    other_attrib.getDataType());\r\n                this_attrib.dumpSelect(other_attrib, selected);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * From JSON data\r\n     * Existing attributes are deleted\r\n     * @param attribs_data\r\n     */\r\n    private _setAttribsJSONData(attribs_data: IAttribJSONData[], ent_type: EEntType): void {\r\n        this._attribs_maps[EEntTypeStr[ ent_type ]] = new Map();\r\n        attribs_data.forEach( attrib_data => {\r\n            const this_attrib: TAttribMap = this._modeldata.attribs.add.addEntAttrib(\r\n                ent_type,\r\n                attrib_data.name,\r\n                attrib_data.data_type);\r\n            this_attrib.setJSONData(attrib_data);\r\n        });\r\n    }\r\n}\r\n","import { TAttribDataTypes, IAttribsMaps,\r\n    Txyz, EAttribNames, EEntType,  ESort,\r\n    EAttribDataTypeStrs, EEntTypeStr, EFilterOperatorTypes, TAttribMap } from './common';\r\nimport { GIModelData } from './GIModelData';\r\n\r\n/**\r\n * Class for attributes.\r\n */\r\nexport class GIAttribsQuery {\r\n    private _modeldata: GIModelData;\r\n    private _attribs_maps: IAttribsMaps;\r\n   /**\r\n     * Creates an object to store the attribute data.\r\n     * @param modeldata The JSON data\r\n     */\r\n    constructor(modeldata: GIModelData, attribs_maps: IAttribsMaps) {\r\n        this._modeldata = modeldata;\r\n        this._attribs_maps = attribs_maps;\r\n    }\r\n    /**\r\n     * Checks if an attribute with this name exists.\r\n     * @param name\r\n     */\r\n    public hasModelAttrib(name: string): boolean {\r\n        const attribs_maps_key: string = EEntTypeStr[EEntType.MOD];\r\n        const attrib: Map<string, TAttribDataTypes> = this._attribs_maps[attribs_maps_key];\r\n        return attrib.has(name);\r\n    }\r\n    /**\r\n     * Get attrib data type. Also works for MOD attribs.\r\n     *\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public getAttribDataType(ent_type: EEntType, name: string): EAttribDataTypeStrs {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap>|Map<string, TAttribDataTypes> = this._attribs_maps[attribs_maps_key];\r\n        if (attribs.get(name) === undefined) { throw new Error('Attribute does not exist.'); }\r\n        if (ent_type === EEntType.MOD) {\r\n            const mod_attribs: Map<string, TAttribDataTypes> = attribs as Map<string, TAttribDataTypes>;\r\n            const value: TAttribDataTypes = mod_attribs.get(name);\r\n            if (typeof value === 'number') {\r\n                return EAttribDataTypeStrs.NUMBER;\r\n            } else if (typeof value === 'string') {\r\n                return EAttribDataTypeStrs.STRING;\r\n            } else if (typeof value === 'boolean') {\r\n                return EAttribDataTypeStrs.BOOLEAN;\r\n            } else if (Array.isArray(value)) {\r\n                return EAttribDataTypeStrs.LIST;\r\n            } else if (typeof value === 'object') {\r\n                return EAttribDataTypeStrs.DICT;\r\n            }\r\n            throw new Error('Datatype of model attribute not recognised.');\r\n        } else {\r\n            const ent_attribs: Map<string, TAttribMap> = attribs as Map<string, TAttribMap>;\r\n            return ent_attribs.get(name).getDataType();\r\n        }\r\n    }\r\n    /**\r\n     * Get attrib data type. Also works for MOD attribs.\r\n     *\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public getAttribDataLength(ent_type: EEntType, name: string): number {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap>|Map<string, TAttribDataTypes> = this._attribs_maps[attribs_maps_key];\r\n        if (attribs.get(name) === undefined) { throw new Error('Attribute does not exist.'); }\r\n        if (ent_type === EEntType.MOD) {\r\n            const mod_attribs: Map<string, TAttribDataTypes> = attribs as Map<string, TAttribDataTypes>;\r\n            const value: TAttribDataTypes = mod_attribs.get(name);\r\n            if (typeof value === 'number' || typeof value === 'string' || typeof value === 'boolean') {\r\n                return 1;\r\n            } else if (Array.isArray(value)) {\r\n                return value.length;\r\n            } else if (typeof value === 'object') {\r\n                return Object.keys(value).length;\r\n            }\r\n            throw new Error('Datatype of model attribute not recognised.');\r\n        } else {\r\n            const ent_attribs: Map<string, TAttribMap> = attribs as Map<string, TAttribMap>;\r\n            return ent_attribs.get(name).getDataLength();\r\n        }\r\n    }\r\n    /**\r\n     * Get an model attrib value, or an array of values given an array of entities.\r\n     * ~\r\n     * If idx_or_key is null, then this must be a simple attrib.\r\n     * If idx_or_key is a number, then this must be indexing a list attrib.\r\n     * if idx_or_key is a string, then this must be indexing a dict attrib.\r\n     * ~\r\n     * If the attribute does not exist, throw an error\r\n     * ~\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public getModelAttribValAny(name: string, idx_or_key: number|string): any {\r\n        if (idx_or_key === null) { return this.getModelAttribVal(name); }\r\n        switch (typeof idx_or_key) {\r\n            case 'number':\r\n                return this.getModelAttribListIdxVal(name, idx_or_key as number);\r\n            case 'string':\r\n                return this.getModelAttribDictKeyVal(name, idx_or_key as string);\r\n        }\r\n    }\r\n    /**\r\n     * Get a model attrib value\r\n     * @param name\r\n     */\r\n    public getModelAttribVal(name: string): TAttribDataTypes {\r\n        const attribs_maps_key: string = EEntTypeStr[EEntType.MOD];\r\n        const attribs: Map<string, TAttribDataTypes> = this._attribs_maps[attribs_maps_key];\r\n        const value: TAttribDataTypes = attribs.get(name);\r\n        if (value === undefined) { return null; }\r\n        return value;\r\n    }\r\n    /**\r\n     * Get a model attrib list value given an index\r\n     * ~\r\n     * If this attribute is not a list, throw error\r\n     * ~\r\n     * If idx is creater than the length of the list, undefined is returned.\r\n     * ~\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public getModelAttribListIdxVal(name: string, idx: number): number|string {\r\n        const attribs_maps_key: string = EEntTypeStr[EEntType.MOD];\r\n        const attribs: Map<string, TAttribDataTypes> = this._attribs_maps[attribs_maps_key];\r\n        const list_value: TAttribDataTypes = attribs.get(name);\r\n        if (list_value === undefined) { throw new Error('Attribute does not exist.'); }\r\n        if (!Array.isArray(list_value)) { throw new Error('Attribute is not a list.'); }\r\n        return list_value[idx];\r\n    }\r\n    /**\r\n     * Get a model attrib dict value given a key\r\n     * ~\r\n     * If this attribute is not a dict, throw error\r\n     * ~\r\n     * If key does not exist, throw error\r\n     * ~\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public getModelAttribDictKeyVal(name: string, key: string): number|string {\r\n        const attribs_maps_key: string = EEntTypeStr[EEntType.MOD];\r\n        const attribs: Map<string, TAttribDataTypes> = this._attribs_maps[attribs_maps_key];\r\n        const dict_value: TAttribDataTypes = attribs.get(name);\r\n        if (dict_value === undefined) { throw new Error('Attribute does not exist.'); }\r\n        if (Array.isArray(dict_value) || typeof dict_value !== 'object') { throw new Error('Attribute is not a dict.'); }\r\n        return dict_value[key];\r\n    }\r\n    /**\r\n     * Get an entity attrib value, or an array of values given an array of entities.\r\n     * ~\r\n     * If idx_or_key is null, then this must be a simple attrib.\r\n     * If idx_or_key is a number, then this must be indexing a list attrib.\r\n     * if idx_or_key is a string, then this must be indexing a dict attrib.\r\n     * ~\r\n     * If the attribute does not exist, throw an error\r\n     * ~\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public getAttribValAny(ent_type: EEntType, name: string, ents_i: number|number[],\r\n            idx_or_key: number|string): any {\r\n        if (idx_or_key === null) { return this.getAttribVal(ent_type, name, ents_i); }\r\n        switch (typeof idx_or_key) {\r\n            case 'number':\r\n                return this.getAttribListIdxVal(ent_type, name, ents_i, idx_or_key as number);\r\n            case 'string':\r\n                return this.getAttribDictKeyVal(ent_type, name, ents_i, idx_or_key as string);\r\n        }\r\n    }\r\n    /**\r\n     * Get an entity attrib value, or an array of values given an array of entities.\r\n     * ~\r\n     * If the attribute does not exist, throw an error\r\n     * ~\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public getAttribVal(ent_type: EEntType, name: string, ents_i: number|number[]): TAttribDataTypes|TAttribDataTypes[] {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        const attrib: TAttribMap = attribs.get(name);\r\n        if (attrib === undefined) { throw new Error('Attribute does not exist.'); }\r\n        return attrib.getEntVal(ents_i);\r\n    }\r\n    /**\r\n     * Get an entity attrib value in a list.\r\n     * ~\r\n     * If the attribute does not exist, throw error\r\n     * ~\r\n     * If the index is out of range, return undefined.\r\n     * ~\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public getAttribListIdxVal(ent_type: EEntType, name: string, ents_i: number|number[], idx: number): any {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        const attrib: TAttribMap = attribs.get(name);\r\n        if (attrib === undefined) { throw new Error('Attribute does not exist.'); }\r\n        return attrib.getEntListIdxVal(ents_i, idx);\r\n    }\r\n        /**\r\n     * Get an entity attrib value in a dictionary.\r\n     * ~\r\n     * If the attribute does not exist, throw error\r\n     * ~\r\n     * If the key does not exist, return undefined.\r\n     * ~\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public getAttribDictKeyVal(ent_type: EEntType, name: string, ents_i: number|number[], key: string): any {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        const attrib: TAttribMap = attribs.get(name);\r\n        if (attrib === undefined) { throw new Error('Attribute does not exist.'); }\r\n        return attrib.getEntDictKeyVal(ents_i, key);\r\n    }\r\n    /**\r\n     * Check if attribute exists\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public hasAttrib(ent_type: EEntType, name: string): boolean {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        return attribs.has(name);\r\n    }\r\n    /**\r\n     * Get all the attribute names for an entity type\r\n     * @param ent_type\r\n     */\r\n    public getAttribNames(ent_type: EEntType): string[] {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs_map: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        return Array.from(attribs_map.keys());\r\n    }\r\n    /**\r\n     * Get all the user defined attribute names for an entity type\r\n     * This excludes the built in attribute names, xyz and anything starting with '_'\r\n     * @param ent_type\r\n     */\r\n    public getAttribNamesUser(ent_type: EEntType): string[] {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs_map: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        let attribs: string[] = Array.from(attribs_map.keys());\r\n        if (ent_type === EEntType.POSI) {\r\n            attribs = attribs.filter(attrib => attrib !== 'xyz');\r\n        }\r\n        attribs = attribs.filter(attrib => attrib[0] !== '_');\r\n        return attribs;\r\n    }\r\n    /**\r\n     * Get attrib\r\n     * @param ent_type\r\n     * @param name\r\n     */\r\n    public getAttrib(ent_type: EEntType, name: string): TAttribMap {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        return attribs.get(name);\r\n    }\r\n    // /**\r\n    //  * Query the model using a query strings.\r\n    //  * Returns a list of entities in the model.\r\n    //  * @param ent_type The type of the entities being search for\r\n    //  * @param query_str The query string, e.g. '#@name == value'\r\n    //  * @param indices The indices of entites in the model. These are assumed to be of type ent_type.\r\n    //  */\r\n    // public queryAttribs(ent_type: EEntType, query_str: string, indices: number[]): number[] {\r\n    //     // get the map that contains all the ettributes for the ent_type\r\n    //     const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n    //     const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n    //     // parse the query\r\n    //     const queries: IQueryComponent[][] = parseQuery(query_str);\r\n    //     if (!queries) { return []; }\r\n    //     // do the query, one by one\r\n    //     // [[query1 && query2] || [query3 && query4]]\r\n    //     let union_query_results: number[] = [];\r\n    //     for (const and_queries of queries)  {\r\n    //         // get the ents_i to start the '&&' query\r\n    //         let query_ents_i: number[] = null;\r\n    //         if (indices !== null && indices !== undefined) {\r\n    //             query_ents_i = indices;\r\n    //         } else {\r\n    //             query_ents_i = this._model.modeldata.geom.query.getEnts(ent_type, false);\r\n    //         }\r\n    //         // do the '&&' queries\r\n    //         for (const and_query of and_queries) {\r\n    //             if (attribs && attribs.has(and_query.attrib_name)) {\r\n    //                 const attrib: TAttribMap = attribs.get(and_query.attrib_name);\r\n    //                 query_ents_i = attrib.queryVal(\r\n    //                     query_ents_i,\r\n    //                     and_query.attrib_index,\r\n    //                     and_query.operator_type,\r\n    //                     and_query.attrib_value_str\r\n    //                 );\r\n    //             } else {\r\n    //                 throw new Error('Attribute \"' + and_query.attrib_name + '\" does not exist.');\r\n    //                 // query_ents_i = [];\r\n    //             }\r\n    //         }\r\n    //         // combine the results of the '&&' queries\r\n    //         if (query_ents_i !== null && query_ents_i.length > 0) {\r\n    //             union_query_results = Array.from(new Set([...union_query_results, ...query_ents_i]));\r\n    //         }\r\n    //     }\r\n    //     // return the result\r\n    //     return union_query_results;\r\n    // }\r\n    /**\r\n     * Query the model using a query strings.\r\n     * Returns a list of entities in the model.\r\n     * @param ent_type The type of the entities being quieried.\r\n     * @param ents_i Entites in the model, assumed to be of type ent_type.\r\n     * @param name\r\n     * @param idx_or_key\r\n     * @param value\r\n     */\r\n    public filterByAttribs(ent_type: EEntType, ents_i: number[],\r\n            name: string, idx_or_key: number|string, op_type: EFilterOperatorTypes, value: TAttribDataTypes): number[] {\r\n        // get the map that contains all the attributes for the ent_type\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        // do the query\r\n        if (attribs && attribs.has(name)) {\r\n            const attrib: TAttribMap = attribs.get(name);\r\n            let query_ents_i: number[];\r\n            if (typeof idx_or_key === 'number') {\r\n                query_ents_i = attrib.queryListIdxVal(ents_i, idx_or_key, op_type, value);\r\n            } else if (typeof idx_or_key === 'string') {\r\n                query_ents_i = attrib.queryDictKeyVal(ents_i, idx_or_key, op_type, value);\r\n            } else {\r\n                query_ents_i = attrib.queryVal(ents_i, op_type, value);\r\n            }\r\n            // return the result\r\n            return query_ents_i;\r\n        } else {\r\n            throw new Error('Attribute \"' + name + '\" does not exist.');\r\n            // query_ents_i = [];\r\n        }\r\n    }\r\n    /**\r\n     * Sort entities in the model based on attribute values.\r\n     * @param ent_type The type of the entities being sorted.\r\n     * @param ents_i Entites in the model, assumed to be of type ent_type.\r\n     * @param name\r\n     * @param idx_or_key\r\n     * @param value\r\n     */\r\n    public sortByAttribs(ent_type: EEntType, ents_i: number[],\r\n            name: string, idx_or_key: number|string, method: ESort): number[] {\r\n        // get the map that contains all the ettributes for the ent_type\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        if (!attribs)  { throw new Error('Bad sort: Entity type does not exist.'); }\r\n        // get the attribute from the map\r\n        const attrib: TAttribMap = attribs.get(name);\r\n        if (attrib === undefined) {\r\n            // if the attribute does not exist then no sort is performed\r\n            return ents_i;\r\n        }\r\n        // create the sort copmapre function\r\n        function _sortCompareVals(ent1_i: number, ent2_i: number): number {\r\n            const val1: number|string|boolean = attrib.getEntVal(ent1_i) as number|string|boolean;\r\n            const val2: number|string|boolean = attrib.getEntVal(ent2_i) as number|string|boolean;\r\n            if (method === ESort.DESCENDING) {\r\n                if (val1 < val2) { return 1; }\r\n                if (val1 > val2) { return -1; }\r\n            } else {\r\n                if (val1 < val2) { return -1; }\r\n                if (val1 > val2) { return 1; }\r\n            }\r\n            return 0;\r\n        }\r\n        function _sortCompareListIdxVals(ent1_i: number, ent2_i: number): number {\r\n            const l1: any[] = attrib.getEntVal(ent1_i) as any[];\r\n            const l2: any[] = attrib.getEntVal(ent2_i) as any[];\r\n            const val1: any = (l1 !== undefined && l1 !== null) ? l1[idx_or_key] : null;\r\n            const val2: any = (l2 !== undefined && l2 !== null) ? l2[idx_or_key] : null;\r\n            if (method === ESort.DESCENDING) {\r\n                if (val1 < val2) { return 1; }\r\n                if (val1 > val2) { return -1; }\r\n            } else {\r\n                if (val1 < val2) { return -1; }\r\n                if (val1 > val2) { return 1; }\r\n            }\r\n            return 0;\r\n        }\r\n        function _sortCompareDictKeyVals(ent1_i: number, ent2_i: number): number {\r\n            const o1: object = attrib.getEntVal(ent1_i) as object;\r\n            const o2: object = attrib.getEntVal(ent2_i) as object;\r\n            const val1: any = (o1 !== undefined && o1 !== null) ? o1[idx_or_key] : null;\r\n            const val2: any = (o2 !== undefined && o2 !== null) ? o2[idx_or_key] : null;\r\n            if (method === ESort.DESCENDING) {\r\n                if (val1 < val2) { return 1; }\r\n                if (val1 > val2) { return -1; }\r\n            } else {\r\n                if (val1 < val2) { return -1; }\r\n                if (val1 > val2) { return 1; }\r\n            }\r\n            return 0;\r\n        }\r\n        function _sortCompareLists(ent1_i: number, ent2_i: number): number {\r\n            const l1: any[] = attrib.getEntVal(ent1_i) as any[];\r\n            const l2: any[] = attrib.getEntVal(ent2_i) as any[];\r\n            const len: number = l1.length > l2.length ? l1.length : l2.length;\r\n            if (method === ESort.DESCENDING) {\r\n                for (let i = 0; i < len; i++) {\r\n                    if (l1[i] < l2[i]) { return 1; }\r\n                    if (l1[i] > l2[i]) { return -1; }\r\n                }\r\n            } else {\r\n                for (let i = 0; i < len; i++) {\r\n                    if (l1[i] < l2[i]) { return -1; }\r\n                    if (l1[i] > l2[i]) { return 1; }\r\n                }\r\n            }\r\n            return 0;\r\n        }\r\n        function _sortCompareDicts(ent1_i: number, ent2_i: number): number {\r\n            const o1: object = attrib.getEntVal(ent1_i) as object;\r\n            const o2: object = attrib.getEntVal(ent2_i) as object;\r\n            if (method === ESort.DESCENDING) {\r\n                if (o1 < o2) { return 1; }\r\n                if (o1 > o2) { return -1; }\r\n            } else {\r\n                if (o1 < o2) { return -1; }\r\n                if (o1 > o2) { return 1; }\r\n            }\r\n            return 0;\r\n        }\r\n        // do the sort\r\n        if (attrib.getDataType() === EAttribDataTypeStrs.LIST) {\r\n            if (idx_or_key === null || idx_or_key === undefined) {\r\n                ents_i.sort(_sortCompareLists);\r\n            } else {\r\n                ents_i.sort(_sortCompareListIdxVals);\r\n            }\r\n        } else if (attrib.getDataType() === EAttribDataTypeStrs.DICT) {\r\n            if (idx_or_key === null || idx_or_key === undefined) {\r\n                ents_i.sort(_sortCompareDicts);\r\n            } else {\r\n                ents_i.sort(_sortCompareDictKeyVals);\r\n            }\r\n        } else {\r\n            ents_i.sort(_sortCompareVals);\r\n        }\r\n        return ents_i;\r\n    }\r\n    // ============================================================================\r\n    // Shortcuts for getting xyz\r\n    // ============================================================================\r\n    /**\r\n     * Shortcut for getting a coordinate from a posi_i\r\n     * @param posi_i\r\n     */\r\n    public getPosiCoords(posi_i: number): Txyz {\r\n        const result = this._attribs_maps.ps.get(EAttribNames.COORDS).getEntVal(posi_i) as Txyz;\r\n        return result;\r\n    }\r\n    /**\r\n     * Shortcut for getting a coordinate from a numeric vertex index (i.e. this is not an ID)\r\n     * @param vert_i\r\n     */\r\n    public getVertCoords(vert_i: number): Txyz {\r\n        const posi_i: number = this._modeldata.geom.nav.navVertToPosi(vert_i);\r\n        return this._attribs_maps.ps.get(EAttribNames.COORDS).getEntVal(posi_i) as Txyz;\r\n    }\r\n    /**\r\n     * Shortcut for getting all the xyz coordinates from an ent_i\r\n     * @param posi_i\r\n     */\r\n    public getEntCoords(ent_type: EEntType, ent_i: number): Txyz[] {\r\n        const posis_i: number[] = this._modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n        const coords_map: TAttribMap = this._attribs_maps.ps.get(EAttribNames.COORDS);\r\n        return coords_map.getEntVal(posis_i) as Txyz[];\r\n    }\r\n    // /**\r\n    //  * Shortcut for getting all coordinates\r\n    //  * @param posi_i\r\n    //  */\r\n    // public getAllPosisCoords(): Txyz[] {\r\n    //     const posis_i: number[] = this._model.modeldata.geom.query.getEnts(EEntType.POSI);\r\n    //     const coords_map: TAttribMap = this._attribs_maps.ps.get(EAttribNames.COORDS);\r\n    //     return coords_map.getEntVal(posis_i) as Txyz[];\r\n    // }\r\n    // /**\r\n    //  * Shortcut for getting coords for all verts\r\n    //  * @param attrib_name\r\n    //  */\r\n    // public getAllVertsCoords(attrib_name: string): Txyz[] {\r\n    //     const verts_i: number[] = this._model.modeldata.geom.query.getEnts(EEntType.VERT);\r\n    //     const posis_i: number[] = verts_i.map( vert_i => this._model.modeldata.geom.nav.navVertToPosi(vert_i));\r\n    //     const coords_map: TAttribMap = this._attribs_maps.ps.get(EAttribNames.COORDS);\r\n    //     return coords_map.getEntVal(posis_i) as Txyz[];\r\n    // }\r\n}\r\n// ================================================================================================\r\n// Functions for parsing queries\r\n// ================================================================================================\r\n// /**\r\n//  * Parse a query string.\r\n//  * && takes precedence over ||\r\n//  * [ [ query1 && query2 ] || [ query3 && query4 ] ]\r\n//  */\r\n// function parseQuery(query_str: string): IQueryComponent[][] {\r\n//     if (!query_str.startsWith('#')) {throw new Error('Bad query, query string must start with #.'); }\r\n//     const or_query_strs: string[] = query_str.split('||');\r\n//     const query_list: IQueryComponent[][] = [];\r\n//     or_query_strs.forEach(or_query_str => {\r\n//         const and_query_strs: string[] = or_query_str.split('&&');\r\n//         query_list.push(and_query_strs.map( and_query_str => _parse_query_component(and_query_str) ) );\r\n//     });\r\n//     return query_list;\r\n// }\r\n\r\n// /**\r\n//  * Parse a query component string.\r\n//  */\r\n// function _parse_query_component(query_component: string): IQueryComponent {\r\n//     let attrib_name_str = '' ;\r\n//     let attrib_value_str = '' ;\r\n//     let operator_type: EFilterOperatorTypes = null;\r\n//     // split the query at the @ sign\r\n//     const [_, attrib_name_value_str]: string[] = query_component.split('@');\r\n//     if (!attrib_name_value_str) { throw new Error('Bad query.'); }\r\n//     // split the attrib_name_value_str based on operator, ==, !=, etc...\r\n//     for (const key of Object.keys(EFilterOperatorTypes)) {\r\n//         const split_query = attrib_name_value_str.split(EFilterOperatorTypes[key]);\r\n//         if (split_query.length === 2) {\r\n//             attrib_name_str =  split_query[0].trim();\r\n//             attrib_value_str = split_query[1].trim();\r\n//             operator_type = EFilterOperatorTypes[key];\r\n//             break;\r\n//         }\r\n//     }\r\n//     // check\r\n//     if (!operator_type) {throw new Error('Bad operator in query.'); }\r\n//     if (!attrib_name_str) {throw new Error('Bad attribute name in query.'); }\r\n//     if (!attrib_value_str) {throw new Error('Bad attribute value in query.'); }\r\n//     // parse the name\r\n//     const attrib_name_index = _parse_name_str(attrib_name_str);\r\n//     const attrib_name  = attrib_name_index[0];\r\n//     const attrib_index  = attrib_name_index[1];\r\n//     // parse the value\r\n//     attrib_value_str = _parse_value_str(attrib_value_str);\r\n//     // return the data for the query component as an object\r\n//     return {\r\n//         attrib_name: attrib_name,\r\n//         attrib_index: attrib_index,\r\n//         attrib_value_str: attrib_value_str,\r\n//         operator_type: operator_type\r\n//     };\r\n// }\r\n// /**\r\n//  * Parse a sort string. #@name1 && #@name2\r\n//  * Rerurns an array,[ query1, query2 ]\r\n//  */\r\n// function parseSort(sort_str: string): ISortComponent[] {\r\n//     if (!sort_str.startsWith('#')) { throw new Error('Bad sort, sort string must start with #.'); }\r\n//     if (sort_str.indexOf('||') !== -1) { throw new Error('Bad sort, sort string cannot contain || conditions.'); }\r\n//     const sort_str_clean: string = sort_str.replace(/\\s/g, '');\r\n//     const component_strs: string[] = sort_str_clean.split('&&');\r\n//     const sort_list: ISortComponent[] = [];\r\n//     component_strs.forEach(component_str => {\r\n//         sort_list.push(_parse_sort_component(component_str));\r\n//     });\r\n//     return sort_list;\r\n// }\r\n\r\n// /**\r\n//  * Parse a query component string.\r\n//  */\r\n// function _parse_sort_component(sort_component: string): ISortComponent {\r\n//     // split the query at the @ sign\r\n//     const [_, attrib_name_str]: string[] = sort_component.split('@');\r\n//     // check\r\n//     if (!attrib_name_str) {throw new Error('Bad attribute name in query.'); }\r\n//     // parse the name\r\n//     const attrib_name_index = _parse_name_str(attrib_name_str);\r\n//     const attrib_name  = attrib_name_index[0];\r\n//     const attrib_index  = attrib_name_index[1];\r\n//     // return the data for the query component as an object\r\n//     return {\r\n//         attrib_name: attrib_name,\r\n//         attrib_index: attrib_index\r\n//     };\r\n// }\r\n\r\n// /**\r\n//  * Parse the attribute value. Handles sting with quotes, e.g. 'this' and \"that\".\r\n//  * Remove quotes from value string\r\n//  */\r\n// function _parse_value_str(value_str: string): string {\r\n//     const first_char: string = value_str.slice(0, 1);\r\n//     if (first_char ===  '\\'' || first_char === '\"') {return value_str.slice(1, -1); }\r\n//     return value_str;\r\n// }\r\n// /**\r\n//  * Parese the attribute name. Handles names with indexes, e.g. 'name[2]'\r\n//  * Split the name into the string name and the numeric index\r\n//  */\r\n// function _parse_name_str(value_str: string): [string, number?] {\r\n//     const last_char: string = value_str.slice(-1);\r\n//     if (last_char === ']') {\r\n//         const [name_str, index_str]: [string, string] = value_str.slice(0, -1).split('[') as [string, string];\r\n//         const index: number = Number(index_str);\r\n//         if (isNaN(index)) {throw new Error('Bad query'); }\r\n//         return [name_str, index];\r\n//     }\r\n//     return [value_str, null];\r\n// }\r\n","import { TAttribDataTypes, EEntType, IAttribsMaps, EAttribNames, EEntTypeStr, Txyz, TAttribMap} from './common';\r\nimport { isString } from 'util';\r\nimport { sortByKey } from '../util/maps';\r\nimport { GIModelData } from './GIModelData';\r\n\r\n/**\r\n * Class for attributes.\r\n */\r\nexport class GIAttribsThreejs {\r\n    private _modeldata: GIModelData;\r\n    private _attribs_maps: IAttribsMaps;\r\n   /**\r\n     * Creates an object to store the attribute data.\r\n     * @param modeldata The JSON data\r\n     */\r\n    constructor(modeldata: GIModelData, attribs_maps: IAttribsMaps) {\r\n        this._modeldata = modeldata;\r\n        this._attribs_maps = attribs_maps;\r\n    }\r\n    // ============================================================================\r\n    // Threejs\r\n    // For methods to get the array of edges and triangles, see the geom class\r\n    // get3jsTris() and get3jsEdges()\r\n    // ============================================================================\r\n    /**\r\n     * Get a flat array of all the coordinates of all the vertices.\r\n     * Verts that have been deleted will not be included\r\n     * @param verts An array of vertex indices pointing to the position.\r\n     */\r\n    public get3jsSeqPosisCoords(): [number[], Map<number, number>] {\r\n        const coords_attrib: TAttribMap = this._attribs_maps.ps.get(EAttribNames.COORDS);\r\n        //\r\n        const coords: number[][] = [];\r\n        const posi_map: Map<number, number> = new Map();\r\n        const posis_i: number[] = this._modeldata.geom.query.getEnts(EEntType.POSI);\r\n\r\n        for (const posi_i of posis_i) {\r\n            const tjs_index: number = coords.push( coords_attrib.getEntVal(posi_i) as number[] ) - 1;\r\n            posi_map.set(posi_i, tjs_index);\r\n        }\r\n\r\n        // console.log(\"LIST OF THREEJS COORDS\", coords)\r\n\r\n        // posis_i.forEach( (posi_i, gi_index) => {\r\n        //     if (posi_i !== null) {\r\n        //         const tjs_index: number = coords.push( coords_attrib.getEntVal(posi_i) as number[] ) - 1;\r\n        //         posi_map.set(gi_index, tjs_index);\r\n        //     }\r\n        // });\r\n\r\n\r\n        // @ts-ignore\r\n        return [coords.flat(1), posi_map];\r\n    }\r\n    /**\r\n     * Get a flat array of all the coordinates of all the vertices.\r\n     * Verts that have been deleted will not be included\r\n     * @param verts An array of vertex indices pointing to the positio.\r\n     */\r\n    public get3jsSeqVertsCoords(): [number[], Map<number, number>] {\r\n        const coords_attrib: TAttribMap = this._attribs_maps.ps.get(EAttribNames.COORDS);\r\n        //\r\n        const coords: number[][] = [];\r\n        const vertex_map: Map<number, number> = new Map();\r\n        const verts_i: number[] = this._modeldata.geom.query.getEnts(EEntType.VERT);\r\n\r\n        for (const vert_i of verts_i) {\r\n            const posi_i: number = this._modeldata.geom.nav.navVertToPosi(vert_i);\r\n            const tjs_index: number = coords.push( coords_attrib.getEntVal(posi_i) as number[] ) - 1;\r\n            vertex_map.set(vert_i, tjs_index);\r\n        }\r\n\r\n        // verts_i.forEach( (vert_i, gi_index) => {\r\n        //     if (vert_i !== null) {\r\n        //         const posi_i: number = this._model.modeldata.geom.nav.navVertToPosi(vert_i);\r\n        //         const tjs_index: number = coords.push( coords_attrib.getEntVal(posi_i) as number[] ) - 1;\r\n        //         vertex_map.set(gi_index, tjs_index);\r\n        //     }\r\n        // });\r\n\r\n        // @ts-ignore\r\n        return [coords.flat(1), vertex_map];\r\n    }\r\n    /**\r\n     * Get a flat array of normals values for all the vertices.\r\n     * Verts that have been deleted will not be included\r\n     */\r\n    public get3jsSeqVertsNormals(): number[] {\r\n        if (!this._attribs_maps._v.has(EAttribNames.NORMAL)) { return null; }\r\n        // create a sparse arrays of normals of all verts of polygons\r\n        const verts_attrib: TAttribMap = this._attribs_maps._v.get(EAttribNames.NORMAL);\r\n        const normals: Txyz[] = [];\r\n        for (const pgon_i of this._modeldata.geom.query.getEnts(EEntType.PGON)) {\r\n            let pgon_normal: Txyz = null;\r\n            for (const vert_i of this._modeldata.geom.nav.navAnyToVert(EEntType.PGON, pgon_i)) {\r\n                let normal: Txyz = verts_attrib.getEntVal(vert_i) as Txyz;\r\n                if (!Array.isArray(normal)) {\r\n                    if (pgon_normal === null) {\r\n                        const face_i: number = this._modeldata.geom.nav.navPgonToFace(pgon_i);\r\n                        pgon_normal = this._modeldata.geom.query.getFaceNormal(face_i);\r\n                    }\r\n                    normal = pgon_normal;\r\n                }\r\n                normals[vert_i] = normal;\r\n            }\r\n        }\r\n        // get all the normals\r\n        const verts_normals: TAttribDataTypes[] = [];\r\n        const verts_i: number[] = this._modeldata.geom.query.getEnts(EEntType.VERT);\r\n        for (const vert_i of verts_i) {\r\n            if (vert_i !== undefined) {\r\n                let normal: Txyz = normals[vert_i];\r\n                normal = normal === undefined ? [0, 0, 0] : normal;\r\n                verts_normals.push(normal);\r\n            }\r\n        }\r\n        // @ts-ignore\r\n        return verts_normals.flat(1);\r\n    }\r\n\r\n    /**\r\n     * Get a flat array of colors values for all the vertices.\r\n     */\r\n    public get3jsSeqVertsColors(): number[] {\r\n        if (!this._attribs_maps._v.has(EAttribNames.COLOR)) { return null; }\r\n        const verts_attrib: TAttribMap = this._attribs_maps._v.get(EAttribNames.COLOR);\r\n        // get all the colors\r\n        const verts_colors: TAttribDataTypes[] = [];\r\n        const verts_i: number[] = this._modeldata.geom.query.getEnts(EEntType.VERT);\r\n        for (const vert_i of verts_i) {\r\n            if (vert_i !== undefined) {\r\n                const value = verts_attrib.getEntVal(vert_i) as TAttribDataTypes;\r\n                const _value = value === undefined ? [1, 1, 1] : value;\r\n                verts_colors.push(_value);\r\n            }\r\n        }\r\n        // @ts-ignore\r\n        return verts_colors.flat(1);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    public getModelAttribsForTable(): any[] {\r\n        const attribs_maps_key: string = EEntTypeStr[ EEntType.MOD ];\r\n        const attribs: Map<string, TAttribDataTypes> = this._attribs_maps[attribs_maps_key];\r\n        if (attribs === undefined) { return []; }\r\n        const arr = [];\r\n        attribs.forEach((value, key) => {\r\n            // const _value = isString(value) ? `'${value}'` : value;\r\n            const _value = JSON.stringify(value);\r\n            const obj = {Name: key, Value: _value};\r\n            arr.push(obj);\r\n        });\r\n        // console.log(arr);\r\n        return arr;\r\n    }\r\n    /**\r\n     *\r\n     * @param ent_type\r\n     */\r\n    public getAttribsForTable(ent_type: EEntType): {data: any[], ents: number[]} {\r\n        // get the attribs map for this ent type\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n\r\n        // create a map of objects to store the data\r\n        // const data_obj_map: Map< number, { '#': number, _id: string} > = new Map();\r\n        const data_obj_map: Map< number, {_id: string} > = new Map();\r\n\r\n        // create the ID for each table row\r\n        const ents_i: number[] = this._modeldata.geom.query.getEnts(ent_type);\r\n\r\n        // sessionStorage.setItem('attrib_table_ents', JSON.stringify(ents_i));\r\n        let i = 0;\r\n        for (const ent_i of ents_i) {\r\n            // data_obj_map.set(ent_i, { '#': i, _id: `${attribs_maps_key}${ent_i}`} );\r\n            data_obj_map.set(ent_i, {_id: `${attribs_maps_key}${ent_i}`} );\r\n            if (ent_type === EEntType.COLL) {\r\n                const coll_parent = this._modeldata.geom.query.getCollParent(ent_i);\r\n                data_obj_map.get(ent_i)['_parent'] = coll_parent === -1 ? '' : 'co' + coll_parent;\r\n            }\r\n            i++;\r\n        }\r\n        // loop through all the attributes\r\n        attribs.forEach( (attrib, attrib_name) => {\r\n            const data_size: number = attrib.getDataLength();\r\n            if (attrib.numVals() === 0) { return; }\r\n            for (const ent_i of ents_i) {\r\n                if (attrib_name.substr(0, 1) === '_' && attrib_name !== '_parent') {\r\n                    const attrib_value = attrib.getEntVal(ent_i);\r\n                    data_obj_map.get(ent_i)[`${attrib_name}`] = attrib_value;\r\n                } else {\r\n                    const attrib_value = attrib.getEntVal(ent_i);\r\n                    if (attrib_value && attrib_value.constructor === {}.constructor) {\r\n                        data_obj_map.get(ent_i)[`${attrib_name}`] = JSON.stringify(attrib_value);\r\n                    } else if ( data_size > 1 ) {\r\n                        if (attrib_value === undefined) {\r\n                            for (let idx = 0; idx < data_size; idx++) {\r\n                                data_obj_map.get(ent_i)[`${attrib_name}[${idx}]`] = undefined;\r\n                            }\r\n                        } else {\r\n                            (attrib_value as any[]).forEach( (v, idx) => {\r\n                                const _v =  v;\r\n                                data_obj_map.get(ent_i)[`${attrib_name}[${idx}]`] = _v;\r\n                            });\r\n                        }\r\n                    } else {\r\n                        if (ent_type === EEntType.POSI && Array.isArray(attrib_value)) {\r\n                            if (attrib_name === 'xyz') {\r\n                                for (let index = 0; index < attrib_value.length; index++) {\r\n                                    const _v = Array.isArray(attrib_value[index]) ?\r\n                                    JSON.stringify(attrib_value[index]) : attrib_value[index];\r\n                                    data_obj_map.get(ent_i)[`${attrib_name}[${index}]`] = _v;\r\n                                }\r\n                            // if (attrib_value.length < 4) {\r\n                            //     console.log(attrib_value)\r\n                            //     for (let index = 0; index < attrib_value.length; index++) {\r\n                            //         const _v = Array.isArray(attrib_value[index]) ?\r\n                            //         JSON.stringify(attrib_value[index]) : attrib_value[index];\r\n                            //         data_obj_map.get(ent_i)[`${attrib_name}[${index}]`] = _v;\r\n                            //     }\r\n                            } else {\r\n                                data_obj_map.get(ent_i)[attrib_name] = JSON.stringify(attrib_value);\r\n                            }\r\n                        } else {\r\n                            const _attrib_value = isString(attrib_value) ? `'${attrib_value}'` : attrib_value;\r\n                            data_obj_map.get(ent_i)[`${attrib_name}`] = _attrib_value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return { data: Array.from(data_obj_map.values()), ents: ents_i};\r\n    }\r\n\r\n    /**\r\n     * @param ent_type\r\n     * @param ents_i\r\n     */\r\n    public getEntsVals(selected_ents: Map<string, number>, ent_type: EEntType): any[] {\r\n        const attribs_maps_key: string = EEntTypeStr[ent_type];\r\n        const attribs: Map<string, TAttribMap> = this._attribs_maps[attribs_maps_key];\r\n        const data_obj_map: Map< number, { _id: string} > = new Map();\r\n        if (!selected_ents || selected_ents === undefined) {\r\n            return [];\r\n        }\r\n        let i = 0;\r\n        const selected_ents_sorted = sortByKey(selected_ents);\r\n        selected_ents_sorted.forEach(ent => {\r\n            data_obj_map.set(ent, { _id: `${attribs_maps_key}${ent}` } );\r\n            if (ent_type === EEntType.COLL) {\r\n                const coll_parent = this._modeldata.geom.query.getCollParent(ent);\r\n                data_obj_map.get(ent)['_parent'] = coll_parent === -1 ? '' : coll_parent;\r\n            }\r\n            i++;\r\n        });\r\n        const nullAttribs = new Set();\r\n        attribs.forEach( (attrib, attrib_name) => {\r\n            const data_size: number = attrib.getDataLength();\r\n            if (attrib.numVals() === 0) { return; }\r\n            nullAttribs.add(attrib_name);\r\n            for (const ent_i of Array.from(selected_ents.values())) {\r\n                if (attrib_name.substr(0, 1) === '_') {\r\n                    const attrib_value = attrib.getEntVal(ent_i);\r\n                    data_obj_map.get(ent_i)[`${attrib_name}`] = attrib_value;\r\n                    nullAttribs.delete(attrib_name);\r\n                } else {\r\n                    const attrib_value = attrib.getEntVal(ent_i);\r\n                    if (attrib_value !== undefined) { nullAttribs.delete(attrib_name); }\r\n                    if ( data_size > 1 ) {\r\n                        if (attrib_value === undefined) {\r\n                            for (let idx = 0; idx < data_size; idx++) {\r\n                                data_obj_map.get(ent_i)[`${attrib_name}[${idx}]`] = undefined;\r\n                            }\r\n                        } else if (attrib_value.constructor === {}.constructor) {\r\n                            data_obj_map.get(ent_i)[`${attrib_name}`] = JSON.stringify(attrib_value);\r\n                        } else {\r\n                            (attrib_value as any[]).forEach( (v, idx) => {\r\n                                const _v =  v;\r\n                                data_obj_map.get(ent_i)[`${attrib_name}[${idx}]`] = _v;\r\n                            });\r\n                        }\r\n                    } else {\r\n                        if (ent_type === EEntType.POSI && Array.isArray(attrib_value)) {\r\n                            if (attrib_value.length < 4) {\r\n                                for (let index = 0; index < attrib_value.length; index++) {\r\n                                    const _v = Array.isArray(attrib_value[index]) ?\r\n                                    JSON.stringify(attrib_value[index]) : attrib_value[index];\r\n                                    data_obj_map.get(ent_i)[`${attrib_name}[${index}]`] = _v;\r\n                                }\r\n                            } else {\r\n                                data_obj_map.get(ent_i)[attrib_name] = JSON.stringify(attrib_value);\r\n                            }\r\n                        } else {\r\n                            const _attrib_value = isString(attrib_value) ? `'${attrib_value}'` : attrib_value;\r\n                            data_obj_map.get(ent_i)[`${attrib_name}`] = _attrib_value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        for (const attrib of nullAttribs) {\r\n            data_obj_map.forEach( (val, index) => {\r\n                try {\r\n                    // @ts-ignore\r\n                    delete val[attrib];\r\n                } catch (ex) {}\r\n            });\r\n        }\r\n        return Array.from(data_obj_map.values());\r\n    }\r\n    // /**\r\n    //  * TODO\r\n    //  * This is confusing... will this not always return the same, i.e. id = index\r\n    //  * @param ent_type\r\n    //  * @param id\r\n    //  */\r\n    // public getIdIndex(ent_type: EEntType, id: number) {\r\n    //     const ents_i = this._model.modeldata.geom.query.getEnts(ent_type);\r\n    //     const index = ents_i.findIndex(ent_i => ent_i === id);\r\n    //     console.log('calling getIdIndex in GIATtribsThreejs', id, index);\r\n    //     return index;\r\n    // }\r\n}\r\n","import { GIModel } from './GIModel';\r\nimport { IGeomMaps, TVert, TWire, TColl, TPline, TEdge, TFace, TPgon, TEntTypeIdx, EEntType, TPoint } from './common';\r\nimport { GIGeomAdd } from './GIGeomAdd';\r\nimport { GIGeomModify } from './GIGeomModify';\r\nimport { GIGeomQuery } from './GIGeomQuery';\r\nimport { GIGeomThreejs } from './GIGeomThreejs';\r\nimport { GIGeomIO } from './GIGeomIO';\r\nimport { GIGeomDel } from './GIGeomDel';\r\nimport { GIGeomCheck } from './GIGeomCheck';\r\nimport { GIGeomCompare } from './GiGeomCompare';\r\nimport { GIGeomModifyPline } from './GIGeomModifyPline';\r\nimport { GIGeomModifyPgon } from './GIGeomModifyPgon';\r\nimport { GIGeomModifyColl } from './GIGeomModifyColl';\r\nimport { GIGeomNav } from './GIGeomNav';\r\nimport { GIGeomDelVert } from './GIGeomDelVert';\r\nimport { GIGeomDelEdge } from './GIGeomDelEdge';\r\nimport { GIModelData } from './GIModelData';\r\nimport { GIGeomTimeStamp } from './GIGeomTimeStamp';\r\n\r\n/**\r\n * Class for geometry.\r\n */\r\nexport class GIGeom {\r\n    public modeldata: GIModelData;\r\n    public selected: TEntTypeIdx[]; // entities that should become selected\r\n    //  all arrays\r\n    public _geom_maps: IGeomMaps = {  // TODO this should not be public\r\n        // num_posis: 0,\r\n        dn_verts_posis: new Map(),\r\n        dn_tris_verts: new Map(),\r\n        dn_edges_verts: new Map(),\r\n        dn_wires_edges: new Map(),\r\n        dn_faces_wires: new Map(),\r\n        dn_faces_tris: new Map(),\r\n        dn_points_verts: new Map(),\r\n        dn_plines_wires: new Map(),\r\n        dn_pgons_faces: new Map(),\r\n        dn_colls_objs: new Map(),\r\n        up_posis_verts: new Map(),\r\n        up_tris_faces: new Map(),\r\n        up_verts_edges: new Map(),\r\n        up_verts_tris: new Map(),\r\n        up_verts_points: new Map(),\r\n        up_edges_wires: new Map(),\r\n        up_wires_faces: new Map(),\r\n        up_wires_plines: new Map(),\r\n        up_faces_pgons: new Map(),\r\n        up_points_colls: new Map(),\r\n        up_plines_colls: new Map(),\r\n        up_pgons_colls: new Map(),\r\n        posis_ts: new Map(),\r\n        points_ts: new Map(),\r\n        plines_ts: new Map(),\r\n        pgons_ts: new Map(),\r\n        colls_ts: new Map()\r\n    };\r\n    // sub classes with methods\r\n    public io: GIGeomIO;\r\n    public add: GIGeomAdd;\r\n    public del: GIGeomDel;\r\n    public del_vert: GIGeomDelVert;\r\n    public del_edge: GIGeomDelEdge;\r\n    public modify: GIGeomModify;\r\n    public modify_pline: GIGeomModifyPline;\r\n    public modify_pgon: GIGeomModifyPgon;\r\n    public modify_coll: GIGeomModifyColl;\r\n    public nav: GIGeomNav;\r\n    public query: GIGeomQuery;\r\n    public check: GIGeomCheck;\r\n    public compare: GIGeomCompare;\r\n    public threejs: GIGeomThreejs;\r\n    public time_stamp: GIGeomTimeStamp;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(model: GIModelData) {\r\n        this.modeldata = model;\r\n        this.io = new GIGeomIO(this, this._geom_maps);\r\n        this.add = new GIGeomAdd(this, this._geom_maps);\r\n        this.del = new GIGeomDel(this, this._geom_maps);\r\n        this.del_vert = new GIGeomDelVert(this, this._geom_maps);\r\n        this.del_edge = new GIGeomDelEdge(this, this._geom_maps);\r\n        this.modify = new GIGeomModify(this, this._geom_maps);\r\n        this.modify_pline = new GIGeomModifyPline(this, this._geom_maps);\r\n        this.modify_pgon = new GIGeomModifyPgon(this, this._geom_maps);\r\n        this.modify_coll = new GIGeomModifyColl(this, this._geom_maps);\r\n        this.nav = new GIGeomNav(this, this._geom_maps);\r\n        this.query = new GIGeomQuery(this, this._geom_maps);\r\n        this.check = new GIGeomCheck(this, this._geom_maps);\r\n        this.compare = new GIGeomCompare(this, this._geom_maps);\r\n        this.threejs = new GIGeomThreejs(this, this._geom_maps);\r\n        this.time_stamp = new GIGeomTimeStamp(this, this._geom_maps);\r\n        this.selected = [];\r\n    }\r\n    /**\r\n     * Generate a string for debugging\r\n     */\r\n    public toStr(): string {\r\n        let result = '';\r\n        result += JSON.stringify(this.io.getJSONData());\r\n        return result;\r\n    }\r\n}\r\n","import { EEntType, TTri, TFace, Txyz, IGeomMaps, TAttribDataTypes } from './common';\r\nimport { triangulate } from '../triangulate/triangulate';\r\nimport { GIGeom } from './GIGeom';\r\nimport { vecAdd } from '../geom/vectors';\r\n\r\n/**\r\n * Class for geometry.\r\n */\r\nexport class GIGeomAdd {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    // ============================================================================\r\n    // Add geometry\r\n    // ============================================================================\r\n    /**\r\n     * Adds a new position to the model and returns the index to that position.\r\n     */\r\n    public addPosi(): number {\r\n        // create posi\r\n        const posi_i: number = this._addPosi();\r\n        return posi_i;\r\n    }\r\n    /**\r\n     * Adds a new point entity to the model.\r\n     * @param posi_i The position for the point.\r\n     */\r\n    public addPoint(posi_i: number): number {\r\n        // create vert\r\n        const vert_i = this._addVertex(posi_i);\r\n        // create point\r\n        const point_i: number = this._geom.modeldata.model.metadata.nextPoint();\r\n        this._geom_maps.dn_points_verts.set(point_i, vert_i);\r\n        this._geom_maps.up_verts_points.set(vert_i, point_i);\r\n        // time stamp\r\n        const ts: number = this._geom.modeldata.model.metadata.nextTimeStamp();\r\n        this._geom_maps.posis_ts.set(posi_i, ts);\r\n        return point_i;\r\n    }\r\n    /**\r\n     * Adds a new pline entity to the model using numeric indices.\r\n     * @param posis_i\r\n     */\r\n    public addPline(posis_i: number[], close: boolean = false): number {\r\n        // create verts, edges, wires\r\n        const vert_i_arr: number[] = posis_i.map( posi_i => this._addVertex(posi_i));\r\n        const edges_i_arr: number[] = [];\r\n        for (let i = 0; i < vert_i_arr.length - 1; i++) {\r\n            edges_i_arr.push( this._addEdge(vert_i_arr[i], vert_i_arr[i + 1]));\r\n        }\r\n        if (close) {\r\n            edges_i_arr.push( this._addEdge(vert_i_arr[vert_i_arr.length - 1], vert_i_arr[0]));\r\n        }\r\n        const wire_i: number = this._addWire(edges_i_arr, close);\r\n        // create pline\r\n        const pline_i: number = this._geom.modeldata.model.metadata.nextPline();\r\n        this._geom_maps.dn_plines_wires.set(pline_i, wire_i);\r\n        this._geom_maps.up_wires_plines.set(wire_i, pline_i);\r\n        return pline_i;\r\n    }\r\n    /**\r\n     * Adds a new polygon + hole entity to the model using numeric indices.\r\n     * @param posis_id\r\n     */\r\n    public addPgon(posis_i: number[], holes_posis_i?: number[][]): number {\r\n        const has_holes: boolean = (holes_posis_i !== undefined) && (holes_posis_i.length) ? true : false ;\r\n        // create verts, edges, wire for face\r\n        const vert_i_arr: number[] = posis_i.map( posi_i => this._addVertex(posi_i));\r\n        const edges_i_arr: number[] = [];\r\n        for (let i = 0; i < vert_i_arr.length - 1; i++) {\r\n            edges_i_arr.push( this._addEdge(vert_i_arr[i], vert_i_arr[i + 1]));\r\n        }\r\n        edges_i_arr.push( this._addEdge(vert_i_arr[vert_i_arr.length - 1], vert_i_arr[0]));\r\n        const wire_i: number = this._addWire(edges_i_arr, true);\r\n        let face_i: number;\r\n        if (has_holes) {\r\n        // create verts, edges, wire for holes\r\n            const holes_wires_i: number[] = [];\r\n            for (const hole_posis_i of holes_posis_i) {\r\n                const hole_vert_i_arr: number[] = hole_posis_i.map( posi_i => this._addVertex(posi_i));\r\n                const hole_edges_i_arr: number[] = [];\r\n                for (let i = 0; i < hole_vert_i_arr.length - 1; i++) {\r\n                    hole_edges_i_arr.push( this._addEdge(hole_vert_i_arr[i], hole_vert_i_arr[i + 1]));\r\n                }\r\n                hole_edges_i_arr.push( this._addEdge(hole_vert_i_arr[hole_vert_i_arr.length - 1], hole_vert_i_arr[0]));\r\n                const hole_wire_i: number = this._addWire(hole_edges_i_arr, true);\r\n                holes_wires_i.push(hole_wire_i);\r\n            }\r\n            // create the new face with a hole\r\n            face_i = this._addFaceWithHoles(wire_i, holes_wires_i);\r\n        } else {\r\n            face_i = this._addFace(wire_i);\r\n        }\r\n        // create polygon\r\n        const pgon_i: number = this._geom.modeldata.model.metadata.nextPgon();\r\n        this._geom_maps.dn_pgons_faces.set(pgon_i, face_i);\r\n        this._geom_maps.up_faces_pgons.set(face_i, pgon_i);\r\n        return pgon_i;\r\n    }\r\n    /**\r\n     * Adds a collection and updates the rev array using numeric indices.\r\n     * @param parent_i\r\n     * @param points_i\r\n     * @param plines_i\r\n     * @param pgons_i\r\n     */\r\n    public addColl(parent_i: number, points_i: number[], plines_i: number[], pgons_i: number[]): number {\r\n        parent_i = parent_i === null ? -1 : parent_i;\r\n        // create collection\r\n        const coll_i: number = this._geom.modeldata.model.metadata.nextColl();\r\n        this._geom_maps.dn_colls_objs.set(coll_i, [parent_i, points_i, plines_i, pgons_i]);\r\n        for (const point_i of points_i) {\r\n            if (!this._geom_maps.up_points_colls.has(point_i)) {\r\n                this._geom_maps.up_points_colls.set(point_i, [coll_i]);\r\n            } else {\r\n                this._geom_maps.up_points_colls.get(point_i).push(coll_i);\r\n            }\r\n        }\r\n        for (const pline_i of plines_i) {\r\n            if (!this._geom_maps.up_plines_colls.has(pline_i)) {\r\n                this._geom_maps.up_plines_colls.set(pline_i, [coll_i]);\r\n            } else {\r\n                this._geom_maps.up_plines_colls.get(pline_i).push(coll_i);\r\n            }\r\n        }\r\n        for (const pgon_i of pgons_i) {\r\n            if (!this._geom_maps.up_pgons_colls.has(pgon_i)) {\r\n                this._geom_maps.up_pgons_colls.set(pgon_i, [coll_i]);\r\n            } else {\r\n                this._geom_maps.up_pgons_colls.get(pgon_i).push(coll_i);\r\n            }\r\n        }\r\n        return coll_i;\r\n    }\r\n    // ============================================================================\r\n    // Copy geometry\r\n    // ============================================================================\r\n    /**\r\n     * Copy positions.\r\n     * @param posis_i\r\n     * @param copy_attribs\r\n     */\r\n    public copyMovePosis(posis_i: number|number[], move_vector: Txyz, copy_attribs: boolean): number|number[] {\r\n        if (!Array.isArray(posis_i)) {\r\n            const posi_i: number = posis_i as number;\r\n            const xyz: Txyz = this._geom.modeldata.attribs.query.getPosiCoords(posi_i);\r\n            const new_posi_i: number = this.addPosi();\r\n            this._geom.modeldata.attribs.add.setPosiCoords(new_posi_i, vecAdd(xyz, move_vector));\r\n            if (copy_attribs) {\r\n                const attrib_names: string[] = this._geom.modeldata.attribs.query.getAttribNames(EEntType.POSI);\r\n                for (const attrib_name of attrib_names) {\r\n                    if (attrib_name !== 'xyz') {\r\n                        const value: TAttribDataTypes =\r\n                            this._geom.modeldata.attribs.query.getAttribVal(EEntType.POSI, attrib_name, posis_i) as TAttribDataTypes;\r\n                        this._geom.modeldata.attribs.add.setEntAttribVal(EEntType.POSI, new_posi_i, attrib_name, value);\r\n                    }\r\n                }\r\n            }\r\n            return new_posi_i;\r\n        } else {\r\n            return (posis_i as number[]).map(posi_i => this.copyPosis(posi_i, copy_attribs)) as number[];\r\n        }\r\n    }\r\n    /**\r\n     * Copy positions.\r\n     * @param posis_i\r\n     * @param copy_attribs\r\n     */\r\n    public copyPosis(posis_i: number|number[], copy_attribs: boolean): number|number[] {\r\n        if (!Array.isArray(posis_i)) {\r\n            const posi_i: number = posis_i as number;\r\n            const xyz: Txyz = this._geom.modeldata.attribs.query.getPosiCoords(posi_i);\r\n            const new_posi_i: number = this.addPosi();\r\n            this._geom.modeldata.attribs.add.setPosiCoords(new_posi_i, xyz);\r\n            if (copy_attribs) {\r\n                const attrib_names: string[] = this._geom.modeldata.attribs.query.getAttribNames(EEntType.POSI);\r\n                for (const attrib_name of attrib_names) {\r\n                    const value: TAttribDataTypes =\r\n                        this._geom.modeldata.attribs.query.getAttribVal(EEntType.POSI, attrib_name, posis_i) as TAttribDataTypes;\r\n                    this._geom.modeldata.attribs.add.setEntAttribVal(EEntType.POSI, new_posi_i, attrib_name, value);\r\n                }\r\n            }\r\n            return new_posi_i;\r\n        } else {\r\n            return (posis_i as number[]).map(posi_i => this.copyPosis(posi_i, copy_attribs)) as number[];\r\n        }\r\n    }\r\n    /**\r\n     * Copy points.\r\n     * TODO copy attribs of topo entities\r\n     * @param index\r\n     * @param copy_attribs\r\n     */\r\n    public copyPoints(points_i: number|number[], copy_attribs: boolean): number|number[] {\r\n        // make copies\r\n        if (!Array.isArray(points_i)) {\r\n            const old_point_i: number = points_i as number;\r\n            const posis_i: number[] = this._geom.nav.navAnyToPosi(EEntType.POINT, old_point_i);\r\n            const new_point_i: number = this.addPoint(posis_i[0]);\r\n            if (copy_attribs) {\r\n                this._geom.modeldata.attribs.add.copyAttribs(EEntType.POINT, old_point_i, new_point_i);\r\n            }\r\n            return new_point_i;\r\n        } else { // An array of ent_i\r\n            return (points_i as number[]).map(point_i => this.copyPoints(point_i, copy_attribs)) as number[];\r\n        }\r\n    }\r\n    /**\r\n     * Copy plines.\r\n     * TODO copy attribs of topo entities\r\n     * @param index\r\n     * @param copy_attribs\r\n     */\r\n    public copyPlines(plines_i: number|number[], copy_attribs: boolean): number|number[] {\r\n        // make copies\r\n        if (!Array.isArray(plines_i)) {\r\n            const old_pline_i: number = plines_i as number;\r\n            const posis_i: number[] = this._geom.nav.navAnyToPosi(EEntType.PLINE, old_pline_i);\r\n            const wire_i: number = this._geom.nav.navPlineToWire(old_pline_i);\r\n            const is_closed: boolean = this._geom.query.isWireClosed(wire_i);\r\n            const new_pline_i: number = this.addPline(posis_i, is_closed);\r\n            if (copy_attribs) {\r\n                this._geom.modeldata.attribs.add.copyAttribs(EEntType.PLINE, old_pline_i, new_pline_i);\r\n            }\r\n            return new_pline_i;\r\n        } else { // An array of ent_i\r\n            return (plines_i as number[]).map(pline_i => this.copyPlines(pline_i, copy_attribs)) as number[];\r\n        }\r\n    }\r\n    /**\r\n     * Copy polygons.\r\n     * TODO copy attribs of topo entities\r\n     * @param index\r\n     * @param copy_attribs\r\n     */\r\n    public copyPgons(pgons_i: number|number[], copy_attribs: boolean): number|number[] {\r\n        // make copies\r\n        if (!Array.isArray(pgons_i)) {\r\n            const old_pgon_i: number = pgons_i as number;\r\n            const wires_i: number[] = this._geom.nav.navAnyToWire(EEntType.PGON, old_pgon_i);\r\n            const posis_i: number[] = this._geom.nav.navAnyToPosi(EEntType.WIRE, wires_i[0] as number);\r\n            let new_pgon_i: number;\r\n            if (wires_i.length === 1) {\r\n                new_pgon_i = this.addPgon(posis_i);\r\n            } else {\r\n                const holes_posis_i: number[][] = [];\r\n                for (let i = 1; i < wires_i.length; i++) {\r\n                    const hole_posis_i: number[] = this._geom.nav.navAnyToPosi(EEntType.WIRE, wires_i[i] as number);\r\n                    holes_posis_i.push(hole_posis_i);\r\n                }\r\n                new_pgon_i = this.addPgon(posis_i, holes_posis_i);\r\n            }\r\n            if (copy_attribs) {\r\n                this._geom.modeldata.attribs.add.copyAttribs(EEntType.PGON, old_pgon_i, new_pgon_i);\r\n            }\r\n            return new_pgon_i;\r\n        } else { // AN array of ent_i\r\n            return (pgons_i as number[]).map(pgon_i => this.copyPgons(pgon_i, copy_attribs)) as number[];\r\n        }\r\n    }\r\n   /**\r\n     * Copy a collection\r\n     * TODO Copy attribs of object and topo entities\r\n     * @param ent_type\r\n     * @param index\r\n     * @param copy_posis\r\n     * @param copy_attribs\r\n     */\r\n    public copyColls(colls_i: number|number[], copy_attribs: boolean): number|number[] {\r\n        // make copies\r\n        if (!Array.isArray(colls_i)) {\r\n            const old_coll_i: number = colls_i as number;\r\n            // make a deep copy of the objects in the collection\r\n            const points_i: number[] = this._geom.nav.navCollToPoint(old_coll_i);\r\n            const res1 = this.copyPoints(points_i, copy_attribs) as number[];\r\n            const plines_i: number[] = this._geom.nav.navCollToPline(old_coll_i);\r\n            const res2 = this.copyPlines(plines_i, copy_attribs) as number[];\r\n            const pgons_i: number[] = this._geom.nav.navCollToPgon(old_coll_i);\r\n            const res3 = this.copyPgons(pgons_i, copy_attribs) as number[];\r\n            const parent: number = this._geom.query.getCollParent(old_coll_i);\r\n            // add the new collection\r\n            const new_coll_i: number = this.addColl(parent, res1, res2, res3);\r\n            // copy the attributes from old collection to new collection\r\n            if (copy_attribs) {\r\n                this._geom.modeldata.attribs.add.copyAttribs(EEntType.COLL, old_coll_i, new_coll_i);\r\n            }\r\n            // return the new collection\r\n            return new_coll_i;\r\n        } else {\r\n            return (colls_i as number[]).map(coll_i => this.copyColls(coll_i, copy_attribs)) as number[];\r\n        }\r\n    }\r\n    // ============================================================================\r\n    // Methods to create the topological entities\r\n    // These methods have been made public for access from GIGeomModify\r\n    // They should not be called externally, hence the underscore.\r\n    // ============================================================================\r\n    /**\r\n     * Adds a position and updates the arrays.\r\n     */\r\n    public _addPosi(): number {\r\n        // in this case, there are no down arrays\r\n        // because posis are the bottom of the hierarchy\r\n        // update up arrays\r\n        const posi_i: number = this._geom.modeldata.model.metadata.nextPosi();\r\n        const ts: number = this._geom.modeldata.model.metadata.nextTimeStamp();\r\n        this._geom_maps.up_posis_verts.set(posi_i, []);\r\n        this._geom_maps.posis_ts.set(posi_i, ts);\r\n        // return the numeric index of the posi\r\n        return posi_i;\r\n    }\r\n    /**\r\n     * Adds a vertex and updates the arrays.\r\n     * @param posi_i\r\n     */\r\n    public _addVertex(posi_i: number): number {\r\n        // update down arrays\r\n        const vert_i: number = this._geom.modeldata.model.metadata.nextVert();\r\n        this._geom_maps.dn_verts_posis.set(vert_i, posi_i);\r\n        // update up arrays\r\n        this._geom_maps.up_posis_verts.get(posi_i).push(vert_i);\r\n        // return the numeric index of the vertex\r\n        return vert_i;\r\n    }\r\n    /**\r\n     * Adds an edge from v1 to v2 and updates the up and down arrays.\r\n     * Each vertex passed into this function can have zero or one edges.\r\n     * The new edge is added to v1 and v2\r\n     * Any existing edges are not affected\r\n     * @param vert_i1\r\n     * @param vert_i2\r\n     */\r\n    public _addEdge(vert_i1: number, vert_i2: number): number {\r\n        // update down arrays\r\n        const edge_i: number = this._geom.modeldata.model.metadata.nextEdge();\r\n        this._geom_maps.dn_edges_verts.set(edge_i, [vert_i1, vert_i2]);\r\n        // assume there are three edges, prev, edge_i, next\r\n        // for vert_i1, [prev, edge_i] or [edge_i]\r\n        // update up arrays for the start vertex\r\n        if (!this._geom_maps.up_verts_edges.has(vert_i1)) {\r\n            this._geom_maps.up_verts_edges.set(vert_i1, []);\r\n        }\r\n        switch (this._geom_maps.up_verts_edges.get(vert_i1).length) {\r\n            case 0:\r\n                this._geom_maps.up_verts_edges.set(vert_i1, [edge_i]); // [edge_i]\r\n                break;\r\n            case 1:\r\n                this._geom_maps.up_verts_edges.get(vert_i1)[1] = edge_i; // [prev, edge_i]\r\n                break;\r\n            case 2:\r\n                throw new Error('Vertex must have just zero or one edges.');\r\n            default:\r\n                throw new Error('Vertex has wrong number of edges.');\r\n        }\r\n        // for vert_i2, [edge_i, next] or [edge_i]\r\n        // update up arrays for the end vertex\r\n        if (!this._geom_maps.up_verts_edges.has(vert_i2)) {\r\n            this._geom_maps.up_verts_edges.set(vert_i2, []);\r\n        }\r\n        switch (this._geom_maps.up_verts_edges.get(vert_i2).length) {\r\n            case 0:\r\n                this._geom_maps.up_verts_edges.set(vert_i2, [edge_i]); // [edge_i]\r\n                break;\r\n            case 1:\r\n                const next_edge_i: number = this._geom_maps.up_verts_edges.get(vert_i2)[0];\r\n                this._geom_maps.up_verts_edges.set(vert_i2, [edge_i, next_edge_i]); // [edge_i, next]\r\n                break;\r\n            case 2:\r\n                throw new Error('Vertex must have just zero or one edges.');\r\n            default:\r\n                throw new Error('Vertex has wrong number of edges.');\r\n        }\r\n        // return the numeric index of the edge\r\n        return edge_i;\r\n    }\r\n    /**\r\n     * Adds a wire and updates the arrays.\r\n     * Edges are assumed to be sequential!\r\n     * @param edges_i\r\n     */\r\n    public _addWire(edges_i: number[], close: boolean = false): number {\r\n        // update down arrays\r\n        const wire_i: number = this._geom.modeldata.model.metadata.nextWire();\r\n        this._geom_maps.dn_wires_edges.set(wire_i, edges_i);\r\n        // update up arrays\r\n        edges_i.forEach( edge_i => this._geom_maps.up_edges_wires.set(edge_i, wire_i) );\r\n        // return the numeric index of the wire\r\n        return wire_i;\r\n    }\r\n    /**\r\n     * Adds a face and updates the arrays.\r\n     * Wires are assumed to be closed!\r\n     * This also calls addTris()\r\n     * @param wire_i\r\n     */\r\n    public _addFace(wire_i: number): number {\r\n        // create the triangles\r\n        const tris_i: number[] = this._addTris(wire_i);\r\n        // create the face\r\n        const face: TFace = [wire_i];\r\n        // update down arrays\r\n        const face_i: number = this._geom.modeldata.model.metadata.nextFace();\r\n        this._geom_maps.dn_faces_wires.set(face_i, face);\r\n        this._geom_maps.dn_faces_tris.set(face_i, tris_i);\r\n        // update up arrays\r\n        this._geom_maps.up_wires_faces.set(wire_i, face_i);\r\n        tris_i.forEach( tri_i => this._geom_maps.up_tris_faces.set(tri_i, face_i) );\r\n        // return the numeric index of the face\r\n        return face_i;\r\n    }\r\n    /**\r\n     * Adds a face with a hole and updates the arrays.\r\n     * Wires are assumed to be closed!\r\n     * This also calls addTris()\r\n     * @param wire_i\r\n     */\r\n    public _addFaceWithHoles(wire_i: number, holes_wires_i: number[]): number {\r\n        // create the triangles\r\n        const tris_i: number[] = this._addTris(wire_i, holes_wires_i);\r\n        // create the face\r\n        const face: TFace = [wire_i].concat(holes_wires_i);\r\n        // update down arrays\r\n        const face_i: number = this._geom.modeldata.model.metadata.nextFace();\r\n        this._geom_maps.dn_faces_wires.set(face_i, face);\r\n        this._geom_maps.dn_faces_tris.set(face_i, tris_i);\r\n        // update up arrays\r\n        face.forEach(face_wire_i => this._geom_maps.up_wires_faces.set(face_wire_i, face_i) );\r\n        tris_i.forEach( tri_i => this._geom_maps.up_tris_faces.set(tri_i, face_i) );\r\n        // return the numeric index of the face\r\n        return face_i;\r\n    }\r\n    /**\r\n     * Adds trangles and updates the arrays.\r\n     * Wires are assumed to be closed!\r\n     * This updates the trie->verts and the verts->tris\r\n     * This does not update the face to which this wire belongs!\r\n     * @param wire_i\r\n     */\r\n    public _addTris(wire_i: number, hole_wires_i?: number[]): number[] {\r\n        // save all verts\r\n        const all_verts_i: number[] = [];\r\n        // get the coords of the outer perimeter edge\r\n        const wire_verts_i: number[] = this._geom.nav.navAnyToVert(EEntType.WIRE, wire_i);\r\n        wire_verts_i.forEach(wire_vert_i => all_verts_i.push(wire_vert_i));\r\n        const wire_posis_i: number[] = wire_verts_i.map(\r\n            vert_i => this._geom_maps.dn_verts_posis.get(vert_i) );\r\n        const wire_coords: Txyz[] = wire_posis_i.map(\r\n            posi_i => this._geom.modeldata.attribs.query.getPosiCoords(posi_i) );\r\n        // get the coords of the holes\r\n        const all_hole_coords: Txyz[][] = [];\r\n        if (hole_wires_i !== undefined) {\r\n            for (const hole_wire_i of hole_wires_i) {\r\n                const hole_wire_verts_i: number[] = this._geom.nav.navAnyToVert(EEntType.WIRE, hole_wire_i);\r\n                hole_wire_verts_i.forEach(wire_vert_i => all_verts_i.push(wire_vert_i));\r\n                const hole_wire_posis_i: number[] = hole_wire_verts_i.map(\r\n                    vert_i => this._geom_maps.dn_verts_posis.get(vert_i) );\r\n                const hole_wire_coords: Txyz[] = hole_wire_posis_i.map(\r\n                    posi_i => this._geom.modeldata.attribs.query.getPosiCoords(posi_i) );\r\n                all_hole_coords.push(hole_wire_coords);\r\n            }\r\n        }\r\n        // create the triangles\r\n        const tris_corners: number[][] = triangulate(wire_coords, all_hole_coords);\r\n        const tris_verts_i: TTri[] = tris_corners.map(\r\n            tri_corners => tri_corners.map( corner => all_verts_i[corner] ) as TTri );\r\n        // update down arrays, tris->verts\r\n        const tris_i: number[] = [];\r\n        for (const tri_verts_i of tris_verts_i) {\r\n            const tri_i: number = this._geom.modeldata.model.metadata.nextTri();\r\n            this._geom_maps.dn_tris_verts.set(tri_i, tri_verts_i);\r\n            tris_i.push(tri_i);\r\n        }\r\n        // update up arrays, verts->tris\r\n        for (let i = 0; i < tris_verts_i.length; i++) {\r\n            const tri_verts_i: TTri = tris_verts_i[i];\r\n            const tri_i: number = tris_i[i];\r\n            for (const tri_vert_i of tri_verts_i) {\r\n                if (!this._geom_maps.up_verts_tris.has(tri_vert_i) ) {\r\n                    this._geom_maps.up_verts_tris.set(tri_vert_i, []);\r\n                }\r\n                this._geom_maps.up_verts_tris.get(tri_vert_i).push(tri_i);\r\n            }\r\n        }\r\n        // return an array of numeric indices of the triangles\r\n        return tris_i;\r\n    }\r\n}\r\n","import { IGeomMaps, TVert, TWire, TColl, TPline, TEdge, TFace, TPgon, TPoint } from './common';\r\nimport { GIGeom } from './GIGeom';\r\n\r\n\r\n/**\r\n * Class for geometry.\r\n */\r\nexport class GIGeomCheck {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    /**\r\n     * Checks geometry for internal consistency\r\n     */\r\n    public check(): string[] {\r\n        const errors: string[] = [];\r\n        this._checkPosis().forEach( error => errors.push(error) );\r\n        this._checkVerts().forEach( error => errors.push(error) );\r\n        this._checkEdges().forEach( error => errors.push(error) );\r\n        this._checkWires().forEach( error => errors.push(error) );\r\n        this._checkFaces().forEach( error => errors.push(error) );\r\n        this._checkPoints().forEach( error => errors.push(error) );\r\n        this._checkPlines().forEach( error => errors.push(error) );\r\n        this._checkPgons().forEach( error => errors.push(error) );\r\n        this._checkEdgeOrder().forEach( error => errors.push(error) );\r\n        return errors;\r\n    }\r\n    /**\r\n     * Checks geometry for internal consistency\r\n     */\r\n    private _checkPosis(): string[] {\r\n        const errors: string[] = [];\r\n        this._geom_maps.up_posis_verts.forEach( (verts_i, posi_i) => {\r\n            // up\r\n            if (verts_i === null) { errors.push('Posi ' + posi_i + ': null.'); return; }\r\n            // down\r\n            for (const vert_i of verts_i) {\r\n                const vert: TVert = this._geom_maps.dn_verts_posis.get(vert_i);\r\n                if (vert === undefined ) { errors.push('Posi ' + posi_i + ': Vert->Posi undefined.'); }\r\n                if (vert === null ) { errors.push('Posi ' + posi_i + ': Vert->Posi null.'); }\r\n            }\r\n        });\r\n        return errors;\r\n    }\r\n    private _checkVerts(): string[] {\r\n        const errors: string[] = [];\r\n        this._geom_maps.dn_verts_posis.forEach( (vert, vert_i) => {\r\n            // check the vert itself\r\n            if (vert === null) { errors.push('Vert ' + vert_i + ': null.'); return; } // deleted\r\n            // check the position\r\n            const posi_i: number = vert;\r\n            // check that the position points up to this vertex\r\n            const verts_i: number[] = this._geom_maps.up_posis_verts.get(posi_i);\r\n            if (verts_i.indexOf(vert_i) === -1) {\r\n                errors.push('Vert ' + vert_i + ': Posi->Vert index is missing.');\r\n            }\r\n            // check if the parent is a popint or edge\r\n            const point_i: number = this._geom_maps.up_verts_points.get(vert_i);\r\n            const edges_i: number[] = this._geom_maps.up_verts_edges.get(vert_i);\r\n            if (point_i !== undefined && edges_i !== undefined) {\r\n                errors.push('Vert ' + vert_i + ': Both Vert->Edge and Vert->Point.');\r\n            }\r\n            if (point_i !== undefined) {\r\n                // up for points\r\n                if (point_i === undefined) {\r\n                    errors.push('Vert ' + vert_i + ': Vert->Point undefined.');\r\n                    return;\r\n                }\r\n                if (point_i === null) {\r\n                    errors.push('Vert ' + vert_i + ': Vert->Point null.');\r\n                    return;\r\n                }\r\n                // down for points\r\n                const point: TPoint = this._geom_maps.dn_points_verts.get(point_i);\r\n                if (point === undefined) {\r\n                    errors.push('Vert ' + vert_i + ': Point->Vert undefined.');\r\n                }\r\n                if (point === null) {\r\n                    errors.push('Vert ' + vert_i + ': Point->Vert null.');\r\n                }\r\n                // check this point points to this vertex\r\n                if (point !== vert_i) {\r\n                    errors.push('Vert ' + vert_i + ': Point->Vert index is incorrect.');\r\n                }\r\n            } else if (edges_i !== undefined) {\r\n                // up for edges\r\n                if (edges_i === undefined) {\r\n                    errors.push('Vert ' + vert_i + ': Vert->Edge undefined.');\r\n                    return;\r\n                }\r\n                if (edges_i === null) {\r\n                    errors.push('Vert ' + vert_i + ': Vert->Edge null.');\r\n                    return;\r\n                }\r\n                if (edges_i.length > 2) { errors.push('Vert ' + vert_i + ': Vert->Edge has more than two edges.'); }\r\n                for (const edge_i of edges_i) {\r\n                    if (edge_i === undefined) {\r\n                        errors.push('Vert ' + vert_i + ': Vert->Edge undefined.');\r\n                    }\r\n                    if (edge_i === null) {\r\n                        errors.push('Vert ' + vert_i + ': Vert->Edge null.');\r\n                    }\r\n                    // down for edges\r\n                    const edge: TEdge = this._geom_maps.dn_edges_verts.get(edge_i);\r\n                    if (edge === undefined) {\r\n                        errors.push('Vert ' + vert_i + ': Edge->Vert undefined.');\r\n                    } else if (edge === null) {\r\n                        errors.push('Vert ' + vert_i + ': Edge->Vert null.');\r\n                    } else {\r\n                        // check the egde points down to this vertex\r\n                        if (edge.indexOf(vert_i) === -1) {\r\n                            errors.push('Vert ' + vert_i + ': Edge->Vert index is missing.');\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                errors.push('Vert ' + vert_i + ': Both Vert->Edge and Vert->Point undefined.');\r\n            }\r\n        });\r\n        return errors;\r\n    }\r\n    private _checkEdges(): string[] {\r\n        const errors: string[] = [];\r\n        this._geom_maps.dn_edges_verts.forEach( (edge, edge_i) => {\r\n            // check the edge itself\r\n            if (edge === null) { errors.push('Edge ' + edge_i + ': null.'); return; }\r\n            if (edge.length > 2) { errors.push('Edge ' + edge_i + ': Edge has more than two vertices.'); }\r\n            // down from edge to vertices\r\n            const verts_i: number[] = edge;\r\n            for (const vert_i of verts_i)   {\r\n                // check the vertex\r\n                if (vert_i === undefined) {\r\n                    errors.push('Edge ' + edge_i + ': Edge->Vert undefined.');\r\n                } else if (vert_i === null) {\r\n                    errors.push('Edge ' + edge_i + ': Edge->Vert null.');\r\n                } else {\r\n                    // check the vert points up to this edge\r\n                    const vert_edges_i: number[] = this._geom_maps.up_verts_edges.get(vert_i);\r\n                    if (vert_edges_i.indexOf(edge_i) === -1) {\r\n                        errors.push('Edge ' + edge_i + ': Vert->Edge index is missing.');\r\n                    }\r\n                }\r\n            }\r\n            // up from edge to wire\r\n            const wire_i: number = this._geom_maps.up_edges_wires.get(edge_i);\r\n            if (wire_i === undefined) { return; } // no wire, must be a point\r\n            if (wire_i === null) { errors.push('Edge ' + edge_i + ': Edge->Wire null.'); }\r\n            // check the wire\r\n            const wire: TWire = this._geom_maps.dn_wires_edges.get(wire_i);\r\n            if (wire === undefined) {\r\n                errors.push('Edge ' + edge_i + ': Wire->Edge undefined.');\r\n            } else if (wire === null) {\r\n                errors.push('Edge ' + edge_i + ': Wire->Edge null.');\r\n            } else {\r\n                // check the wire points down to this edge\r\n                if (wire.indexOf(edge_i) === -1) {\r\n                    errors.push('Edge ' + edge_i + ': Wire->Edge index is missing.');\r\n                }\r\n            }\r\n        });\r\n        return errors;\r\n    }\r\n    private _checkWires(): string[] {\r\n        const errors: string[] = [];\r\n        this._geom_maps.dn_wires_edges.forEach( (wire, wire_i) => {\r\n            // check the wire itself\r\n            if (wire === null) { errors.push('Wire ' + wire_i + ': null.'); return; } // deleted\r\n            // down from wire to edges\r\n            const edges_i: number[] = wire;\r\n            for (const edge_i of edges_i) {\r\n                // check the edge\r\n                if (edge_i === undefined) {\r\n                    errors.push('Wire ' + wire_i + ': Wire->Edge undefined.');\r\n                } else if (edge_i === null) {\r\n                    errors.push('Wire ' + wire_i + ': Wire->Edge null.');\r\n                } else {\r\n                    // check the edge points up to this wire\r\n                    const edge_wire_i: number = this._geom_maps.up_edges_wires.get(edge_i);\r\n                    if (edge_wire_i !== wire_i) {\r\n                        errors.push('Wire ' + wire_i + ': Edge->Wire index is incorrect.');\r\n                    }\r\n                }\r\n            }\r\n            // up from wire to face or pline\r\n            const face_i: number = this._geom_maps.up_wires_faces.get(wire_i);\r\n            const pline_i: number = this._geom_maps.up_wires_plines.get(wire_i);\r\n            if (face_i !== undefined && pline_i !== undefined) {\r\n                // errors.push('Wire ' + wire_i + ': Both Wire->Face and Wire->Pline.');\r\n            }\r\n            if (face_i !== undefined) {\r\n                if (face_i === null) {\r\n                    errors.push('Wire ' + wire_i + ': Wire->Face null.');\r\n                }\r\n                // down from face to wires (and tris)\r\n                const face: TFace = this._geom_maps.dn_faces_wires.get(face_i);\r\n                if (face === undefined) {\r\n                    errors.push('Wire ' + wire_i + ': Face->Wire undefined.');\r\n                } else if (face === null) {\r\n                    errors.push('Wire ' + wire_i + ': Face->Wire null.');\r\n                } else {\r\n                    // check that this face points down to the wire\r\n                    if (face.indexOf(wire_i) === -1) {\r\n                        errors.push('Wire ' + wire_i + ': Face->Wire index is missing.');\r\n                    }\r\n                }\r\n            } else if (pline_i !== undefined) {\r\n                if (pline_i === null) {\r\n                    errors.push('Wire ' + wire_i + ': Wire->Pline null.');\r\n                }\r\n                // down from pline to wire\r\n                const pline: TPline = this._geom_maps.dn_plines_wires.get(pline_i);\r\n                if (pline === undefined) {\r\n                    errors.push('Wire ' + wire_i + ': Pline->Wire undefined.');\r\n                } else if (pline === null) {\r\n                    errors.push('Wire ' + wire_i + ': Pline->Wire null.');\r\n                } else {\r\n                    // check that this pline points down to the wire\r\n                    if (pline !== wire_i) {\r\n                        errors.push('Wire ' + wire_i + ': Pline->Wire index is incorrect.');\r\n                    }\r\n                }\r\n            } else {\r\n                errors.push('Wire ' + wire_i + ': Both Wire->Face and Wire->Pline undefined.');\r\n            }\r\n        });\r\n        return errors;\r\n    }\r\n    private _checkFaces(): string[] {\r\n        const errors: string[] = [];\r\n        this._geom_maps.dn_faces_wires.forEach( (face, face_i) => {\r\n            // check this face itself\r\n            if (face === null) { errors.push('Face ' + face_i + ': null.'); return; } // deleted\r\n            // down from face to wires\r\n            const wires_i: number[] = face;\r\n            for (const wire_i of wires_i) {\r\n                // check the wire\r\n                if (wire_i === undefined) {\r\n                    errors.push('Face ' + face_i + ': Face->Wire undefined.');\r\n                } else if (wire_i === null) {\r\n                    errors.push('Face ' + face_i + ': Face->Wire null.');\r\n                } else {\r\n                    // check the wire points up to this face\r\n                    const wire_face_i: number = this._geom_maps.up_wires_faces.get(wire_i);\r\n                    if (wire_face_i !== face_i) {\r\n                        errors.push('Face ' + face_i + ': Wire->Face index is incorrect.');\r\n                    }\r\n                }\r\n            }\r\n            // up from face to pgon\r\n            const pgon_i: number = this._geom_maps.up_faces_pgons.get(face_i);\r\n            if (pgon_i === undefined) {\r\n                errors.push('Face ' + face_i + ': Face->Pgon undefined.');\r\n            } else if (pgon_i === null) {\r\n                errors.push('Face ' + face_i + ': Face->Pgon null.');\r\n            }\r\n            // down from pgon to face\r\n            const pgon: TPgon = this._geom_maps.dn_pgons_faces.get(pgon_i);\r\n            if (pgon === undefined) {\r\n                errors.push('Face ' + face_i + ': Pgon->Face undefined.');\r\n            } else if (pgon === null) {\r\n                errors.push('Face ' + face_i + ': Pgon->Face null.');\r\n            } else {\r\n                // check that this pgon points down to this face\r\n                if (pgon !== face_i) {\r\n                    errors.push('Face ' + face_i + ': Pgon->Face index is incorrect.');\r\n                }\r\n            }\r\n        });\r\n        this._geom_maps.dn_faces_tris.forEach( (facetris, face_i) => {\r\n            // check this face itself\r\n            if (facetris === null) { errors.push('Face ' + face_i + ': null.'); return; } // deleted\r\n            // down from face to triangles\r\n            const tris_i: number[] = facetris;\r\n            for (const tri_i of tris_i) {\r\n                // check the wire\r\n                if (tri_i === undefined) {\r\n                    errors.push('Face ' + face_i + ': Face->Tri undefined.');\r\n                } else if (tri_i === null) {\r\n                    errors.push('Face ' + face_i + ': Face->Tri null.');\r\n                } else {\r\n                    // check the tri points up to this face\r\n                    const tri_face_i: number = this._geom_maps.up_tris_faces.get(tri_i);\r\n                    if (tri_face_i !== face_i) {\r\n                        errors.push('Face ' + face_i + ': Tri->Face index is incorrect.');\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return errors;\r\n    }\r\n    private _checkPoints(): string[] {\r\n        const errors: string[] = [];\r\n        this._geom_maps.dn_points_verts.forEach( (point, point_i) => {\r\n            // check the point itself\r\n            if (point === null) { errors.push('Point ' + point_i + ': null.'); return; } // deleted\r\n            // down from point to vertex\r\n            const vert_i: number = point;\r\n            // check that the vertex points up to this point\r\n            const vertex_point_i: number = this._geom_maps.up_verts_points.get(vert_i);\r\n            if (vertex_point_i !== point_i) {\r\n                errors.push('Point ' + point_i + ': Vertex->Point index is incorrect.');\r\n            }\r\n            // up from point to coll\r\n            const colls_i: number[] = this._geom_maps.up_points_colls.get(point_i);\r\n            if (colls_i === undefined) { return; } // not in coll\r\n            for (const coll_i of colls_i) {\r\n                if (coll_i === undefined) {\r\n                    errors.push('Point ' + point_i + ': Point->Coll undefined.');\r\n                }\r\n                if (coll_i === null) {\r\n                    errors.push('Point ' + point_i + ': Point->Coll null.');\r\n                }\r\n                // down from coll to points\r\n                const coll: TColl = this._geom_maps.dn_colls_objs.get(coll_i);\r\n                if (coll === undefined) { errors.push('Point ' + point_i + ': Coll->Objs undefined.'); }\r\n                if (coll === null) { errors.push('Point ' + point_i + ': Coll->Objs null.'); }\r\n                if (coll[1].indexOf(point_i) === -1) {\r\n                    errors.push('Point ' + point_i + ': Coll->Point missing.');\r\n                }\r\n            }\r\n        });\r\n        return errors;\r\n    }\r\n    private _checkPlines(): string[] {\r\n        const errors: string[] = [];\r\n        this._geom_maps.dn_plines_wires.forEach( (pline, pline_i) => {\r\n            // check the pline itself\r\n            if (pline === null) { errors.push('Pline ' + pline_i + ': null.'); return; } // deleted\r\n            // down from pline to wire\r\n            const wire_i: number = pline;\r\n            // check that the wire points up to this pline\r\n            const wire_pline_i: number = this._geom_maps.up_wires_plines.get(wire_i);\r\n            if (wire_pline_i !== pline_i) {\r\n                errors.push('Pline ' + pline_i + ': Wire->Pline index is incorrect.');\r\n            }\r\n            // up from pline to coll\r\n            const colls_i: number[] = this._geom_maps.up_plines_colls.get(pline_i);\r\n            if (colls_i === undefined) { return; } // not in coll\r\n            for (const coll_i of colls_i) {\r\n                if (coll_i === undefined) {\r\n                    errors.push('Pline ' + pline_i + ': Pline->Coll undefined.');\r\n                }\r\n                if (coll_i === null) {\r\n                    errors.push('Pline ' + pline_i + ': Pline->Coll null.');\r\n                }\r\n                // down from coll to plines\r\n                const coll: TColl = this._geom_maps.dn_colls_objs.get(coll_i);\r\n                if (coll === undefined) { errors.push('Pline ' + pline_i + ': Coll->Objs undefined.'); }\r\n                if (coll === null) { errors.push('Pline ' + pline_i + ': Coll->Objs null.'); }\r\n                if (coll[2].indexOf(pline_i) === -1) {\r\n                    errors.push('Pline ' + pline_i + ': Coll->Pline missing.');\r\n                }\r\n            }\r\n        });\r\n        return errors;\r\n    }\r\n    private _checkPgons(): string[] {\r\n        const errors: string[] = [];\r\n        this._geom_maps.dn_pgons_faces.forEach( (pgon, pgon_i) => {\r\n            // check the pgon itself\r\n            if (pgon === undefined) { return; }\r\n            if (pgon === null) { errors.push('Pgon ' + pgon_i + ': null.'); return; } // deleted\r\n            // down from pgon to face\r\n            const face_i: number = pgon;\r\n            // check that the face points up to this pgon\r\n            const face_pgon_i: number = this._geom_maps.up_faces_pgons.get(face_i);\r\n            if (face_pgon_i !== pgon_i) {\r\n                errors.push('Pgon ' + pgon_i + ': Face->Pgon index is incorrect.');\r\n            }\r\n            // up from pgon to coll\r\n            const colls_i: number[] = this._geom_maps.up_pgons_colls.get(pgon_i);\r\n            if (colls_i === undefined) { return; } // not in coll\r\n            for (const coll_i of colls_i) {\r\n                if (coll_i === undefined) {\r\n                    errors.push('Pgon ' + pgon_i + ': Pgon->Coll undefined.');\r\n                }\r\n                if (coll_i === null) {\r\n                    errors.push('Pgon ' + pgon_i + ': Pgon->Coll null.');\r\n                }\r\n                // down from coll to pgons\r\n                const coll: TColl = this._geom_maps.dn_colls_objs.get(coll_i);\r\n                if (coll === undefined) { errors.push('Pgon ' + pgon_i + ': Coll->Objs undefined.'); }\r\n                if (coll === null) { errors.push('Pgon ' + pgon_i + ': Coll->Objs null.'); }\r\n                if (coll[3].indexOf(pgon_i) === -1) {\r\n                    errors.push('Pgon ' + pgon_i + ': Coll->Pgon missing.');\r\n                }\r\n            }\r\n        });\r\n        return errors;\r\n    }\r\n    private _checkEdgeOrder(): string[] {\r\n        const errors: string[] = [];\r\n        this._geom_maps.dn_wires_edges.forEach( (wire, wire_i) => {\r\n            // down\r\n            if (wire === null) { errors.push('Wire ' + wire_i + ': null.'); return; }\r\n            // check if this is closed or open\r\n            const first_edge: TEdge = this._geom_maps.dn_edges_verts.get(wire[0]);\r\n            const first_vert_i: number = first_edge[0];\r\n            const last_edge: TEdge = this._geom_maps.dn_edges_verts.get(wire[wire.length - 1]);\r\n            const last_vert_i: number = last_edge[1];\r\n            const is_closed: boolean = (first_vert_i === last_vert_i);\r\n            if (!is_closed) {\r\n                if (this._geom_maps.up_verts_edges.get(first_edge[0]).length !== 1) {\r\n                    errors.push('Open wire ' + wire_i + ': First vertex does not have one edge.');\r\n                }\r\n                if (this._geom_maps.up_verts_edges.get(last_edge[1]).length !== 1) {\r\n                    errors.push('Open wire ' + wire_i + ': Last vertex does not have one edge.');\r\n                }\r\n            }\r\n            // console.log(\"==== ==== ====\")\r\n            // console.log(\"WIRE i\", wire_i, \"WIRE\", wire)\r\n            // check the edges of each vertex\r\n            for (const edge_i of wire) {\r\n                const edge: TEdge = this._geom_maps.dn_edges_verts.get(edge_i);\r\n                const start_vert_i = edge[0];\r\n                const end_vert_i = edge[1];\r\n                // console.log(\"====\")\r\n                // console.log(\"EDGE i\", edge_i, \"EDGE\", edge)\r\n                // console.log(\"VERT START\", start_vert_i)\r\n                // console.log(\"VERT END\", end_vert_i)\r\n                let exp_num_edges_vert0 = 2;\r\n                let exp_num_edges_vert1 = 2;\r\n                let start_idx = 1;\r\n                let end_idx = 0;\r\n                if (!is_closed) {\r\n                    if (edge_i === wire[0]) { // first edge\r\n                        exp_num_edges_vert0 = 1;\r\n                        start_idx = 0;\r\n                    }\r\n                    if (edge_i === wire[wire.length - 1]) { // last edge\r\n                        exp_num_edges_vert1 = 1;\r\n                        end_idx = 0;\r\n                    }\r\n                }\r\n                // check the start vertex\r\n                const start_vert_edges_i: number[] = this._geom_maps.up_verts_edges.get(start_vert_i);\r\n                // console.log(\"START VERT EDGES\", start_vert_edges_i)\r\n                if (start_vert_edges_i.length !== exp_num_edges_vert0 ) {\r\n                    errors.push('Wire ' + wire_i + ' Edge ' + edge_i + ' Vert ' + start_vert_i +\r\n                        ': Start vertex does not have correct number of edges.');\r\n                }\r\n                if (start_vert_edges_i[start_idx] !== edge_i) {\r\n                    errors.push('Wire ' + wire_i + ' Edge ' + edge_i + ' Vert ' + start_vert_i +\r\n                        ': Vertex edges are in the wrong order.');\r\n                }\r\n                // check the end vertex\r\n                const end_vert_edges_i: number[] = this._geom_maps.up_verts_edges.get(end_vert_i);\r\n                // console.log(\"END VERT EDGES\", end_vert_edges_i)\r\n                if (end_vert_edges_i.length !== exp_num_edges_vert1 ) {\r\n                    errors.push('Wire ' + wire_i + ' Edge ' + edge_i + ' Vert ' + start_vert_i +\r\n                        ': End vertex does not have correct number of edges.');\r\n                }\r\n                if (end_vert_edges_i[end_idx] !== edge_i) {\r\n                    errors.push('Wire ' + wire_i + ' Edge ' + edge_i + ' Vert ' + end_vert_i +\r\n                        ': Vertex edges are in the wrong order.');\r\n                }\r\n            }\r\n        });\r\n        return errors;\r\n    }\r\n}\r\n","import { EEntType, IGeomMaps, TColl, IEntSets } from './common';\r\nimport { GIGeom } from './GIGeom';\r\nimport { arrRem, arrIdxAdd } from '../util/arrs';\r\nimport { vecDot } from '../geom/vectors';\r\n\r\n/**\r\n * Class for deleting geometry.\r\n */\r\nexport class GIGeomDel {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    // ============================================================================\r\n    // Delete geometry\r\n    // ============================================================================\r\n    /**\r\n     * Delete ents\r\n     * @param ent_sets\r\n     */\r\n    public del(ent_sets: IEntSets): void {\r\n        // delete the ents\r\n        this.delColls(Array.from(ent_sets.colls_i), true);\r\n        this.delPgons(Array.from(ent_sets.pgons_i), true);\r\n        this.delPlines(Array.from(ent_sets.plines_i), true);\r\n        this.delPoints(Array.from(ent_sets.points_i), true);\r\n        this.delPosis(Array.from(ent_sets.posis_i));\r\n        this.delUnusedPosis(Array.from(ent_sets.obj_posis_i));\r\n    }\r\n    /**\r\n     * Del all unused posis in the model.\r\n     * Posi attributes will also be deleted.\r\n     * @param posis_i\r\n     */\r\n    public delUnusedPosis(posis_i: number|number[]): void {\r\n        // create array\r\n        posis_i = (Array.isArray(posis_i)) ? posis_i : [posis_i];\r\n        if (posis_i.length === 0) { return; }\r\n        // loop\r\n        const deleted_posis_i: number[] = [];\r\n        for (const posi_i of posis_i) {\r\n            if (!this._geom_maps.up_posis_verts.has(posi_i)) { continue; } // already deleted\r\n            // update up arrays\r\n            const verts_i: number[] = this._geom_maps.up_posis_verts.get(posi_i);\r\n            if ( verts_i.length === 0) { // only delete posis with no verts\r\n                this._geom_maps.up_posis_verts.delete(posi_i);\r\n                this._geom_maps.posis_ts.delete(posi_i);\r\n                deleted_posis_i.push(posi_i);\r\n            }\r\n            // no need to update down arrays\r\n            // del time stamp\r\n            this._geom.time_stamp.delEntTs(EEntType.POSI, posi_i);\r\n        }\r\n        // delete all the posi attributes, for all posis that were deleted\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.POSI, deleted_posis_i);\r\n    }\r\n    /**\r\n     * Del posis.\r\n     * Posi attributes will also be deleted.\r\n     * @param posis_i\r\n     */\r\n    public delPosis(posis_i: number|number[]): void {\r\n        // create array\r\n        posis_i = (Array.isArray(posis_i)) ? posis_i : [posis_i];\r\n        if (posis_i.length === 0) { return; }\r\n        // loop\r\n        const deleted_posis_i: number[] = [];\r\n        for (const posi_i of posis_i) {\r\n            if (!this._geom_maps.up_posis_verts.has(posi_i)) { continue; } // already deleted\r\n            // delete all verts for this posi\r\n            const copy_verts_i: number[] = this._geom_maps.up_posis_verts.get(posi_i).slice(); // make a copy\r\n            copy_verts_i.forEach(vert_i => this._geom.del_vert.delVert(vert_i));\r\n            // delete the posi\r\n            this._geom_maps.up_posis_verts.delete(posi_i);\r\n            this._geom_maps.posis_ts.delete(posi_i);\r\n            deleted_posis_i.push(posi_i);\r\n            // no need to update down arrays\r\n            // del time stamp\r\n            this._geom.time_stamp.delEntTs(EEntType.POSI, posi_i);\r\n        }\r\n        // delete all the posi attributes, for all posis that were deleted\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.POSI, deleted_posis_i);\r\n    }\r\n    /**\r\n     * Del points.\r\n     * Point attributes will also be deleted.\r\n     * @param points_i\r\n     */\r\n    public delPoints(points_i: number|number[], del_unused_posis: boolean): void {\r\n        // create array\r\n        points_i = (Array.isArray(points_i)) ? points_i : [points_i];\r\n        if (!points_i.length) { return; }\r\n        // del attribs\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.POINT, points_i);\r\n        // loop\r\n        for (const point_i of points_i) {\r\n            // first get all the arrays so we dont break navigation\r\n            const vert_i: number = this._geom_maps.dn_points_verts.get(point_i);\r\n            if (vert_i === undefined) { continue; } // already deleted\r\n            const posi_i: number = this._geom_maps.dn_verts_posis.get(vert_i);\r\n            // delete the point and check collections\r\n            this._geom_maps.dn_points_verts.delete(point_i);\r\n            this._geom_maps.dn_points_verts.delete(point_i);\r\n            this._geom_maps.dn_colls_objs.forEach( coll => {\r\n                const coll_points_i: number[] = coll[1];\r\n                arrRem(coll_points_i, point_i);\r\n            });\r\n            // delete the vert by setting the up and down arrays to undefined\r\n            this._geom_maps.dn_verts_posis.delete(vert_i);\r\n            this._geom_maps.up_verts_points.delete(vert_i);\r\n            // remove the vert from up_posis_verts\r\n            const posi_verts_i: number[] = this._geom_maps.up_posis_verts.get(posi_i);\r\n            arrRem(posi_verts_i, vert_i);\r\n            // delete unused posis\r\n            if (del_unused_posis) {\r\n                this.delUnusedPosis(posi_i);\r\n            }\r\n            // del time stamp\r\n            this._geom.time_stamp.delEntTs(EEntType.POINT, point_i);\r\n        }\r\n    }\r\n    /**\r\n     * Del plines.\r\n     * Pline attributes will also be deleted.\r\n     * @param plines_i\r\n     */\r\n    public delPlines(plines_i: number|number[], del_unused_posis: boolean): void {\r\n        // del attribs\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.PLINE, plines_i);\r\n        // create array\r\n        plines_i = (Array.isArray(plines_i)) ? plines_i : [plines_i];\r\n        if (!plines_i.length) { return; }\r\n        // loop\r\n        for (const pline_i of plines_i) {\r\n            // first get all the arrays so we dont break navigation\r\n            const wire_i: number = this._geom_maps.dn_plines_wires.get(pline_i);\r\n            if (wire_i === undefined) { continue; } // already deleted\r\n            const edges_i: number[] = this._geom.nav.navAnyToEdge(EEntType.PLINE, pline_i);\r\n            const verts_i: number[] = this._geom.nav.navAnyToVert(EEntType.PLINE, pline_i);\r\n            const posis_i: number[] = this._geom.nav.navAnyToPosi(EEntType.PLINE, pline_i);\r\n            // delete the pline and check collections\r\n            this._geom_maps.dn_plines_wires.delete(pline_i);\r\n            this._geom_maps.up_plines_colls.delete(pline_i);\r\n            this._geom_maps.dn_colls_objs.forEach( coll => {\r\n                const coll_plines_i: number[] = coll[2];\r\n                arrRem(coll_plines_i, pline_i);\r\n            });\r\n            // delete the wire\r\n            this._geom_maps.dn_wires_edges.delete(wire_i);\r\n            this._geom_maps.up_wires_plines.delete(wire_i);\r\n            // delete the edges\r\n            edges_i.forEach( edge_i => {\r\n                this._geom_maps.dn_edges_verts.delete(edge_i);\r\n                this._geom_maps.up_edges_wires.delete(edge_i);\r\n            });\r\n            // delete the verts\r\n            verts_i.forEach( vert_i => {\r\n                this._geom_maps.dn_verts_posis.delete(vert_i);\r\n                this._geom_maps.up_verts_edges.delete(vert_i);\r\n            });\r\n            // remove the verts from up_posis_verts\r\n            for (const posi_i of posis_i) {\r\n                const posi_verts_i: number[] = this._geom_maps.up_posis_verts.get(posi_i);\r\n                // loop through deleted verts\r\n                for (const vert_i of verts_i) {\r\n                    arrRem(posi_verts_i, vert_i);\r\n                    if (posi_verts_i.length === 0) { break; }\r\n                }\r\n            }\r\n            // delete unused posis\r\n            if (del_unused_posis) {\r\n                this.delUnusedPosis(posis_i);\r\n            }\r\n            // del time stamp\r\n            this._geom.time_stamp.delEntTs(EEntType.PLINE, pline_i);\r\n        }\r\n    }\r\n    /**\r\n     * Del pgons.\r\n     * Pgon attributes will also be deleted.\r\n     * @param pgons_i\r\n     */\r\n    public delPgons(pgons_i: number|number[], del_unused_posis: boolean): void {\r\n        // del attribs\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.PGON, pgons_i);\r\n        // create array\r\n        pgons_i = (Array.isArray(pgons_i)) ? pgons_i : [pgons_i];\r\n        if (!pgons_i.length) { return; }\r\n        // loop\r\n        for (const pgon_i of pgons_i) {\r\n            // first get all the arrays so we dont break navigation\r\n            const face_i: number = this._geom_maps.dn_pgons_faces.get(pgon_i);\r\n            if (face_i === undefined) { continue; } // already deleted\r\n            const wires_i: number[] = this._geom.nav.navAnyToWire(EEntType.PGON, pgon_i);\r\n            const edges_i: number[] = this._geom.nav.navAnyToEdge(EEntType.PGON, pgon_i);\r\n            const verts_i: number[] = this._geom.nav.navAnyToVert(EEntType.PGON, pgon_i);\r\n            const tris_i: number[] = this._geom.nav.navAnyToTri(EEntType.PGON, pgon_i);\r\n            const posis_i: number[] = this._geom.nav.navAnyToPosi(EEntType.PGON, pgon_i);\r\n            // delete the pgon and check the collections\r\n            this._geom_maps.dn_pgons_faces.delete(pgon_i);\r\n            this._geom_maps.up_pgons_colls.delete(pgon_i);\r\n            this._geom_maps.dn_colls_objs.forEach( coll => {\r\n                const coll_pgons_i: number[] = coll[3];\r\n                arrRem(coll_pgons_i, pgon_i);\r\n            });\r\n            // delete the face\r\n            this._geom_maps.dn_faces_wires.delete(face_i);\r\n            this._geom_maps.dn_faces_tris.delete(face_i);\r\n            this._geom_maps.up_faces_pgons.delete(face_i);\r\n            // delete the wires\r\n            wires_i.forEach( wire_i => {\r\n                this._geom_maps.dn_wires_edges.delete(wire_i);\r\n                this._geom_maps.up_wires_faces.delete(wire_i);\r\n            });\r\n            // delete the edges\r\n            edges_i.forEach( edge_i => {\r\n                this._geom_maps.dn_edges_verts.delete(edge_i);\r\n                this._geom_maps.up_edges_wires.delete(edge_i);\r\n            });\r\n            // delete the verts\r\n            verts_i.forEach( vert_i => {\r\n                this._geom_maps.dn_verts_posis.delete(vert_i);\r\n                this._geom_maps.up_verts_edges.delete(vert_i);\r\n                this._geom_maps.up_verts_tris.delete(vert_i);\r\n            });\r\n            // delete the tris\r\n            tris_i.forEach( tri_i => {\r\n                this._geom_maps.dn_tris_verts.delete(tri_i);\r\n                this._geom_maps.up_tris_faces.delete(tri_i);\r\n            });\r\n            // clean up, posis up arrays point to verts that may have been deleted\r\n            for (const posi_i of posis_i) {\r\n                const posi_verts_i: number[] = this._geom_maps.up_posis_verts.get(posi_i);\r\n                // loop through deleted verts\r\n                for (const vert_i of verts_i) {\r\n                    arrRem(posi_verts_i, vert_i);\r\n                    if (posi_verts_i.length === 0) { break; }\r\n                }\r\n            }\r\n            // delete unused posis\r\n            if (del_unused_posis) {\r\n                this.delUnusedPosis(posis_i);\r\n            }\r\n            // del time stamp\r\n            this._geom.time_stamp.delEntTs(EEntType.PGON, pgon_i);\r\n        }\r\n    }\r\n    /**\r\n     * Delete a collection.\r\n     * Collection attributes will also be deleted.\r\n     * This does not delete any of the object in the collection.\r\n     * Also, does not delete any positions.\r\n     * @param colls_i The collections to delete\r\n     */\r\n    public delColls(colls_i: number|number[], del_unused_posis: boolean): void {\r\n        // del attribs\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.COLL, colls_i);\r\n        // create array\r\n        colls_i = (Array.isArray(colls_i)) ? colls_i : [colls_i];\r\n        if (!colls_i.length) { return; }\r\n        // loop\r\n        for (const coll_i of colls_i) {\r\n            const coll: TColl = this._geom_maps.dn_colls_objs.get(coll_i);\r\n            if (coll === undefined) { continue; } // already deleted\r\n            // up arrays, delete points, plines, pgons\r\n            const points_i: number[] = coll[1];\r\n            points_i.forEach(point_i =>  {\r\n                const other_colls_i: number[] = this._geom_maps.up_points_colls.get(point_i);\r\n                arrRem(other_colls_i, coll_i);\r\n                if (other_colls_i.length === 0) {\r\n                    this._geom_maps.up_points_colls.delete(point_i);\r\n                }\r\n            });\r\n            const plines_i: number[] = coll[2];\r\n            plines_i.forEach(pline_i =>  {\r\n                const other_colls_i: number[] = this._geom_maps.up_plines_colls.get(pline_i);\r\n                arrRem(other_colls_i, coll_i);\r\n                if (other_colls_i.length === 0) {\r\n                    this._geom_maps.up_plines_colls.delete(pline_i);\r\n                }\r\n            });\r\n            const pgons_i: number[] = coll[3];\r\n            pgons_i.forEach(pgon_i =>  {\r\n                const other_colls_i: number[] = this._geom_maps.up_pgons_colls.get(pgon_i);\r\n                arrRem(other_colls_i, coll_i);\r\n                if (other_colls_i.length === 0) {\r\n                    this._geom_maps.up_pgons_colls.delete(pgon_i);\r\n                }\r\n            });\r\n            // down arrays\r\n            this._geom_maps.dn_colls_objs.delete(coll_i);\r\n            // del time stamp\r\n            this._geom.time_stamp.delEntTs(EEntType.COLL, coll_i);\r\n        }\r\n        // check parents\r\n        const set_colls_i: Set<number> = new Set(colls_i);\r\n        this._geom_maps.dn_colls_objs.forEach( (coll, coll_i) => {\r\n            if (set_colls_i.has(coll[0])) {\r\n                coll[0] = -1;\r\n                // update time stamp\r\n                this._geom.time_stamp.updateEntTs(EEntType.COLL, coll_i);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { EEntType, IGeomMaps, EWireType } from './common';\r\nimport { GIGeom } from './GIGeom';\r\n\r\n/**\r\n * Class for deleting geometry.\r\n */\r\nexport class GIGeomDelEdge {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    /**\r\n     * Delete edges.\r\n     * ~\r\n     * If heal=true, the gap where teh edge was get healed\r\n     *\r\n     */\r\n    public delEdges(edges_i: number|number[], del_unused_posis: boolean, heal: boolean): void {\r\n        // del attribs\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.EDGE, edges_i);\r\n        // create array\r\n        edges_i = (Array.isArray(edges_i)) ? edges_i : [edges_i];\r\n        if (!edges_i.length) { return; }\r\n        // loop\r\n        for (const edge_i of edges_i) {\r\n            if (!this._geom.query.entExists(EEntType.EDGE, edge_i)) { continue; } // already deleted\r\n            // first get all the arrays so we dont break navigation\r\n            const wire_i: number = this._geom.nav.navEdgeToWire(edge_i);\r\n            const face_i: number = this._geom.nav.navWireToFace(wire_i); // may be undefined\r\n            const verts_i: number[] = this._geom.nav.navEdgeToVert(edge_i);\r\n            const posi0_i: number = this._geom.nav.navVertToPosi(verts_i[0]);\r\n            const posi1_i: number = this._geom.nav.navVertToPosi(verts_i[1]);\r\n            // getthe type of wire\r\n            const wire_typ: EWireType = this._geom.query.getWireType(wire_i);\r\n            // TODO\r\n            throw new Error('Not implemented.');\r\n        }\r\n    }\r\n}\r\n","import { EEntType, IGeomMaps } from './common';\r\nimport { GIGeom } from './GIGeom';\r\nimport { arrRem } from '../util/arrs';\r\n\r\n/**\r\n * Class for deleting geometry.\r\n */\r\nexport class GIGeomDelVert {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    /**\r\n     * Deletes a vert.\r\n     *\r\n     * In the general case, the two edges adjacent to the deleted vert will be merged.\r\n     * This means that the next edge will be deleted.\r\n     * The end vert of the previous edge will connect to the end posi of the next edge.\r\n     *\r\n     * The first special case is if the vert is for a point. In that case, just delete the point.\r\n     *\r\n     * Then there are two special cases for whicj we delete the whole object\r\n     *\r\n     * 1) If the wire is open and has only 1 edge, then delete the wire\r\n     * 2) if the wire is closed pgon and has only 3 edges, then:\r\n     *    a) If the wire is the boundary of the pgon, then delete the whole pgon\r\n     *    b) If the wire is a hole in the pgon, then delete the hole\r\n     *\r\n     * Assuming the special cases above do not apply,\r\n     * then there are two more special cases for open wires\r\n     *\r\n     * 1) If the vert is at the start of an open wire, then delete the first edge\r\n     * 2) If teh vert is at the end of an open wire, then delete the last edge\r\n     *\r\n     * Finally, we come to the standard case.\r\n     * The next edge is deleted, and the prev edge gets rewired.\r\n     *\r\n     * @param vert_i\r\n     */\r\n    public delVert(vert_i: number): void {\r\n        // check, has it already been deleted\r\n        if (!this._geom_maps.dn_verts_posis.has(vert_i)) { return; }\r\n        // check, is this a point, then delete the point and vertex\r\n        const point_i: number = this._geom_maps.up_verts_points.get(vert_i); // this may be undefined\r\n        if (point_i !== undefined) {\r\n            this._geom.del.delPoints(point_i, false);\r\n            return;\r\n        }\r\n        // get the posis, edges, and wires, and other info\r\n        const edges_i: number[] = this._geom_maps.up_verts_edges.get(vert_i);\r\n        const wire_i: number = this._geom_maps.up_edges_wires.get(edges_i[0]);\r\n        const face_i: number = this._geom_maps.up_wires_faces.get(wire_i); // this may be undefined\r\n        const wire_edges_i: number[] = this._geom_maps.dn_wires_edges.get(wire_i);\r\n        const wire_verts_i: number[] = this._geom.nav.navAnyToVert(EEntType.WIRE, wire_i);\r\n        const wire_is_closed: boolean = this._geom.query.isWireClosed(wire_i);\r\n        const index_vert_i: number = wire_verts_i.indexOf(vert_i);\r\n        const num_verts: number = wire_verts_i.length;\r\n\r\n        // update the edges and wires\r\n        if (!wire_is_closed && num_verts === 2) {\r\n\r\n            // special case, open pline with 2 verts\r\n            this.__delVert__OpenPline1Edge(wire_i);\r\n\r\n        } else if (face_i !== undefined && num_verts === 3) {\r\n\r\n            // special case, pgon with three verts\r\n            const wires_i: number[] = this._geom_maps.dn_faces_wires.get(face_i);\r\n            const index_face_wire: number = wires_i.indexOf(wire_i);\r\n            if (index_face_wire === 0) {\r\n\r\n                // special case, pgon boundary with verts, delete the pgon\r\n                this.__delVert__PgonBoundaryWire3Edge(face_i);\r\n\r\n            } else {\r\n\r\n                // special case, pgon hole with verts, delete the hole\r\n                this.__delVert__PgonHoleWire3Edge(face_i, wire_i);\r\n\r\n            }\r\n        } else if (!wire_is_closed && index_vert_i === 0) {\r\n\r\n            // special case, open pline, delete start edge and vert\r\n            this.__delVert__OpenPlineStart(wire_edges_i, wire_verts_i, vert_i);\r\n\r\n            // time stamp\r\n            const pline_i: number = this._geom_maps.up_wires_plines.get(wire_i);\r\n            this._geom.time_stamp.updateObjsTs(EEntType.PLINE, pline_i);\r\n\r\n        } else if (!wire_is_closed && index_vert_i === num_verts - 1) {\r\n\r\n            // special case, open pline, delete end edge and vert\r\n            this.__delVert__OpenPlineEnd(wire_edges_i, wire_verts_i, vert_i);\r\n\r\n            // time stamp\r\n            const pline_i: number = this._geom_maps.up_wires_plines.get(wire_i);\r\n            this._geom.time_stamp.updateObjsTs(EEntType.PLINE, pline_i);\r\n\r\n        } else {\r\n\r\n            // standard case, delete the prev edge and reqire the next edge\r\n            this.__delVert__StandardCase(wire_edges_i, vert_i);\r\n\r\n            if (face_i === undefined) {\r\n\r\n                // time stamp\r\n                const pline_i: number = this._geom_maps.up_wires_plines.get(wire_i);\r\n                this._geom.time_stamp.updateObjsTs(EEntType.PLINE, pline_i);\r\n\r\n            } else {\r\n\r\n                // for pgons, also update tris\r\n                const pgon_i: number = this._geom.nav.navFaceToPgon(face_i);\r\n                this._geom.modify_pgon.triPgons(pgon_i);\r\n\r\n                // triPgons() updates the time stamp\r\n\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Special case, delete the pline\r\n     * @param wire_i\r\n     */\r\n    private __delVert__OpenPline1Edge(wire_i: number) {\r\n        const pline_i: number = this._geom_maps.up_wires_plines.get(wire_i);\r\n        this._geom.del.delPlines(pline_i, false);\r\n    }\r\n    /**\r\n     * Special case, delete either the pgon\r\n     * @param face_i\r\n     */\r\n    private __delVert__PgonBoundaryWire3Edge(face_i: number) {\r\n        const pgon_i: number = this._geom_maps.up_faces_pgons.get(face_i);\r\n        this._geom.del.delPgons(pgon_i, false);\r\n    }\r\n    /**\r\n     * Special case, delete either the hole\r\n     * @param vert_i\r\n     */\r\n    private __delVert__PgonHoleWire3Edge(face_i: number, wire_i: number) {\r\n        // TODO\r\n        console.log('not implemented');\r\n    }\r\n    /**\r\n     * Special case, delete the first edge\r\n     * @param vert_i\r\n     */\r\n    private __delVert__OpenPlineStart(wire_edges_i: number[], wire_verts_i: number[], vert_i: number) {\r\n        const posi_i: number = this._geom_maps.dn_verts_posis.get(vert_i);\r\n        // vert_i is at the star of an open wire, we have one edge\r\n        const start_edge_i: number = wire_edges_i[0];\r\n        // delete the first edge\r\n        this._geom_maps.dn_edges_verts.delete(start_edge_i);\r\n        this._geom_maps.up_edges_wires.delete(start_edge_i);\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.EDGE, start_edge_i);\r\n        // update the second vert\r\n        const second_vert_i: number = wire_verts_i[1];\r\n        arrRem(this._geom_maps.up_verts_edges.get(second_vert_i), start_edge_i);\r\n        // update the wire\r\n        arrRem(wire_edges_i, start_edge_i);\r\n        // delete the vert\r\n        this._geom_maps.dn_verts_posis.delete(vert_i);\r\n        this._geom_maps.up_verts_edges.delete(vert_i);\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.VERT, vert_i);\r\n        // update the posis\r\n        arrRem(this._geom_maps.up_posis_verts.get(posi_i), vert_i);\r\n    }\r\n    /**\r\n     * Special case, delete the last edge\r\n     * @param vert_i\r\n     */\r\n    private __delVert__OpenPlineEnd(wire_edges_i: number[], wire_verts_i: number[], vert_i: number) {\r\n        const posi_i: number = this._geom_maps.dn_verts_posis.get(vert_i);\r\n        // vert_i is at the end of an open wire, we have one edge\r\n        const end_edge_i: number = wire_edges_i[wire_edges_i.length - 1];\r\n        // delete the last edge\r\n        this._geom_maps.dn_edges_verts.delete(end_edge_i);\r\n        this._geom_maps.up_edges_wires.delete(end_edge_i);\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.EDGE, end_edge_i);\r\n        // update the one before last vert\r\n        const before_last_vert_i: number = wire_verts_i[wire_verts_i.length - 2];\r\n        arrRem(this._geom_maps.up_verts_edges.get(before_last_vert_i), end_edge_i);\r\n        // update the wire\r\n        arrRem(wire_edges_i, end_edge_i);\r\n        // delete the vert\r\n        this._geom_maps.dn_verts_posis.delete(vert_i);\r\n        this._geom_maps.up_verts_edges.delete(vert_i);\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.VERT, vert_i);\r\n        // update the posis\r\n        arrRem(this._geom_maps.up_posis_verts.get(posi_i), vert_i);\r\n    }\r\n    /**\r\n     * Final case, delete the next edge, reqire the previous edge\r\n     * For pgons, this does not update the tris\r\n     * @param vert_i\r\n     */\r\n    private __delVert__StandardCase(wire_edges_i: number[], vert_i: number) {\r\n        const posi_i: number = this._geom_maps.dn_verts_posis.get(vert_i);\r\n        // vert_i is in the middle of a wire, we must have two edges\r\n        const edges_i: number[] = this._geom_maps.up_verts_edges.get(vert_i);\r\n        const prev_edge_i: number = edges_i[0]; // is_first ? edges_i[1] : edges_i[0];\r\n        const next_edge_i: number = edges_i[1]; // is_first ? edges_i[0] : edges_i[1];\r\n        // get the verts of the two edges\r\n        const prev_edge_verts_i: number[] = this._geom_maps.dn_edges_verts.get(prev_edge_i);\r\n        const next_edge_verts_i: number[] = this._geom_maps.dn_edges_verts.get(next_edge_i);\r\n        const prev_vert_i: number = prev_edge_verts_i[0];\r\n        const next_vert_i: number = next_edge_verts_i[1];\r\n        // console.log(wire_edges_i);\r\n        // console.log(vert_i);\r\n        // console.log(is_first);\r\n        // console.log(edges_i);\r\n        // console.log(prev_edge_i, next_edge_i)\r\n        // console.log(prev_edge_verts_i, next_edge_verts_i)\r\n        // console.log(prev_vert_i, next_vert_i)\r\n        // run some checks\r\n        if (prev_vert_i === vert_i) {throw new Error('Unexpected vertex ordering 1'); }\r\n        if (next_vert_i === vert_i) { throw new Error('Unexpected vertex ordering 2'); }\r\n        if (prev_edge_verts_i[1] !== next_edge_verts_i[0]) { throw new Error('Unexpected vertex ordering 3'); }\r\n        if (prev_edge_verts_i[1] !== vert_i) { throw new Error('Unexpected vertex ordering 4'); }\r\n        // rewire the end vert of the previous edge to the end vert of the next edge\r\n        prev_edge_verts_i[1] = next_vert_i;\r\n        this._geom_maps.up_verts_edges.get(next_vert_i)[0] = prev_edge_i;\r\n        // delete the next edge\r\n        this._geom_maps.dn_edges_verts.delete(next_edge_i);\r\n        this._geom_maps.up_edges_wires.delete(next_edge_i);\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.EDGE, next_edge_i);\r\n        // update the wire\r\n        arrRem(wire_edges_i, next_edge_i);\r\n        // delete the vert\r\n        this._geom_maps.dn_verts_posis.delete(vert_i);\r\n        this._geom_maps.up_verts_edges.delete(vert_i);\r\n        this._geom.modeldata.attribs.add.delEntFromAttribs(EEntType.VERT, vert_i);\r\n        // update the posis\r\n        arrRem(this._geom_maps.up_posis_verts.get(posi_i), vert_i);\r\n    }\r\n}\r\n","import { IGeomJSONData, IGeomMaps, EEntType, IEntSets, TTri, TEdge, TWire, TFace,\r\n    EEntStrToGeomMaps, TVert, TFaceTri, TPoint, TPline, TPgon, TColl } from './common';\r\nimport { GIGeom } from './GIGeom';\r\nimport * as lodash from 'lodash';\r\nimport { cloneDeepMapArr, getEntTypeStr as getEntTypeName } from './common_func';\r\n\r\n/**\r\n * Class for geometry.\r\n */\r\nexport class GIGeomIO {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    /**\r\n     * Adds data to this model from another model.\r\n     * The data is deep copied.\r\n     * The existing data in the model is not deleted.\r\n     * Conflict detection will be performed based on time stamps.\r\n     * @param geom_maps The geom_arrays of the other model.\r\n     */\r\n    public merge(other_geom: GIGeom): void {\r\n        // Check that we have correct number of time stamps\r\n        if (this._geom_maps.up_posis_verts.size !== this._geom_maps.posis_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for posis.');\r\n        }\r\n        if (this._geom_maps.dn_points_verts.size !== this._geom_maps.points_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for points.');\r\n        }\r\n        if (this._geom_maps.dn_plines_wires.size !== this._geom_maps.plines_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for plines.');\r\n        }\r\n        if (this._geom_maps.dn_pgons_faces.size !== this._geom_maps.pgons_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for pgons.');\r\n        }\r\n        if (this._geom_maps.dn_colls_objs.size !== this._geom_maps.colls_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for colls.');\r\n        }\r\n        //\r\n        const geom_maps = other_geom._geom_maps;\r\n        // ======================================================================\r\n        this._mergePosis(other_geom); // check for conflicts and merge verts\r\n        this._mergeObjCollEnts(other_geom, EEntType.POINT); // check for conflicts\r\n        this._mergeObjCollEnts(other_geom, EEntType.PLINE); // check for conflicts\r\n        this._mergeObjCollEnts(other_geom, EEntType.PGON); // check for conflicts\r\n        this._mergeObjCollEnts(other_geom, EEntType.COLL); // check for conflicts\r\n        // ======================================================================\r\n        this._mergeEnts(this._geom_maps.dn_verts_posis, geom_maps.dn_verts_posis);\r\n        this._mergeEnts(this._geom_maps.dn_tris_verts, geom_maps.dn_tris_verts);\r\n        this._mergeEnts(this._geom_maps.dn_edges_verts, geom_maps.dn_edges_verts);\r\n        this._mergeEnts(this._geom_maps.dn_wires_edges, geom_maps.dn_wires_edges);\r\n        this._mergeEnts(this._geom_maps.dn_faces_wires, geom_maps.dn_faces_wires);\r\n        this._mergeEnts(this._geom_maps.dn_faces_tris, geom_maps.dn_faces_tris);\r\n        // ======================================================================\r\n        this._mergeEnts(this._geom_maps.up_verts_tris, geom_maps.up_verts_tris);\r\n        this._mergeEnts(this._geom_maps.up_tris_faces, geom_maps.up_tris_faces);\r\n        this._mergeEnts(this._geom_maps.up_verts_edges, geom_maps.up_verts_edges);\r\n        this._mergeEnts(this._geom_maps.up_edges_wires, geom_maps.up_edges_wires);\r\n        this._mergeEnts(this._geom_maps.up_wires_faces, geom_maps.up_wires_faces);\r\n        this._mergeEnts(this._geom_maps.up_verts_points, geom_maps.up_verts_points);\r\n        this._mergeEnts(this._geom_maps.up_wires_plines, geom_maps.up_wires_plines);\r\n        this._mergeEnts(this._geom_maps.up_faces_pgons, geom_maps.up_faces_pgons);\r\n        // ======================================================================\r\n        this._mergeColls(this._geom_maps.up_points_colls, geom_maps.up_points_colls); // merge colls, no check for conflicts\r\n        this._mergeColls(this._geom_maps.up_plines_colls, geom_maps.up_plines_colls); // merge colls, no check for conflicts\r\n        this._mergeColls(this._geom_maps.up_pgons_colls, geom_maps.up_pgons_colls); // merge colls, no check for conflicts\r\n        // ======================================================================\r\n        // time stamp updated in _mergePosis() and _mergeObjCollEnts() methods\r\n    }\r\n    /**\r\n     * Adds data to this model from another model.\r\n     * The data is deep copied.\r\n     * No conflict detection is performed.\r\n     * Typically, this model is assumed to be empty.\r\n     * @param geom_maps The geom_arrays of the other model.\r\n     */\r\n    public dump(geom_maps: IGeomMaps): void {\r\n        // Check that we have correct number of time stamps\r\n        if (this._geom_maps.up_posis_verts.size !== this._geom_maps.posis_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for posis.');\r\n        }\r\n        if (this._geom_maps.dn_points_verts.size !== this._geom_maps.points_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for points.');\r\n        }\r\n        if (this._geom_maps.dn_plines_wires.size !== this._geom_maps.plines_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for plines.');\r\n        }\r\n        if (this._geom_maps.dn_pgons_faces.size !== this._geom_maps.pgons_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for pgons.');\r\n        }\r\n        if (this._geom_maps.dn_colls_objs.size !== this._geom_maps.colls_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for colls.');\r\n        }\r\n        //\r\n        this._geom_maps.dn_points_verts = new Map(geom_maps.dn_points_verts);\r\n        this._geom_maps.dn_plines_wires = new Map(geom_maps.dn_plines_wires);\r\n        this._geom_maps.dn_pgons_faces = new Map(geom_maps.dn_pgons_faces);\r\n        this._geom_maps.dn_colls_objs = lodash.cloneDeep(geom_maps.dn_colls_objs);\r\n        this._geom_maps.dn_verts_posis = new Map(geom_maps.dn_verts_posis);\r\n        this._geom_maps.dn_tris_verts = cloneDeepMapArr(geom_maps.dn_tris_verts) as Map<number, TTri>;\r\n        this._geom_maps.dn_edges_verts = cloneDeepMapArr(geom_maps.dn_edges_verts) as Map<number, TEdge>;\r\n        this._geom_maps.dn_wires_edges = cloneDeepMapArr(geom_maps.dn_wires_edges) as Map<number, TWire>;\r\n        this._geom_maps.dn_faces_wires = cloneDeepMapArr(geom_maps.dn_faces_wires);\r\n        this._geom_maps.dn_faces_tris = cloneDeepMapArr(geom_maps.dn_faces_tris);\r\n        // ======================================================================\r\n        this._geom_maps.up_posis_verts = cloneDeepMapArr(geom_maps.up_posis_verts);\r\n        this._geom_maps.up_verts_tris = cloneDeepMapArr(geom_maps.up_verts_tris);\r\n        this._geom_maps.up_tris_faces = new Map(geom_maps.up_tris_faces);\r\n        this._geom_maps.up_verts_edges = cloneDeepMapArr(geom_maps.up_verts_edges);\r\n        this._geom_maps.up_edges_wires = new Map(geom_maps.up_edges_wires);\r\n        this._geom_maps.up_wires_faces = new Map(geom_maps.up_wires_faces);\r\n        this._geom_maps.up_verts_points = new Map(geom_maps.up_verts_points);\r\n        this._geom_maps.up_wires_plines = new Map(geom_maps.up_wires_plines);\r\n        this._geom_maps.up_faces_pgons = new Map(geom_maps.up_faces_pgons);\r\n        this._geom_maps.up_points_colls = cloneDeepMapArr(geom_maps.up_points_colls);\r\n        this._geom_maps.up_plines_colls = cloneDeepMapArr(geom_maps.up_plines_colls);\r\n        this._geom_maps.up_pgons_colls = cloneDeepMapArr(geom_maps.up_pgons_colls);\r\n        // ======================================================================\r\n        this._geom_maps.posis_ts = new Map(geom_maps.posis_ts);\r\n        this._geom_maps.points_ts = new Map(geom_maps.points_ts);\r\n        this._geom_maps.plines_ts = new Map(geom_maps.plines_ts);\r\n        this._geom_maps.pgons_ts = new Map(geom_maps.pgons_ts);\r\n        this._geom_maps.colls_ts = new Map(geom_maps.colls_ts);\r\n    }\r\n    /**\r\n     * Adds data to this model from another model.\r\n     * The data is deep copied.\r\n     * No conflict detection is performed.\r\n     * Typically, this model is assumed to be empty.\r\n     * If ent_sets is null, do nothing.\r\n     * @param geom_maps The geom_arrays of the other model.\r\n     */\r\n    public dumpSelect(other_geom: GIGeom, ent_sets: IEntSets): void {\r\n        if (ent_sets === null) { return; }\r\n        // Check that we have correct number of time stamps\r\n        if (this._geom_maps.up_posis_verts.size !== this._geom_maps.posis_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for posis.');\r\n        }\r\n        if (this._geom_maps.dn_points_verts.size !== this._geom_maps.points_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for points.');\r\n        }\r\n        if (this._geom_maps.dn_plines_wires.size !== this._geom_maps.plines_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for plines.');\r\n        }\r\n        if (this._geom_maps.dn_pgons_faces.size !== this._geom_maps.pgons_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for pgons.');\r\n        }\r\n        if (this._geom_maps.dn_colls_objs.size !== this._geom_maps.colls_ts.size) {\r\n            throw new Error('Incorrent number of time stamps for colls.');\r\n        }\r\n        //\r\n        const geom_maps: IGeomMaps = other_geom._geom_maps;\r\n        // ======================================================================\r\n        this._dumpPosiObjCollSelect(other_geom, EEntType.POSI, ent_sets.posis_i);\r\n        this._dumpPosiObjCollSelect(other_geom, EEntType.POINT, ent_sets.points_i);\r\n        this._dumpPosiObjCollSelect(other_geom, EEntType.PLINE, ent_sets.plines_i);\r\n        this._dumpPosiObjCollSelect(other_geom, EEntType.PGON, ent_sets.pgons_i);\r\n        this._dumpPosiObjCollSelect(other_geom, EEntType.COLL, ent_sets.colls_i);\r\n        // ======================================================================\r\n        this._dumpEntsSelect(this._geom_maps.dn_verts_posis, geom_maps.dn_verts_posis, ent_sets.verts_i);\r\n        this._dumpEntsSelect(this._geom_maps.dn_tris_verts, geom_maps.dn_tris_verts, ent_sets.tris_i);\r\n        this._dumpEntsSelect(this._geom_maps.dn_edges_verts, geom_maps.dn_edges_verts, ent_sets.edges_i);\r\n        this._dumpEntsSelect(this._geom_maps.dn_wires_edges, geom_maps.dn_wires_edges, ent_sets.wires_i);\r\n        this._dumpEntsSelect(this._geom_maps.dn_faces_wires, geom_maps.dn_faces_wires, ent_sets.faces_i);\r\n        this._dumpEntsSelect(this._geom_maps.dn_faces_tris, geom_maps.dn_faces_tris, ent_sets.faces_i);\r\n        // ======================================================================\r\n        this._dumpEntsSelect(this._geom_maps.up_verts_tris,   geom_maps.up_verts_tris,   ent_sets.verts_i);\r\n        this._dumpEntsSelect(this._geom_maps.up_tris_faces,   geom_maps.up_tris_faces,   ent_sets.tris_i);\r\n        this._dumpEntsSelect(this._geom_maps.up_verts_edges,  geom_maps.up_verts_edges,  ent_sets.verts_i);\r\n        this._dumpEntsSelect(this._geom_maps.up_edges_wires,  geom_maps.up_edges_wires,  ent_sets.edges_i);\r\n        this._dumpEntsSelect(this._geom_maps.up_wires_faces,  geom_maps.up_wires_faces,  ent_sets.wires_i);\r\n        this._dumpEntsSelect(this._geom_maps.up_verts_points, geom_maps.up_verts_points, ent_sets.verts_i);\r\n        this._dumpEntsSelect(this._geom_maps.up_wires_plines, geom_maps.up_wires_plines, ent_sets.wires_i);\r\n        this._dumpEntsSelect(this._geom_maps.up_faces_pgons,  geom_maps.up_faces_pgons,  ent_sets.faces_i);\r\n        this._dumpEntsSelect(this._geom_maps.up_points_colls, geom_maps.up_points_colls, ent_sets.points_i);\r\n        this._dumpEntsSelect(this._geom_maps.up_plines_colls, geom_maps.up_plines_colls, ent_sets.plines_i);\r\n        this._dumpEntsSelect(this._geom_maps.up_pgons_colls,  geom_maps.up_pgons_colls,  ent_sets.pgons_i);\r\n        // ======================================================================\r\n        // time stamp updated in _dumpPosiObjCollSelect() method\r\n    }\r\n    /**\r\n     * Adds data to this model from another model.\r\n     * The data is deep copied.\r\n     * The existing data in the model is not deleted.\r\n     * The entities in the other model are renumbered.\r\n     * @param other_geom_maps The geom_arrays of the other model.\r\n     */\r\n    public mergeAndPurge(other_geom_maps: IGeomMaps): Map<string, Map<number, number>> {\r\n        // get lengths of existing entities before we start adding stuff\r\n        // const num_posis: number = this._geom_maps.num_posis;\r\n        const num_posis: number = this._geom_maps.up_posis_verts.size;\r\n        const num_verts: number = this._geom_maps.dn_verts_posis.size;\r\n        const num_tris: number = this._geom_maps.dn_tris_verts.size;\r\n        const num_edges: number = this._geom_maps.dn_edges_verts.size;\r\n        const num_wires: number = this._geom_maps.dn_wires_edges.size;\r\n        const num_faces: number = this._geom_maps.dn_faces_wires.size;\r\n        const num_points: number = this._geom_maps.dn_points_verts.size;\r\n        const num_plines: number = this._geom_maps.dn_plines_wires.size;\r\n        const num_pgons: number = this._geom_maps.dn_pgons_faces.size;\r\n        const num_colls: number = this._geom_maps.dn_colls_objs.size;\r\n        // ======================================================================\r\n        // get maps for entities\r\n        // positions\r\n        const renum_posis_map: Map<number, number> = new Map();\r\n        let posis_count = 0;\r\n        other_geom_maps.up_posis_verts.forEach( (_, other_posi_i) => {\r\n            renum_posis_map.set(other_posi_i, posis_count + num_posis);\r\n            posis_count += 1;\r\n        });\r\n        // vertices\r\n        const renum_verts_map: Map<number, number> = new Map();\r\n        let vert_count = 0;\r\n        other_geom_maps.dn_verts_posis.forEach( (_, other_vert_i) => {\r\n            renum_verts_map.set(other_vert_i, vert_count + num_verts);\r\n            vert_count += 1;\r\n        });\r\n        // triangles\r\n        const renum_tris_map: Map<number, number> = new Map();\r\n        let tris_count = 0;\r\n        other_geom_maps.dn_tris_verts.forEach( (_, other_tri_i) => {\r\n            renum_tris_map.set(other_tri_i, tris_count + num_tris);\r\n            tris_count += 1;\r\n        });\r\n        // edges\r\n        const renum_edges_map: Map<number, number> = new Map();\r\n        let edges_count = 0;\r\n        other_geom_maps.dn_edges_verts.forEach( (_, other_edge_i) => {\r\n            renum_edges_map.set(other_edge_i, edges_count + num_edges);\r\n            edges_count += 1;\r\n        });\r\n        // wires\r\n        const renum_wires_map: Map<number, number> = new Map();\r\n        let wires_count = 0;\r\n        other_geom_maps.dn_wires_edges.forEach( (_, other_wire_i) => {\r\n            renum_wires_map.set(other_wire_i, wires_count + num_wires);\r\n            wires_count += 1;\r\n        });\r\n        // faces\r\n        const renum_faces_map: Map<number, number> = new Map();\r\n        let faces_count = 0;\r\n        other_geom_maps.dn_faces_wires.forEach( (_, other_face_i) => {\r\n            renum_faces_map.set(other_face_i, faces_count + num_faces);\r\n            faces_count += 1;\r\n        });\r\n        // points\r\n        const renum_points_map: Map<number, number> = new Map();\r\n        let points_count = 0;\r\n        other_geom_maps.dn_points_verts.forEach( (_, other_point_i) => {\r\n            renum_points_map.set(other_point_i, points_count + num_points);\r\n            points_count += 1;\r\n        });\r\n        // plines\r\n        const renum_plines_map: Map<number, number> = new Map();\r\n        let plines_count = 0;\r\n        other_geom_maps.dn_plines_wires.forEach( (_, other_wire_i) => {\r\n            renum_plines_map.set(other_wire_i, plines_count + num_plines);\r\n            plines_count += 1;\r\n        });\r\n        // pgons\r\n        const renum_pgons_map: Map<number, number> = new Map();\r\n        let pgons_count = 0;\r\n        other_geom_maps.dn_pgons_faces.forEach( (_, other_pgon_i) => {\r\n            renum_pgons_map.set(other_pgon_i, pgons_count + num_pgons);\r\n            pgons_count += 1;\r\n        });\r\n        // colls\r\n        const renum_colls_map: Map<number, number> = new Map();\r\n        let colls_count = 0;\r\n        other_geom_maps.dn_colls_objs.forEach( (_, other_coll_i) => {\r\n            renum_colls_map.set(other_coll_i, colls_count + num_colls);\r\n            colls_count += 1;\r\n        });\r\n        // create data to return\r\n        const renum_maps: Map<string, Map<number, number>> = new Map();\r\n        renum_maps.set('posis', renum_posis_map);\r\n        renum_maps.set('verts', renum_verts_map);\r\n        renum_maps.set('edges', renum_edges_map);\r\n        renum_maps.set('wires', renum_wires_map);\r\n        renum_maps.set('faces', renum_faces_map);\r\n        renum_maps.set('points', renum_points_map);\r\n        renum_maps.set('plines', renum_plines_map);\r\n        renum_maps.set('pgons', renum_pgons_map);\r\n        renum_maps.set('colls', renum_colls_map);\r\n        // ======================================================================\r\n        // update down arrays\r\n        // add vertices to model\r\n        other_geom_maps.dn_verts_posis.forEach( (other_posi_i, other_vert_i) => {\r\n            this._geom_maps.dn_verts_posis.set(\r\n                renum_verts_map.get(other_vert_i),\r\n                renum_posis_map.get(other_posi_i) as TVert\r\n            );\r\n        });\r\n        // add triangles to model\r\n        other_geom_maps.dn_tris_verts.forEach( (other_verts_i, other_tri_i) => {\r\n            this._geom_maps.dn_tris_verts.set(\r\n                renum_tris_map.get(other_tri_i),\r\n                other_verts_i.map( other_vert_i => renum_verts_map.get(other_vert_i)) as TTri\r\n            );\r\n        });\r\n        // add edges to model\r\n        other_geom_maps.dn_edges_verts.forEach( (other_verts_i, other_edge_i) => {\r\n            this._geom_maps.dn_edges_verts.set(\r\n                renum_edges_map.get(other_edge_i),\r\n                other_verts_i.map( other_vert_i => renum_verts_map.get(other_vert_i)) as TEdge\r\n            );\r\n        });\r\n        // add wires to model\r\n        other_geom_maps.dn_wires_edges.forEach( (other_edges_i, other_wire_i) => {\r\n            this._geom_maps.dn_wires_edges.set(\r\n                renum_wires_map.get(other_wire_i),\r\n                other_edges_i.map( other_edge_i => renum_edges_map.get(other_edge_i)) as TWire\r\n            );\r\n        });\r\n        // add faces to model\r\n        other_geom_maps.dn_faces_wires.forEach( (other_wires_i, other_face_i) => {\r\n            this._geom_maps.dn_faces_wires.set(\r\n                renum_faces_map.get(other_face_i),\r\n                other_wires_i.map( other_wire_i => renum_wires_map.get(other_wire_i)) as TFace\r\n            );\r\n        });\r\n        other_geom_maps.dn_faces_tris.forEach( (other_tris_i, other_face_i) => {\r\n            this._geom_maps.dn_faces_tris.set(\r\n                renum_faces_map.get(other_face_i),\r\n                other_tris_i.map( other_tri_i => renum_tris_map.get(other_tri_i)) as TFaceTri\r\n            );\r\n        });\r\n        // add points to model\r\n        other_geom_maps.dn_points_verts.forEach( (other_vert_i, other_point_i) => {\r\n            this._geom_maps.dn_points_verts.set(\r\n                renum_points_map.get(other_point_i),\r\n                renum_verts_map.get(other_vert_i) as TPoint\r\n            );\r\n        });\r\n        // add plines to model\r\n        other_geom_maps.dn_plines_wires.forEach( (other_wire_i, other_pline_i) => {\r\n            this._geom_maps.dn_plines_wires.set(\r\n                renum_plines_map.get(other_pline_i),\r\n                renum_wires_map.get(other_wire_i) as TPline\r\n            );\r\n        });\r\n        // add pgons to model\r\n        other_geom_maps.dn_pgons_faces.forEach( (other_face_i, other_pgon_i) => {\r\n            this._geom_maps.dn_pgons_faces.set(\r\n                renum_pgons_map.get(other_pgon_i),\r\n                renum_faces_map.get(other_face_i) as TPgon\r\n            );\r\n        });\r\n        // add collections to model\r\n        other_geom_maps.dn_colls_objs.forEach( (other_coll, other_coll_i) => {\r\n            const parent: number = (other_coll[0] === -1) ? -1 : renum_colls_map.get(other_coll[0]);\r\n            const coll_points_i: number[] = other_coll[1].map( point_i => renum_points_map.get(point_i));\r\n            const coll_plines_i: number[] = other_coll[2].map( pline_i => renum_plines_map.get(pline_i));\r\n            const coll_pgons_i: number[] = other_coll[3].map( pgon_i => renum_pgons_map.get(pgon_i));\r\n            const new_coll: TColl = [parent, coll_points_i, coll_plines_i, coll_pgons_i];\r\n            this._geom_maps.dn_colls_objs.set(\r\n                renum_colls_map.get(other_coll_i),\r\n                new_coll\r\n            );\r\n        });\r\n        // ======================================================================\r\n        // update up arrays\r\n        // update posis to verts (they can be null or [])\r\n        // this array is used to capture deleted posis\r\n        other_geom_maps.up_posis_verts.forEach( (other_verts_i, other_posi_i) => {\r\n            this._geom_maps.up_posis_verts.set(\r\n                renum_posis_map.get(other_posi_i),\r\n                other_verts_i.map( other_vert_i => renum_verts_map.get(other_vert_i))\r\n            );\r\n        });\r\n        // update verts to tris\r\n        other_geom_maps.up_verts_tris.forEach( (other_tris_i, other_vert_i) => {\r\n            this._geom_maps.up_verts_tris.set(\r\n                renum_verts_map.get(other_vert_i),\r\n                other_tris_i.map( other_tri_i => renum_tris_map.get(other_tri_i))\r\n            );\r\n        });\r\n        // update tris to faces\r\n        other_geom_maps.up_tris_faces.forEach( (other_face_i, other_tri_i) => {\r\n            this._geom_maps.up_tris_faces.set(\r\n                renum_tris_map.get(other_tri_i),\r\n                renum_faces_map.get(other_face_i)\r\n            );\r\n        });\r\n        // update verts to edges\r\n        other_geom_maps.up_verts_edges.forEach( (other_edges_i, other_vert_i) => {\r\n            this._geom_maps.up_verts_edges.set(\r\n                renum_verts_map.get(other_vert_i),\r\n                other_edges_i.map( other_edge_i => renum_edges_map.get(other_edge_i))\r\n            );\r\n        });\r\n        // update edges to wires\r\n        other_geom_maps.up_edges_wires.forEach( (other_wire_i, other_edge_i) => {\r\n            this._geom_maps.up_edges_wires.set(\r\n                renum_edges_map.get(other_edge_i),\r\n                renum_wires_map.get(other_wire_i)\r\n            );\r\n        });\r\n        // update wires to faces\r\n        other_geom_maps.up_wires_faces.forEach( (other_face_i, other_wire_i) => {\r\n            this._geom_maps.up_wires_faces.set(\r\n                renum_wires_map.get(other_wire_i),\r\n                renum_faces_map.get(other_face_i)\r\n            );\r\n        });\r\n        // update verts to points\r\n        other_geom_maps.up_verts_points.forEach( (other_vert_i, other_point_i) => {\r\n            this._geom_maps.up_verts_points.set(\r\n                renum_points_map.get(other_point_i),\r\n                renum_verts_map.get(other_vert_i)\r\n            );\r\n        });\r\n        // update wires to plines\r\n        other_geom_maps.up_wires_plines.forEach( (other_pline_i, other_wire_i) => {\r\n            this._geom_maps.up_wires_plines.set(\r\n                renum_wires_map.get(other_wire_i),\r\n                renum_plines_map.get(other_pline_i)\r\n            );\r\n        });\r\n        // update faces to pgons\r\n        other_geom_maps.up_faces_pgons.forEach( (other_pgon_i, other_face_i) => {\r\n            this._geom_maps.up_faces_pgons.set(\r\n                renum_faces_map.get(other_face_i),\r\n                renum_pgons_map.get(other_pgon_i)\r\n            );\r\n        });\r\n        // update points to colls\r\n        other_geom_maps.up_points_colls.forEach( (other_colls_i, other_point_i) => {\r\n            this._geom_maps.up_points_colls.set(\r\n                renum_points_map.get(other_point_i),\r\n                other_colls_i.map( other_coll_i => renum_colls_map.get(other_coll_i))\r\n            );\r\n        });\r\n        // update plines to colls\r\n        other_geom_maps.up_plines_colls.forEach( (other_colls_i, other_pline_i) => {\r\n            this._geom_maps.up_plines_colls.set(\r\n                renum_plines_map.get(other_pline_i),\r\n                other_colls_i.map( other_coll_i => renum_colls_map.get(other_coll_i))\r\n            );\r\n        });\r\n        // update pgons to colls\r\n        other_geom_maps.up_pgons_colls.forEach( (other_colls_i, other_pgon_i) => {\r\n            this._geom_maps.up_pgons_colls.set(\r\n                renum_pgons_map.get(other_pgon_i),\r\n                other_colls_i.map( other_coll_i => renum_colls_map.get(other_coll_i))\r\n            );\r\n        });\r\n        // return the maps\r\n        return renum_maps;\r\n    }\r\n    /**\r\n     * Sets the data in this model from JSON data.\r\n     * The data is shallow copied.\r\n     * The existing data in the model is deleted.\r\n     * All entities get the same time stamp.\r\n     * @param geom_data The JSON data\r\n     */\r\n    public setJSONData(geom_data: IGeomJSONData): void {\r\n        // all entities get the same time stamp\r\n        const ts: number = this._geom.modeldata.model.metadata.nextTimeStamp();\r\n        // update the down arrays\r\n        // add vertices to model\r\n        this._geom_maps.dn_verts_posis = new Map();\r\n        for (let i = 0; i < geom_data.verts.length; i++) {\r\n            this._geom_maps.dn_verts_posis.set(geom_data.verts_i[i], geom_data.verts[i]);\r\n        }\r\n        // add triangles to model\r\n        this._geom_maps.dn_tris_verts = new Map();\r\n        for (let i = 0; i < geom_data.tris.length; i++) {\r\n            this._geom_maps.dn_tris_verts.set(geom_data.tris_i[i], geom_data.tris[i]);\r\n        }\r\n        // add edges to model\r\n        this._geom_maps.dn_edges_verts = new Map();\r\n        for (let i = 0; i < geom_data.edges.length; i++) {\r\n            this._geom_maps.dn_edges_verts.set(geom_data.edges_i[i], geom_data.edges[i]);\r\n        }\r\n        // add wires to model\r\n        this._geom_maps.dn_wires_edges = new Map();\r\n        for (let i = 0; i < geom_data.wires.length; i++) {\r\n            this._geom_maps.dn_wires_edges.set(geom_data.wires_i[i], geom_data.wires[i]);\r\n        }\r\n        // add faces to model\r\n        this._geom_maps.dn_faces_wires = new Map();\r\n        this._geom_maps.dn_faces_tris = new Map();\r\n        for (let i = 0; i < geom_data.faces.length; i++) {\r\n            this._geom_maps.dn_faces_wires.set(geom_data.faces_i[i], geom_data.faces[i]);\r\n            this._geom_maps.dn_faces_tris.set(geom_data.faces_i[i], geom_data.facetris[i]);\r\n        }\r\n        // add points to model\r\n        this._geom_maps.dn_points_verts = new Map();\r\n        for (let i = 0; i < geom_data.points.length; i++) {\r\n            this._geom_maps.dn_points_verts.set(geom_data.points_i[i], geom_data.points[i]);\r\n            this._geom.time_stamp.setEntTs(EEntType.POINT, geom_data.points_i[i], ts); // time stamp\r\n        }\r\n        // add plines to model\r\n        this._geom_maps.dn_plines_wires = new Map();\r\n        for (let i = 0; i < geom_data.plines.length; i++) {\r\n            this._geom_maps.dn_plines_wires.set(geom_data.plines_i[i], geom_data.plines[i]);\r\n            this._geom.time_stamp.setEntTs(EEntType.PLINE, geom_data.plines_i[i], ts); // time stamp\r\n        }\r\n        // add pgons to model\r\n        this._geom_maps.dn_pgons_faces = new Map();\r\n        for (let i = 0; i < geom_data.pgons.length; i++) {\r\n            this._geom_maps.dn_pgons_faces.set(geom_data.pgons_i[i], geom_data.pgons[i]);\r\n            this._geom.time_stamp.setEntTs(EEntType.PGON, geom_data.pgons_i[i], ts); // time stamp\r\n        }\r\n        // add collections to model\r\n        this._geom_maps.dn_colls_objs = new Map();\r\n        for (let i = 0; i < geom_data.colls.length; i++) {\r\n            this._geom_maps.dn_colls_objs.set(geom_data.colls_i[i], geom_data.colls[i]);\r\n            this._geom.time_stamp.setEntTs(EEntType.COLL, geom_data.colls_i[i], ts); // time stamp\r\n        }\r\n        // set selected\r\n        this._geom.selected = geom_data.selected;\r\n        // ========================================================================================\r\n        // update the up arrays\r\n        // posis->verts, create empty []\r\n        this._geom_maps.up_posis_verts = new Map();\r\n        for (let i = 0; i < geom_data.posis_i.length; i++) {\r\n            this._geom_maps.up_posis_verts.set(geom_data.posis_i[i], []);\r\n            this._geom.time_stamp.setEntTs(EEntType.POSI, geom_data.posis_i[i], ts); // time stamp\r\n        }\r\n        // posis->verts\r\n        this._geom_maps.dn_verts_posis.forEach( (posi_i, vert_i) => {\r\n            this._geom_maps.up_posis_verts.get(posi_i).push(vert_i);\r\n        });\r\n        // verts->tris, one to many\r\n        this._geom_maps.up_verts_tris = new Map();\r\n        this._geom_maps.dn_tris_verts.forEach( (vert_i_arr, tri_i) => {\r\n            vert_i_arr.forEach( vert_i => {\r\n                if (!this._geom_maps.up_verts_tris.has(vert_i)) {\r\n                    this._geom_maps.up_verts_tris.set(vert_i, []);\r\n                }\r\n                this._geom_maps.up_verts_tris.get(vert_i).push(tri_i);\r\n            });\r\n        });\r\n        // verts->edges, one to two\r\n        // order is important\r\n        this._geom_maps.up_verts_edges = new Map();\r\n        this._geom_maps.dn_edges_verts.forEach( (vert_i_arr, edge_i) => {\r\n            vert_i_arr.forEach( (vert_i, index) => {\r\n                if (!this._geom_maps.up_verts_edges.has(vert_i)) {\r\n                    this._geom_maps.up_verts_edges.set(vert_i, []);\r\n                }\r\n                if (index === 0) {\r\n                    this._geom_maps.up_verts_edges.get(vert_i).push(edge_i);\r\n                } else if (index === 1) {\r\n                    this._geom_maps.up_verts_edges.get(vert_i).splice(0, 0, edge_i);\r\n                }\r\n                if (index > 1) {\r\n                    throw new Error('Import data error: Found an edge with more than two vertices.');\r\n                }\r\n            });\r\n        });\r\n        // edges->wires\r\n        this._geom_maps.up_edges_wires = new Map();\r\n        this._geom_maps.dn_wires_edges.forEach( (edge_i_arr, wire_i) => {\r\n            edge_i_arr.forEach( edge_i => {\r\n                this._geom_maps.up_edges_wires.set(edge_i, wire_i);\r\n            });\r\n        });\r\n        // wires->faces\r\n        this._geom_maps.up_wires_faces = new Map();\r\n        this._geom_maps.dn_faces_wires.forEach( (wire_i_arr, face_i) => {\r\n            wire_i_arr.forEach( wire_i => {\r\n                this._geom_maps.up_wires_faces.set(wire_i, face_i);\r\n            });\r\n        });\r\n        // tris->faces\r\n        this._geom_maps.up_tris_faces = new Map();\r\n        this._geom_maps.dn_faces_tris.forEach( (tri_i_arr, face_i) => {\r\n            tri_i_arr.forEach( tri_i => {\r\n                this._geom_maps.up_tris_faces.set(tri_i, face_i);\r\n            });\r\n        });\r\n        // points, lines, polygons\r\n        this._geom_maps.up_verts_points = new Map();\r\n        this._geom_maps.dn_points_verts.forEach( (vert_i, point_i) => {\r\n            this._geom_maps.up_verts_points.set(vert_i, point_i);\r\n        });\r\n        this._geom_maps.up_wires_plines = new Map();\r\n        this._geom_maps.dn_plines_wires.forEach( (wire_i, line_i) => {\r\n            this._geom_maps.up_wires_plines.set(wire_i, line_i);\r\n        });\r\n        this._geom_maps.up_faces_pgons = new Map();\r\n        this._geom_maps.dn_pgons_faces.forEach( (face_i, pgon_i) => {\r\n            this._geom_maps.up_faces_pgons.set(face_i, pgon_i);\r\n        });\r\n        // collections of points, polylines, polygons\r\n        this._geom_maps.up_points_colls = new Map();\r\n        this._geom_maps.up_plines_colls = new Map();\r\n        this._geom_maps.up_pgons_colls = new Map();\r\n        this._geom_maps.dn_colls_objs.forEach( (coll, coll_i) => {\r\n            const [parent, point_i_arr, pline_i_arr, pgon_i_arr] = coll;\r\n            point_i_arr.forEach( point_i => {\r\n                if (!this._geom_maps.up_points_colls.has(point_i)) {\r\n                    this._geom_maps.up_points_colls.set(point_i, [coll_i]);\r\n                } else {\r\n                    this._geom_maps.up_points_colls.get(point_i).push(coll_i);\r\n                }\r\n            });\r\n            pline_i_arr.forEach( pline_i => {\r\n                if (!this._geom_maps.up_plines_colls.has(pline_i)) {\r\n                    this._geom_maps.up_plines_colls.set(pline_i, [coll_i]);\r\n                } else {\r\n                    this._geom_maps.up_plines_colls.get(pline_i).push(coll_i);\r\n                }\r\n            });\r\n            pgon_i_arr.forEach( pgon_i => {\r\n                if (!this._geom_maps.up_pgons_colls.has(pgon_i)) {\r\n                    this._geom_maps.up_pgons_colls.set(pgon_i, [coll_i]);\r\n                } else {\r\n                    this._geom_maps.up_pgons_colls.get(pgon_i).push(coll_i);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Returns the JSON data for this model.\r\n     * The data is shallow copied.\r\n     */\r\n    public getJSONData(): IGeomJSONData {\r\n        const data: IGeomJSONData = {\r\n            posis_i: [],\r\n            verts: [], verts_i: [],\r\n            tris: [], tris_i: [],\r\n            edges: [], edges_i: [],\r\n            wires: [], wires_i: [],\r\n            faces: [], facetris: [], faces_i: [],\r\n            points: [], points_i: [],\r\n            plines: [], plines_i: [],\r\n            pgons: [], pgons_i: [],\r\n            colls: [], colls_i: [],\r\n            selected: this._geom.selected\r\n        };\r\n        this._geom_maps.up_posis_verts.forEach( (_, i) => {\r\n            data.posis_i.push(i);\r\n        });\r\n        this._geom_maps.dn_verts_posis.forEach( (ent, i) => {\r\n            data.verts.push(ent);\r\n            data.verts_i.push(i);\r\n        });\r\n        this._geom_maps.dn_tris_verts.forEach( (ent, i) => {\r\n            data.tris.push(ent);\r\n            data.tris_i.push(i);\r\n        });\r\n        this._geom_maps.dn_edges_verts.forEach( (ent, i) => {\r\n            data.edges.push(ent);\r\n            data.edges_i.push(i);\r\n        });\r\n        this._geom_maps.dn_wires_edges.forEach( (ent, i) => {\r\n            data.wires.push(ent);\r\n            data.wires_i.push(i);\r\n        });\r\n        this._geom_maps.dn_faces_wires.forEach( (ent, i) => {\r\n            data.faces.push(ent);\r\n            data.faces_i.push(i);\r\n        });\r\n        this._geom_maps.dn_faces_tris.forEach( (ent, _) => {\r\n            data.facetris.push(ent);\r\n        });\r\n        this._geom_maps.dn_points_verts.forEach( (ent, i) => {\r\n            data.points.push(ent);\r\n            data.points_i.push(i);\r\n        });\r\n        this._geom_maps.dn_plines_wires.forEach( (ent, i) => {\r\n            data.plines.push(ent);\r\n            data.plines_i.push(i);\r\n        });\r\n        this._geom_maps.dn_pgons_faces.forEach( (ent, i) => {\r\n            data.pgons.push(ent);\r\n            data.pgons_i.push(i);\r\n        });\r\n        this._geom_maps.dn_colls_objs.forEach( (ent, i) => {\r\n            data.colls.push(ent);\r\n            data.colls_i.push(i);\r\n        });\r\n        return data;\r\n    }\r\n    // --------------------------------------------------------------------------------------------\r\n    // Private methods\r\n    // --------------------------------------------------------------------------------------------\r\n    /**\r\n     * Merge ents, no conflict detection, deep copy.\r\n     * @param this_map\r\n     * @param other_map\r\n     * @param type\r\n     */\r\n    private _mergeEnts(this_map: Map<number, any>, other_map: Map<number, any>): void {\r\n        other_map.forEach( (ent, ent_i) => {\r\n            this_map.set(ent_i, lodash.cloneDeep(ent)); // TODO change to slice() once colls have been updated\r\n        });\r\n    }\r\n    /**\r\n     * Merge objects and collections, with conflict detection, deep copy.\r\n     * This is for merging\"\r\n     * point_i->vert_i\r\n     * pline_i-> wire_i\r\n     * pgon_i->face-i\r\n     * coll_i->[parent, points_i, plines_i, pgons_i]\r\n     * @param other_geom\r\n     * @param ent_type\r\n     */\r\n    private _mergeObjCollEnts(other_geom: GIGeom, ent_type: EEntType): void {\r\n        // get key\r\n        const geom_array_key: string = EEntStrToGeomMaps[ent_type];\r\n        // get maps\r\n        const this_map = this._geom_maps[geom_array_key];\r\n        const other_map = other_geom._geom_maps[geom_array_key];\r\n        // merge\r\n        other_map.forEach( (ent, ent_i) => {\r\n            const other_ts: number = other_geom.time_stamp.getEntTs(ent_type, ent_i);\r\n            if (this_map.has(ent_i)) {\r\n                // check time stamp\r\n                const this_ts: number = this._geom.time_stamp.getEntTs(ent_type, ent_i);\r\n                if (this_ts !== other_ts) {\r\n                    throw new Error('Conflict merging ' + getEntTypeName(ent_type) + '.');\r\n                }\r\n            } else {\r\n                this_map.set(ent_i, lodash.cloneDeep(ent)); // TODO change to slice() once colls have been updated\r\n                this._geom.time_stamp.setEntTs(ent_type, ent_i, other_ts);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Merge collections, no conflict detection, deep copy.\r\n     * This is for merging:\r\n     * point_i->colls_i\r\n     * pline_i->colls_i\r\n     * pgon_i->colls_i\r\n     * @param other_geom\r\n     */\r\n    private _mergeColls(this_map: Map<number, any>, other_map: Map<number, any>): void {\r\n        // merge\r\n        other_map.forEach( (other_colls_i, other_ent_i) => {\r\n            if (this_map.has(other_ent_i)) {\r\n                // merge colls\r\n                const this_colls_i_set: Set<number> = new Set(this_map.get(other_ent_i));\r\n                for (const other_coll_i of other_colls_i) {\r\n                    this_colls_i_set.add(other_coll_i);\r\n                }\r\n                this_map.set(other_ent_i, Array.from(this_colls_i_set));\r\n            } else {\r\n                this_map.set(other_ent_i, lodash.cloneDeep(other_colls_i)); // TODO change to slice() once colls have been updated\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Merge posis, with conflict detection, deep copy.\r\n     * This is for merging:\r\n     * posi_i->verts_i\r\n     * @param other_geom\r\n     */\r\n    private _mergePosis(other_geom: GIGeom): void {\r\n        // get maps\r\n        const this_map = this._geom_maps.up_posis_verts;\r\n        const other_map = other_geom._geom_maps.up_posis_verts;\r\n        // merge\r\n        other_map.forEach( (other_verts_i, other_posi_i) => {\r\n            const other_ts: number = other_geom.time_stamp.getEntTs(EEntType.POSI, other_posi_i);\r\n            if (this_map.has(other_posi_i)) {\r\n                // check time stamp\r\n                const this_ts: number = this._geom.time_stamp.getEntTs(EEntType.POSI, other_posi_i);\r\n                if (this_ts !== other_ts) {\r\n                    throw new Error('Conflict merging positions.');\r\n                }\r\n                // merge verts\r\n                const verts_i_set: Set<number> = new Set(this_map.get(other_posi_i));\r\n                for (const vert_i of other_verts_i) {\r\n                    verts_i_set.add(vert_i);\r\n                }\r\n                this_map.set(other_posi_i, Array.from(verts_i_set));\r\n            } else {\r\n                this_map.set(other_posi_i, other_verts_i.slice());\r\n                this._geom.time_stamp.setEntTs(EEntType.POSI, other_posi_i, other_ts);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     *\r\n     * @param this_map\r\n     * @param other_map\r\n     * @param selected\r\n     */\r\n    private _dumpEntsSelect(this_map: Map<number, any>, other_map: Map<number, any>, selected: Set<number>): void {\r\n        selected.forEach( ent_i => {\r\n            const other_ent = other_map.get(ent_i);\r\n            if (other_ent !== undefined) {\r\n                this_map.set(ent_i, lodash.cloneDeep(other_ent)); // TODO change to slice() once colls have been updated\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     *\r\n     * @param other_geom\r\n     * @param ent_type\r\n     * @param selected\r\n     */\r\n    private _dumpPosiObjCollSelect(other_geom: GIGeom, ent_type: EEntType, selected: Set<number>): void {\r\n        // get key\r\n        const geom_array_key: string = EEntStrToGeomMaps[ent_type];\r\n        // get maps\r\n        const this_map = this._geom_maps[geom_array_key];\r\n        const other_map = other_geom._geom_maps[geom_array_key];\r\n        // dump\r\n        selected.forEach( ent_i => {\r\n            const other_ent = other_map.get(ent_i);\r\n            if (other_ent !== undefined) {\r\n                this_map.set(ent_i, lodash.cloneDeep(other_ent)); // TODO change to slice() once colls have been updated\r\n                const other_ts: number = other_geom.time_stamp.getEntTs(ent_type, ent_i);\r\n                this._geom.time_stamp.setEntTs(ent_type, ent_i, other_ts);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { EEntType, TTri, TEdge, TWire, TFace, IGeomMaps, Txyz, TColl, TVert, Txy, TFaceTri } from './common';\r\nimport { GIGeom } from './GIGeom';\r\nimport { arrRem } from '../util/arrs';\r\n\r\n/**\r\n * Class for geometry.\r\n */\r\nexport class GIGeomModify {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    // ============================================================================\r\n    // Modify geometry\r\n    // ============================================================================\r\n    /**\r\n     * Insert a vertex into an edge and updates the wire with the new edge\r\n     * ~\r\n     * Applies to both plines and pgons.\r\n     * ~\r\n     * Plines can be open or closed.\r\n     * ~\r\n     */\r\n    public insertVertIntoWire(edge_i: number, posi_i: number): number {\r\n        const wire_i: number = this._geom.nav.navEdgeToWire(edge_i);\r\n        const wire: TWire = this._geom_maps.dn_wires_edges.get(wire_i);\r\n        const old_edge_verts_i: TEdge = this._geom_maps.dn_edges_verts.get(edge_i);\r\n        const old_and_prev_edge_i: number[] = this._geom_maps.up_verts_edges.get(old_edge_verts_i[0]);\r\n        const old_and_next_edge_i: number[] = this._geom_maps.up_verts_edges.get(old_edge_verts_i[1]);\r\n        // check prev edge\r\n        if (old_and_prev_edge_i.length === 2) {\r\n            if (old_and_prev_edge_i[0] === edge_i) {\r\n                throw new Error('Edges are in wrong order');\r\n            }\r\n        }\r\n        // check next edge amd save the next edge\r\n        if (old_and_next_edge_i.length === 2) {\r\n            if (old_and_next_edge_i[1] === edge_i) {\r\n                throw new Error('Edges are in wrong order');\r\n            }\r\n            this._geom_maps.up_verts_edges.set(old_edge_verts_i[1], [old_and_next_edge_i[1]]);\r\n        } else {\r\n            this._geom_maps.up_verts_edges.set(old_edge_verts_i[1], []);\r\n        }\r\n        // create one new vertex and one new edge\r\n        const new_vert_i: number = this._geom.add._addVertex(posi_i);\r\n        this._geom_maps.up_verts_edges.set(new_vert_i, [edge_i]);\r\n        const new_edge_i: number = this._geom.add._addEdge(new_vert_i, old_edge_verts_i[1]);\r\n        // update the down arrays\r\n        old_edge_verts_i[1] = new_vert_i;\r\n        wire.splice(wire.indexOf(edge_i), 1, edge_i, new_edge_i);\r\n        // update the up arrays for edges to wires\r\n        this._geom_maps.up_edges_wires.set(new_edge_i, wire_i);\r\n        // return the new edge\r\n        return new_edge_i;\r\n    }\r\n/**\r\n     * Insert multiple vertices into an edge and updates the wire with the new edges\r\n     * ~\r\n     * Applies to both plines and pgons.\r\n     * ~\r\n     * Plines can be open or closed.\r\n     * ~\r\n     */\r\n    public insertVertsIntoWire(edge_i: number, posis_i: number[]): number[] {\r\n        // check that there are no duplicates in the list\r\n        if (posis_i.length > 1) {\r\n            posis_i = Array.from(new Set(posis_i));\r\n        }\r\n        // check tha the posis being inserted are not already the start or end of this edge\r\n        const edge_posis_i: number[] = this._geom.nav.navAnyToPosi(EEntType.EDGE,  edge_i);\r\n        if (edge_posis_i[0] === posis_i[0]) {\r\n            posis_i = posis_i.slice(1);\r\n        }\r\n        if (edge_posis_i[1] === posis_i[posis_i.length - 1]) {\r\n            posis_i = posis_i.slice(0, posis_i.length - 1);\r\n        }\r\n        // if no more posis, then return empty list\r\n        if (posis_i.length === 0) { return []; }\r\n        // proceed to insert posis\r\n        const wire_i: number = this._geom.nav.navEdgeToWire(edge_i);\r\n        const wire: TWire = this._geom_maps.dn_wires_edges.get(wire_i);\r\n        const end_vert_i: number = this._geom_maps.dn_edges_verts.get(edge_i)[1];\r\n        const next_edge_i: number = this._geom_maps.up_verts_edges.get(end_vert_i)[1];\r\n        // check next edge amd save the next edge\r\n        if (next_edge_i !== undefined) {\r\n            this._geom_maps.up_verts_edges.set(end_vert_i, [next_edge_i]); // there is next edge\r\n        } else {\r\n            this._geom_maps.up_verts_edges.set(end_vert_i, []); // there is no next edge\r\n        }\r\n        // create the new vertices\r\n        const new_verts_i: number [] = [];\r\n        for (const posi_i of posis_i) {\r\n            const new_vert_i: number = this._geom.add._addVertex(posi_i);\r\n            new_verts_i.push(new_vert_i);\r\n        }\r\n        new_verts_i.push(end_vert_i);\r\n        // update the down/ip arrays for teh old edge\r\n        // the old edge becomes the first edge in this list, and it gets a new end vertex\r\n        this._geom_maps.dn_edges_verts.get(edge_i)[1] = new_verts_i[0];\r\n        this._geom_maps.up_verts_edges.set(new_verts_i[0], [edge_i]);\r\n        // create the new edges\r\n        const new_edges_i: number[] = [];\r\n        for (let i = 0; i < new_verts_i.length - 1; i++) {\r\n            const new_edge_i: number = this._geom.add._addEdge(new_verts_i[i], new_verts_i[i + 1]);\r\n            // update the up arrays for edges to wires\r\n            this._geom_maps.up_edges_wires.set(new_edge_i, wire_i);\r\n            // add to the list\r\n            new_edges_i.push(new_edge_i);\r\n        }\r\n        // update the down arrays for the wire\r\n        wire.splice(wire.indexOf(edge_i) + 1, 0, ...new_edges_i);\r\n        // return the new edge\r\n        return new_edges_i;\r\n    }\r\n    /**\r\n     * Replace all positions in an entity with a new set of positions.\r\n     * ~\r\n     */\r\n    public replacePosis(ent_type: EEntType, ent_i: number, new_posis_i: number[]): void {\r\n        const old_posis_i: number[] = this._geom.nav.navAnyToPosi(ent_type, ent_i);\r\n        if (old_posis_i.length !== new_posis_i.length) {\r\n            throw new Error('Replacing positions operation failed due to incorrect number of positions.');\r\n        }\r\n        const old_posis_i_map: Map<number, number> = new Map(); // old_posi_i -> index\r\n        for (let i = 0; i < old_posis_i.length; i++) {\r\n            const old_posi_i: number = old_posis_i[i];\r\n            old_posis_i_map[old_posi_i] = i;\r\n        }\r\n        const verts_i: number[] = this._geom.nav.navAnyToVert(ent_type, ent_i);\r\n        for (const vert_i of verts_i) {\r\n            const old_posi_i: number = this._geom.nav.navVertToPosi(vert_i);\r\n            const i: number = old_posis_i_map[old_posi_i];\r\n            const new_posi_i: number = new_posis_i[i];\r\n            // set the down array\r\n            this._geom_maps.dn_verts_posis.set(vert_i, new_posi_i);\r\n            // update the up arrays for the old posi, i.e. remove this vert\r\n            arrRem(this._geom_maps.up_posis_verts.get(old_posi_i), vert_i);\r\n            // update the up arrays for the new posi, i.e. add this vert\r\n            this._geom_maps.up_posis_verts.get(new_posi_i).push(vert_i);\r\n        }\r\n    }\r\n    /**\r\n     * Replace the position of a vertex with a new position.\r\n     * ~\r\n     * If the result is an edge with two same posis, then the vertex will be deleted if del_if_invalid = true.\r\n     * If del_if_invalid = false, no action will be taken.\r\n     * ~\r\n     * Called by modify.Fuse() and poly2d.Stitch().\r\n     */\r\n    public replaceVertPosi(vert_i: number, new_posi_i: number, del_if_invalid: boolean = true): void {\r\n        // special case\r\n        // check if this is a vert for an edge\r\n        const edges_i: number[] = this._geom.nav.navVertToEdge(vert_i);\r\n        const num_edges: number = edges_i.length;\r\n        switch (num_edges) {\r\n            case 1:\r\n                // we must be at an edge at the start or end of an open wire\r\n                const edge_posis_i: number[] = this._geom.nav.navAnyToPosi(EEntType.EDGE, edges_i[0]);\r\n                if (edge_posis_i[0] === new_posi_i || edge_posis_i[1]  === new_posi_i) {\r\n                    // special case where start or end has new_posi_i\r\n                    if (del_if_invalid) {\r\n                        this._geom.del_vert.delVert(vert_i);\r\n                    }\r\n                    return;\r\n                }\r\n                break;\r\n            case 2:\r\n                // we must be in the middle of a wire\r\n                const prev_edge_i: number = edges_i[0];\r\n                const next_edge_i: number = edges_i[1];\r\n                const [a_posi_i, b1_posi_i]: [number, number] = this._geom.nav.navAnyToPosi(EEntType.EDGE, prev_edge_i) as [number, number];\r\n                const [b2_posi_i, c_posi_i]: [number, number] = this._geom.nav.navAnyToPosi(EEntType.EDGE, next_edge_i) as [number, number];\r\n                if (a_posi_i === new_posi_i && c_posi_i  === new_posi_i) {\r\n                    // special case where both adjacent edges has new_posi_i\r\n                    const [b2_vert_i, c_vert_i]: [number, number] =\r\n                        this._geom.nav.navEdgeToVert(next_edge_i) as [number, number];\r\n                    if (vert_i !== b2_vert_i) {\r\n                        throw new Error('Bad navigation in geometry data structure.');\r\n                    }\r\n                    if (del_if_invalid) {\r\n                        this._geom.del_vert.delVert(c_vert_i);\r\n                        this._geom.del_vert.delVert(vert_i);\r\n                    }\r\n                    return;\r\n                } else if (a_posi_i === new_posi_i || c_posi_i === new_posi_i) {\r\n                    // special case where one adjacent edges has new_posi_i\r\n                    if (del_if_invalid) {\r\n                        this._geom.del_vert.delVert(vert_i);\r\n                    }\r\n                    return;\r\n                }\r\n                break;\r\n            // default:\r\n            //     break;\r\n        }\r\n\r\n        // normal case\r\n        const old_posi_i: number = this._geom.nav.navVertToPosi(vert_i);\r\n        // set the down array\r\n        this._geom_maps.dn_verts_posis.set(vert_i, new_posi_i);\r\n        // update the up arrays for the old posi, i.e. remove this vert\r\n        arrRem(this._geom_maps.up_posis_verts.get(old_posi_i), vert_i);\r\n        // update the up arrays for the new posi, i.e. add this vert\r\n        this._geom_maps.up_posis_verts.get(new_posi_i).push(vert_i);\r\n    }\r\n    /**\r\n     * Unweld the vertices on naked edges.\r\n     * ~\r\n     */\r\n    public unweldVertsShallow(verts_i: number[]): number[] {\r\n        // create a map, for each posi_i, count how many verts there are in the input verts\r\n        const exist_posis_i_map: Map<number, number> = new Map(); // posi_i -> count\r\n        for (const vert_i of verts_i) {\r\n            const posi_i: number = this._geom.nav.navVertToPosi(vert_i);\r\n            if (!exist_posis_i_map.has(posi_i)) {\r\n                exist_posis_i_map.set(posi_i, 0);\r\n            }\r\n            const vert_count: number = exist_posis_i_map.get(posi_i);\r\n            exist_posis_i_map.set(posi_i, vert_count + 1);\r\n        }\r\n        // copy positions on the perimeter and make a map\r\n        const old_to_new_posis_i_map: Map<number, number> = new Map();\r\n        exist_posis_i_map.forEach( (vert_count, old_posi_i) => {\r\n            const all_old_verts_i: number[] = this._geom.nav.navPosiToVert(old_posi_i);\r\n            const all_vert_count: number = all_old_verts_i.length;\r\n            if (vert_count !== all_vert_count) {\r\n                if (!old_to_new_posis_i_map.has(old_posi_i)) {\r\n                    const new_posi_i: number = this._geom.add.copyPosis(old_posi_i, true) as number;\r\n                    old_to_new_posis_i_map.set(old_posi_i, new_posi_i);\r\n                }\r\n            }\r\n        });\r\n        // now go through the geom again and rewire to the new posis\r\n        for (const vert_i of verts_i) {\r\n            const old_posi_i: number = this._geom.nav.navVertToPosi(vert_i);\r\n            if (old_to_new_posis_i_map.has(old_posi_i)) {\r\n                const new_posi_i: number = old_to_new_posis_i_map.get(old_posi_i);\r\n                // update the down arrays\r\n                this._geom_maps.dn_verts_posis.set(vert_i, new_posi_i);\r\n                // update the up arrays for the old posi, i.e. remove this vert\r\n                arrRem(this._geom_maps.up_posis_verts.get(old_posi_i), vert_i);\r\n                // update the up arrays for the new posi, i.e. add this vert\r\n                this._geom_maps.up_posis_verts.get(new_posi_i).push(vert_i);\r\n            }\r\n        }\r\n        // return all the new positions\r\n        return Array.from(old_to_new_posis_i_map.values());\r\n    }\r\n    /**\r\n     * Unweld all vertices by cloning the positions that are shared.\r\n     * ~\r\n     * Attributes on the positions are copied.\r\n     * ~\r\n     * @param verts_i\r\n     */\r\n    public cloneVertPositions(verts_i: number[]): number[] {\r\n        const new_posis_i: number[] = [];\r\n        for (const vert_i of verts_i) {\r\n            const exist_posi_i: number = this._geom.nav.navVertToPosi(vert_i);\r\n            const all_verts_i: number[] = this._geom.nav.navPosiToVert(exist_posi_i);\r\n            const all_verts_count: number = all_verts_i.length;\r\n            if (all_verts_count > 1) {\r\n                const new_posi_i: number = this._geom.add.copyPosis(exist_posi_i, true) as number;\r\n                // update the down arrays\r\n                this._geom_maps.dn_verts_posis.set(vert_i, new_posi_i);\r\n                // update the up arrays for the old posi, i.e. remove this vert\r\n                arrRem(this._geom_maps.up_posis_verts.get(exist_posi_i), vert_i);\r\n                // update the up arrays for the new posi, i.e. add this vert\r\n                this._geom_maps.up_posis_verts.get(new_posi_i).push(vert_i);\r\n                // add the new posi_i to the list, to be returned later\r\n                new_posis_i.push(new_posi_i);\r\n            }\r\n        }\r\n        // return all the new positions\r\n        return new_posis_i;\r\n    }\r\n    /**\r\n     * Weld all vertices by merging the positions that are equal, so that they become shared.\r\n     * ~\r\n     * The old positions are deleted if unused. Attributes on those positions are discarded.\r\n     * ~\r\n     * @param verts_i\r\n     */\r\n    public mergeVertPositions(verts_i: number[]): number {\r\n        // get a list of unique posis to merge\r\n        // at the same time, make a sparse array vert_i -> posi_i\r\n        const map_posis_to_merge_i: Map<number, number[]> = new Map();\r\n        const vert_i_to_posi_i: number[] = []; // sparese array\r\n        for (const vert_i of verts_i) {\r\n            const exist_posi_i: number = this._geom.nav.navVertToPosi(vert_i);\r\n            vert_i_to_posi_i[vert_i] = exist_posi_i;\r\n            if (!map_posis_to_merge_i.has(exist_posi_i)) {\r\n                map_posis_to_merge_i.set(exist_posi_i, []);\r\n            }\r\n            map_posis_to_merge_i.get(exist_posi_i).push(vert_i);\r\n        }\r\n        // calculate the new xyz\r\n        // at the same time make a list of posis to del\r\n        const posis_to_del_i: number[] = [];\r\n        const new_xyz: Txyz = [0, 0, 0];\r\n        for (const [exist_posi_i, merge_verts_i] of Array.from(map_posis_to_merge_i)) {\r\n            const posi_xyz: Txyz = this._geom.modeldata.attribs.query.getPosiCoords(exist_posi_i);\r\n            new_xyz[0] += posi_xyz[0];\r\n            new_xyz[1] += posi_xyz[1];\r\n            new_xyz[2] += posi_xyz[2];\r\n            const all_verts_i: number[] = this._geom.nav.navPosiToVert(exist_posi_i);\r\n            const all_verts_count: number = all_verts_i.length;\r\n            if (all_verts_count === merge_verts_i.length) {\r\n                posis_to_del_i.push(exist_posi_i);\r\n            }\r\n        }\r\n        // make the new posi\r\n        const num_posis: number = map_posis_to_merge_i.size;\r\n        new_xyz[0] = new_xyz[0] / num_posis;\r\n        new_xyz[1] = new_xyz[1] / num_posis;\r\n        new_xyz[2] = new_xyz[2] / num_posis;\r\n        const new_posi_i: number = this._geom.add.addPosi() as number;\r\n        this._geom.modeldata.attribs.add.setPosiCoords(new_posi_i, new_xyz);\r\n        // replace the verts posi\r\n        for (const vert_i of verts_i) {\r\n            // update the down arrays\r\n            this._geom_maps.dn_verts_posis.set(vert_i, new_posi_i);\r\n            // update the up arrays for the old posi, i.e. remove this vert\r\n            arrRem(this._geom_maps.up_posis_verts.get(vert_i_to_posi_i[vert_i]), vert_i);\r\n            // update the up arrays for the new posi, i.e. add this vert\r\n            this._geom_maps.up_posis_verts.get(new_posi_i).push(vert_i);\r\n        }\r\n        // del the posis that are no longer used, i.e. have zero verts\r\n        this._geom.del.delPosis(posis_to_del_i);\r\n        // return all the new positions\r\n        return new_posi_i;\r\n    }\r\n    /**\r\n     * Reverse the edges of a wire.\r\n     * This lists the edges in reverse order, and flips each edge.\r\n     * ~\r\n     * The attributes will not be affected. So the order of edge attribtes will also become reversed.\r\n     *\r\n     * TODO\r\n     * This does not reverse the order of the edges.\r\n     * The method, getWireVertices() in GeomQuery returns the correct vertices.\r\n     * However, you need to be careful with edge order.\r\n     * The next edge after edge 0 may not be edge 1.\r\n     * If reversed it will instead be the last edge.\r\n     */\r\n    public reverse(wire_i: number): void {\r\n        const wire: TWire = this._geom_maps.dn_wires_edges.get(wire_i);\r\n        wire.reverse();\r\n        // reverse the edges\r\n        for (const edge_i of wire) {\r\n            const edge: TEdge = this._geom_maps.dn_edges_verts.get(edge_i);\r\n            edge.reverse();\r\n            // the verts pointing up to edges also need to be reversed\r\n            const edges_i: number[] = this._geom_maps.up_verts_edges.get(edge[0]);\r\n            edges_i.reverse();\r\n        }\r\n        // if this is the first wire in a face, reverse the triangles\r\n        const face_i: number = this._geom_maps.up_wires_faces.get(wire_i);\r\n        if (face_i !== undefined) {\r\n            const face: TFace = this._geom_maps.dn_faces_wires.get(face_i);\r\n            const facetris: TFaceTri = this._geom_maps.dn_faces_tris.get(face_i);\r\n            if (face[0] === wire_i) {\r\n                for (const tri_i of facetris) {\r\n                    const tri: TTri = this._geom_maps.dn_tris_verts.get(tri_i);\r\n                    tri.reverse();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Shifts the edges of a wire.\r\n     * ~\r\n     * The attributes will not be affected. For example, lets say a polygon has three edges\r\n     * e1, e2, e3, with attribute values 5, 6, 7\r\n     * If teh edges are shifted by 1, the edges will now be\r\n     * e2, e3, e1, withh attribute values 6, 7, 5\r\n     */\r\n    public shift(wire_i: number, offset: number): void {\r\n        const wire: TWire = this._geom_maps.dn_wires_edges.get(wire_i);\r\n        wire.unshift.apply( wire, wire.splice( offset, wire.length ) );\r\n    }\r\n\r\n}\r\n","import { EEntType, TTri, TEdge, TWire, TFace, IGeomMaps, Txyz, TColl, TVert } from './common';\r\nimport { GIGeom } from './GIGeom';\r\nimport { arrRem, arrIdxAdd } from '../util/arrs';\r\nimport { vecDot } from '../geom/vectors';\r\n\r\n/**\r\n * Class for geometry.\r\n */\r\nexport class GIGeomModifyColl {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    /**\r\n     * Set the parent if a collection\r\n     * @param coll_i The index of teh collection that is the parent\r\n     * @param parent_coll_i\r\n     */\r\n    public setCollParent(coll_i: number, parent_coll_i: number): void {\r\n        this._geom_maps.dn_colls_objs.get(coll_i)[0] = parent_coll_i;\r\n        // update time stamp\r\n        this._geom.time_stamp.updateEntTs(EEntType.COLL, coll_i);\r\n    }\r\n    /**\r\n     * Add entities to a collection.\r\n     * Time stamp is not updated.\r\n     * @param coll_i\r\n     * @param points_i\r\n     * @param plines_i\r\n     * @param pgons_i\r\n     */\r\n    public collAddEnts(coll_i: number, points_i: number[], plines_i: number[], pgons_i: number[]): void {\r\n        const coll: TColl = this._geom_maps.dn_colls_objs.get(coll_i);\r\n        const coll_points: number[] = coll[1];\r\n        if (points_i.length) {\r\n            for (const point_i of points_i) {\r\n                if (coll_points.indexOf(point_i) === -1) {\r\n                    // update down arrays\r\n                    coll_points.push(point_i);\r\n                    // update up arrays\r\n                    if (this._geom_maps.up_points_colls.has(point_i)) {\r\n                        this._geom_maps.up_points_colls.get(point_i).push(coll_i);\r\n                    } else {\r\n                        this._geom_maps.up_points_colls.set(point_i, [coll_i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const coll_plines: number[] = coll[2];\r\n        if (plines_i.length) {\r\n            for (const pline_i of plines_i) {\r\n                if (coll_plines.indexOf(pline_i) === -1) {\r\n                    // update down arrays\r\n                    coll_plines.push(pline_i);\r\n                    // update up arrays\r\n                    if (this._geom_maps.up_plines_colls.has(pline_i)) {\r\n                        this._geom_maps.up_plines_colls.get(pline_i).push(coll_i);\r\n                    } else {\r\n                        this._geom_maps.up_plines_colls.set(pline_i, [coll_i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const coll_pgons: number[] = coll[3];\r\n        if (pgons_i.length) {\r\n            for (const pgon_i of pgons_i) {\r\n                if (coll_pgons.indexOf(pgon_i) === -1) {\r\n                    // update down arrays\r\n                    coll_pgons.push(pgon_i);\r\n                    // update up arrays\r\n                    if (this._geom_maps.up_pgons_colls.has(pgon_i)) {\r\n                        this._geom_maps.up_pgons_colls.get(pgon_i).push(coll_i);\r\n                    } else {\r\n                        this._geom_maps.up_pgons_colls.set(pgon_i, [coll_i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Remove entities from a collection.\r\n     * Time stamp is not updated.\r\n     * @param coll_i\r\n     * @param points_i\r\n     * @param plines_i\r\n     * @param pgons_i\r\n     */\r\n    public collRemoveEnts(coll_i: number, points_i: number[], plines_i: number[], pgons_i: number[]): void {\r\n        const coll: TColl = this._geom_maps.dn_colls_objs.get(coll_i);\r\n        const coll_points: number[] = coll[1];\r\n        if (points_i && points_i.length) {\r\n            for (const point_i of points_i) {\r\n                // update down arrays\r\n                arrRem(coll_points, point_i);\r\n                // update up arrays\r\n                arrRem(this._geom_maps.up_points_colls.get(point_i), coll_i);\r\n            }\r\n        }\r\n        const coll_plines: number[] = coll[2];\r\n        if (plines_i && plines_i.length) {\r\n            for (const pline_i of plines_i) {\r\n                // update down arrays\r\n                arrRem(coll_plines, pline_i);\r\n                // update up arrays\r\n                arrRem(this._geom_maps.up_plines_colls.get(pline_i), coll_i);\r\n            }\r\n        }\r\n        const coll_pgons: number[] = coll[3];\r\n        if (pgons_i && pgons_i.length) {\r\n            for (const pgon_i of pgons_i) {\r\n                // update down arrays\r\n                arrRem(coll_pgons, pgon_i);\r\n                // update up arrays\r\n                arrRem(this._geom_maps.up_pgons_colls.get(pgon_i), coll_i);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { EEntType, TTri, TEdge, TWire, TFace, IGeomMaps, Txyz, TColl, TVert } from './common';\r\nimport { GIGeom } from './GIGeom';\r\nimport { arrRem, arrIdxAdd } from '../util/arrs';\r\nimport { vecDot } from '../geom/vectors';\r\nimport { triangulate } from '../triangulate/triangulate';\r\n\r\n/**\r\n * Class for geometry.\r\n */\r\nexport class GIGeomModifyPgon {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    /**\r\n     * Creates one or more holes in a polygon.\r\n     * Updates time stamp for the polygon.\r\n     * ~\r\n     */\r\n    public cutPgonHoles(pgon_i: number, posis_i_arr: number[][]): number[] {\r\n        const face_i: number = this._geom.nav.navPgonToFace(pgon_i);\r\n        // get the normal of the face\r\n        const face_normal: Txyz = this._geom.query.getFaceNormal(face_i);\r\n        // make the wires for the holes\r\n        const hole_wires_i: number[] = [];\r\n        for (const hole_posis_i of posis_i_arr) {\r\n            const hole_vert_i_arr: number[] = hole_posis_i.map( posi_i => this._geom.add._addVertex(posi_i));\r\n            const hole_edges_i_arr: number[] = [];\r\n            for (let i = 0; i < hole_vert_i_arr.length - 1; i++) {\r\n                hole_edges_i_arr.push( this._geom.add._addEdge(hole_vert_i_arr[i], hole_vert_i_arr[i + 1]));\r\n            }\r\n            hole_edges_i_arr.push( this._geom.add._addEdge(hole_vert_i_arr[hole_vert_i_arr.length - 1], hole_vert_i_arr[0]));\r\n            const hole_wire_i: number = this._geom.add._addWire(hole_edges_i_arr, true);\r\n            // get normal of wire and check if we need to reverse the wire\r\n            const wire_normal: Txyz = this._geom.query.getWireNormal(hole_wire_i);\r\n            if (vecDot(face_normal, wire_normal) > 0) {\r\n                this._geom.modify.reverse(hole_wire_i);\r\n            }\r\n            // add to list of holes\r\n            hole_wires_i.push(hole_wire_i);\r\n        }\r\n        // create the holes, does everything at face level\r\n        this._cutFaceHoles(face_i, hole_wires_i);\r\n        // update the time stamp\r\n        this._geom.time_stamp.updateObjsTs(EEntType.PGON, pgon_i);\r\n        // no need to change either the up or down arrays\r\n        // return the new wires\r\n        return hole_wires_i;\r\n    }\r\n    /**\r\n     * Retriangulate the polygons.\r\n     * Updates time stamp for the polygons.\r\n     * ~\r\n     */\r\n    public triPgons(pgons_i: number|number[]): void {\r\n        if (!Array.isArray(pgons_i)) {\r\n            const wires_i: number[] = this._geom.nav.navAnyToWire(EEntType.PGON, pgons_i);\r\n            const outer_i: number = wires_i[0];\r\n            const holes_i: number[] = wires_i.slice(1);\r\n            // get the face\r\n            const face_i: number = this._geom.nav.navPgonToFace(pgons_i);\r\n            // create the triangles\r\n            const new_tris_i: number[] = this._geom.add._addTris(outer_i, holes_i);\r\n            // delete the old trianges\r\n            const old_face_tris_i: number[] = this._geom_maps.dn_faces_tris.get(face_i);\r\n            for (const old_face_tri_i of old_face_tris_i) {\r\n                // verts to tris\r\n                for (const vert_i of this._geom_maps.dn_tris_verts.get(old_face_tri_i)) {\r\n                    const vert_tris_i: number[] = this._geom_maps.up_verts_tris.get(vert_i);\r\n                    arrRem(vert_tris_i, old_face_tri_i);\r\n                }\r\n                // tris to verts\r\n                this._geom_maps.dn_tris_verts.delete(old_face_tri_i);\r\n                // tris to faces\r\n                this._geom_maps.up_tris_faces.delete(old_face_tri_i);\r\n            }\r\n            // update up array for tri to face\r\n            for (const new_tri_i of new_tris_i) {\r\n                this._geom_maps.up_tris_faces.set(new_tri_i, face_i);\r\n            }\r\n            // update down array for face to tri\r\n            this._geom_maps.dn_faces_tris.set(face_i, new_tris_i);\r\n            // update the time stamp\r\n            this._geom.time_stamp.updateObjsTs(EEntType.PGON, pgons_i);\r\n        } else { // An array of pgons\r\n            pgons_i.forEach(pgon_i => this.triPgons(pgon_i));\r\n        }\r\n    }\r\n    // ============================================================================\r\n    // Private methods\r\n    // ============================================================================\r\n    /**\r\n     * Adds a hole to a face and updates the arrays.\r\n     * Wires are assumed to be closed!\r\n     * This also calls addTris()\r\n     * @param wire_i\r\n     */\r\n    private _cutFaceHoles(face_i: number, hole_wires_i: number[]): number {\r\n        // get the wires and triangles arrays\r\n        const face_wires_i: number[] = this._geom_maps.dn_faces_wires.get(face_i);\r\n        const old_face_tris_i: number[] = this._geom_maps.dn_faces_tris.get(face_i);\r\n        // get the outer wire\r\n        const outer_wire_i: number = face_wires_i[0];\r\n        // get the hole wires\r\n        const all_hole_wires_i: number[] = [];\r\n        if (face_wires_i.length > 1) {\r\n            face_wires_i.slice(1).forEach(wire_i => all_hole_wires_i.push(wire_i));\r\n        }\r\n        hole_wires_i.forEach(wire_i => all_hole_wires_i.push(wire_i));\r\n        // create the triangles\r\n        const new_tris_i: number[] = this._geom.add._addTris(outer_wire_i, all_hole_wires_i);\r\n        // create the face\r\n        const new_wires_i: number[] = face_wires_i.concat(hole_wires_i);\r\n        // update down arrays\r\n        this._geom_maps.dn_faces_wires.set(face_i, new_wires_i);\r\n        this._geom_maps.dn_faces_tris.set(face_i, new_tris_i);\r\n        // update up arrays\r\n        hole_wires_i.forEach(hole_wire_i => this._geom_maps.up_wires_faces.set(hole_wire_i, face_i));\r\n        new_tris_i.forEach( tri_i => this._geom_maps.up_tris_faces.set(tri_i, face_i ));\r\n        // delete the old trianges\r\n        for (const old_face_tri_i of old_face_tris_i) {\r\n            // remove these deleted tris from the verts\r\n            for (const vert_i of this._geom_maps.dn_tris_verts.get(old_face_tri_i)) {\r\n                const tris_i: number[] = this._geom_maps.up_verts_tris.get(vert_i);\r\n                arrRem(tris_i, old_face_tri_i);\r\n            }\r\n            // tris to verts\r\n            this._geom_maps.dn_tris_verts.delete(old_face_tri_i);\r\n            // tris to faces\r\n            this._geom_maps.up_tris_faces.delete(old_face_tri_i);\r\n        }\r\n        // return the numeric index of the face\r\n        return face_i;\r\n    }\r\n\r\n    /**\r\n     * Updates the tris in a face\r\n     * @param face_i\r\n     */\r\n    private _updateFaceTris(face_i: number) {\r\n        const wires_i: number[] = this._geom_maps.dn_faces_wires.get(face_i);\r\n        // get the wires\r\n        const border_wire_i: number = wires_i[0];\r\n        // get the border and holes\r\n        const holes_wires_i: number[] = wires_i.slice(1);\r\n        const tris_i: number[] = this._geom.add._addTris(border_wire_i, holes_wires_i);\r\n        // delete the old tris\r\n        for (const tri_i of this._geom_maps.dn_faces_tris.get(face_i)) {\r\n            // update the verts\r\n            const verts_i: number[] = this._geom_maps.dn_tris_verts.get(tri_i);\r\n            for (const vert_i of verts_i) {\r\n                this._geom_maps.up_verts_tris.delete(vert_i); // up\r\n            }\r\n            // tris to verts\r\n            this._geom_maps.dn_tris_verts.delete(tri_i); // down\r\n            // tris to faces\r\n            this._geom_maps.up_tris_faces.delete(tri_i); // up\r\n        }\r\n        // update down arrays\r\n        this._geom_maps.dn_faces_tris.set(face_i, tris_i);\r\n        // update up arrays\r\n        for (const tri_i of tris_i) {\r\n            this._geom_maps.up_tris_faces.set(tri_i, face_i);\r\n        }\r\n    }\r\n}\r\n","import { EEntType, TTri, TEdge, TWire, TFace, IGeomMaps, Txyz, TColl, TVert } from './common';\r\nimport { GIGeom } from './GIGeom';\r\nimport { arrRem, arrIdxAdd } from '../util/arrs';\r\nimport { vecDot } from '../geom/vectors';\r\n\r\n/**\r\n * Class for modifying plines.\r\n */\r\nexport class GIGeomModifyPline {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    /**\r\n     * Close a polyline.\r\n     * ~\r\n     * If the pline is already closed, do nothing.\r\n     * ~\r\n     */\r\n    public closePline(pline_i: number): number {\r\n        const wire_i: number = this._geom.nav.navPlineToWire(pline_i);\r\n        // get the wire start and end verts\r\n        const wire: TWire = this._geom_maps.dn_wires_edges.get(wire_i);\r\n        const num_edges: number = wire.length;\r\n        const start_edge_i: number = wire[0];\r\n        const end_edge_i: number = wire[num_edges - 1];\r\n        const start_vert_i: number = this._geom.nav.navEdgeToVert(start_edge_i)[0];\r\n        const end_vert_i: number = this._geom.nav.navEdgeToVert(end_edge_i)[1];\r\n        if (start_vert_i === end_vert_i) { return; }\r\n        // add the edge to the model\r\n        const new_edge_i: number = this._geom.add._addEdge(end_vert_i, start_vert_i);\r\n        // update the down arrays\r\n        this._geom_maps.dn_wires_edges.get(wire_i).push(new_edge_i);\r\n        // update the up arrays\r\n        this._geom_maps.up_edges_wires.set(new_edge_i, wire_i);\r\n        // return the new edge\r\n        return new_edge_i;\r\n    }\r\n    /**\r\n     * Open a wire, by deleting the last edge.\r\n     * ~\r\n     * If the wire is already open, do nothing.\r\n     * ~\r\n     * If the wire does not belong to a pline, then do nothing.\r\n     * @param wire_i The wire to close.\r\n     */\r\n    public openPline(pline_i: number): void {\r\n        const wire_i: number = this._geom.nav.navPlineToWire(pline_i);\r\n        // get the pline\r\n        if (pline_i === undefined) { return; }\r\n        // get the wire start and end verts\r\n        const wire: TWire = this._geom_maps.dn_wires_edges.get(wire_i);\r\n        // check wire has more than two edges\r\n        const num_edges: number = wire.length;\r\n        if (num_edges < 3) { return; }\r\n        // get start and end\r\n        const start_edge_i: number = wire[0];\r\n        const end_edge_i: number = wire[num_edges - 1];\r\n        const start_vert_i: number = this._geom.nav.navEdgeToVert(start_edge_i)[0];\r\n        const end_vert_i: number = this._geom.nav.navEdgeToVert(end_edge_i)[1];\r\n        // if this wire is not closed, then return\r\n        if (start_vert_i !== end_vert_i) { return; }\r\n        // del the end edge from the pline\r\n        this._geom.del_edge.delEdges(end_edge_i, true, false);\r\n    }\r\n}\r\n","\r\nimport {  EEntType, IGeomMaps, TVert, TEdge, TWire, TFace, TPoint, TPlane, TPline, TPgon, TColl, IEntSets } from './common';\r\nimport { isPosi, isVert, isPoint, isEdge, isWire, isPline, isFace, isPgon, isColl, isTri } from './id';\r\nimport { GIGeom } from './GIGeom';\r\n/**\r\n * Class for navigating the geometry.\r\n */\r\nexport class GIGeomNav {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    // ============================================================================\r\n    // Get entities\r\n    // ============================================================================\r\n    public getVert(vert_i: number): TVert {\r\n        return this._geom_maps.dn_verts_posis.get(vert_i);\r\n    }\r\n    public getEdge(edge_i: number): TEdge {\r\n        return this._geom_maps.dn_edges_verts.get(edge_i);\r\n    }\r\n    public getWire(wire_i: number): TWire {\r\n        return this._geom_maps.dn_wires_edges.get(wire_i);\r\n    }\r\n    public getFace(face_i: number): TFace {\r\n        return this._geom_maps.dn_faces_wires.get(face_i);\r\n    }\r\n    public getPoint(point_i: number): TPoint {\r\n        return this._geom_maps.dn_points_verts.get(point_i);\r\n    }\r\n    public getPline(pline_i: number): TPline {\r\n        return this._geom_maps.dn_plines_wires.get(pline_i);\r\n    }\r\n    public getPgon(pgon_i: number): TPgon {\r\n        return this._geom_maps.dn_pgons_faces.get(pgon_i);\r\n    }\r\n    public getColl(coll_i: number): TColl {\r\n        return this._geom_maps.dn_colls_objs.get(coll_i);\r\n    }\r\n    // ============================================================================\r\n    // Navigate down the hierarchy\r\n    // ============================================================================\r\n    public navVertToPosi(vert_i: number): number {\r\n        return this._geom_maps.dn_verts_posis.get(vert_i);\r\n    }\r\n    public navTriToVert(tri_i: number): number[] {\r\n        return this._geom_maps.dn_tris_verts.get(tri_i);\r\n    }\r\n    public navEdgeToVert(edge_i: number): number[] {\r\n        return this._geom_maps.dn_edges_verts.get(edge_i);\r\n    }\r\n    public navWireToEdge(wire_i: number): number[] {\r\n        return this._geom_maps.dn_wires_edges.get(wire_i);\r\n    }\r\n    public navFaceToWire(face_i: number): number[] {\r\n        return this._geom_maps.dn_faces_wires.get(face_i);\r\n    }\r\n    public navFaceToTri(face_i: number): number[] {\r\n        return this._geom_maps.dn_faces_tris.get(face_i);\r\n    }\r\n    public navPointToVert(point_i: number): number {\r\n        return this._geom_maps.dn_points_verts.get(point_i);\r\n    }\r\n    public navPlineToWire(line_i: number): number {\r\n        return this._geom_maps.dn_plines_wires.get(line_i);\r\n    }\r\n    public navPgonToFace(pgon_i: number): number {\r\n        return this._geom_maps.dn_pgons_faces.get(pgon_i);\r\n    }\r\n    public navCollToPoint(coll_i: number): number[] {\r\n        // get the descendants of this collection\r\n        const coll_and_desc_i: number[] = this._geom.query.getCollDescendents(coll_i);\r\n        // if no descendants, just return the the ents in this coll\r\n        if (coll_and_desc_i.length === 0) {\r\n            return this._geom_maps.dn_colls_objs.get(coll_i)[1]; // coll points\r\n        }\r\n        // we have descendants, so get all points\r\n        coll_and_desc_i.splice(0, 0, coll_i);\r\n        const points_i_set: Set<number> = new Set();\r\n        for (const one_coll_i of coll_and_desc_i) {\r\n            for (const point_i of this._geom_maps.dn_colls_objs.get(one_coll_i)[1]) {\r\n                points_i_set.add(point_i);\r\n            }\r\n        }\r\n        return Array.from(points_i_set);\r\n    }\r\n    public navCollToPline(coll_i: number): number[] {\r\n        // get the descendants of this collection\r\n        const coll_and_desc_i: number[] = this._geom.query.getCollDescendents(coll_i);\r\n        // if no descendants, just return the the ents in this coll\r\n        if (coll_and_desc_i.length === 0) {\r\n            return this._geom_maps.dn_colls_objs.get(coll_i)[2]; // coll lines\r\n        }\r\n        // we have descendants, so get all plines\r\n        coll_and_desc_i.splice(0, 0, coll_i);\r\n        const plines_i_set: Set<number> = new Set();\r\n        for (const one_coll_i of coll_and_desc_i) {\r\n            for (const pline_i of this._geom_maps.dn_colls_objs.get(one_coll_i)[2]) {\r\n                plines_i_set.add(pline_i);\r\n            }\r\n        }\r\n        return Array.from(plines_i_set);\r\n    }\r\n    public navCollToPgon(coll_i: number): number[] {\r\n        // get the descendants of this collection\r\n        const coll_and_desc_i: number[] = this._geom.query.getCollDescendents(coll_i);\r\n        // if no descendants, just return the the ents in this coll\r\n        if (coll_and_desc_i.length === 0) {\r\n            return this._geom_maps.dn_colls_objs.get(coll_i)[3]; // coll pgons\r\n        }\r\n        // we have descendants, so get all pgons\r\n        coll_and_desc_i.splice(0, 0, coll_i);\r\n        const pgons_i_set: Set<number> = new Set();\r\n        for (const one_coll_i of coll_and_desc_i) {\r\n            for (const pgon_i of this._geom_maps.dn_colls_objs.get(one_coll_i)[3]) {\r\n                pgons_i_set.add(pgon_i);\r\n            }\r\n        }\r\n        return Array.from(pgons_i_set);\r\n    }\r\n    public navCollToCollChildren(coll_i: number): number[] {\r\n        return this._geom.query.getCollChildren(coll_i); // coll children\r\n    }\r\n    // ============================================================================\r\n    // Navigate up the hierarchy\r\n    // ============================================================================\r\n    public navPosiToVert(posi_i: number): number[] {\r\n        return this._geom_maps.up_posis_verts.get(posi_i);\r\n    }\r\n    public navVertToTri(vert_i: number): number[] {\r\n        return this._geom_maps.up_verts_tris.get(vert_i);\r\n    }\r\n    public navVertToEdge(vert_i: number): number[] {\r\n        return this._geom_maps.up_verts_edges.get(vert_i);\r\n    }\r\n    public navTriToFace(tri_i: number): number {\r\n        return this._geom_maps.up_tris_faces.get(tri_i);\r\n    }\r\n    public navEdgeToWire(edge_i: number): number {\r\n        return this._geom_maps.up_edges_wires.get(edge_i);\r\n    }\r\n    public navWireToFace(wire_i: number): number {\r\n        return this._geom_maps.up_wires_faces.get(wire_i);\r\n    }\r\n    public navVertToPoint(vert_i: number): number {\r\n        return this._geom_maps.up_verts_points.get(vert_i);\r\n    }\r\n    public navWireToPline(wire_i: number): number {\r\n        return this._geom_maps.up_wires_plines.get(wire_i);\r\n    }\r\n    public navFaceToPgon(face: number): number {\r\n        return this._geom_maps.up_faces_pgons.get(face);\r\n    }\r\n    public navPointToColl(point_i: number): number[] {\r\n        return this._geom_maps.up_points_colls.get(point_i);\r\n    }\r\n    public navPlineToColl(line_i: number): number[] {\r\n        return this._geom_maps.up_plines_colls.get(line_i);\r\n    }\r\n    public navPgonToColl(pgon_i: number): number[] {\r\n        return this._geom_maps.up_pgons_colls.get(pgon_i);\r\n    }\r\n    public navCollToCollParent(coll_i: number): number {\r\n        return this._geom.query.getCollParent(coll_i); // coll parent\r\n    }\r\n    // ============================================================================\r\n    // Navigate from any level to ? (up or down)\r\n    // ============================================================================\r\n    /**\r\n     * Navigate from any level to the colls\r\n     * @param ent_type\r\n     * @param index\r\n     */\r\n    public navAnyToColl(ent_type: EEntType, index: number): number[] {\r\n        if (isColl(ent_type)) { return [index]; }\r\n        const points_i: number[] = this.navAnyToPoint(ent_type, index);\r\n        const colls1_i: number[] = [].concat(...points_i.map(point_i => this.navPointToColl(point_i)));\r\n        const plines_i: number[] = this.navAnyToPline(ent_type, index);\r\n        const colls2_i: number[] = [].concat(...plines_i.map(pline_i => this.navPlineToColl(pline_i)));\r\n        const pgons_i: number[] = this.navAnyToPgon(ent_type, index);\r\n        const colls3_i: number[] = [].concat(...pgons_i.map(pgon_i => this.navPgonToColl(pgon_i)));\r\n        return Array.from(new Set([...colls1_i, ...colls2_i, ...colls3_i])).filter(coll_i => coll_i !== undefined); // remove duplicates\r\n    }\r\n    /**\r\n     * Navigate from any level to the pgons\r\n     * @param ent_type\r\n     * @param index\r\n     */\r\n    public navAnyToPgon(ent_type: EEntType, index: number): number[] {\r\n        if (isPgon(ent_type)) { return [index]; }\r\n        const faces_i: number[] = this.navAnyToFace(ent_type, index);\r\n        return faces_i.map( face_i => this.navFaceToPgon(face_i) ).filter(pgon_i => pgon_i !== undefined);\r\n    }\r\n    /**\r\n     * Navigate from any level to the plines\r\n     * @param ent_type\r\n     * @param index\r\n     */\r\n    public navAnyToPline(ent_type: EEntType, index: number): number[] {\r\n        if (isPline(ent_type)) { return [index]; }\r\n        const wires_i: number[] = this.navAnyToWire(ent_type, index);\r\n        return wires_i.map( wire_i => this.navWireToPline(wire_i) ).filter(pline_i => pline_i !== undefined);\r\n    }\r\n    /**\r\n     * Navigate from any level to the points\r\n     * @param ent_type\r\n     * @param index\r\n     */\r\n    public navAnyToPoint(ent_type: EEntType, index: number): number[] {\r\n        if (isPoint(ent_type)) { return [index]; }\r\n        const verts_i: number[] = this.navAnyToVert(ent_type, index);\r\n        return verts_i.map( vert_i => this.navVertToPoint(vert_i) ).filter(point_i => point_i !== undefined);\r\n    }\r\n    /**\r\n     * Navigate from any level to the faces\r\n     * @param ent_type\r\n     * @param index\r\n     */\r\n    public navAnyToFace(ent_type: EEntType, index: number): number[] {\r\n        if (isPosi(ent_type)) {\r\n            const verts_i: number[] = this.navPosiToVert(index);\r\n            // avoid getting duplicates\r\n            const faces_i_set: Set<number> = new Set();\r\n            for (const vert_i of verts_i) {\r\n                const faces_i: number[] = this.navAnyToFace(EEntType.VERT, vert_i);\r\n                for (const face_i of faces_i) {\r\n                    faces_i_set.add(face_i);\r\n                }\r\n            }\r\n            return Array.from(new Set(faces_i_set));\r\n        } else if (isVert(ent_type)) {\r\n            const edges_i: number[] = this.navVertToEdge(index); // two edges\r\n            return this.navAnyToFace(EEntType.EDGE, edges_i[0]);\r\n        } else if (isTri(ent_type)) {\r\n            return [this.navTriToFace(index)];\r\n        } else if (isEdge(ent_type)) {\r\n            const wire_i: number = this.navEdgeToWire(index);\r\n            return this.navAnyToFace(EEntType.WIRE, wire_i);\r\n        } else if (isWire(ent_type)) {\r\n            return [this.navWireToFace(index)];\r\n        } else if (isFace(ent_type)) { // target\r\n            return [index];\r\n        } else if (isPoint(ent_type)) {\r\n            return [];\r\n        } else if (isPline(ent_type)) {\r\n            return [];\r\n        } else if (isPgon(ent_type)) {\r\n            return [this.navPgonToFace(index)];\r\n        } else if (isColl(ent_type)) {\r\n            const pgons_i: number[] = this.navCollToPgon(index);\r\n            return pgons_i.map(pgon_i => this.navPgonToFace(pgon_i));\r\n        }\r\n        throw new Error('Bad navigation in geometry data structure: ' + ent_type + index);\r\n    }\r\n    /**\r\n     * Navigate from any level to the wires\r\n     * @param ent_type\r\n     * @param index\r\n     */\r\n    public navAnyToWire(ent_type: EEntType, index: number): number[] {\r\n        if (isPosi(ent_type)) {\r\n            const verts_i: number[] = this.navPosiToVert(index);\r\n            // avoid getting duplicates\r\n            const wires_i_set: Set<number> = new Set();\r\n            for (const vert_i of verts_i) {\r\n                const wires_i: number[] = this.navAnyToWire(EEntType.VERT, vert_i);\r\n                for (const wire_i of wires_i) {\r\n                    wires_i_set.add(wire_i);\r\n                }\r\n            }\r\n            return Array.from(new Set(wires_i_set));\r\n        } else if (isVert(ent_type)) {\r\n            const edges_i: number[] = this.navVertToEdge(index);\r\n            return [].concat(...edges_i.map( edge_i => this.navEdgeToWire(edge_i) ));\r\n        } else if (isTri(ent_type)) {\r\n            return [];\r\n        } else if (isEdge(ent_type)) {\r\n            return [this.navEdgeToWire(index)];\r\n        } else if (isWire(ent_type)) { // target\r\n            return [index];\r\n        } else if (isFace(ent_type)) {\r\n            return this.navFaceToWire(index);\r\n        } else if (isPoint(ent_type)) {\r\n            return [];\r\n        } else if (isPline(ent_type)) {\r\n            return [this.navPlineToWire(index)];\r\n        } else if (isPgon(ent_type)) {\r\n            const face_i: number = this.navPgonToFace(index);\r\n            return this.navFaceToWire(face_i);\r\n        } else if (isColl(ent_type)) {\r\n            const all_wires_i: number[] = [];\r\n            const plines_i: number[] = this.navCollToPline(index);\r\n            for (const pline_i of plines_i) {\r\n                const wire_i: number = this.navPlineToWire(pline_i);\r\n                all_wires_i.push(wire_i);\r\n            }\r\n            const pgons_i: number[] = this.navCollToPgon(index);\r\n            for (const pgon_i of pgons_i) {\r\n                const wires_i: number[] = this.navAnyToWire(EEntType.PGON, pgon_i);\r\n                for (const wire_i of wires_i) {\r\n                    all_wires_i.push(wire_i);\r\n                }\r\n            }\r\n            return all_wires_i;\r\n        }\r\n        throw new Error('Bad navigation in geometry data structure: ' + ent_type + index);\r\n    }\r\n    /**\r\n     * Navigate from any level to the edges\r\n     * @param ent_type\r\n     * @param index\r\n     */\r\n    public navAnyToEdge(ent_type: EEntType, index: number): number[] {\r\n        if (isPosi(ent_type)) {\r\n            const verts_i: number[] = this.navPosiToVert(index);\r\n            return [].concat(...verts_i.map( vert_i => this.navVertToEdge(vert_i) ));\r\n        } else if (isVert(ent_type)) {\r\n            return this.navVertToEdge(index);\r\n        } else if (isTri(ent_type)) {\r\n            return [];\r\n        } else if (isEdge(ent_type)) {\r\n            return [index];\r\n        } else if (isWire(ent_type)) {\r\n            return this.navWireToEdge(index);\r\n        } else if (isFace(ent_type)) {\r\n            const wires_i: number[] = this.navFaceToWire(index);\r\n            return [].concat(...wires_i.map(wire_i => this.navWireToEdge(wire_i)));\r\n        } else if (isPoint(ent_type)) {\r\n            return [];\r\n        } else if (isPline(ent_type)) {\r\n            const wire_i: number = this.navPlineToWire(index);\r\n            return this.navAnyToEdge(EEntType.WIRE, wire_i);\r\n        } else if (isPgon(ent_type)) {\r\n            const face_i: number = this.navPgonToFace(index);\r\n            return this.navAnyToEdge(EEntType.FACE, face_i);\r\n        } else if (isColl(ent_type)) {\r\n            const all_edges_i: number[] = [];\r\n            const plines_i: number[] = this.navCollToPline(index);\r\n            for (const pline_i of plines_i) {\r\n                const edges_i: number[] = this.navAnyToEdge(EEntType.PLINE, pline_i);\r\n                for (const edge_i of edges_i) {\r\n                    all_edges_i.push(edge_i);\r\n                }\r\n            }\r\n            const pgons_i: number[] = this.navCollToPgon(index);\r\n            for (const pgon_i of pgons_i) {\r\n                const edges_i: number[] = this.navAnyToEdge(EEntType.PGON, pgon_i);\r\n                for (const edge_i of edges_i) {\r\n                    all_edges_i.push(edge_i);\r\n                }\r\n            }\r\n            return all_edges_i;\r\n        }\r\n        throw new Error('Bad navigation in geometry data structure: ' + ent_type + index);\r\n    }\r\n    /**\r\n     * Navigate from any level to the vertices\r\n     * @param ent_type\r\n     * @param index\r\n     */\r\n    public navAnyToVert(ent_type: EEntType, index: number): number[] {\r\n        if (isPosi(ent_type)) {\r\n            return this.navPosiToVert(index);\r\n        } else if (isVert(ent_type)) {\r\n            return [index];\r\n        } else if (isTri(ent_type)) {\r\n            return this.navTriToVert(index);\r\n        } else if (isEdge(ent_type)) {\r\n            return this.navEdgeToVert(index);\r\n        } else if (isWire(ent_type)) {\r\n            return this._geom.query.getWireVerts(index); // avoids duplicate verts\r\n        } else if (isFace(ent_type)) {\r\n            const wires_i: number[] = this.navFaceToWire(index);\r\n            const verts_i: number[] = [];\r\n            for (const wire_i of wires_i) {\r\n                const wire_verts_i: number [] = this._geom.query.getWireVerts(wire_i); // avoids duplicate verts\r\n                for (const vert_i of wire_verts_i) { verts_i.push(vert_i); }\r\n            }\r\n            return verts_i;\r\n        } else if (isPoint(ent_type)) {\r\n            return  [this.navPointToVert(index)];\r\n        } else if (isPline(ent_type)) {\r\n            const wire_i: number = this.navPlineToWire(index);\r\n            return this.navAnyToVert(EEntType.WIRE, wire_i);\r\n        } else if (isPgon(ent_type)) {\r\n            const face_i: number = this.navPgonToFace(index);\r\n            return this.navAnyToVert(EEntType.FACE, face_i);\r\n        } else if (isColl(ent_type)) {\r\n            const all_verts_i: number[] = [];\r\n            const points_i: number[] = this.navCollToPoint(index);\r\n            for (const point_i of points_i) {\r\n                const vert_i: number = this.navPointToVert(point_i);\r\n                all_verts_i.push(vert_i);\r\n            }\r\n            const plines_i: number[] = this.navCollToPline(index);\r\n            for (const pline_i of plines_i) {\r\n                const verts_i: number[] = this.navAnyToVert(EEntType.PLINE, pline_i);\r\n                for (const vert_i of verts_i) {\r\n                    all_verts_i.push(vert_i);\r\n                }\r\n            }\r\n            const pgons_i: number[] = this.navCollToPgon(index);\r\n            for (const pgon_i of pgons_i) {\r\n                const verts_i: number[] = this.navAnyToVert(EEntType.PGON, pgon_i);\r\n                for (const vert_i of verts_i) {\r\n                    all_verts_i.push(vert_i);\r\n                }\r\n            }\r\n            return all_verts_i;\r\n        }\r\n        throw new Error('Bad navigation in geometry data structure: ' + ent_type + index);\r\n    }\r\n    /**\r\n     * Navigate from any level to the triangles\r\n     * @param ent_type\r\n     * @param index\r\n     */\r\n    public navAnyToTri(ent_type: EEntType, index: number): number[] {\r\n        if (isPosi(ent_type)) {\r\n            const verts_i: number[] = this.navPosiToVert(index);\r\n            return [].concat(...verts_i.map(vert_i => this.navVertToTri(vert_i)));\r\n        } else if (isVert(ent_type)) {\r\n            return this.navVertToTri(index);\r\n        } else if (isTri(ent_type)) {\r\n            return [index];\r\n        } else if (isEdge(ent_type)) {\r\n            return [];\r\n        } else if (isWire(ent_type)) {\r\n            return [];\r\n        } else if (isFace(ent_type)) {\r\n            return this.navFaceToTri(index);\r\n        } else if (isPoint(ent_type)) {\r\n            return [];\r\n        } else if (isPline(ent_type)) {\r\n            return [];\r\n        } else if (isPgon(ent_type)) {\r\n            const face_i: number = this.navPgonToFace(index);\r\n            return this.navFaceToTri(face_i);\r\n        } else if (isColl(ent_type)) {\r\n            const all_tris_i: number[] = [];\r\n            const pgons_i: number[] = this.navCollToPgon(index);\r\n            for (const pgon_i of pgons_i) {\r\n                const tris_i: number[] = this.navAnyToTri(EEntType.PGON, pgon_i);\r\n                for (const tri_i of tris_i) {\r\n                    all_tris_i.push(tri_i);\r\n                }\r\n            }\r\n            return all_tris_i;\r\n        }\r\n        throw new Error('Bad navigation in geometry data structure: ' + ent_type + index);\r\n    }\r\n    /**\r\n     * Navigate from any level to the positions\r\n     * @param ent_type\r\n     * @param index\r\n     */\r\n    public navAnyToPosi(ent_type: EEntType, index: number): number[] {\r\n        if (isPosi(ent_type)) { return [index]; }\r\n        const verts_i: number[] = this.navAnyToVert(ent_type, index);\r\n        const posis_i: number[] = verts_i.map(vert_i => this.navVertToPosi(vert_i));\r\n        return Array.from(new Set(posis_i)); // remove duplicates\r\n    }\r\n    // ============================================================================\r\n    // Navigate from any to any, general method\r\n    // ============================================================================\r\n    /**\r\n     * Navigate from any level down to the positions\r\n     * @param index\r\n     */\r\n    public navAnyToAny(from_ets: EEntType, to_ets: EEntType, index: number): number[] {\r\n        // check if this is nav coll to coll\r\n        // for coll to coll, we assume we are going down, from parent to children\r\n        if (from_ets === EEntType.COLL && to_ets === EEntType.COLL) {\r\n            return this.navCollToCollChildren(index);\r\n        }\r\n        // same level\r\n        if (from_ets === to_ets) { return [index]; }\r\n        // from -> to\r\n        switch (to_ets) {\r\n            case EEntType.POSI:\r\n                return this.navAnyToPosi(from_ets, index);\r\n            case EEntType.VERT:\r\n                return this.navAnyToVert(from_ets, index);\r\n            case EEntType.EDGE:\r\n                return this.navAnyToEdge(from_ets, index);\r\n            case EEntType.WIRE:\r\n                return this.navAnyToWire(from_ets, index);\r\n            case EEntType.FACE:\r\n                return this.navAnyToFace(from_ets, index);\r\n            case EEntType.POINT:\r\n                return this.navAnyToPoint(from_ets, index);\r\n            case EEntType.PLINE:\r\n                return this.navAnyToPline(from_ets, index);\r\n            case EEntType.PGON:\r\n                return this.navAnyToPgon(from_ets, index);\r\n            case EEntType.COLL:\r\n                return this.navAnyToColl(from_ets, index);\r\n            default:\r\n                throw new Error('Bad navigation in geometry data structure: ' + to_ets + index);\r\n        }\r\n    }\r\n}\r\n","\r\nimport {  EEntType, IGeomMaps, EEntStrToGeomMaps, TWire, Txyz, TEntTypeIdx,\r\n    TFace, EWireType, TEdge, IEntSets } from './common';\r\nimport { isPosi, isPoint, isPline, isPgon, isColl } from './id';\r\nimport { GIGeom } from './GIGeom';\r\nimport { vecFromTo, vecCross, vecDiv, vecNorm, vecLen, vecDot } from '../geom/vectors';\r\nimport * as Mathjs from 'mathjs';\r\n/**\r\n * Class for geometry.\r\n */\r\nexport class GIGeomQuery {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    // ============================================================================\r\n    // Entities\r\n    // ============================================================================\r\n    /**\r\n     * Returns a list of indices for ents.\r\n     * @param ent_type\r\n     */\r\n    public getEnts(ent_type: EEntType): number[] {\r\n        // get ents indices array from down arrays\r\n        const geom_map_key: string = EEntStrToGeomMaps[ent_type];\r\n        const geom_map: Map<number, any> = this._geom_maps[geom_map_key];\r\n        return Array.from(geom_map.keys());\r\n        // const ents_i: number[] = [];\r\n        // geom_map.forEach( (_, i) => ents_i.push(i) );\r\n        // return ents_i;\r\n    }\r\n    /**\r\n     * Returns the number of entities\r\n     */\r\n    public numEnts(ent_type: EEntType): number {\r\n        const geom_array_key: string = EEntStrToGeomMaps[ent_type];\r\n        return this._geom_maps[geom_array_key].size;\r\n    }\r\n    /**\r\n     * Returns the number of entities for [posis, point, polylines, polygons, collections].\r\n     */\r\n    public numEntsAll(): number[] {\r\n        return [\r\n            this.numEnts(EEntType.POSI),\r\n            this.numEnts(EEntType.POINT),\r\n            this.numEnts(EEntType.PLINE),\r\n            this.numEnts(EEntType.PGON),\r\n            this.numEnts(EEntType.COLL)\r\n        ];\r\n    }\r\n    /**\r\n     * Check if an entity exists\r\n     * @param ent_type\r\n     * @param index\r\n     */\r\n    public entExists(ent_type: EEntType, index: number): boolean {\r\n        // if (ent_type === EEntType.POSI) {\r\n        //     return this._geom_maps.up_posis_verts.has(index);\r\n        // }\r\n        const geom_arrays_key: string = EEntStrToGeomMaps[ent_type];\r\n        return this._geom_maps[geom_arrays_key].has(index);\r\n    }\r\n    /**\r\n     * Returns sets of unique indexes, given an array of TEntTypeIdx.\r\n     * ~\r\n     * Object positions are added to the geompack.\r\n     * ~\r\n     * Collections contents is added to teh geompack, including nested collections..\r\n     * ~\r\n     * If invert=true, then the geompack will include the opposite set of entities.\r\n     * ~\r\n     * Used for deleting all entities.\r\n     */\r\n    public getDelEntSets(ents: TEntTypeIdx[]): IEntSets {\r\n        const set_posis_i: Set<number> = new Set();\r\n        const set_ent_posis_i: Set<number> = new Set();\r\n        const set_points_i: Set<number> = new Set();\r\n        const set_plines_i: Set<number> = new Set();\r\n        const set_pgons_i: Set<number> = new Set();\r\n        const set_colls_i: Set<number> = new Set();\r\n        // process all the ents, but not posis of the ents, we will do that at the end\r\n        for (const ent_arr of ents) {\r\n            const [ent_type, ent_i]: TEntTypeIdx = ent_arr as TEntTypeIdx;\r\n            if (isColl(ent_type)) {\r\n                // get the descendants of this collection\r\n                const coll_and_desc_i: number[] = this._geom.query.getCollDescendents(ent_i);\r\n                coll_and_desc_i.splice(0, 0, ent_i);\r\n                // get all the objs\r\n                for (const one_coll_i of coll_and_desc_i) {\r\n                    for (const point_i of this._geom_maps.dn_colls_objs.get(one_coll_i)[1]) {\r\n                        set_points_i.add(point_i);\r\n                    }\r\n                    for (const pline_i of this._geom_maps.dn_colls_objs.get(one_coll_i)[2]) {\r\n                        set_plines_i.add(pline_i);\r\n                    }\r\n                    for (const pgon_i of this._geom_maps.dn_colls_objs.get(one_coll_i)[3]) {\r\n                        set_pgons_i.add(pgon_i);\r\n                    }\r\n                    set_colls_i.add(one_coll_i);\r\n                }\r\n            } else if (isPgon(ent_type)) {\r\n                set_pgons_i.add(ent_i);\r\n            } else if (isPline(ent_type)) {\r\n                set_plines_i.add(ent_i);\r\n            } else if (isPoint(ent_type)) {\r\n                set_points_i.add(ent_i);\r\n            } else if (isPosi(ent_type)) {\r\n                set_posis_i.add(ent_i);\r\n            }\r\n        }\r\n        // now get all the posis of the ents and add them to the list\r\n        set_points_i.forEach( point_i => {\r\n            const posis_i: number[] = this._geom.nav.navAnyToPosi(EEntType.POINT, point_i);\r\n            for (const posi_i of posis_i) {\r\n                set_ent_posis_i.add(posi_i);\r\n            }\r\n        });\r\n        set_plines_i.forEach( pline_i => {\r\n            const posis_i: number[] = this._geom.nav.navAnyToPosi(EEntType.PLINE, pline_i);\r\n            for (const posi_i of posis_i) {\r\n                set_ent_posis_i.add(posi_i);\r\n            }\r\n        });\r\n        set_pgons_i.forEach( pgon_i => {\r\n            const posis_i: number[] = this._geom.nav.navAnyToPosi(EEntType.PGON, pgon_i);\r\n            for (const posi_i of posis_i) {\r\n                set_ent_posis_i.add(posi_i);\r\n            }\r\n        });\r\n        // if no invert, then return the result\r\n        return {\r\n            posis_i: set_posis_i,\r\n            points_i: set_points_i,\r\n            plines_i: set_plines_i,\r\n            pgons_i: set_pgons_i,\r\n            colls_i: set_colls_i,\r\n            obj_posis_i: set_ent_posis_i\r\n        };\r\n    }\r\n    /**\r\n     * Fill a map of sets of unique indexes\r\n     */\r\n    public getEntSets(ents: TEntTypeIdx[], ent_types: number[]): Map<number, Set<number>> {\r\n        const set_ent_types: Set<number> = new Set(ent_types);\r\n        const map: Map<number, Set<number>> = new Map();\r\n        ent_types.forEach( ent_type => map.set(ent_type, new Set()) );\r\n        for (const [ent_type, ent_i] of ents) {\r\n            if (set_ent_types.has(EEntType.COLL)) {\r\n                this._geom.nav.navAnyToColl(ent_type, ent_i).forEach( coll_i => map.get(EEntType.COLL).add(coll_i) );\r\n            }\r\n            if (set_ent_types.has(EEntType.PGON)) {\r\n                this._geom.nav.navAnyToPgon(ent_type, ent_i).forEach( pgon_i => map.get(EEntType.PGON).add(pgon_i) );\r\n            }\r\n            if (set_ent_types.has(EEntType.PLINE)) {\r\n                this._geom.nav.navAnyToPline(ent_type, ent_i).forEach( pline_i => map.get(EEntType.PLINE).add(pline_i) );\r\n            }\r\n            if (set_ent_types.has(EEntType.POINT)) {\r\n                this._geom.nav.navAnyToPoint(ent_type, ent_i).forEach( point_i => map.get(EEntType.POINT).add(point_i) );\r\n            }\r\n            if (set_ent_types.has(EEntType.FACE)) {\r\n                this._geom.nav.navAnyToFace(ent_type, ent_i).forEach( face_i => map.get(EEntType.FACE).add(face_i) );\r\n            }\r\n            if (set_ent_types.has(EEntType.WIRE)) {\r\n                this._geom.nav.navAnyToWire(ent_type, ent_i).forEach( wire_i => map.get(EEntType.WIRE).add(wire_i) );\r\n            }\r\n            if (set_ent_types.has(EEntType.EDGE)) {\r\n                this._geom.nav.navAnyToEdge(ent_type, ent_i).forEach( edge_i => map.get(EEntType.EDGE).add(edge_i) );\r\n            }\r\n            if (set_ent_types.has(EEntType.VERT)) {\r\n                this._geom.nav.navAnyToVert(ent_type, ent_i).forEach( vert_i => map.get(EEntType.VERT).add(vert_i) );\r\n            }\r\n            if (set_ent_types.has(EEntType.POSI)) {\r\n                this._geom.nav.navAnyToPosi(ent_type, ent_i).forEach( posi_i => map.get(EEntType.POSI).add(posi_i) );\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n    // ============================================================================\r\n    // Posis\r\n    // ============================================================================\r\n    /**\r\n     * Returns a list of indices for all posis that have no verts\r\n     */\r\n    public getUnusedPosis(): number[] {\r\n        const posis_i: number[] = [];\r\n        this._geom_maps.up_posis_verts.forEach( (posi, posi_i) => {\r\n            if (posi.length === 0) { posis_i.push(posi_i); }\r\n        });\r\n        return posis_i;\r\n    }\r\n    // ============================================================================\r\n    // Verts\r\n    // ============================================================================\r\n    /**\r\n     * Get two edges that are adjacent to this vertex that are both not zero length.\r\n     * In some cases wires and polygons have edges that are zero length.\r\n     * This causes problems for calculating normals etc.\r\n     * The return value can be either one edge (in open polyline [null, edge_i], [edge_i, null])\r\n     * or two edges (in all other cases) [edge_i, edge_i].\r\n     * If the vert has no non-zero edges, then [null, null] is returned.\r\n     * @param vert_i\r\n     */\r\n    public getVertNonZeroEdges(vert_i: number): number[] {\r\n        // get the wire start and end verts\r\n        const edges_i: number[] = this._geom_maps.up_verts_edges.get(vert_i);\r\n        const posi_coords: Txyz[] = [];\r\n        // get the first edge\r\n        let edge0 = null;\r\n        if (edges_i[0] !== null || edges_i[0] !== undefined) {\r\n            let prev_edge_i: number = edges_i[0];\r\n            while (edge0 === null) {\r\n                if (prev_edge_i === edges_i[1]) { break; }\r\n                const edge_verts_i: number[] = this._geom_maps.dn_edges_verts.get(prev_edge_i);\r\n                // first\r\n                const posi0_i: number =  this._geom_maps.dn_verts_posis.get(edge_verts_i[0]);\r\n                if ( posi_coords[posi0_i] === undefined) {\r\n                    posi_coords[posi0_i] = this._geom.modeldata.attribs.query.getPosiCoords(posi0_i);\r\n                }\r\n                const xyz0: Txyz = posi_coords[posi0_i];\r\n                // second\r\n                const posi1_i: number =  this._geom_maps.dn_verts_posis.get(edge_verts_i[1]);\r\n                if ( posi_coords[posi1_i] === undefined) {\r\n                    posi_coords[posi1_i] = this._geom.modeldata.attribs.query.getPosiCoords(posi1_i);\r\n                }\r\n                const xyz1: Txyz = posi_coords[posi1_i];\r\n                // check\r\n                if (Math.abs(xyz0[0] - xyz1[0]) > 0 || Math.abs(xyz0[1] - xyz1[1]) > 0 || Math.abs(xyz0[2] - xyz1[2]) > 0) {\r\n                    edge0 = prev_edge_i;\r\n                } else {\r\n                    prev_edge_i = this._geom_maps.up_verts_edges.get(edge_verts_i[0])[0];\r\n                    if (prev_edge_i === null || prev_edge_i === undefined) { break; }\r\n                }\r\n            }\r\n        }\r\n        // get the second edge\r\n        let edge1 = null;\r\n        if (edges_i[1] !== null || edges_i[1] !== undefined) {\r\n            let next_edge_i: number = edges_i[1];\r\n            while (edge1 === null) {\r\n                if (next_edge_i === edges_i[0]) { break; }\r\n                const edge_verts_i: number[] = this._geom_maps.dn_edges_verts.get(next_edge_i);\r\n                // first\r\n                const posi0_i: number =  this._geom_maps.dn_verts_posis.get(edge_verts_i[0]);\r\n                if ( posi_coords[posi0_i] === undefined) {\r\n                    posi_coords[posi0_i] = this._geom.modeldata.attribs.query.getPosiCoords(posi0_i);\r\n                }\r\n                const xyz0: Txyz = posi_coords[posi0_i];\r\n                // second\r\n                const posi1_i: number =  this._geom_maps.dn_verts_posis.get(edge_verts_i[1]);\r\n                if ( posi_coords[posi1_i] === undefined) {\r\n                    posi_coords[posi1_i] = this._geom.modeldata.attribs.query.getPosiCoords(posi1_i);\r\n                }\r\n                const xyz1: Txyz = posi_coords[posi1_i];\r\n                // check\r\n                if (Math.abs(xyz0[0] - xyz1[0]) > 0 || Math.abs(xyz0[1] - xyz1[1]) > 0 || Math.abs(xyz0[2] - xyz1[2]) > 0) {\r\n                    edge1 = next_edge_i;\r\n                } else {\r\n                    next_edge_i = this._geom_maps.up_verts_edges.get(edge_verts_i[1])[1];\r\n                    if (next_edge_i === null || next_edge_i === undefined) { break; }\r\n                }\r\n            }\r\n        }\r\n        // return the two edges, they can be null\r\n        return [edge0, edge1];\r\n    }\r\n    // ============================================================================\r\n    // Edges\r\n    // ============================================================================\r\n    /**\r\n     * Get the next edge in a sequence of edges\r\n     * @param edge_i\r\n     */\r\n    public getNextEdge(edge_i: number): number {\r\n        // get the wire start and end verts\r\n        const edge: TEdge = this._geom_maps.dn_edges_verts.get(edge_i);\r\n        const edges_i: number[] = this._geom_maps.up_verts_edges.get(edge[1]);\r\n        if (edges_i.length === 1) { return null; }\r\n        return edges_i[1];\r\n    }\r\n    /**\r\n     * Get the previous edge in a sequence of edges\r\n     * @param edge_i\r\n     */\r\n    public getPrevEdge(edge_i: number): number {\r\n        // get the wire start and end verts\r\n        const edge: TEdge = this._geom_maps.dn_edges_verts.get(edge_i);\r\n        const edges_i: number[] = this._geom_maps.up_verts_edges.get(edge[0]);\r\n        if (edges_i.length === 1) { return null; }\r\n        return edges_i[1];\r\n    }\r\n    /**\r\n     * Get a list of edges that are neighbours ()\r\n     * The list will include the input edge.\r\n     * @param edge_i\r\n     */\r\n    public getNeighborEdges(edge_i: number): number[] {\r\n        // get the wire start and end verts\r\n        const edge: TEdge = this._geom_maps.dn_edges_verts.get(edge_i);\r\n        const start_posi_i: number = this._geom_maps.dn_verts_posis.get(edge[0]);\r\n        const end_posi_i: number = this._geom_maps.dn_verts_posis.get(edge[1]);\r\n        const start_edges_i: number[] = this._geom.nav.navAnyToEdge(EEntType.POSI, start_posi_i);\r\n        const end_edges_i: number[] = this._geom.nav.navAnyToEdge(EEntType.POSI, end_posi_i);\r\n        return Mathjs.setIntersect(start_edges_i, end_edges_i);\r\n    }\r\n    // ============================================================================\r\n    // Wires\r\n    // ============================================================================\r\n    /**\r\n     * Check if a wire is closed.\r\n     * @param wire_i\r\n     */\r\n    public isWireClosed(wire_i: number): boolean {\r\n        // get the wire start and end verts\r\n        const wire: TWire = this._geom_maps.dn_wires_edges.get(wire_i);\r\n        const num_edges: number = wire.length;\r\n        const start_edge_i: number = wire[0];\r\n        const end_edge_i: number = wire[num_edges - 1];\r\n        const start_vert_i: number = this._geom.nav.navEdgeToVert(start_edge_i)[0];\r\n        const end_vert_i: number = this._geom.nav.navEdgeToVert(end_edge_i)[1];\r\n        // if start and end verts are the same, then wire is closed\r\n        return (start_vert_i === end_vert_i);\r\n    }\r\n    /**\r\n     * Check if a wire belongs to a pline, a pgon or a pgon hole.\r\n     */\r\n    public getWireType(wire_i: number): EWireType {\r\n        // get the wire start and end verts\r\n        const wire: TWire = this._geom_maps.dn_wires_edges.get(wire_i);\r\n        if (this._geom.nav.navWireToPline(wire_i) !== undefined) {\r\n            return EWireType.PLINE;\r\n        }\r\n        const face_i: number = this._geom.nav.navWireToFace(wire_i);\r\n        const face: TFace = this._geom.nav.getFace(face_i);\r\n        const index: number = face.indexOf(wire_i);\r\n        if (index === 0) { return EWireType.PGON; }\r\n        if (index > 0) { return EWireType.PGON_HOLE; }\r\n        throw new Error('Inconsistencies found in the internal data structure.');\r\n    }\r\n    /**\r\n     * Returns the vertices.\r\n     * For a closed wire, #vertices = #edges\r\n     * For an open wire, #vertices = #edges + 1\r\n     * @param wire_i\r\n     */\r\n    public getWireVerts(wire_i: number): number[] {\r\n        const edges_i: number[] = this._geom_maps.dn_wires_edges.get(wire_i);\r\n        const verts_i: number[] = [];\r\n        // walk the edges chain\r\n        let next_edge_i: number = edges_i[0];\r\n        for (let i = 0; i < edges_i.length; i++) {\r\n            const edge_verts_i: number[] = this._geom_maps.dn_edges_verts.get(next_edge_i);\r\n            verts_i.push(edge_verts_i[0]);\r\n            next_edge_i = this.getNextEdge(next_edge_i);\r\n            // are we at the end of the chain\r\n            if (next_edge_i === null) { // open wire\r\n                verts_i.push(edge_verts_i[1]);\r\n                break;\r\n            } else if (next_edge_i === edges_i[0]) { // closed wire\r\n                break;\r\n            }\r\n        }\r\n        return verts_i;\r\n    }\r\n    // ============================================================================\r\n    // Objects\r\n    // ============================================================================\r\n    // /**\r\n    //  * Returns three arrays of pairs of maps, for points, plines, and pgons.\r\n    //  * This is used for creating a timeline, and is based on an attribute called \"visible\"\r\n    //  * on collections.\r\n    //  * The visible attribute is an array of strings, where each string is a time-stamp label.\r\n    //  * ~\r\n    //  * For the first map in each pair, keys are the group names, and values are a set of entitie IDs.\r\n    //  * For the second map in each pair, keys are the time-stamp names, and values are a set of group names.\r\n    //  * @return Array of arrays of maps.\r\n    //  */\r\n    // public getObjVisGroups(): [ {}, Map<string, Set<string>> ] {\r\n    //     if (!this._geom.modeldata.attribs.query.hasAttrib(EEntType.COLL, 'visible')) {\r\n    //         return null;\r\n    //     }\r\n    //     // return the result\r\n    //     const colls_i: number[] = this.getEnts(EEntType.COLL);\r\n\r\n    //     const full_obj_grp = {'default': []};\r\n    //     const full_lbl_grp = new Map<string, Set<string>>();\r\n    //     const grps = [  this._getObjVisGroups(colls_i, EEntType.POINT),\r\n    //                     this._getObjVisGroups(colls_i, EEntType.EDGE),\r\n    //                     this._getObjVisGroups(colls_i, EEntType.TRI)];\r\n    //     for (let i = 0; i < grps.length; i ++) {\r\n    //         const grp = grps[i];\r\n    //         console.log(grp)\r\n    //         full_obj_grp['default'][i] = grp[0].get('default');\r\n    //         grp[1].forEach((val, key) => {\r\n    //             let lbl_grp = full_lbl_grp.get(key);\r\n    //             if (!lbl_grp) { lbl_grp = new Set<string>(); }\r\n    //             for (const v of val) {\r\n    //                 lbl_grp.add(v);\r\n    //                 if (!full_obj_grp[v]) {\r\n    //                     full_obj_grp[v] = [null, null, null];\r\n    //                 }\r\n    //                 full_obj_grp[v][i] = grp[0].get(v);\r\n    //             }\r\n    //             full_lbl_grp.set(key, lbl_grp);\r\n    //         });\r\n    //     }\r\n    //     return [full_obj_grp, full_lbl_grp];\r\n    // }\r\n    // private _getObjVisGroups(colls_i: number[], ent_type: EEntType): [Map<string, Set<number>>, Map<string, Set<string>>] {\r\n    //     // get objects\r\n    //     const objs_i: number[] = this.getEnts(ent_type);\r\n    //     // create overlapping groups of objects\r\n    //     // keys are for example \"2020\", \"2021\" etc\r\n    //     // objects can be in more than one group\r\n    //     const obj_groups: Map<string, Set<number>> = new Map();\r\n    //     for (const coll_i of colls_i) {\r\n    //         const visibility: string[] = this._geom.modeldata.attribs.query.getAttribVal(EEntType.COLL, 'visible', coll_i) as string[];\r\n    //         if (visibility !== undefined) {\r\n    //             // points\r\n    //             const coll_objs_i: number[] = this._geom.nav.navAnyToAny(EEntType.COLL, ent_type, coll_i);\r\n    //             if (coll_objs_i.length > 0) {\r\n    //                 for (const label of visibility) {\r\n    //                     if (!obj_groups.has(label)) { obj_groups.set(label, new Set()); }\r\n    //                 }\r\n    //                 for (const i of coll_objs_i) {\r\n    //                     for (const label of visibility) { obj_groups.get(label).add(i); }\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     // create non-overlapping groups of objects\r\n    //     // keys are for example \"2020_2021\", \"2022_2023_2024\" etc\r\n    //     // objects will only be in one group\r\n    //     const obj_groups2: Map<string, Set<number>> = new Map();\r\n    //     const obj_labels2: Map<string, Set<string>> = new Map();\r\n    //     obj_groups2.set('default', new Set());\r\n    //     for (const i of objs_i) {\r\n    //         const labels: string[] = [];\r\n    //         obj_groups.forEach( (group, label) => {\r\n    //             if (group.has(i)) { labels.push(label); }\r\n    //         });\r\n    //         if (labels.length > 0) {\r\n    //             const label2 = labels.sort().join('_');\r\n    //             if (!obj_groups2.has(label2)) { obj_groups2.set(label2, new Set()); }\r\n    //             obj_groups2.get(label2).add(i);\r\n    //             for (const label of labels) {\r\n    //                 if (!obj_labels2.has(label)) { obj_labels2.set(label, new Set()); }\r\n    //                 obj_labels2.get(label).add(label2);\r\n    //             }\r\n    //         } else {\r\n    //             obj_groups2.get('default').add(i);\r\n    //         }\r\n    //     }\r\n    //     // return the result\r\n    //     return [obj_groups2, obj_labels2];\r\n    // }\r\n    // ============================================================================\r\n    // Collections\r\n    // ============================================================================\r\n    /**\r\n     * Get the parent of a collection.\r\n     * @param coll_i\r\n     */\r\n    public getCollParent(coll_i: number): number {\r\n        return this._geom_maps.dn_colls_objs.get(coll_i)[0];\r\n    }\r\n    /**\r\n     * Get the children collections of a collection.\r\n     * @param coll_i\r\n     */\r\n    public getCollChildren(coll_i: number): number[] {\r\n        const children: number[] = [];\r\n        this._geom_maps.dn_colls_objs.forEach( (coll2, coll2_i) => {\r\n            if (coll2[0] === coll_i) {\r\n                children.push(coll2_i);\r\n            }\r\n        });\r\n        return children;\r\n    }\r\n    /**\r\n     * Get the ancestor collections of a collection.\r\n     * @param coll_i\r\n     */\r\n    public getCollAncestors(coll_i: number): number[] {\r\n        const ancestor_colls_i: number[] = [];\r\n        let parent_coll_i: number = this._geom_maps.dn_colls_objs.get(coll_i)[0];\r\n        while (parent_coll_i !== -1) {\r\n            ancestor_colls_i.push(parent_coll_i);\r\n            parent_coll_i = this._geom_maps.dn_colls_objs.get(parent_coll_i)[0];\r\n        }\r\n        return ancestor_colls_i;\r\n    }\r\n    /**\r\n     * Get the descendent collections of a collection.\r\n     * @param coll_i\r\n     */\r\n    public getCollDescendents(coll_i: number): number[] {\r\n        const descendent_colls_i: number[] = [];\r\n        this._geom_maps.dn_colls_objs.forEach( (coll2, coll2_i) => {\r\n            if (coll2[0] !== -1 && coll2_i !== coll_i) {\r\n                if (this.isCollDescendent(coll2_i, coll_i)) {\r\n                    descendent_colls_i.push(coll2_i);\r\n                }\r\n            }\r\n        });\r\n        return descendent_colls_i;\r\n    }\r\n    /**\r\n     * Returns true if the first coll is a descendent of the second coll.\r\n     * @param coll_i\r\n     */\r\n    public isCollDescendent(coll1_i: number, coll2_i: number): boolean {\r\n        let parent_coll_i: number = this._geom_maps.dn_colls_objs.get(coll1_i)[0];\r\n        while (parent_coll_i !== -1) {\r\n            if (parent_coll_i === coll2_i) { return true; }\r\n            parent_coll_i = this._geom_maps.dn_colls_objs.get(parent_coll_i)[0];\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Returns true if the first coll is an ancestor of the second coll.\r\n     * @param coll_i\r\n     */\r\n    public isCollAncestor(coll1_i: number, coll2_i: number): boolean {\r\n        let parent_coll_i: number = this._geom_maps.dn_colls_objs.get(coll2_i)[0];\r\n        while (parent_coll_i !== -1) {\r\n            if (parent_coll_i === coll1_i) { return true; }\r\n            parent_coll_i = this._geom_maps.dn_colls_objs.get(parent_coll_i)[0];\r\n        }\r\n        return false;\r\n    }\r\n    // /**\r\n    //  * I am not sure what this is... TODO\r\n    //  * A collection can only have one parent\r\n    //  * @param coll_i\r\n    //  */\r\n    // public getCollParents(coll_i: number) {\r\n    //     const coll: TColl = this._geom_maps.dn_colls_objs.get(coll_i];\r\n    //     // @ts-ignore\r\n    //     const _parents = coll.flat(1).filter(function (el) {return el != null; });\r\n    //     return _parents;\r\n    // }\r\n    // ============================================================================\r\n    // Faces\r\n    // ============================================================================\r\n    /**\r\n     *\r\n     * @param face_i\r\n     */\r\n    public getFaceBoundary(face_i: number): number {\r\n        return this._geom_maps.dn_faces_wires.get(face_i)[0];\r\n    }\r\n    /**\r\n     *\r\n     * @param face_i\r\n     */\r\n    public getFaceHoles(face_i: number): number[] {\r\n        return this._geom_maps.dn_faces_wires.get(face_i).slice(1);\r\n    }\r\n    /**\r\n     *\r\n     * @param face_i\r\n     */\r\n    public getFaceNormal(face_i: number): Txyz {\r\n        const normal: Txyz = [0, 0, 0];\r\n        const tris_i: number[] = this._geom._geom_maps.dn_faces_tris.get(face_i);\r\n        let count = 0;\r\n        for (const tri_i of tris_i) {\r\n            const posis_i: number[] = this._geom_maps.dn_tris_verts.get(tri_i).map(vert_i => this._geom_maps.dn_verts_posis.get(vert_i));\r\n            const xyzs: Txyz[] = posis_i.map(posi_i => this._geom.modeldata.attribs.query.getPosiCoords(posi_i));\r\n            const vec_a: Txyz = vecFromTo(xyzs[0], xyzs[1]);\r\n            const vec_b: Txyz = vecFromTo(xyzs[0], xyzs[2]); // CCW\r\n            const tri_normal: Txyz = vecCross(vec_a, vec_b, true);\r\n            if (!(tri_normal[0] === 0 && tri_normal[1] === 0 && tri_normal[2] === 0)) {\r\n                count += 1;\r\n                normal[0] += tri_normal[0];\r\n                normal[1] += tri_normal[1];\r\n                normal[2] += tri_normal[2];\r\n            }\r\n        }\r\n        if (count === 0) { return [0, 0, 0]; }\r\n        return vecDiv(normal, count);\r\n    }\r\n    // ============================================================================\r\n    // Calculate\r\n    // ============================================================================\r\n    /**\r\n     *\r\n     * @param ent_i\r\n     */\r\n    public getCentroid(ent_type: EEntType, ent_i: number): Txyz {\r\n        const posis_i: number[] = this._geom.nav.navAnyToPosi(ent_type, ent_i);\r\n        const centroid: Txyz = [0, 0, 0];\r\n        for (const posi_i of posis_i) {\r\n            const xyz: Txyz = this._geom.modeldata.attribs.query.getPosiCoords(posi_i);\r\n            centroid[0] += xyz[0];\r\n            centroid[1] += xyz[1];\r\n            centroid[2] += xyz[2];\r\n        }\r\n        return vecDiv(centroid, posis_i.length);\r\n    }\r\n    /**\r\n     * Gets a normal from a wire.\r\n     *\r\n     * It triangulates the wire and then adds up all the normals of all the triangles.\r\n     * Each edge has equal weight, irrespective of length.\r\n     *\r\n     * In some cases, the triangles may cancel each other out.\r\n     * In such a case, it will choose the side' where the wire edges are the longest.\r\n     *\r\n     * @param wire_i\r\n     */\r\n    public getWireNormal(wire_i: number): Txyz {\r\n        const edges_i: number[] = this._geom._geom_maps.dn_wires_edges.get(wire_i);\r\n        // deal with special case, just a single edge\r\n        if (edges_i.length === 1) {\r\n            const posis_i: number[] = this._geom_maps.dn_edges_verts.get(edges_i[0]).map(\r\n                vert_i => this._geom_maps.dn_verts_posis.get(vert_i));\r\n            const xyz0: Txyz = this._geom.modeldata.attribs.query.getPosiCoords(posis_i[0]);\r\n            const xyz1: Txyz = this._geom.modeldata.attribs.query.getPosiCoords(posis_i[1]);\r\n            if (xyz0[2] === xyz1[2]) { return [0, 0, 1]; }\r\n            if (xyz0[1] === xyz1[1]) { return [0, 1, 0]; }\r\n            if (xyz0[0] === xyz1[0]) { return [1, 0, 0]; }\r\n            return vecNorm(vecCross(vecFromTo(xyz0, xyz1), [0, 0, 1]));\r\n        }\r\n        // proceed with multiple edges\r\n        const centroid: Txyz = this.getCentroid(EEntType.WIRE, wire_i);\r\n        const normal: Txyz = [0, 0, 0];\r\n        const tri_normals: Txyz[] = [];\r\n        // let count = 0;\r\n        for (const edge_i of edges_i) {\r\n            const posis_i: number[] = this._geom_maps.dn_edges_verts.get(edge_i).map(\r\n                vert_i => this._geom_maps.dn_verts_posis.get(vert_i));\r\n            const xyzs: Txyz[] = posis_i.map(posi_i => this._geom.modeldata.attribs.query.getPosiCoords(posi_i));\r\n            const vec_a: Txyz = vecFromTo(centroid, xyzs[0]);\r\n            const vec_b: Txyz = vecFromTo(centroid, xyzs[1]); // CCW\r\n            const tri_normal: Txyz = vecCross(vec_a, vec_b, true);\r\n            tri_normals.push(tri_normal);\r\n            normal[0] += tri_normal[0];\r\n            normal[1] += tri_normal[1];\r\n            normal[2] += tri_normal[2];\r\n        }\r\n        // if we have a non-zero normal, then return it\r\n        if (Math.abs(normal[0]) > 1e-6 || Math.abs(normal[1]) > 1e-6 || Math.abs(normal[2]) > 1e-6) {\r\n            return vecNorm(normal);\r\n        }\r\n        // check for special case of a symmetrical shape where all triangle normals are\r\n        // cancelling each other out, we need to look at both 'sides', see which is bigger\r\n        const normal_a: Txyz = [0, 0, 0];\r\n        const normal_b: Txyz = [0, 0, 0];\r\n        let len_a = 0;\r\n        let len_b = 0;\r\n        let first_normal_a = null;\r\n        for (const edge_i of edges_i) {\r\n            const posis_i: number[] = this._geom_maps.dn_edges_verts.get(edge_i).map(\r\n                vert_i => this._geom_maps.dn_verts_posis.get(vert_i));\r\n            const xyzs: Txyz[] = posis_i.map(posi_i => this._geom.modeldata.attribs.query.getPosiCoords(posi_i));\r\n            const vec_a: Txyz = vecFromTo(centroid, xyzs[0]);\r\n            const vec_b: Txyz = vecFromTo(centroid, xyzs[1]); // CCW\r\n            const tri_normal: Txyz = vecCross(vec_a, vec_b, true);\r\n            if (!(tri_normal[0] === 0 && tri_normal[1] === 0 && tri_normal[2] === 0)) {\r\n                if (first_normal_a === null) {\r\n                    first_normal_a = tri_normal;\r\n                    normal_a[0] = tri_normal[0];\r\n                    normal_a[1] = tri_normal[1];\r\n                    normal_a[2] = tri_normal[2];\r\n                    len_a += vecLen(vecFromTo(xyzs[0], xyzs[1]));\r\n                } else {\r\n                    if (vecDot(first_normal_a, tri_normal) > 0) {\r\n                        normal_a[0] += tri_normal[0];\r\n                        normal_a[1] += tri_normal[1];\r\n                        normal_a[2] += tri_normal[2];\r\n                        len_a += vecLen(vecFromTo(xyzs[0], xyzs[1]));\r\n                    } else {\r\n                        normal_b[0] += tri_normal[0];\r\n                        normal_b[1] += tri_normal[1];\r\n                        normal_b[2] += tri_normal[2];\r\n                        len_b += vecLen(vecFromTo(xyzs[0], xyzs[1]));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // return the normal for the longest set of edges in the wire\r\n        // if they are the same length, return the normal associated with the start of the wire\r\n        if (len_a >= len_b) {\r\n            return vecNorm(normal_a);\r\n        }\r\n        return vecNorm(normal_b);\r\n    }\r\n    // ============================================================================\r\n    // Other methods\r\n    // ============================================================================\r\n    /**\r\n     * Given a set of vertices, get the welded neighbour entities.\r\n     * @param ent_type\r\n     * @param verts_i\r\n     */\r\n    public neighbor(ent_type: EEntType, verts_i: number[]): number[] {\r\n        const neighbour_ents_i: Set<number> = new Set();\r\n        for (const vert_i of verts_i) {\r\n            const posi_i: number = this._geom.nav.navVertToPosi(vert_i);\r\n            const found_verts_i: number[] = this._geom.nav.navPosiToVert(posi_i);\r\n            for (const found_vert_i of found_verts_i) {\r\n                if (verts_i.indexOf(found_vert_i) === -1) {\r\n                    const found_ents_i: number[] = this._geom.nav.navAnyToAny(EEntType.VERT, ent_type, found_vert_i);\r\n                    found_ents_i.forEach( found_ent_i => neighbour_ents_i.add(found_ent_i) );\r\n                }\r\n            }\r\n        }\r\n        return Array.from(neighbour_ents_i);\r\n    }\r\n    /**\r\n     * Given a set of edges, get the perimeter entities.\r\n     * @param ent_type\r\n     * @param edges_i\r\n     */\r\n    public perimeter(ent_type: EEntType, edges_i: number[]): number[] {\r\n        const edge_posis_map: Map<number, number[]> = new Map();\r\n        const edge_to_posi_pairs_map: Map<number, [number, number]> = new Map();\r\n        for (const edge_i of edges_i) {\r\n            const posi_pair_i: [number, number] = this._geom.nav.navAnyToPosi(EEntType.EDGE, edge_i) as [number, number];\r\n            if (!edge_posis_map.has(posi_pair_i[0])) {\r\n                edge_posis_map.set(posi_pair_i[0], []);\r\n            }\r\n            edge_posis_map.get(posi_pair_i[0]).push(posi_pair_i[1]);\r\n            edge_to_posi_pairs_map.set(edge_i, posi_pair_i );\r\n        }\r\n        const perimeter_ents_i: Set<number> = new Set();\r\n        for (const edge_i of edges_i) {\r\n            const posi_pair_i: [number, number] = edge_to_posi_pairs_map.get(edge_i);\r\n            if (!edge_posis_map.has(posi_pair_i[1]) || edge_posis_map.get(posi_pair_i[1]).indexOf(posi_pair_i[0]) === -1) {\r\n                const found_ents_i: number[] = this._geom.nav.navAnyToAny(EEntType.EDGE, ent_type, edge_i);\r\n                found_ents_i.forEach( found_ent_i => perimeter_ents_i.add(found_ent_i) );\r\n            }\r\n        }\r\n        return Array.from(perimeter_ents_i);\r\n    }\r\n    /**\r\n     * Get the object of a topo entity.\r\n     * @param ent_type\r\n     * @param ent_i\r\n     */\r\n    public getTopoObj(ent_type: EEntType, ent_i: number): TEntTypeIdx {\r\n        switch (ent_type) {\r\n            case EEntType.FACE:\r\n                return [EEntType.PGON, this._geom.nav.navFaceToPgon(ent_i)];\r\n            case EEntType.WIRE:\r\n            case EEntType.EDGE:\r\n            case EEntType.VERT:\r\n                const pgons_i: number[] = this._geom.nav.navAnyToPgon(ent_type, ent_i);\r\n                if (pgons_i.length !== 0) {\r\n                    return [EEntType.PGON, pgons_i[0]];\r\n                }\r\n                const plines_i: number[] = this._geom.nav.navAnyToPline(ent_type, ent_i);\r\n                if (plines_i.length !== 0) {\r\n                    return [EEntType.PLINE, plines_i[0]];\r\n                }\r\n                const points_i: number[] = this._geom.nav.navAnyToPoint(ent_type, ent_i);\r\n                if (this._geom.nav.navAnyToVert(ent_type, ent_i).length !== 0) {\r\n                    return [EEntType.POINT, points_i[0]];\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('Invalid entity type: Must be a topo entity.');\r\n        }\r\n    }\r\n    /**\r\n     * Get the object type of a topo entity.\r\n     * @param ent_type\r\n     * @param ent_i\r\n     */\r\n    public getTopoObjType(ent_type: EEntType, ent_i: number): EEntType {\r\n        switch (ent_type) {\r\n            case EEntType.FACE:\r\n                return EEntType.PGON;\r\n            case EEntType.WIRE:\r\n            case EEntType.EDGE:\r\n            case EEntType.VERT:\r\n                if (this._geom.nav.navAnyToFace(ent_type, ent_i).length !== 0) {\r\n                    return EEntType.PGON;\r\n                } else if (this._geom.nav.navAnyToWire(ent_type, ent_i).length !== 0) {\r\n                    return EEntType.PLINE;\r\n                } else if (this._geom.nav.navAnyToVert(ent_type, ent_i).length !== 0) {\r\n                    return EEntType.POINT;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error('Invalid entity type: Must be a topo entity.');\r\n        }\r\n    }\r\n    /**\r\n     * Get the topo entities of an object\r\n     * @param ent_type\r\n     * @param ent_i\r\n     */\r\n    public getObjTopo(ent_type: EEntType, ent_i: number): [number[], number[], number[], number[]] {\r\n        return [\r\n            this._geom.nav.navAnyToVert(ent_type, ent_i),\r\n            this._geom.nav.navAnyToEdge(ent_type, ent_i),\r\n            this._geom.nav.navAnyToWire(ent_type, ent_i),\r\n            this._geom.nav.navAnyToFace(ent_type, ent_i),\r\n        ];\r\n    }\r\n}\r\n","import { GIGeom } from './GIGeom';\r\nimport { IGeomMaps, TTri, TEdge, TPoint, TPline, TWire } from './common';\r\nimport { GIAttribMap } from './GIAttribMap';\r\nimport * as THREE from 'three';\r\n\r\n/**\r\n * Class for geometry.\r\n */\r\nexport class GIGeomThreejs {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    // ============================================================================\r\n    // ThreeJS\r\n    // Get arrays for threejs, these retrun arrays of indexes to positions\r\n    // For a method to get the array of positions, see the attrib class\r\n    // getSeqCoords()\r\n    // ============================================================================\r\n    // /**\r\n    //  * Returns a flat list of all vertices.\r\n    //  * The indices in the list point to the sequential coordinates.\r\n    //  */\r\n    // public get3jsVerts(): number[] {\r\n    //     return this._geom_maps.dn_verts_posis;\r\n    // }\r\n    /**\r\n     * Returns that data required for threejs triangles.\r\n     * 0) the vertices, as a flat array\r\n     * 1) the select map, that maps from the threejs tri indices to the gi model tri indices\r\n     * 2) the materials array, which is an array of objects\r\n     * 3) the material groups array, which is an array of [ start, count, mat_index ]\r\n     */\r\n    public get3jsTris(vertex_map: Map<number, number>): [number[], Map<number, number>, object[], [number, number, number][]] {\r\n\r\n        // TODO this should not be parsed each time\r\n        const settings = JSON.parse(localStorage.getItem('mpm_settings'));\r\n\r\n        // arrays to store threejs data\r\n        const tri_data_arrs: [number[], TTri, number][] = []; // tri_mat_indices, new_tri_verts_i, tri_i\r\n        const mat_f: object = {\r\n            specular: 0x000000,\r\n            emissive: 0x000000,\r\n            shininess: 0,\r\n            side: THREE.FrontSide,\r\n            wireframe: settings.wireframe.show\r\n        };\r\n        const mat_b: object = {\r\n            specular: 0x000000,\r\n            emissive: 0x000000,\r\n            shininess: 0,\r\n            side: THREE.BackSide,\r\n            wireframe: settings.wireframe.show\r\n        };\r\n        const materials: object[] = [this._getMaterial( mat_f ), this._getMaterial( mat_b )];\r\n        const material_names:  string[] = ['default_front', 'default_back'];\r\n        // get the material attribute from polygons\r\n        const material_attrib: GIAttribMap = this._geom.modeldata.attribs._attribs_maps.pg.get('material');\r\n        // loop through all tris\r\n        this._geom_maps.dn_tris_verts.forEach( (tri_verts_i, tri_i) => {\r\n            // get the verts, face and the polygon for this tri\r\n            const new_tri_verts_i: TTri = tri_verts_i.map(v => vertex_map.get(v)) as TTri;\r\n            // get the materials for this tri from the polygon\r\n            const tri_face_i: number = this._geom_maps.up_tris_faces.get(tri_i);\r\n            const tri_pgon_i: number = this._geom_maps.up_faces_pgons.get(tri_face_i);\r\n            const tri_mat_indices: number[] = [];\r\n            if (material_attrib !== undefined) {\r\n                const mat_attrib_val: string|string[] = material_attrib.getEntVal(tri_pgon_i) as string|string[];\r\n                const pgon_mat_names: string[] = (Array.isArray(mat_attrib_val)) ? mat_attrib_val : [mat_attrib_val];\r\n                for (const pgon_mat_name of pgon_mat_names) {\r\n                    let pgon_mat_index: number = material_names.indexOf(pgon_mat_name);\r\n                    if (pgon_mat_index === -1) {\r\n                        const mat_settings_obj: object = this._geom.modeldata.attribs._attribs_maps.mo.get(pgon_mat_name);\r\n                        if (mat_settings_obj !== undefined) {\r\n                            pgon_mat_index = materials.length;\r\n                            material_names.push(pgon_mat_name);\r\n                            materials.push(this._getMaterial(mat_settings_obj));\r\n                        }\r\n                    }\r\n                    if (pgon_mat_index !== -1) {\r\n                        tri_mat_indices.push(pgon_mat_index);\r\n                    }\r\n                }\r\n            }\r\n            if (tri_mat_indices.length === 0) {\r\n                tri_mat_indices.push(0); // default material front\r\n                tri_mat_indices.push(1); // default material back\r\n            }\r\n            // add the data to the data_array\r\n            tri_data_arrs.push( [ tri_mat_indices, new_tri_verts_i, tri_i ] );\r\n        });\r\n        // sort that data_array, so that we get triangls sorted according to their materials\r\n        // for each entry in the data_array, the first item is the material indices, so that they are sorted correctly\r\n        tri_data_arrs.sort();\r\n        // loop through the sorted array and create the tris and groups data for threejs\r\n        const tris_verts_i: TTri[] = [];\r\n        const tri_select_map: Map<number, number> = new Map();\r\n        const mat_groups_map: Map<number, [number, number][]> = new Map(); // mat_index -> [start, end][]\r\n        for (const tri_data_arr of tri_data_arrs) {\r\n            // save the tri data\r\n            const tjs_i = tris_verts_i.push(tri_data_arr[1]) - 1;\r\n            tri_select_map.set(tjs_i, tri_data_arr[2]);\r\n            // go through all materials for this tri and add save the mat groups data\r\n            for (const mat_index of tri_data_arr[0]) {\r\n                let start_end_arrs: [number, number][] = mat_groups_map.get(mat_index);\r\n                if (start_end_arrs === undefined) {\r\n                    start_end_arrs = [[tjs_i, tjs_i]];\r\n                    mat_groups_map.set(mat_index, start_end_arrs);\r\n                } else {\r\n                    const start_end: [number, number] = start_end_arrs[start_end_arrs.length - 1];\r\n                    if (tjs_i === start_end[1] + 1) {\r\n                        start_end[1] = tjs_i;\r\n                    } else {\r\n                        start_end_arrs.push([tjs_i, tjs_i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // convert the mat_groups_map into the format required for threejs\r\n        // for each material group, we need an array [start, count, mat_index]\r\n        const material_groups: [number, number, number][] = []; // [start, count, mat_index][]\r\n        mat_groups_map.forEach( (start_end_arrs, mat_index) => {\r\n            for (const start_end of start_end_arrs) {\r\n                const start: number = start_end[0];\r\n                const count: number = start_end[1] - start_end[0] + 1;\r\n                material_groups.push( [ start * 3, count * 3, mat_index ] );\r\n            }\r\n        });\r\n        // convert the verts list to a flat array\r\n        // tslint:disable-next-line:no-unused-expression\r\n        // @ts-ignore\r\n        const tris_verts_i_flat: number[] = tris_verts_i.flat(1);\r\n        // return the data\r\n        // there are four sets of data that are returns\r\n        return [\r\n            tris_verts_i_flat, // 0) the vertices, as a flat array\r\n            tri_select_map,    // 1) the select map, that maps from the threejs tri indices to the gi model tri indices\r\n            materials,         // 2) the materials array, which is an array of objects\r\n            material_groups    // 3) the material groups array, which is an array of [ start, count, mat_index ]\r\n        ];\r\n\r\n        // let gi_i = 0;\r\n        // const l = this._geom_maps.dn_tris_verts.length;\r\n        // for (; gi_i < l; gi_i++) {\r\n        //     const tri_verts_i: TTri = this._geom_maps.dn_tris_verts.get(gi_i];\r\n        //     if (tri_verts_i !== null) {\r\n        //         const new_tri_verts_i: TTri = tri_verts_i.map(v => vertex_map.get(v)) as TTri;\r\n        //         const tjs_i = tris_verts_i_filt.push(new_tri_verts_i) - 1;\r\n        //         tri_select_map.set(tjs_i, gi_i);\r\n        //     }\r\n        // }\r\n        // @ts-ignore\r\n        // return [tris_verts_i.flat(1), tri_select_map];\r\n        // return this._geom_maps.dn_tris_verts.flat(1);\r\n        // return [].concat(...this._geom_maps.dn_tris_verts);\r\n\r\n    }\r\n    // public get3jsTris(vertex_map: Map<number, number>): [number[], Map<number, number>, object[], [number, number, number][]] {\r\n    //     const settings = JSON.parse(localStorage.getItem('mpm_settings'));\r\n    //     // arrays to store threejs data\r\n    //     const tri_data_arrs: [number[], TTri, number][] = []; // tri_mat_indices, new_tri_verts_i, tri_i\r\n    //     const mat_f: object = {\r\n    //         specular: 0x000000,\r\n    //         emissive: 0x000000,\r\n    //         shininess: 0,\r\n    //         side: THREE.FrontSide,\r\n    //         wireframe: settings.wireframe.show\r\n    //     };\r\n    //     const mat_b: object = {\r\n    //         specular: 0x000000,\r\n    //         emissive: 0x000000,\r\n    //         shininess: 0,\r\n    //         side: THREE.BackSide,\r\n    //         wireframe: settings.wireframe.show\r\n    //     };\r\n    //     const materials: object[] = [this._getMaterial( mat_f ), this._getMaterial( mat_b )];\r\n    //     const material_names:  string[] = ['default_front', 'default_back'];\r\n    //     // get the material attribute from polygons\r\n    //     const material_attrib: GIAttribMap = this._geom.modeldata.attribs._attribs_maps.pg.get('material');\r\n    //     // loop through all tris\r\n    //     let tri_i = 0; const tri_i_max = this._geom_maps.dn_tris_verts.length;\r\n    //     for (; tri_i < tri_i_max; tri_i++) {\r\n    //         const tri_verts_i: number[] = this._geom_maps.dn_tris_verts[tri_i];\r\n    //         if (tri_verts_i !== null) {\r\n    //             // get the verts, face and the polygon for this tri\r\n    //             const new_tri_verts_i: TTri = tri_verts_i.map(v => vertex_map.get(v)) as TTri;\r\n    //             // get the materials for this tri from the polygon\r\n    //             const tri_face_i: number = this._geom_maps.up_tris_faces[tri_i];\r\n    //             const tri_pgon_i: number = this._geom_maps.up_faces_pgons[tri_face_i];\r\n    //             const tri_mat_indices: number[] = [];\r\n    //             if (material_attrib !== undefined) {\r\n    //                 const mat_attrib_val: string|string[] = material_attrib.getEntVal(tri_pgon_i) as string|string[];\r\n    //                 const pgon_mat_names: string[] = (Array.isArray(mat_attrib_val)) ? mat_attrib_val : [mat_attrib_val];\r\n    //                 for (const pgon_mat_name of pgon_mat_names) {\r\n    //                     let pgon_mat_index: number = material_names.indexOf(pgon_mat_name);\r\n    //                     if (pgon_mat_index === -1) {\r\n    //                         const mat_settings_obj: object = this._geom.modeldata.attribs._attribs_maps.mo.get(pgon_mat_name);\r\n    //                         if (mat_settings_obj !== undefined) {\r\n    //                             pgon_mat_index = materials.length;\r\n    //                             material_names.push(pgon_mat_name);\r\n    //                             materials.push(this._getMaterial(mat_settings_obj));\r\n    //                         }\r\n    //                     }\r\n    //                     if (pgon_mat_index !== -1) {\r\n    //                         tri_mat_indices.push(pgon_mat_index);\r\n    //                     }\r\n    //                 }\r\n    //             }\r\n    //             if (tri_mat_indices.length === 0) {\r\n    //                 tri_mat_indices.push(0); // default material front\r\n    //                 tri_mat_indices.push(1); // default material back\r\n    //             }\r\n    //             // add the data to the data_array\r\n    //             tri_data_arrs.push( [ tri_mat_indices, new_tri_verts_i, tri_i ] );\r\n    //         }\r\n    //     }\r\n    //     // sort that data_array, so that we get triangls sorted according to their materials\r\n    //     // for each entry in the data_array, the first item is the material indices, so that they are sorted correctly\r\n    //     tri_data_arrs.sort();\r\n    //     // loop through the sorted array and create the tris and groups data for threejs\r\n    //     const tris_verts_i: TTri[] = [];\r\n    //     const tri_select_map: Map<number, number> = new Map();\r\n    //     const mat_groups_map: Map<number, [number, number][]> = new Map(); // mat_index -> [start, end][]\r\n    //     for (const tri_data_arr of tri_data_arrs) {\r\n    //         // save the tri data\r\n    //         const tjs_i = tris_verts_i.push(tri_data_arr[1]) - 1;\r\n    //         tri_select_map.set(tjs_i, tri_data_arr[2]);\r\n    //         // go through all materials for this tri and add save the mat groups data\r\n    //         for (const mat_index of tri_data_arr[0]) {\r\n    //             let start_end_arrs: [number, number][] = mat_groups_map.get(mat_index);\r\n    //             if (start_end_arrs === undefined) {\r\n    //                 start_end_arrs = [[tjs_i, tjs_i]];\r\n    //                 mat_groups_map.set(mat_index, start_end_arrs);\r\n    //             } else {\r\n    //                 const start_end: [number, number] = start_end_arrs[start_end_arrs.length - 1];\r\n    //                 if (tjs_i === start_end[1] + 1) {\r\n    //                     start_end[1] = tjs_i;\r\n    //                 } else {\r\n    //                     start_end_arrs.push([tjs_i, tjs_i]);\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    //     // convert the mat_groups_map into the format required for threejs\r\n    //     // for each material group, we need an array [start, count, mat_index]\r\n    //     const material_groups: [number, number, number][] = []; // [start, count, mat_index][]\r\n    //     mat_groups_map.forEach( (start_end_arrs, mat_index) => {\r\n    //         for (const start_end of start_end_arrs) {\r\n    //             const start: number = start_end[0];\r\n    //             const count: number = start_end[1] - start_end[0] + 1;\r\n    //             material_groups.push( [ start * 3, count * 3, mat_index ] );\r\n    //         }\r\n    //     });\r\n    //     // convert the verts list to a flat array\r\n    //     // tslint:disable-next-line:no-unused-expression\r\n    //     // @ts-ignore\r\n    //     const tris_verts_i_flat: number[] = tris_verts_i.flat(1);\r\n    //     // return the data\r\n    //     // there are four sets of data that are returns\r\n    //     return [\r\n    //         tris_verts_i_flat, // 0) the vertices, as a flat array\r\n    //         tri_select_map,    // 1) the select map, that maps from the threejs tri indices to the gi model tri indices\r\n    //         materials,         // 2) the materials array, which is an array of objects\r\n    //         material_groups    // 3) the material groups array, which is an array of [ start, count, mat_index ]\r\n    //     ];\r\n\r\n    //     // let gi_i = 0;\r\n    //     // const l = this._geom_maps.dn_tris_verts.length;\r\n    //     // for (; gi_i < l; gi_i++) {\r\n    //     //     const tri_verts_i: TTri = this._geom_maps.dn_tris_verts[gi_i];\r\n    //     //     if (tri_verts_i !== null) {\r\n    //     //         const new_tri_verts_i: TTri = tri_verts_i.map(v => vertex_map.get(v)) as TTri;\r\n    //     //         const tjs_i = tris_verts_i_filt.push(new_tri_verts_i) - 1;\r\n    //     //         tri_select_map.set(tjs_i, gi_i);\r\n    //     //     }\r\n    //     // }\r\n    //     // @ts-ignore\r\n    //     // return [tris_verts_i.flat(1), tri_select_map];\r\n    //     // return this._geom_maps.dn_tris_verts.flat(1);\r\n    //     // return [].concat(...this._geom_maps.dn_tris_verts);\r\n    // }\r\n    public get3jsTriIndices(tri_list: number[], vertex_map: Map<number, number>): number[] {\r\n        // loop through all tris\r\n        const tris_verts_i: TTri[] = [];\r\n        for (const tri_i of tri_list) {\r\n            const tri_verts_i: number[] = this._geom_maps.dn_tris_verts[tri_i];\r\n            if (tri_verts_i !== null) {\r\n                const new_tri_verts_i: TTri = tri_verts_i.map(v => vertex_map.get(v)) as TTri;\r\n                tris_verts_i.push(new_tri_verts_i);\r\n            }\r\n        }\r\n        // @ts-ignore\r\n        const tris_verts_i_flat: number[] = tris_verts_i.flat(1);\r\n        return tris_verts_i_flat;\r\n    }\r\n    /**\r\n     * Returns a flat list of the sequence of verices for all the edges.\r\n     * This list will be assumed to be in pairs.\r\n     * The indices in the list point to the vertices.\r\n     */\r\n    public get3jsEdges(vertex_map: Map<number, number>): [number[], Map<number, number>, number[], Map<number, number>] {\r\n        const edges_verts_i_filt: TEdge[] = [];\r\n        const edge_select_map: Map<number, number> = new Map();\r\n        const white_edges_verts_i_filt: TEdge[] = [];\r\n        const white_edge_select_map: Map<number, number> = new Map();\r\n        const visibility_attrib = this._geom.modeldata.attribs._attribs_maps._e.get('visibility');\r\n        let hidden_attrib;\r\n        if (visibility_attrib) {\r\n            hidden_attrib = visibility_attrib.getEntsFromVal('hidden');\r\n        }\r\n        const edge_attrib = this._geom.modeldata.attribs._attribs_maps._e.get('material');\r\n        let edge_material_attrib;\r\n        if (edge_attrib) {\r\n            edge_material_attrib = edge_attrib.getEntsFromVal('white');\r\n        }\r\n        this._geom_maps.dn_edges_verts.forEach( (edge_verts_i, edge_i) => {\r\n            const hidden = hidden_attrib && hidden_attrib.indexOf(edge_i) !== -1;\r\n            if (!hidden) {\r\n                let color_check;\r\n                if (edge_material_attrib) {\r\n                    color_check = edge_material_attrib.indexOf(edge_i) !== -1;\r\n                }\r\n                const new_edge_verts_i: TEdge = edge_verts_i.map(e => vertex_map.get(e)) as TEdge;\r\n                if (color_check) {\r\n                    const tjs_i = white_edges_verts_i_filt.push(new_edge_verts_i) - 1;\r\n                    white_edge_select_map.set(tjs_i, edge_i);\r\n                } else {\r\n                    const tjs_i = edges_verts_i_filt.push(new_edge_verts_i) - 1;\r\n                    edge_select_map.set(tjs_i, edge_i);\r\n                }\r\n            }\r\n        });\r\n        // @ts-ignore\r\n        return [edges_verts_i_filt.flat(1), edge_select_map, white_edges_verts_i_filt.flat(1), white_edge_select_map];\r\n\r\n        // @ts-ignore\r\n        // return this._geom_maps.dn_edges_verts.flat(1);\r\n        // return [].concat(...this._geom_maps.dn_edges_verts);\r\n    }\r\n    /**\r\n     * Returns a flat list of the sequence of verices for all the edges.\r\n     * This list will be assumed to be in pairs.\r\n     * The indices in the list point to the vertices.\r\n     */\r\n    public get3jsPlines(vertex_map: Map<number, number>): [number[], Map<number, number>] {\r\n        const edges_verts_i_filt: TEdge[] = [];\r\n        const edge_select_map: Map<number, number> = new Map();\r\n        this._geom_maps.dn_plines_wires.forEach( (wire_i, pline_i) => {\r\n            const edges_i: TWire = this._geom_maps.dn_wires_edges.get(wire_i);\r\n            for (const edge_i of edges_i) {\r\n                const edge_verts_i: TEdge = this._geom_maps.dn_edges_verts.get(edge_i);\r\n                const new_edge_verts_i: TEdge = edge_verts_i.map(e => vertex_map.get(e)) as TEdge;\r\n                const tjs_i = edges_verts_i_filt.push(new_edge_verts_i) - 1;\r\n                edge_select_map.set(tjs_i, pline_i);\r\n            }\r\n        });\r\n        // @ts-ignore\r\n        return [edges_verts_i_filt.flat(1), edge_select_map];\r\n    }\r\n\r\n\r\n    public get3jsEdgeIndices(edge_list: number[], vertex_map: Map<number, number>): [number[], number[]] {\r\n        const edges_verts_i_filt: TEdge[] = [];\r\n        const white_edges_verts_i_filt: TEdge[] = [];\r\n        const visibility_attrib = this._geom.modeldata.attribs._attribs_maps._e.get('visibility');\r\n        let hidden_attrib;\r\n        if (visibility_attrib) {\r\n            hidden_attrib = visibility_attrib.getEntsFromVal('hidden');\r\n        }\r\n        const edge_attrib = this._geom.modeldata.attribs._attribs_maps._e.get('material');\r\n        let edge_material_attrib;\r\n        if (edge_attrib) {\r\n            edge_material_attrib = edge_attrib.getEntsFromVal('white');\r\n        }\r\n        for (const gi_i of edge_list) {\r\n            if (hidden_attrib && hidden_attrib.indexOf(gi_i) !== -1) { continue; }\r\n            const edge_verts_i: TEdge = this._geom_maps.dn_edges_verts[gi_i];\r\n            let color_check;\r\n            if (edge_material_attrib) {\r\n                color_check = edge_material_attrib.indexOf(gi_i) !== -1;\r\n            }\r\n            if (edge_verts_i !== null) {\r\n                const new_edge_verts_i: TEdge = edge_verts_i.map(e => vertex_map.get(e)) as TEdge;\r\n                if (color_check) {\r\n                    white_edges_verts_i_filt.push(new_edge_verts_i);\r\n                } else {\r\n                    edges_verts_i_filt.push(new_edge_verts_i);\r\n                }\r\n            }\r\n        }\r\n        // @ts-ignore\r\n        return [edges_verts_i_filt.flat(1), white_edges_verts_i_filt.flat(1)];\r\n\r\n        // @ts-ignore\r\n        // return this._geom_maps.dn_edges_verts.flat(1);\r\n        // return [].concat(...this._geom_maps.dn_edges_verts);\r\n    }\r\n\r\n    /**\r\n     * Returns a flat list of the sequence of verices for all the points.\r\n     * The indices in the list point to the vertices.\r\n     */\r\n    public get3jsPoints(vertex_map: Map<number, number>): [number[], Map<number, number>] {\r\n        const points_verts_i_filt: TPoint[] = [];\r\n        const point_select_map: Map<number, number> = new Map();\r\n        this._geom_maps.dn_points_verts.forEach( (vert_i, point_i) => {\r\n            const new_point_verts_i: TPoint = vertex_map.get(vert_i) as TPoint;\r\n            const tjs_i = points_verts_i_filt.push(new_point_verts_i) - 1;\r\n            point_select_map.set(tjs_i, point_i);\r\n        });\r\n        return [points_verts_i_filt, point_select_map];\r\n    }\r\n\r\n    public get3jsPointIndices(pt_list: number[], vertex_map: Map<number, number>): number[] {\r\n        const points_verts_i_filt: TPoint[] = [];\r\n        for (const gi_i of pt_list) {\r\n            const point_verts_i: TPoint = this._geom_maps.dn_points_verts[gi_i];\r\n            // const point_verts_i: TPoint = this._geom_maps.dn_points_verts[gi_i];\r\n            if (point_verts_i !== null) {\r\n                const new_point_verts_i: TPoint = vertex_map.get(point_verts_i) as TPoint;\r\n                points_verts_i_filt.push(new_point_verts_i);\r\n            }\r\n        }\r\n        return points_verts_i_filt;\r\n    }\r\n\r\n    /**\r\n     * Create a threejs material\r\n     * @param settings\r\n     */\r\n    private _getMaterial(settings?: object) {\r\n        const material =  {\r\n            type: 'MeshPhongMaterial',\r\n            side: THREE.DoubleSide,\r\n            vertexColors: THREE.VertexColors\r\n        };\r\n        if (settings) {\r\n            for (const key of Object.keys(settings)) {\r\n                material[key] = settings[key];\r\n            }\r\n        }\r\n        return material;\r\n    }\r\n}\r\n","import { EEntType, TTri, TEdge, TWire, TFace, IGeomMaps, Txyz, TColl, TVert, TEntTypeIdx } from './common';\r\nimport { GIGeom } from './GIGeom';\r\n\r\n/**\r\n * Class for geometry.\r\n */\r\nexport class GIGeomTimeStamp {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n    /**\r\n     * Update time stamp of an object.\r\n     * If the input entity is not an object, then objects will be retrieved.\r\n     * @param point_i\r\n     */\r\n    public updateObjsTs(ent_type: EEntType, ent_i: number): void {\r\n        const ts: number = this._geom.modeldata.model.metadata.nextTimeStamp();\r\n        switch (ent_type) {\r\n            case EEntType.POSI:\r\n                this._geom_maps.posis_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.POINT:\r\n                this._geom_maps.points_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.PLINE:\r\n                this._geom_maps.plines_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.PGON:\r\n                this._geom_maps.pgons_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.COLL:\r\n                this._geom.nav.navCollToPgon(ent_i).forEach( pgon_i => this._geom_maps.pgons_ts.set(pgon_i, ts) );\r\n                this._geom.nav.navCollToPline(ent_i).forEach( pline_i => this._geom_maps.plines_ts.set(pline_i, ts) );\r\n                this._geom.nav.navCollToPoint(ent_i).forEach( point_i => this._geom_maps.points_ts.set(point_i, ts) );\r\n                return;\r\n            case EEntType.FACE:\r\n            case EEntType.WIRE:\r\n            case EEntType.EDGE:\r\n            case EEntType.VERT:\r\n                // get the topo object\r\n                const [ent2_type, ent2_i]: TEntTypeIdx = this._geom.query.getTopoObj(ent_type, ent_i);\r\n                switch (ent2_type) {\r\n                    case EEntType.POSI:\r\n                        this._geom_maps.posis_ts.set(ent2_i, ts);\r\n                        return;\r\n                    case EEntType.POINT:\r\n                        this._geom_maps.points_ts.set(ent2_i, ts);\r\n                        return;\r\n                    case EEntType.PLINE:\r\n                        this._geom_maps.plines_ts.set(ent2_i, ts);\r\n                        return;\r\n                    case EEntType.PGON:\r\n                        this._geom_maps.pgons_ts.set(ent2_i, ts);\r\n                        return;\r\n                }\r\n        }\r\n    }\r\n    /**\r\n     * Update time stamp of an object.\r\n     * If the input entity is not an object, then objects will be retrieved.\r\n     * @param point_i\r\n     */\r\n    public updateEntTs(ent_type: EEntType, ent_i: number): void {\r\n        const ts: number = this._geom.modeldata.model.metadata.nextTimeStamp();\r\n        switch (ent_type) {\r\n            case EEntType.POSI:\r\n                this._geom_maps.posis_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.POINT:\r\n                this._geom_maps.points_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.PLINE:\r\n                this._geom_maps.plines_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.PGON:\r\n                this._geom_maps.pgons_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.COLL:\r\n                this._geom_maps.colls_ts.set(ent_i, ts);\r\n                return;\r\n        }\r\n    }\r\n    /**\r\n     * Update time stamp for multiple arrays or sets of entities.\r\n     * @param map\r\n     */\r\n    public updateEntsTs(ent_type: EEntType, ents_i: number[]|Set<number>): void {\r\n        const ts: number = this._geom.modeldata.model.metadata.nextTimeStamp();\r\n        switch (ent_type) {\r\n            case EEntType.POSI:\r\n                ents_i.forEach( ent_i => this._geom_maps.posis_ts.set(ent_i, ts) );\r\n                return;\r\n            case EEntType.POINT:\r\n                ents_i.forEach( ent_i => this._geom_maps.points_ts.set(ent_i, ts) );\r\n                return;\r\n            case EEntType.PLINE:\r\n                ents_i.forEach( ent_i => this._geom_maps.plines_ts.set(ent_i, ts) );\r\n                return;\r\n            case EEntType.PGON:\r\n                ents_i.forEach( ent_i => this._geom_maps.pgons_ts.set(ent_i, ts) );\r\n                return;\r\n            case EEntType.COLL:\r\n                ents_i.forEach( ent_i => this._geom_maps.colls_ts.set(ent_i, ts) );\r\n                return;\r\n        }\r\n    }\r\n    /**\r\n     * Get the timestamp of a posi\r\n     * @param posi_i\r\n     */\r\n    public getEntTs(ent_type: EEntType, ent_i: number): number {\r\n        switch (ent_type) {\r\n            case EEntType.POSI:\r\n                return this._geom_maps.posis_ts.get(ent_i);\r\n            case EEntType.POINT:\r\n                return this._geom_maps.points_ts.get(ent_i);\r\n            case EEntType.PLINE:\r\n                return this._geom_maps.plines_ts.get(ent_i);\r\n            case EEntType.PGON:\r\n                return this._geom_maps.pgons_ts.get(ent_i);\r\n            case EEntType.COLL:\r\n                return this._geom_maps.colls_ts.get(ent_i);\r\n            default:\r\n                throw new Error('Get time stamp: Entity type not recognised.');\r\n        }\r\n    }\r\n    /**\r\n     * Set the timestamp for an ent.\r\n     * This is used by merge.\r\n     * @param ent_type\r\n     * @param posi_i\r\n     * @param ts\r\n     */\r\n    public setEntTs(ent_type: EEntType, ent_i: number, ts: number): void {\r\n        switch (ent_type) {\r\n            case EEntType.POSI:\r\n                this._geom_maps.posis_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.POINT:\r\n                this._geom_maps.points_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.PLINE:\r\n                this._geom_maps.plines_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.PGON:\r\n                this._geom_maps.pgons_ts.set(ent_i, ts);\r\n                return;\r\n            case EEntType.COLL:\r\n                this._geom_maps.colls_ts.set(ent_i, ts);\r\n                return;\r\n            default:\r\n                throw new Error('Get time stamp: Entity type not recognised.');\r\n        }\r\n    }\r\n    /**\r\n     * Delete the timestamp for an ent.\r\n     * @param ent_type\r\n     * @param ent_i\r\n     */\r\n    public delEntTs(ent_type: EEntType, ent_i: number): void {\r\n        switch (ent_type) {\r\n            case EEntType.POSI:\r\n                this._geom_maps.posis_ts.delete(ent_i);\r\n                return;\r\n            case EEntType.POINT:\r\n                this._geom_maps.points_ts.delete(ent_i);\r\n                return;\r\n            case EEntType.PLINE:\r\n                this._geom_maps.plines_ts.delete(ent_i);\r\n                return;\r\n            case EEntType.PGON:\r\n                this._geom_maps.pgons_ts.delete(ent_i);\r\n                return;\r\n            case EEntType.COLL:\r\n                this._geom_maps.colls_ts.delete(ent_i);\r\n                return;\r\n            default:\r\n                throw new Error('Get time stamp: Entity type not recognised.');\r\n        }\r\n    }\r\n}\r\n","import { EAttribDataTypeStrs, TAttribDataTypes, IMetaData, IMetaJSONData, IAttribJSONValues,\r\n    IModelJSON, IModelJSONData, IAttribJSONData, IAttribValues } from './common';\r\n\r\n/**\r\n * Geo-info model metadata class.\r\n */\r\nexport class GIMetaData {\r\n    private _data: IMetaData = {\r\n        time_stamp: 0,\r\n        posi_count: 0,\r\n        vert_count: 0,\r\n        tri_count: 0,\r\n        edge_count: 0,\r\n        wire_count: 0,\r\n        face_count: 0,\r\n        point_count: 0,\r\n        pline_count: 0,\r\n        pgon_count: 0,\r\n        coll_count: 0,\r\n        attrib_values: {\r\n            number: [[], new Map()],    // an array of numbers, and a map: number key -> array index\r\n            string: [[], new Map()],    // an array of strings, and a map: string key -> array index\r\n            list:   [[], new Map()],    // an array of lists, and a map: string key -> array index\r\n            dict:   [[], new Map()]     // an array of dicts, and a map: string key -> array index\r\n        }\r\n    };\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() {\r\n        // console.log('CREATING META OBJECT');\r\n    }\r\n    /**\r\n     * Get the meta data.\r\n     */\r\n    public getJSONData(model_data: IModelJSONData): IMetaJSONData {\r\n        const data_filtered: IAttribValues = {\r\n            number: [[], new Map()],\r\n            string: [[], new Map()],\r\n            list: [[], new Map()],\r\n            dict: [[], new Map()],\r\n        };\r\n        // filter the metadata values\r\n        // we only want the valyes that are actually used in this model\r\n        for (const key of Object.keys(model_data.attributes)) {\r\n            if (key !== 'model') {\r\n                for (const attrib of model_data.attributes[key]) {\r\n                    const data_type = attrib.data_type;\r\n                    for (const item of attrib.data) {\r\n                        const attrib_idx = item[0];\r\n                        const attrib_val = this._data.attrib_values[data_type][0][attrib_idx];\r\n                        const attrib_key = (data_type === 'number' || data_type === 'string') ? attrib_val : JSON.stringify(attrib_val);\r\n                        let new_attrib_idx: number;\r\n                        if (attrib_key in data_filtered[data_type][1]) {\r\n                            new_attrib_idx = data_filtered[data_type][1].get(attrib_key);\r\n                        } else {\r\n                            new_attrib_idx = data_filtered[data_type][0].push(attrib_val) - 1;\r\n                            data_filtered[data_type][1].set(attrib_key, new_attrib_idx);\r\n                        }\r\n                        item[0] = new_attrib_idx;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        const data: IMetaJSONData = {\r\n            time_stamp: this._data.time_stamp,\r\n            posi_count: this._data.posi_count,\r\n            vert_count: this._data.vert_count,\r\n            tri_count: this._data.tri_count,\r\n            edge_count: this._data.edge_count,\r\n            wire_count: this._data.wire_count,\r\n            face_count: this._data.face_count,\r\n            point_count: this._data.point_count,\r\n            pline_count: this._data.pline_count,\r\n            pgon_count: this._data.pgon_count,\r\n            coll_count: this._data.coll_count,\r\n            attrib_values: {\r\n                number_vals: data_filtered.number[0],\r\n                string_vals: data_filtered.string[0],\r\n                list_vals: data_filtered.list[0],\r\n                dict_vals: data_filtered.dict[0]\r\n            }\r\n        };\r\n        return data;\r\n    }\r\n    /**\r\n     * Merge that data into this meta data.\r\n     * The entity counts will be updated.\r\n     * The attribute values will be added, if they do not already exist.\r\n     * The attribute indexes in model data will also be renumbered.\r\n     * @param data\r\n     */\r\n    public mergeJSONData(data: IModelJSON): void {\r\n        const meta_data: IMetaJSONData = data.meta_data;\r\n        const model_data: IModelJSONData = data.model_data;\r\n        this._data.posi_count += meta_data.posi_count;\r\n        this._data.vert_count += meta_data.vert_count;\r\n        this._data.tri_count += meta_data.tri_count;\r\n        this._data.edge_count += meta_data.edge_count;\r\n        this._data.wire_count += meta_data.wire_count;\r\n        this._data.face_count += meta_data.face_count;\r\n        this._data.point_count += meta_data.point_count;\r\n        this._data.pline_count += meta_data.pline_count;\r\n        this._data.pgon_count += meta_data.pgon_count;\r\n        this._data.coll_count += meta_data.coll_count;\r\n        // update the attribute values in this meta\r\n        // create the renumbering maps\r\n        const attrib_vals: IAttribJSONValues = meta_data.attrib_values;\r\n        const renum_num_attrib_vals: Map<number, number>  = new Map();\r\n        for (let other_idx = 0; other_idx < attrib_vals.number_vals.length; other_idx++) {\r\n            const other_key: number = attrib_vals.number_vals[other_idx];\r\n            if (this.hasAttribKey(other_key, EAttribDataTypeStrs.NUMBER)) {\r\n                renum_num_attrib_vals.set(other_idx, this.getAttribIdxFromKey(other_key, EAttribDataTypeStrs.NUMBER));\r\n            } else {\r\n                const other_val: number = attrib_vals.number_vals[other_idx];\r\n                const new_idx: number = this.addAttribByKeyVal(other_key, other_val, EAttribDataTypeStrs.NUMBER);\r\n                renum_num_attrib_vals.set(other_idx, new_idx);\r\n            }\r\n        }\r\n        const renum_str_attrib_vals: Map<number, number>  = new Map();\r\n        for (let other_idx = 0; other_idx < attrib_vals.string_vals.length; other_idx++) {\r\n            const other_key: string = attrib_vals.string_vals[other_idx];\r\n            if (this.hasAttribKey(other_key, EAttribDataTypeStrs.STRING)) {\r\n                renum_str_attrib_vals.set(other_idx, this.getAttribIdxFromKey(other_key, EAttribDataTypeStrs.STRING));\r\n            } else {\r\n                const other_val: string = attrib_vals.string_vals[other_idx];\r\n                const new_idx: number = this.addAttribByKeyVal(other_key, other_val, EAttribDataTypeStrs.STRING);\r\n                renum_str_attrib_vals.set(other_idx, new_idx);\r\n            }\r\n        }\r\n        const renum_list_attrib_vals: Map<number, number>  = new Map();\r\n        for (let other_idx = 0; other_idx < attrib_vals.list_vals.length; other_idx++) {\r\n            const other_key: string = JSON.stringify(attrib_vals.list_vals[other_idx]);\r\n            if (this.hasAttribKey(other_key, EAttribDataTypeStrs.LIST)) {\r\n                renum_list_attrib_vals.set(other_idx, this.getAttribIdxFromKey(other_key, EAttribDataTypeStrs.LIST));\r\n            } else {\r\n                const other_val: any[] = attrib_vals.list_vals[other_idx];\r\n                const new_idx: number = this.addAttribByKeyVal(other_key, other_val, EAttribDataTypeStrs.LIST);\r\n                renum_list_attrib_vals.set(other_idx, new_idx);\r\n            }\r\n        }\r\n        const renum_dict_attrib_vals: Map<number, number>  = new Map();\r\n        for (let other_idx = 0; other_idx < attrib_vals.dict_vals.length; other_idx++) {\r\n            const other_key: string = JSON.stringify(attrib_vals.dict_vals[other_idx]);\r\n            if (this.hasAttribKey(other_key, EAttribDataTypeStrs.DICT)) {\r\n                renum_dict_attrib_vals.set(other_idx, this.getAttribIdxFromKey(other_key, EAttribDataTypeStrs.DICT));\r\n            } else {\r\n                const other_val: object = attrib_vals.dict_vals[other_idx];\r\n                const new_idx: number = this.addAttribByKeyVal(other_key, other_val, EAttribDataTypeStrs.DICT);\r\n                renum_dict_attrib_vals.set(other_idx, new_idx);\r\n            }\r\n        }\r\n        // apply the renumbering of attribute indexes in the model data\r\n        const renum_attrib_vals: Map<string, Map<number, number>> = new Map();\r\n        renum_attrib_vals.set(EAttribDataTypeStrs.NUMBER, renum_num_attrib_vals);\r\n        renum_attrib_vals.set(EAttribDataTypeStrs.STRING, renum_str_attrib_vals);\r\n        renum_attrib_vals.set(EAttribDataTypeStrs.LIST, renum_list_attrib_vals);\r\n        renum_attrib_vals.set(EAttribDataTypeStrs.DICT, renum_dict_attrib_vals);\r\n        this._renumAttribValues(model_data.attributes.posis, renum_attrib_vals);\r\n        this._renumAttribValues(model_data.attributes.verts, renum_attrib_vals);\r\n        this._renumAttribValues(model_data.attributes.edges, renum_attrib_vals);\r\n        this._renumAttribValues(model_data.attributes.wires, renum_attrib_vals);\r\n        this._renumAttribValues(model_data.attributes.faces, renum_attrib_vals);\r\n        this._renumAttribValues(model_data.attributes.points, renum_attrib_vals);\r\n        this._renumAttribValues(model_data.attributes.plines, renum_attrib_vals);\r\n        this._renumAttribValues(model_data.attributes.pgons, renum_attrib_vals);\r\n        this._renumAttribValues(model_data.attributes.colls, renum_attrib_vals);\r\n        // no need to return the model data\r\n    }\r\n    // get next time stamp\r\n    public nextTimeStamp(): number {\r\n        const ts: number = this._data.time_stamp;\r\n        this._data.time_stamp += 1;\r\n        return ts;\r\n    }\r\n    // get next index\r\n    public nextPosi(): number {\r\n        const index: number = this._data.posi_count;\r\n        this._data.posi_count += 1;\r\n        return index;\r\n    }\r\n    public nextVert(): number {\r\n        const index: number = this._data.vert_count;\r\n        this._data.vert_count += 1;\r\n        return index;\r\n    }\r\n    public nextTri(): number {\r\n        const index: number = this._data.tri_count;\r\n        this._data.tri_count += 1;\r\n        return index;\r\n    }\r\n    public nextEdge(): number {\r\n        const index: number = this._data.edge_count;\r\n        this._data.edge_count += 1;\r\n        return index;\r\n    }\r\n    public nextWire(): number {\r\n        const index: number = this._data.wire_count;\r\n        this._data.wire_count += 1;\r\n        return index;\r\n    }\r\n    public nextFace(): number {\r\n        const index: number = this._data.face_count;\r\n        this._data.face_count += 1;\r\n        return index;\r\n    }\r\n    public nextPoint(): number {\r\n        const index: number = this._data.point_count;\r\n        this._data.point_count += 1;\r\n        return index;\r\n    }\r\n    public nextPline(): number {\r\n        const index: number = this._data.pline_count;\r\n        this._data.pline_count += 1;\r\n        return index;\r\n    }\r\n    public nextPgon(): number {\r\n        const index: number = this._data.pgon_count;\r\n        this._data.pgon_count += 1;\r\n        return index;\r\n    }\r\n    public nextColl(): number {\r\n        const index: number = this._data.coll_count;\r\n        this._data.coll_count += 1;\r\n        return index;\r\n    }\r\n    // set next index\r\n    public setNextPosi(index: number): void {\r\n        this._data.posi_count = index;\r\n    }\r\n    public setNextVert(index: number): void {\r\n        this._data.vert_count = index;\r\n    }\r\n    public setNextTri(index: number): void {\r\n        this._data.tri_count = index;\r\n    }\r\n    public setNextEdge(index: number): void {\r\n        this._data.edge_count = index;\r\n    }\r\n    public setNextWire(index: number): void {\r\n        this._data.wire_count = index;\r\n    }\r\n    public setNextFace(index: number): void {\r\n        this._data.face_count = index;\r\n    }\r\n    public setNextPoint(index: number): void {\r\n        this._data.point_count = index;\r\n    }\r\n    public setNextPline(index: number): void {\r\n        this._data.pline_count = index;\r\n    }\r\n    public setNextPgon(index: number): void {\r\n        this._data.pgon_count = index;\r\n    }\r\n    public setNextColl(index: number): void {\r\n        this._data.coll_count = index;\r\n    }\r\n    // attribute values\r\n    public addAttribByKeyVal(key: string|number, val: TAttribDataTypes, data_type: EAttribDataTypeStrs): number {\r\n        if (this._data.attrib_values[data_type][1].has(key)) {\r\n            return this._data.attrib_values[data_type][1].get(key);\r\n        }\r\n        const index = this._data.attrib_values[data_type][0].push(val) - 1;\r\n        this._data.attrib_values[data_type][1].set(key, index);\r\n        return index;\r\n    }\r\n    public getAttribValFromIdx(index: number, data_type: EAttribDataTypeStrs): TAttribDataTypes {\r\n        return this._data.attrib_values[data_type][0][index];\r\n    }\r\n    public getAttribValFromKey(key: string|number, data_type: EAttribDataTypeStrs): TAttribDataTypes {\r\n        return this._data.attrib_values[data_type][0][this._data.attrib_values[data_type][1].get(key)];\r\n    }\r\n    public getAttribIdxFromKey(key: string|number, data_type: EAttribDataTypeStrs): number {\r\n        return this._data.attrib_values[data_type][1].get(key);\r\n    }\r\n    public hasAttribKey(key: string|number, data_type: EAttribDataTypeStrs): boolean {\r\n        return this._data.attrib_values[data_type][1].has(key);\r\n    }\r\n    // create string for debugging\r\n    public toDebugStr(): string {\r\n        return '' +\r\n            'number: ' +\r\n            JSON.stringify(this._data.attrib_values['number'][0]) +\r\n            JSON.stringify(Array.from(this._data.attrib_values['number'][1])) +\r\n            '\\nstring: ' +\r\n            JSON.stringify(this._data.attrib_values['string'][0]) +\r\n            JSON.stringify(Array.from(this._data.attrib_values['string'][1])) +\r\n            '\\nlist: ' +\r\n            JSON.stringify(this._data.attrib_values['list'][0]) +\r\n            JSON.stringify(Array.from(this._data.attrib_values['list'][1])) +\r\n            '\\ndict: ' +\r\n            JSON.stringify(this._data.attrib_values['dict'][0]) +\r\n            JSON.stringify(Array.from(this._data.attrib_values['dict'][1]));\r\n    }\r\n    // --------------------------------------------\r\n\r\n    /**\r\n     * Helper method to renumber the indexes of the attribute values in the JSON data.\r\n     * @param attribs_data the attribute data, [val_index, [list of ents]]\r\n     * @param renum_attrib_vals A map of maps, old numbering -> new numbering\r\n     */\r\n    private _renumAttribValues(attribs_data: IAttribJSONData[], renum_attrib_vals: Map<string, Map<number, number>>): void {\r\n        for (const attrib_data of attribs_data) {\r\n            const renum: Map<number, number> = renum_attrib_vals.get(attrib_data.data_type);\r\n            for (const val_i_ents of attrib_data.data) {\r\n                val_i_ents[0] = renum.get(val_i_ents[0]);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { IModelJSONData, IEntSets, IModelJSON, IMetaJSONData, EEntType } from './common';\r\nimport { GIMetaData } from './GIMetaData';\r\nimport { GIModelData } from './GIModelData';\r\nimport { IThreeJS } from './ThreejsJSON';\r\n\r\n/**\r\n * Geo-info model class.\r\n */\r\nexport class GIModel {\r\n    // [x: string]: any; // TODO: What is this???\r\n    public metadata: GIMetaData;\r\n    public modeldata: GIModelData;\r\n    public debug = true;\r\n    /**\r\n     * Constructor\r\n     */\r\n    // constructor(model_data?: IModelData) {\r\n    constructor(meta_data?: GIMetaData) {\r\n        if (meta_data === undefined) {\r\n            this.metadata = new GIMetaData();\r\n        } else {\r\n            this.metadata = meta_data;\r\n        }\r\n        this.modeldata = new GIModelData(this);\r\n    }\r\n    /**\r\n     * Set all data from a JSON string.\r\n     * This includes both the meta data and the model data.\r\n     * Any existing metadata will be kept, the new data gets appended.\r\n     * Any existing model data wil be deleted.\r\n     * @param meta\r\n     */\r\n    public setJSONStr(json_str: string): void {\r\n        const json_data: IModelJSON = JSON.parse(json_str);\r\n        // merge the meta data\r\n        this.metadata.mergeJSONData(json_data);\r\n        // set the model data\r\n        this.modeldata.setJSONData(json_data.model_data);\r\n    }\r\n    /**\r\n     * Gets all data as a JSON string.\r\n     * This includes both the meta data and the model data.\r\n     */\r\n    public getJSONStr(): string {\r\n        const model_data: IModelJSONData = this.modeldata.getJSONData();\r\n        const meta_data: IMetaJSONData = this.metadata.getJSONData(model_data);\r\n\r\n        const data: IModelJSON = {\r\n            meta_data: meta_data,\r\n            model_data: model_data\r\n        };\r\n        return JSON.stringify(data);\r\n    }\r\n    /**\r\n     * Sets the data in this model from a JSON data object using shallow copy.\r\n     * Any existing data in the model is deleted.\r\n     * @param model_json_data The JSON data.\r\n     */\r\n    public setModelData (model_json_data: IModelJSONData): void {\r\n        this.modeldata.setJSONData(model_json_data);\r\n    }\r\n    /**\r\n     * Returns the JSON data for this model using shallow copy.\r\n     */\r\n    public getModelData(): IModelJSONData {\r\n        return this.modeldata.getJSONData();\r\n    }\r\n    /**\r\n     * Set the meta data str.\r\n     * @param meta\r\n     */\r\n    public setModelDataJSONStr(model_json_data_str: string) {\r\n        this.modeldata.setJSONData(JSON.parse(model_json_data_str));\r\n    }\r\n    /**\r\n     * Get the meta data str.\r\n     */\r\n    public getModelDataJSONStr(): string {\r\n        return JSON.stringify(this.modeldata.getJSONData());\r\n    }\r\n    /**\r\n     * Set the meta data object.\r\n     * Data is not copied.\r\n     * @param meta\r\n     */\r\n    public setMetaData(meta: GIMetaData) {\r\n        this.metadata = meta;\r\n    }\r\n    /**\r\n     * Get the meta data object.\r\n     * Data is not copied\r\n     */\r\n    public getMetaData(): GIMetaData {\r\n        return this.metadata;\r\n    }\r\n    /**\r\n     * Returns a deep clone of this model.\r\n     * Any deleted entities will remain.\r\n     * Entity IDs will not change.\r\n     */\r\n    public clone(): GIModel {\r\n        const clone: GIModel = new GIModel();\r\n        clone.metadata = this.metadata;\r\n        clone.modeldata = this.modeldata.clone();\r\n        // clone.modeldata.merge(this.modeldata);\r\n        return clone;\r\n    }\r\n    /**\r\n     * Deep copies the model data from a second model into this model.\r\n     * Meta data is assumed to be the same for both models.\r\n     * The existing model data in this model is not deleted.\r\n     * Entity IDs will not change.\r\n     * @param model_data The GI model.\r\n     */\r\n    public merge(model: GIModel): void {\r\n        this.modeldata.merge(model.modeldata);\r\n    }\r\n    /**\r\n     * Deep copies the model data from a second model into this model.\r\n     * Meta data is assumed to be the same for both models.\r\n     * The existing model data in this model is not deleted.\r\n     * The Entity IDs in this model will not change.\r\n     * The Entity IDs in the second model will change.\r\n     * @param model_data The GI model.\r\n     */\r\n    public mergeAndPurge(model: GIModel): void {\r\n        this.modeldata.mergeAndPurge(model.modeldata);\r\n    }\r\n    /**\r\n     * Renumber entities in this model.\r\n     */\r\n    public purge(): void {\r\n        this.modeldata = this.modeldata.purge();\r\n    }\r\n    /**\r\n     * Delete ents in the model.\r\n     * This does not affect the model attribs.\r\n     */\r\n    public delete(ent_sets: IEntSets, invert: boolean): void {\r\n        if (ent_sets === null) {\r\n            if (invert) {\r\n                // delete nothing\r\n                return;\r\n            } else {\r\n                // delete everything\r\n                const new_model_data: GIModelData = new GIModelData(this);\r\n                // copy model attribs from existing\r\n                new_model_data.dumpSelect(this.modeldata, ent_sets);\r\n                // reset model data\r\n                this.modeldata = new_model_data;\r\n                // const model_attrib_names: string[] = this.modeldata.attribs.query.getAttribNames(EEntType.MOD);\r\n                // for (const name of model_attrib_names) {\r\n                //     new_model_data.attribs.add.setModelAttribVal(name, this.modeldata.attribs.query.getModelAttribVal(name));\r\n                // }\r\n                // this.modeldata = new_model_data;\r\n            }\r\n        } else if (invert) {\r\n            // create empty model data\r\n            const new_model_data = new GIModelData(this);\r\n            // copy data from existing model data\r\n            new_model_data.dumpSelect(this.modeldata, ent_sets);\r\n            // reset model data\r\n            this.modeldata = new_model_data;\r\n        } else {\r\n            this.modeldata.geom.del.del(ent_sets);\r\n        }\r\n    }\r\n    /**\r\n     * Check model for internal consistency\r\n     */\r\n    public check(): string[] {\r\n        return this.modeldata.check();\r\n    }\r\n    /**\r\n     * Compares this model and another model.\r\n     * ~\r\n     * This is the answer model.\r\n     * The other model is the submitted model.\r\n     * ~\r\n     * Both models will be modified in the process.\r\n     * ~\r\n     * @param model The model to compare with.\r\n     */\r\n    public compare(model: GIModel, normalize: boolean, check_geom_equality: boolean, check_attrib_equality: boolean):\r\n            {percent: number, score: number, total: number, comment: string} {\r\n        return this.modeldata.compare(model, normalize, check_geom_equality, check_attrib_equality);\r\n    }\r\n    /**\r\n     * Get the threejs data for this model.\r\n     */\r\n    public get3jsData(): IThreeJS {\r\n        return this.modeldata.threejs.get3jsData();\r\n    }\r\n}\r\n","import { GIModel } from './GIModel';\r\nimport { EEntType, Txyz, TAttribDataTypes, EEntTypeStr } from './common';\r\nimport { vecDot } from '../geom/vectors';\r\nimport { GIModelData } from './GIModelData';\r\n/**\r\n * Geo-info model class.\r\n */\r\nexport class GIModelComparator {\r\n    private _modeldata: GIModelData;\r\n\r\n   /**\r\n     * Constructor\r\n     */\r\n    constructor(model: GIModelData) {\r\n        this._modeldata = model;\r\n    }\r\n\r\n    /**\r\n     * Compares this model and another model.\r\n     * ~\r\n     * This is the answer model.\r\n     * The other model is the submitted model.\r\n     * ~\r\n     * This method checks that every entity in the answer model is also in the submitted model.\r\n     * ~\r\n     * Both models will be modified in the process.\r\n     * ~\r\n     * @param model The model to compare with.\r\n     */\r\n    public compare(model: GIModel, normalize: boolean, check_geom_equality: boolean, check_attrib_equality: boolean):\r\n            {percent: number, score: number, total: number, comment: string} {\r\n\r\n        // create the result object\r\n        const result: {percent: number, score: number, total: number, comment: any} = {percent: 0, score: 0, total: 0, comment: []};\r\n\r\n        // check we have exact same number of positions, objects, and colletions\r\n        if (check_geom_equality) {\r\n            this._modeldata.geom.compare.compare(model, result);\r\n        }\r\n\r\n        // check that the attributes in this model all exist in the other model\r\n        if (check_attrib_equality) {\r\n            this._modeldata.attribs.compare(model, result);\r\n        }\r\n\r\n        // normalize the two models\r\n        if (normalize) {\r\n            this.norm();\r\n            model.modeldata.comparator.norm();\r\n        }\r\n\r\n        // compare objects\r\n        let idx_maps: [Map<EEntType, Map<number, number>>, Map<EEntType, Map<number, number>>] = null;\r\n        idx_maps = this.compareObjs(model, result);\r\n\r\n        // check for common erros\r\n        // SLOW....\r\n        // this.checkForErrors(model, result, idx_maps);\r\n\r\n        // compare colls\r\n        this.compareColls(model, result, idx_maps);\r\n\r\n        // compare the material attribs in the model\r\n        this.compareModelAttribs(model, result);\r\n\r\n        // Add a final msg\r\n        if (result.score === result.total) {\r\n            result.comment = ['RESULT: The two models match.'];\r\n        } else {\r\n            result.comment.push('RESULT: The two models do not match.');\r\n        }\r\n\r\n        // calculate percentage score\r\n        result.percent = Math.round( result.score / result.total * 100);\r\n        if (result.percent < 0) { result.percent = 0; }\r\n\r\n        // html formatting\r\n        let formatted_str = '';\r\n        formatted_str += '<p><b>Percentage: ' + result.percent + '%</b></p>';\r\n        formatted_str += '<p>Score: ' + result.score + '/' + result.total + '</p>';\r\n        formatted_str += '<ul>';\r\n        for (const comment of result.comment) {\r\n            if (Array.isArray(comment)) {\r\n                formatted_str += '<ul>';\r\n                    for (const sub_comment of comment) {\r\n                        formatted_str += '<li>' + sub_comment + '</li>';\r\n                    }\r\n                formatted_str += '</ul>';\r\n            } else {\r\n                formatted_str += '<li>' + comment + '</li>';\r\n            }\r\n        }\r\n        formatted_str += '</ul>';\r\n        result.comment = formatted_str;\r\n        // return the result\r\n        return result;\r\n    }\r\n    // ============================================================================\r\n    // Private methods for normalizing\r\n    // ============================================================================\r\n    /**\r\n     * Normalises the direction of open wires\r\n     */\r\n    private norm(): void {\r\n        const trans_padding: [Txyz, number[]] = this.getTransPadding();\r\n        this.normOpenWires(trans_padding);\r\n        this.normClosedWires(trans_padding);\r\n        this.normHoles(trans_padding);\r\n    }\r\n    /**\r\n     * Get the min max posis\r\n     */\r\n    private getTransPadding(): [Txyz, number[]] {\r\n        const precision = 1e4;\r\n        const min: Txyz = [Infinity, Infinity, Infinity];\r\n        const max: Txyz = [-Infinity, -Infinity, -Infinity];\r\n        for (const posi_i of this._modeldata.geom.query.getEnts(EEntType.POSI)) {\r\n            const xyz: Txyz = this._modeldata.attribs.query.getPosiCoords(posi_i);\r\n            if (xyz[0] < min[0]) { min[0] = xyz[0]; }\r\n            if (xyz[1] < min[1]) { min[1] = xyz[1]; }\r\n            if (xyz[2] < min[2]) { min[2] = xyz[2]; }\r\n            if (xyz[0] > max[0]) { max[0] = xyz[0]; }\r\n            if (xyz[1] > max[1]) { max[1] = xyz[1]; }\r\n            if (xyz[2] > max[2]) { max[2] = xyz[2]; }\r\n        }\r\n        const trans_vec: Txyz = [min[0] * -1, min[1] * -1, min[2] * -1];\r\n        const trans_max: Txyz = [max[0] + trans_vec[0], max[1] + trans_vec[1], max[2] + trans_vec[2]];\r\n        const padding: number[] = [\r\n            String(Math.round(trans_max[0] * precision)).length,\r\n            String(Math.round(trans_max[1] * precision)).length,\r\n            String(Math.round(trans_max[2] * precision)).length\r\n        ];\r\n        return [trans_vec, padding];\r\n    }\r\n    /**\r\n     * Normalises the direction of open wires\r\n     */\r\n    private normOpenWires(trans_padding: [Txyz, number[]]): void {\r\n        for (const wire_i of this._modeldata.geom.query.getEnts(EEntType.WIRE)) {\r\n            if (!this._modeldata.geom.query.isWireClosed(wire_i)) {\r\n                // an open wire can only start at the first or last vertex, but the order can be reversed\r\n                const verts_i: number[] = this._modeldata.geom.nav.navAnyToVert(EEntType.WIRE, wire_i);\r\n                const fprint_start: string = this.normXyzFprint(EEntType.VERT, verts_i[0], trans_padding);\r\n                const fprint_end: string = this.normXyzFprint(EEntType.VERT, verts_i[verts_i.length - 1], trans_padding);\r\n                if (fprint_start > fprint_end) {\r\n                    this._modeldata.geom.modify.reverse(wire_i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Normalises the edge order of closed wires\r\n     */\r\n    private normClosedWires(trans_padding: [Txyz, number[]]): void {\r\n        for (const wire_i of this._modeldata.geom.query.getEnts(EEntType.WIRE)) {\r\n            if (this._modeldata.geom.query.isWireClosed(wire_i)) {\r\n                // a closed wire can start at any edge\r\n                const edges_i: number[] = this._modeldata.geom.nav.navAnyToEdge(EEntType.WIRE, wire_i);\r\n                const fprints: Array<[string, number]> = [];\r\n                for (let i = 0; i < edges_i.length; i++) {\r\n                    const edge_i: number = edges_i[i];\r\n                    fprints.push([this.normXyzFprint(EEntType.EDGE, edge_i, trans_padding), i]);\r\n                }\r\n                fprints.sort();\r\n                this._modeldata.geom.modify.shift(wire_i, fprints[0][1]);\r\n                // if polyline, the direction can be any\r\n                // so normalise direction\r\n                if (this._modeldata.geom.nav.navWireToPline(wire_i) !== undefined) {\r\n                    const normal: Txyz = this._modeldata.geom.query.getWireNormal(wire_i);\r\n                    let dot: number = vecDot(normal, [0, 0, 1]);\r\n                    if (Math.abs(dot) < 1e-6) {\r\n                        dot = vecDot(normal, [1, 0, 0]);\r\n                    }\r\n                    if (dot < 0) {\r\n                        this._modeldata.geom.modify.reverse(wire_i);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Normalises the order of holes in faces\r\n     */\r\n    private normHoles(trans_padding: [Txyz, number[]]): void {\r\n        for (const face_i of this._modeldata.geom.query.getEnts(EEntType.FACE)) {\r\n            const holes_i: number[] = this._modeldata.geom.query.getFaceHoles(face_i);\r\n            if (holes_i.length > 0) {\r\n                const fprints: Array<[string, number]> = [];\r\n                for (const hole_i of holes_i) {\r\n                    fprints.push([this.normXyzFprint(EEntType.WIRE, hole_i, trans_padding), hole_i]);\r\n                }\r\n                fprints.sort();\r\n                const reordered_holes_i: number[] = fprints.map( fprint => fprint[1] );\r\n                this._modeldata.geom.compare.setPgonHoles(face_i, reordered_holes_i);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Round the xyz values, rounded to the precision level\r\n     * ~\r\n     * @param posi_i\r\n     */\r\n    private normXyzFprint(ent_type: EEntType, ent_i: number,  trans_padding: [Txyz, number[]]): string {\r\n        const precision = 1e4;\r\n        // get the xyzs\r\n        const fprints: string[] = [];\r\n        const posis_i: number[] = this._modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n        for (const posi_i of posis_i) {\r\n            const xyz: Txyz = this._modeldata.attribs.query.getPosiCoords(posi_i);\r\n            const fprint: string[] = [];\r\n            for (let i = 0; i < 3; i++) {\r\n                const xyz_round: number = Math.round((xyz[i] + trans_padding[0][i]) * precision);\r\n                fprint.push(String(xyz_round).padStart(trans_padding[1][i], '0'));\r\n            }\r\n            fprints.push(fprint.join(','));\r\n        }\r\n        return fprints.join('|');\r\n    }\r\n    // ============================================================================\r\n    // Private methods for comparing objs, colls\r\n    // ============================================================================\r\n    /**\r\n     * For any entity, greate a string that concatenates all the xyz values of its positions.\r\n     * ~\r\n     * These strings will be used for sorting entities into a predictable order,\r\n     * independent of the order in which the geometry was actually created.\r\n     * ~\r\n     * If there are multiple entities in exactly the same position, then the ordering may be unpredictable.\r\n     * ~\r\n     * @param ent_type\r\n     * @param ent_i\r\n     */\r\n    private xyzFprint(ent_type: EEntType, ent_i: number, trans_vec = [0, 0, 0]): string {\r\n        const posis_i: number[] = this._modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n        const xyzs: Txyz[] = posis_i.map(posi_i => this._modeldata.attribs.query.getPosiCoords(posi_i));\r\n        const fprints: string[] = xyzs.map(xyz => this.getAttribValFprint([\r\n            xyz[0] + trans_vec[0],\r\n            xyz[1] + trans_vec[1],\r\n            xyz[2] + trans_vec[2]\r\n        ]));\r\n        return fprints.join('|');\r\n    }\r\n    /**\r\n     * Compare the objects.\r\n     * ~\r\n     * This will also check the following attributes:\r\n     * For posis, it will check the xyz attribute.\r\n     * For vertices, it will check the rgb attribute, if such an attribute exists in the answer model.\r\n     * For polygons, it will check the material attribute, if such an attribute exists in the answer model.\r\n     */\r\n    private compareObjs(other_model: GIModel, result: {score: number, total: number, comment: any[]}):\r\n            [Map<EEntType, Map<number, number>>, Map<EEntType, Map<number, number>>] {\r\n        result.comment.push('Comparing objects in the two models.');\r\n        const data_comments: string [] = [];\r\n\r\n        // set attrib names to check when comparing objects and collections\r\n        const attrib_names: Map<EEntType, string[]> = new Map();\r\n        attrib_names.set(EEntType.POSI, ['xyz']);\r\n        if (this._modeldata.attribs.query.hasAttrib(EEntType.VERT, 'rgb')) {\r\n            attrib_names.set(EEntType.VERT, ['rgb']);\r\n        }\r\n        if (this._modeldata.attribs.query.hasAttrib(EEntType.PGON, 'material')) {\r\n            attrib_names.set(EEntType.PGON, ['material']);\r\n        }\r\n\r\n        // points, polylines, polygons\r\n        const obj_ent_types: EEntType[] = [EEntType.POINT, EEntType.PLINE, EEntType.PGON];\r\n        const obj_ent_type_strs: Map<EEntType, string> = new Map([\r\n            [EEntType.POINT, 'points'],\r\n            [EEntType.PLINE, 'polylines'],\r\n            [EEntType.PGON, 'polygons']\r\n        ]);\r\n\r\n        // compare points, plines, pgons\r\n        const this_to_com_idx_maps: Map<EEntType, Map<number, number>> = new Map();\r\n        const other_to_com_idx_maps: Map<EEntType, Map<number, number>> = new Map();\r\n        for (const obj_ent_type of obj_ent_types) {\r\n\r\n            // create the two maps, and store them in the map of maps\r\n            const this_to_com_idx_map: Map<number, number> = new Map();\r\n            this_to_com_idx_maps.set(obj_ent_type, this_to_com_idx_map);\r\n            const other_to_com_idx_map: Map<number, number> = new Map();\r\n            other_to_com_idx_maps.set(obj_ent_type, other_to_com_idx_map);\r\n\r\n            // get the fprints for this model\r\n            const [this_fprints_arr, this_ents_i]: [Array<Map<string, string>>, number[]] =\r\n                this.getEntsFprint(obj_ent_type, attrib_names);\r\n\r\n            // get the fprints for the other model\r\n            const [other_fprints_arr, other_ents_i]: [Array<Map<string, string>>, number[]] =\r\n                other_model.modeldata.comparator.getEntsFprint(obj_ent_type, attrib_names);\r\n\r\n            // check that every entity in this model also exists in the other model\r\n            let num_xyz_not_found = 0;\r\n            const num_attribs_not_found: Map<string, number> = new Map();\r\n            for (let com_idx = 0; com_idx < this_fprints_arr.length; com_idx++) {\r\n\r\n                // increment the total by 1\r\n                result.total += 1;\r\n\r\n                // get this fprint, i.e. the one we are looking for in the other model\r\n                const this_fprint: string = this_fprints_arr[com_idx].get('ps:xyz');\r\n                const all_other_fprints: string[] = other_fprints_arr.map(att_map => att_map.get('ps:xyz'));\r\n\r\n                // get this index and set the map\r\n                const this_ent_i: number = this_ents_i[com_idx];\r\n                this_to_com_idx_map.set(this_ent_i, com_idx);\r\n\r\n                // for other...\r\n                // get the index of this_fprint in the list of other_fprints\r\n                const found_other_idx: number = all_other_fprints.indexOf(this_fprint);\r\n                // update num_objs_not_found or update result.score\r\n                if (found_other_idx === -1) {\r\n                    num_xyz_not_found++;\r\n                } else {\r\n                    // check the attributes\r\n                    const keys: string[] = Array.from(this_fprints_arr[com_idx].keys());\r\n                    const ent_num_attribs: number = keys.length;\r\n                    let ent_num_attribs_mismatch = 0;\r\n                    for (const key of keys) {\r\n                        if (key !== 'ps:xyz') {\r\n                            if (\r\n                                !other_fprints_arr[found_other_idx].has(key) ||\r\n                                this_fprints_arr[com_idx].get(key) !== other_fprints_arr[found_other_idx].get(key)\r\n                            ) {\r\n                                ent_num_attribs_mismatch += 1;\r\n                                if (!num_attribs_not_found.has(key)) {\r\n                                    num_attribs_not_found.set(key, 1);\r\n                                } else {\r\n                                    num_attribs_not_found.set(key, num_attribs_not_found.get(key) + 1);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    // we other index and set the map\r\n                    const other_ent_i: number = other_ents_i[found_other_idx];\r\n                    other_to_com_idx_map.set(other_ent_i, com_idx);\r\n                    // update the score\r\n                    const ent_num_attribs_match = ent_num_attribs - ent_num_attribs_mismatch;\r\n                    result.score = result.score + (ent_num_attribs_match / ent_num_attribs);\r\n                }\r\n            }\r\n            // write a msg\r\n            if (this_fprints_arr.length > 0) {\r\n                if (num_xyz_not_found > 0) {\r\n                    data_comments.push('Mismatch: ' + num_xyz_not_found + ' ' +\r\n                        obj_ent_type_strs.get(obj_ent_type) + ' entities could not be found.');\r\n                } else {\r\n                    data_comments.push('All ' +\r\n                    obj_ent_type_strs.get(obj_ent_type) + ' entities have been found.');\r\n                }\r\n                for (const key of Array.from(num_attribs_not_found.keys())) {\r\n                    data_comments.push('Mismatch in attribute data: ' + num_attribs_not_found.get(key) + ' ' +\r\n                        obj_ent_type_strs.get(obj_ent_type) + ' entities had mismatched attribute data for: ' + key + '.');\r\n                }\r\n            }\r\n\r\n        }\r\n        // return result\r\n        result.comment.push(data_comments);\r\n        // return the maps, needed for comparing collections\r\n        return [this_to_com_idx_maps, other_to_com_idx_maps];\r\n    }\r\n    /**\r\n     * Compare the collections\r\n     */\r\n    private compareColls(other_model: GIModel, result: {score: number, total: number, comment: any[]},\r\n            idx_maps: [Map<EEntType, Map<number, number>>, Map<EEntType, Map<number, number>>]): void {\r\n        result.comment.push('Comparing collections in the two models.');\r\n        const data_comments: string [] = [];\r\n        // set attrib names to check when comparing objects and collections\r\n        const attrib_names: string[] = []; // no attribs to check\r\n        // get the maps\r\n        const this_to_com_idx_maps: Map<EEntType, Map<number, number>> = idx_maps[0];\r\n        const other_to_com_idx_maps: Map<EEntType, Map<number, number>> = idx_maps[1];\r\n        // compare collections\r\n        const this_colls_fprints: string[] = this.getCollFprints(this_to_com_idx_maps, attrib_names);\r\n        // console.log('this_colls_fprints:', this_colls_fprints);\r\n        const other_colls_fprints: string[] = other_model.modeldata.comparator.getCollFprints(other_to_com_idx_maps, attrib_names);\r\n        // console.log('other_colls_fprints:', other_colls_fprints);\r\n        // check that every collection in this model also exists in the other model\r\n        let num_colls_not_found = 0;\r\n        for (const this_colls_fprint of this_colls_fprints) {\r\n            // increment the total score by 1\r\n            result.total += 1;\r\n            // look for this in other\r\n            const found_other_idx: number = other_colls_fprints.indexOf(this_colls_fprint);\r\n            // add mismatch comment or update score\r\n            if (found_other_idx === -1) {\r\n                num_colls_not_found++;\r\n            } else {\r\n                result.score += 1;\r\n            }\r\n        }\r\n        if (num_colls_not_found > 0) {\r\n            data_comments.push('Mismatch: ' + num_colls_not_found + ' collections could not be found.');\r\n        }\r\n        // add a comment if everything matches\r\n        if (result.score === result.total) {\r\n            data_comments.push('Match: The model contains all required entities and collections.');\r\n        }\r\n        // return result\r\n        result.comment.push(data_comments);\r\n    }\r\n    /**\r\n     * Compare the model attribs\r\n     * At the moment, this seems to only compare the material attribute in the model\r\n     */\r\n    private compareModelAttribs(other_model: GIModel, result: {score: number, total: number, comment: any[]}): void {\r\n        result.comment.push('Comparing model attributes in the two models.');\r\n        const data_comments: string [] = [];\r\n        // set attrib names to check when comparing objects and collections\r\n        const attrib_names: string[] = [];\r\n        if (this._modeldata.attribs.query.hasAttrib(EEntType.PGON, 'material')) {\r\n            const pgons_i: number[] = this._modeldata.geom.query.getEnts(EEntType.PGON);\r\n            const mat_names: Set<string> =\r\n                new Set(this._modeldata.attribs.query.getAttribVal(EEntType.PGON, 'material', pgons_i) as string[]);\r\n            for (const mat_name of Array.from(mat_names)) {\r\n                if (mat_name !== undefined) {\r\n                    attrib_names.push(mat_name);\r\n                }\r\n            }\r\n        }\r\n        // compare model attributes\r\n        for (const this_mod_attrib_name of attrib_names) {\r\n            // increment the total by 1\r\n            result.total += 1;\r\n            // check if there is a match\r\n            if (other_model.modeldata.attribs.query.hasModelAttrib(this_mod_attrib_name)) {\r\n                const this_value: TAttribDataTypes = this._modeldata.attribs.query.getModelAttribVal(this_mod_attrib_name);\r\n                const other_value: TAttribDataTypes = other_model.modeldata.attribs.query.getModelAttribVal(this_mod_attrib_name);\r\n                const this_value_fp: string = this.getAttribValFprint(this_value);\r\n                const other_value_fp: string = this.getAttribValFprint(other_value);\r\n                if (this_value_fp === other_value_fp) {\r\n                    // correct, so increment the score by 1\r\n                    result.score += 1;\r\n                } else {\r\n                    data_comments.push('Mismatch: the value for model attribute \"' + this_mod_attrib_name + '\" is incorrect.');\r\n                }\r\n            } else {\r\n                data_comments.push('Mismatch: model attribute \"' + this_mod_attrib_name + '\" not be found.');\r\n            }\r\n        }\r\n        // add a comment if everything matches\r\n        if (result.score === result.total) {\r\n            data_comments.push('Match: The model conatins all required model attributes.');\r\n        }\r\n        // return result\r\n        result.comment.push(data_comments);\r\n    }\r\n    /**\r\n     * Check to see if there are any common errors.\r\n     */\r\n    private checkForErrors(other_model: GIModel, result: {score: number, total: number, comment: any[]},\r\n            idx_maps: [Map<EEntType, Map<number, number>>, Map<EEntType, Map<number, number>>]): void {\r\n        // set precision of comparing vectors\r\n        // this precision should be a little higher than the precision used in\r\n        // getAttribValFprint()\r\n        const precision = 1e6;\r\n        // get the maps\r\n        const this_to_com_idx_maps: Map<EEntType, Map<number, number>> = idx_maps[0];\r\n        const other_to_com_idx_maps: Map<EEntType, Map<number, number>> = idx_maps[1];\r\n        // points, polylines, polygons\r\n        const obj_ent_types: EEntType[] = [EEntType.POINT, EEntType.PLINE, EEntType.PGON];\r\n        const obj_ent_type_strs: Map<EEntType, string> = new Map([\r\n            [EEntType.POINT, 'points'],\r\n            [EEntType.PLINE, 'polylines'],\r\n            [EEntType.PGON, 'polygons']\r\n        ]);\r\n        // compare points, plines, pgons\r\n        const trans_comments: string[] = [];\r\n        for (const obj_ent_type of obj_ent_types) {\r\n            // get all the ents in the other model against which nothing has been matched\r\n            // note that this map will be undefined for each ent for which no match was found\r\n            // at the same time, flip the map\r\n            const com_idx_to_other_map: Map<number, number> = new Map();\r\n            const other_ents_i: number[] = other_model.modeldata.geom.query.getEnts(obj_ent_type);\r\n            const other_mia_ents_i: number[] = [];\r\n            for (const ent_i of other_ents_i) {\r\n                const com_idx: number = other_to_com_idx_maps.get(obj_ent_type).get(ent_i);\r\n                if (com_idx === undefined) {\r\n                    other_mia_ents_i.push(ent_i);\r\n                } else {\r\n                    com_idx_to_other_map.set(com_idx, ent_i);\r\n                }\r\n            }\r\n            // get all the ents in this model for which no match has been found in the other model\r\n            // note that this map is never empty, it always contains a mapping for each ent, even when no match was found\r\n            const this_ents_i: number[] = this._modeldata.geom.query.getEnts(obj_ent_type);\r\n            const this_mia_ents_i: number[] = [];\r\n            for (const ent_i of this_ents_i) {\r\n                const com_idx: number = this_to_com_idx_maps.get(obj_ent_type).get(ent_i);\r\n                const other_ent_i: number = com_idx_to_other_map.get(com_idx);\r\n                if (other_ent_i === undefined) {\r\n                    this_mia_ents_i.push(ent_i);\r\n                }\r\n            }\r\n            // check that we have enough ents in the otehr model, if nit, exit\r\n            if (other_mia_ents_i.length < this_mia_ents_i.length) {\r\n                return;\r\n            }\r\n            // for each this_mia_ents_i, we need to find the closest other_mia_ents_i, and save the unique trans vec\r\n            const trans_vecs_counts: Map<string, number> = new Map();\r\n            const flipped_trans_vecs_counts: Map<string, number> = new Map();\r\n            for (const this_mia_ent_i of this_mia_ents_i) {\r\n                let min_dist = Infinity;\r\n                let min_trans_vec: Txyz = null;\r\n                const this_posis_i: number[] = this._modeldata.geom.nav.navAnyToPosi(obj_ent_type, this_mia_ent_i);\r\n                let flipped = false;\r\n                for (const other_mia_ent_i of other_mia_ents_i) {\r\n                    const other_posis_i: number[] = other_model.modeldata.geom.nav.navAnyToPosi(obj_ent_type, other_mia_ent_i);\r\n                    if (this_posis_i.length === other_posis_i.length) {\r\n                        const this_xyz: Txyz = this._modeldata.attribs.query.getPosiCoords(this_posis_i[0]);\r\n                        const other_xyz: Txyz = other_model.modeldata.attribs.query.getPosiCoords(other_posis_i[0]);\r\n                        const trans_vec: Txyz = [\r\n                            other_xyz[0] - this_xyz[0],\r\n                            other_xyz[1] - this_xyz[1],\r\n                            other_xyz[2] - this_xyz[2]\r\n                        ];\r\n                        const this_fp: string = this.xyzFprint(obj_ent_type, this_mia_ent_i, trans_vec);\r\n                        const other_fp: string = other_model.modeldata.comparator.xyzFprint(obj_ent_type, other_mia_ent_i);\r\n                        if (this_fp === other_fp) {\r\n                            const dist: number = Math.abs(trans_vec[0]) + Math.abs(trans_vec[1]) + Math.abs(trans_vec[2]);\r\n                            if (dist < min_dist) {\r\n                                min_dist = dist;\r\n                                min_trans_vec = trans_vec;\r\n                                flipped = false;\r\n                            }\r\n                        } else if (obj_ent_type === EEntType.PGON) {\r\n                            // flip the polygon\r\n                            const this_flip_fps: string[] = this_fp.split('|');\r\n                            this_flip_fps.push(this_flip_fps.shift());\r\n                            this_flip_fps.reverse();\r\n                            const this_flip_fp: string = this_flip_fps.join('|');\r\n                            if (this_flip_fp === other_fp) {\r\n                                const dist: number = Math.abs(trans_vec[0]) + Math.abs(trans_vec[1]) + Math.abs(trans_vec[2]);\r\n                                if (dist < min_dist) {\r\n                                    min_dist = dist;\r\n                                    min_trans_vec = trans_vec;\r\n                                    flipped = true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // if we have found a match, save it\r\n                if (min_trans_vec !== null) {\r\n                    // round the coords\r\n                    min_trans_vec = min_trans_vec.map(coord =>  Math.round(coord * precision) / precision) as Txyz;\r\n                    // make a string as key\r\n                    const min_trans_vec_str: string = JSON.stringify(min_trans_vec);\r\n                    // save the count for this vec\r\n                    if (flipped) {\r\n                        if (!flipped_trans_vecs_counts.has(min_trans_vec_str)) {\r\n                            flipped_trans_vecs_counts.set(min_trans_vec_str, 1);\r\n                        } else {\r\n                            const count: number = flipped_trans_vecs_counts.get(min_trans_vec_str);\r\n                            flipped_trans_vecs_counts.set(min_trans_vec_str, count + 1);\r\n                        }\r\n                    } else {\r\n                        if (!trans_vecs_counts.has(min_trans_vec_str)) {\r\n                            trans_vecs_counts.set(min_trans_vec_str, 1);\r\n                        } else {\r\n                            const count: number = trans_vecs_counts.get(min_trans_vec_str);\r\n                            trans_vecs_counts.set(min_trans_vec_str, count + 1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            flipped_trans_vecs_counts.forEach((count: number, min_trans_vec_str: string) => {\r\n                if (count > 1) {\r\n                    const comments: string[] = [\r\n                        'It looks like there are certain polygon objects that have the correct shape but that are reversed.',\r\n                        count + ' polygons have been found that seem like they should be reversed.'\r\n                    ];\r\n                    if (min_trans_vec_str !== '[0,0,0]') {\r\n                        comments.concat([\r\n                            'They also seem to be in the wrong location.',\r\n                            'It seesm like they should be reversed and translated by the following vector:',\r\n                            min_trans_vec_str + '.'\r\n                        ]);\r\n                    }\r\n                    trans_comments.push(comments.join(' '));\r\n                } else if (count === 1) {\r\n                    const comments: string[] = [\r\n                        'It looks like there is a polygon object that has the correct shape but that is reversed.'\r\n                    ];\r\n                    if (min_trans_vec_str !== '[0,0,0]') {\r\n                        comments.concat([\r\n                            'It also seems to be in the wrong location.',\r\n                            'It seesm like it should be reversed and translated by the following vector:',\r\n                            min_trans_vec_str + '.'\r\n                        ]);\r\n                    }\r\n                    trans_comments.push(comments.join(' '));\r\n                }\r\n            });\r\n            trans_vecs_counts.forEach((count: number, min_trans_vec_str: string) => {\r\n                if (count > 1) {\r\n                    trans_comments.push([\r\n                        'It looks like there are certain',\r\n                        obj_ent_type_strs.get(obj_ent_type),\r\n                        'objects that have the correct shape but that are in the wrong location.',\r\n                        count, obj_ent_type_strs.get(obj_ent_type),\r\n                        'objects have been found that seem like they should be translated by the following vector:',\r\n                        min_trans_vec_str + '.'\r\n                    ].join(' '));\r\n                } else if (count === 1) {\r\n                    trans_comments.push([\r\n                        'It looks like there is an',\r\n                        obj_ent_type_strs.get(obj_ent_type),\r\n                        'object that has the correct shape but that is in the wrong location.',\r\n                        'It seems like the object should be translated by the following vector:',\r\n                        min_trans_vec_str + '.'\r\n                    ].join(' '));\r\n                }\r\n            });\r\n        }\r\n        // add some feedback\r\n        if (trans_comments.length > 0) {\r\n            result.comment.push('An analysis of the geometry suggests there might be some objects that are translated.');\r\n            result.comment.push(trans_comments);\r\n        }\r\n    }\r\n    // ============================================================================\r\n    // Private methods for fprinting\r\n    // ============================================================================\r\n    /**\r\n     * Get a fprint of all geometric entities of a certain type in the model.\r\n     * This returns a fprint array, and the entity indexes\r\n     * The two arrays are in the same order\r\n     */\r\n    private getEntsFprint(ent_type: EEntType, attrib_names: Map<EEntType, string[]>): [Array<Map<string, string>>, number[]] {\r\n        const fprints: Array<Map<string, string>>  = [];\r\n        const ents_i: number[] = this._modeldata.geom.query.getEnts(ent_type);\r\n        for (const ent_i of ents_i) {\r\n            fprints.push(this.getEntFprint(ent_type, ent_i, attrib_names));\r\n        }\r\n        // return the result, do not sort\r\n        return [fprints, ents_i];\r\n    }\r\n    /**\r\n     * Get a fprint of one geometric entity: point, polyline, polygon\r\n     * Returns a map of strings.\r\n     * Keys are attribtes, like this 'ps:xyz'.\r\n     * Values are fprints, as strings.\r\n     */\r\n    private getEntFprint(from_ent_type: EEntType, index: number, attrib_names_map: Map<EEntType, string[]>): Map<string, string> {\r\n        const fprints: Map<string, string> = new Map();\r\n        // define topo entities for each obj (starts with posis and ends with objs)\r\n        const topo_ent_types_map: Map<EEntType, EEntType[]> = new Map();\r\n        topo_ent_types_map.set(EEntType.POINT, [EEntType.POSI, EEntType.VERT, EEntType.POINT]);\r\n        topo_ent_types_map.set(EEntType.PLINE, [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE, EEntType.PLINE]);\r\n        topo_ent_types_map.set(EEntType.PGON, [EEntType.POSI, EEntType.VERT, EEntType.EDGE, EEntType.WIRE, EEntType.FACE, EEntType.PGON]);\r\n        // create fprints of topological entities\r\n        for (const topo_ent_type of topo_ent_types_map.get(from_ent_type)) {\r\n            const ent_type_str: string = EEntTypeStr[topo_ent_type];\r\n            // get the attribute names array that will be used for matching\r\n            const attrib_names: string[] = attrib_names_map.get(topo_ent_type);\r\n            if (attrib_names !== undefined) {\r\n                // sort the attrib names\r\n                attrib_names.sort();\r\n                const sub_ents_i: number[] = this._modeldata.geom.nav.navAnyToAny(from_ent_type, topo_ent_type, index);\r\n                // for each attrib, make a fingerprint\r\n                for (const attrib_name of attrib_names) {\r\n                    if (this._modeldata.attribs.query.hasAttrib(topo_ent_type, attrib_name)) {\r\n                        const topo_fprints: string[] = [];\r\n                        for (const sub_ent_i of sub_ents_i) {\r\n                            const attrib_value: TAttribDataTypes =\r\n                                this._modeldata.attribs.query.getAttribVal(topo_ent_type, attrib_name, sub_ent_i);\r\n                            if (attrib_value !== null && attrib_value !== undefined) {\r\n                                topo_fprints.push(this.getAttribValFprint(attrib_value));\r\n                            }\r\n                        }\r\n                        fprints.set(ent_type_str + ':' + attrib_name, topo_fprints.join('#'));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // return the final fprint maps for the object\r\n        // no need to sort, the order is predefined\r\n        return fprints;\r\n    }\r\n    /**\r\n     * Get one fprint for all collections\r\n     */\r\n    private getCollFprints(idx_maps: Map<EEntType, Map<number, number>>, attrib_names: string[]): string[] {\r\n        const fprints: string[]  = [];\r\n        // create the fprints for each collection\r\n        const colls_i: number[] = this._modeldata.geom.query.getEnts(EEntType.COLL);\r\n        for (const coll_i of colls_i) {\r\n            fprints.push(this.getCollFprint(coll_i, idx_maps, attrib_names));\r\n        }\r\n        // if there are no values for a certain entity type, e.g. no coll, then return []\r\n        if (fprints.length === 0) { return []; }\r\n        // before we sort, we need to save the original order, which will be required for the parent collection index\r\n        const fprint_to_old_i_map: Map<string, number> = new Map();\r\n        for (let i = 0; i < fprints.length; i++) {\r\n            fprint_to_old_i_map.set(fprints[i], i);\r\n        }\r\n        // the fprints of the collections are sorted\r\n        fprints.sort();\r\n        // now we need to create a map from old index to new index\r\n        const old_i_to_new_i_map: Map<number, number> = new Map();\r\n        for (let i = 0; i < fprints.length; i++) {\r\n            const old_i: number = fprint_to_old_i_map.get(fprints[i]);\r\n            old_i_to_new_i_map.set(old_i, i);\r\n        }\r\n        // for each collection, we now add the parent id, using the new index\r\n        for (let i = 0; i < fprints.length; i++) {\r\n            const idx: number = fprint_to_old_i_map.get(fprints[i]);\r\n            const coll_old_i: number = colls_i[idx];\r\n            const coll_parent_old_i: number = this._modeldata.geom.query.getCollParent(coll_old_i);\r\n            let parent_str = '';\r\n            if (coll_parent_old_i === -1) {\r\n                parent_str = '.^';\r\n            } else {\r\n                const coll_parent_new_i: number = old_i_to_new_i_map.get(coll_parent_old_i);\r\n                parent_str = coll_parent_new_i + '^';\r\n            }\r\n            fprints[i] = parent_str + fprints[i];\r\n        }\r\n        // return the result, an array of fprints\r\n        return fprints;\r\n    }\r\n    /**\r\n     * Get a fprint of one collection\r\n     * Returns a string, something like 'a@b@c#[1,2,3]#[3,5,7]#[2,5,8]'\r\n     */\r\n    private getCollFprint(coll_i: number, com_idx_maps: Map<EEntType, Map<number, number>>, attrib_names: string[]): string {\r\n        const to_ent_types: EEntType[] = [EEntType.POINT, EEntType.PLINE, EEntType.PGON];\r\n        const fprints: string[] = [];\r\n        const attribs_vals: string[] = [];\r\n        // for each attrib, make a finderprint of the attrib value\r\n        if (attrib_names !== undefined) {\r\n            for (const attrib_name of attrib_names) {\r\n                const attrib_value: TAttribDataTypes = this._modeldata.attribs.query.getAttribVal(EEntType.COLL, attrib_name, coll_i);\r\n                if (attrib_value !== null && attrib_value !== undefined) {\r\n                    attribs_vals.push(this.getAttribValFprint(attrib_value));\r\n                }\r\n            }\r\n            fprints.push(attribs_vals.join('@'));\r\n        }\r\n        // get all the entities in this collection\r\n        // mapping entity numbers means that we map to the equivalent entity numbers in the other model\r\n        // we do this to ensure that, when comparing models, the entity numbers will match\r\n        for (const to_ent_type of to_ent_types) {\r\n            // get the map from ent_i to com_idx\r\n            const com_idx_map: Map<number, number> = com_idx_maps.get(to_ent_type);\r\n            // the the common indexes of the entities\r\n            const ents_i: number[] = this._modeldata.geom.nav.navAnyToAny(EEntType.COLL, to_ent_type, coll_i);\r\n            const com_idxs: number[] = [];\r\n            for (const ent_i of ents_i) {\r\n                const com_idx: number = com_idx_map.get(ent_i);\r\n                com_idxs.push(com_idx);\r\n            }\r\n            // sort so that they are in standard order\r\n            com_idxs.sort();\r\n            // create a string\r\n            fprints.push(JSON.stringify(com_idxs));\r\n        }\r\n        // return the final fprint string for the collection\r\n        // no need to sort, the order is predefined\r\n        return fprints.join('#');\r\n    }\r\n    /**\r\n     * Get a fprint of an attribute value\r\n     */\r\n    private getAttribValFprint(value: any): string {\r\n        const precision = 1e2;\r\n        if (value === null) { return '.'; }\r\n        if (value === undefined) { return '.'; }\r\n        if (typeof value === 'number') { return String(Math.round(value * precision) / precision); }\r\n        if (typeof value === 'string') { return value; }\r\n        if (typeof value === 'boolean') { return String(value); }\r\n        if (Array.isArray(value)) {\r\n            const fprints = [];\r\n            for (const item of value) {\r\n                const attrib_value: string = this.getAttribValFprint(item);\r\n                fprints.push(attrib_value);\r\n            }\r\n            return fprints.join(',');\r\n        }\r\n        if (typeof value === 'object') {\r\n            let fprint = '';\r\n            const prop_names: string[] = Object.getOwnPropertyNames(value);\r\n            prop_names.sort();\r\n            for (const prop_name of prop_names) {\r\n                const attrib_value: string = this.getAttribValFprint(value[prop_name]);\r\n                fprint += prop_name + '=' + attrib_value;\r\n            }\r\n            return fprint;\r\n        }\r\n        throw new Error('Attribute value not recognised.');\r\n    }\r\n}\r\n","import { GIGeom } from './GIGeom';\r\nimport { GIAttribs } from './GIAttribs';\r\nimport { IModelJSONData, IEntSets } from './common';\r\nimport { GIModelComparator } from './GIModelComparator';\r\nimport { GIModelThreejs } from './GIModelThreejs';\r\nimport { GIModel } from './GIModel';\r\n\r\n/**\r\n * Geo-info model class.\r\n */\r\nexport class GIModelData {\r\n    public model: GIModel;\r\n    public geom: GIGeom;\r\n    public attribs: GIAttribs;\r\n    public comparator: GIModelComparator;\r\n    public threejs: GIModelThreejs;\r\n    public debug = true;\r\n    /**\r\n     * Constructor\r\n     */\r\n    // constructor(model_data?: IModelData) {\r\n    constructor(model: GIModel) {\r\n        this.model = model;\r\n        this.geom = new GIGeom(this);\r\n        this.attribs = new GIAttribs(this);\r\n        this.comparator = new GIModelComparator(this);\r\n        this.threejs = new GIModelThreejs(this);\r\n        // if (model_data) {\r\n        //     this.setData(model_data);\r\n        // }\r\n    }\r\n    /**\r\n     * Sets the data in this model from JSON data.\r\n     * Any existing data in the model is deleted.\r\n     * @param model_data The JSON data.\r\n     */\r\n    public setJSONData (model_data: IModelJSONData): void {\r\n        // console.log(\"SET DATA\");\r\n        this.attribs.io.setJSONData(model_data.attributes);\r\n        this.geom.io.setJSONData(model_data.geometry);\r\n    }\r\n    /**\r\n     * Returns the JSON data for this model.\r\n     * This will include any deleted entities, which will be undefined.\r\n     */\r\n    public getJSONData(): IModelJSONData {\r\n        // console.log(\"GET DATA\");\r\n        return {\r\n            geometry: this.geom.io.getJSONData(),\r\n            attributes: this.attribs.io.getJSONData()\r\n        };\r\n    }\r\n    /**\r\n     * Copys the data from a second model into this model.\r\n     * The existing data in this model is not deleted.\r\n     * For the imported data, deleted entities are also merged.\r\n     * @param model_data The GI model.\r\n     */\r\n    public merge(modeldata: GIModelData): void {\r\n        // const geom_maps: Map<number, number>[] = this.geom.io.merge(model.modeldata.geom._geom_maps);\r\n        // this.attribs.io.merge(model.modeldata.attribs._attribs_maps, geom_maps);\r\n        this.geom.io.merge(modeldata.geom);\r\n        this.attribs.io.merge(modeldata.attribs._attribs_maps);\r\n        this.model.metadata = modeldata.model.metadata;\r\n    }\r\n    /**\r\n     * Copys the data from a second model into this model without conflict detection.\r\n     * Usually, this model is assumed to be empty.\r\n     * If ent_sets is null, then only model attribs are copied.\r\n     * @param model_data The GI model.\r\n     */\r\n    public dumpSelect(modeldata: GIModelData, ent_sets: IEntSets): void {\r\n        if (ent_sets === null) {\r\n            this.attribs.io.dumpSelect(modeldata.attribs._attribs_maps, ent_sets);\r\n            return;\r\n        }\r\n        // add topo geom sets\r\n        ent_sets.verts_i = new Set();\r\n        ent_sets.tris_i = new Set();\r\n        ent_sets.edges_i = new Set();\r\n        ent_sets.wires_i = new Set();\r\n        ent_sets.faces_i = new Set();\r\n        // add the ent posis to the main posis list to keep\r\n        ent_sets.obj_posis_i.forEach( posi_i => ent_sets.posis_i.add(posi_i) );\r\n        // points\r\n        ent_sets.points_i.forEach( point_i => {\r\n            ent_sets.verts_i.add(modeldata.geom.nav.navPointToVert(point_i));\r\n        });\r\n        // plines\r\n        ent_sets.plines_i.forEach( pline_i => {\r\n            const wire_i: number = modeldata.geom.nav.navPlineToWire(pline_i);\r\n            ent_sets.wires_i.add(wire_i);\r\n            const edges_i: number[] = modeldata.geom.nav.navWireToEdge(wire_i);\r\n            edges_i.forEach(edge_i => ent_sets.edges_i.add(edge_i));\r\n            const verts_i: number[] = modeldata.geom.query.getWireVerts(wire_i);\r\n            verts_i.forEach(vert_i => ent_sets.verts_i.add(vert_i));\r\n        });\r\n        // pgons\r\n        ent_sets.pgons_i.forEach( pgon_i => {\r\n            const face_i: number = modeldata.geom.nav.navPgonToFace(pgon_i);\r\n            ent_sets.faces_i.add(face_i);\r\n            const tris_i: number[] = modeldata.geom.nav.navFaceToTri(face_i);\r\n            tris_i.forEach(tri_i => ent_sets.tris_i.add(tri_i));\r\n            const wires_i: number[] = modeldata.geom.nav.navFaceToWire(face_i);\r\n            wires_i.forEach(wire_i => ent_sets.wires_i.add(wire_i));\r\n            wires_i.forEach( wire_i => {\r\n                const edges_i: number[] = modeldata.geom.nav.navWireToEdge(wire_i);\r\n                edges_i.forEach(edge_i => ent_sets.edges_i.add(edge_i));\r\n                const verts_i: number[] = modeldata.geom.query.getWireVerts(wire_i);\r\n            verts_i.forEach(vert_i => ent_sets.verts_i.add(vert_i));\r\n            });\r\n        });\r\n        // dump the selected data into this model\r\n        // this model is assumed to be emprt\r\n        this.geom.io.dumpSelect(modeldata.geom, ent_sets);\r\n        this.attribs.io.dumpSelect(modeldata.attribs._attribs_maps, ent_sets);\r\n    }\r\n    /**\r\n     * Returns a clone of this model.\r\n     * Entity IDs will not change.\r\n     */\r\n    public clone(): GIModelData {\r\n        const clone: GIModelData = new GIModelData(this.model);\r\n        clone.geom.io.dump(this.geom._geom_maps);\r\n        clone.attribs.io.dump(this.attribs._attribs_maps);\r\n        // this.model.metadata = this.model.metadata;\r\n        // clone.dump(this);\r\n        return clone;\r\n    }\r\n    /**\r\n     * Renumber entities.\r\n     */\r\n    public purge(): GIModelData {\r\n        const clone: GIModelData = new GIModelData(this.model);\r\n        clone.mergeAndPurge(this);\r\n        return clone;\r\n    }\r\n    /**\r\n     * Copys the data from a second model into this model.\r\n     * The existing data in this model is not deleted.\r\n     * For the imported data, deleted entities are filtered out (i.e. not merged).\r\n     * @param model_data The GI model.\r\n     */\r\n    public mergeAndPurge(modeldata: GIModelData): void {\r\n        const geom_maps: Map<string, Map<number, number>> = this.geom.io.mergeAndPurge(modeldata.geom._geom_maps);\r\n        this.attribs.io.mergeAndPurge(modeldata.attribs._attribs_maps, geom_maps);\r\n    }\r\n    /**\r\n     * Check model for internal consistency\r\n     */\r\n    public check(): string[] {\r\n        return this.geom.check.check();\r\n    }\r\n        /**\r\n     * Compares this model and another model.\r\n     * ~\r\n     * This is the answer model.\r\n     * The other model is the submitted model.\r\n     * ~\r\n     * Both models will be modified in the process.\r\n     * ~\r\n     * @param model The model to compare with.\r\n     */\r\n    public compare(model: GIModel, normalize: boolean, check_geom_equality: boolean, check_attrib_equality: boolean):\r\n            {percent: number, score: number, total: number, comment: string} {\r\n        return this.comparator.compare(model, normalize, check_geom_equality, check_attrib_equality);\r\n    }\r\n}\r\n","import { EAttribNames, EEntType } from './common';\r\nimport { IThreeJS } from './ThreejsJSON';\r\nimport { GIModel } from './GIModel';\r\nimport { GIModelData } from './GIModelData';\r\nimport { isArray } from 'util';\r\nimport { time } from 'console';\r\n\r\n/**\r\n * Geo-info model class.\r\n */\r\nexport class GIModelThreejs {\r\n    private _modeldata: GIModelData;\r\n\r\n   /**\r\n     * Constructor\r\n     */\r\n    constructor(modeldata: GIModelData) {\r\n        this._modeldata = modeldata;\r\n    }\r\n    /**\r\n     * Generate a default color if none exists.\r\n     */\r\n    private _generateColors(): number[] {\r\n        const colors = [];\r\n        const num_ents = this._modeldata.geom.query.numEnts(EEntType.VERT);\r\n        for (let index = 0; index < num_ents; index++) {\r\n            colors.push(1, 1, 1);\r\n        }\r\n        // const geom_array = this._modeldata.modeldata.geom._geom_maps;\r\n        // for (const e of geom_array.dn_edges_verts) {\r\n        //     for (const v of e) {\r\n        //         const vert_attrb0 = colors[v * 3];\r\n        //         const vert_attrb1 = colors[v * 3 + 1];\r\n        //         const vert_attrb2 = colors[v * 3 + 2];\r\n        //         if (vert_attrb0 === 1 && vert_attrb1 === 1 && vert_attrb2 === 1) {\r\n        //             colors[v * 3] = 0;\r\n        //             colors[v * 3 + 1] = 0;\r\n        //             colors[v * 3 + 2] = 0;\r\n        //         }\r\n        //     }\r\n        // }\r\n        // for (const w of geom_array.dn_plines_wires) {\r\n        //     for (const e of geom_array.dn_wires_edges.get(w]) {\r\n        //         for (const v of geom_array.dn_edges_verts.get(e]) {\r\n        //             const vert_attrb0 = colors[v * 3];\r\n        //             const vert_attrb1 = colors[v * 3 + 1];\r\n        //             const vert_attrb2 = colors[v * 3 + 2];\r\n        //             if (vert_attrb0 === 1 && vert_attrb1 === 1 && vert_attrb2 === 1) {\r\n        //                 colors[v * 3] = 0;\r\n        //                 colors[v * 3 + 1] = 0;\r\n        //                 colors[v * 3 + 2] = 0;\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // }\r\n        return colors;\r\n    }\r\n    // /**\r\n    //  * Generate default normals if non exist.\r\n    //  */\r\n    // private _generateNormals(): number[] {\r\n    //     const normals = [];\r\n    //     const numEnts = this.geom.query.numEnts(EEntType.VERT, false);\r\n    //     for (let index = 0; index < numEnts; index++) {\r\n    //         normals.push(0, 0, 0);\r\n    //     }\r\n    //     return normals;\r\n    // }\r\n    /**\r\n     * Generate a default color if none exists.\r\n     */\r\n    private _getTimelineAttr(vertex_map: Map<number, number>) {\r\n        const time_points = this._modeldata.attribs._attribs_maps.mo.get('time_slider');\r\n        if (!time_points || !isArray(time_points)) { return null; }\r\n\r\n        const geom_array = this._modeldata.geom._geom_maps;\r\n        const attr_array = this._modeldata.attribs._attribs_maps.co.get('visible');\r\n        if (!attr_array) { return null; }\r\n\r\n        const timeline_objs = {\r\n            '__time_points__': time_points\r\n        };\r\n        for (const time_point of time_points) {\r\n            const time_point_obj = {\r\n                time_point: time_point,\r\n                point_indices: [],\r\n                // point_select_map: new Map<number, number>(),\r\n                edge_indices: [],\r\n                // edge_select_map: edge_select_map,\r\n                white_edge_indices: [],\r\n                // white_edge_select_map: white_edge_select_map,\r\n                triangle_indices: [],\r\n                // triangle_select_map: triangle_select_map,\r\n                // materials: materials,\r\n                // material_groups: material_groups,\r\n            };\r\n            timeline_objs[time_point] = time_point_obj;\r\n        }\r\n        for (const attr of attr_array.getEntsVals()) {\r\n            if (!isArray(attr[0]) || !isArray(attr[1])) { continue; }\r\n            for (const col_i of attr[0]) {\r\n                const col_pts = this._modeldata.geom.nav.navCollToPoint(col_i);\r\n                const col_edges = this._modeldata.geom.nav.navAnyToEdge(EEntType.COLL, col_i);\r\n                const col_tris = this._modeldata.geom.nav.navAnyToTri(EEntType.COLL, col_i);\r\n\r\n                const point_indices = this._modeldata.geom.threejs.get3jsPointIndices(col_pts, vertex_map);\r\n                const edge_indices = this._modeldata.geom.threejs.get3jsEdgeIndices(col_edges, vertex_map);\r\n                const triangle_indices = this._modeldata.geom.threejs.get3jsTriIndices(col_tris, vertex_map);\r\n                // const points_verts_i: number[] = this._modeldata.geom.threejs.get3jsPointIndex(colObjs[1], vertex_map);\r\n                // const [edges_verts_i, edge_select_map, white_edges_verts_i, white_edge_select_map]:\r\n                //         [number[], Map<number, number>, number[], Map<number, number>] =\r\n                //         this._modeldata.geom.threejs.get3jsEdges(vertex_map);\r\n                // const [tris_verts_i, triangle_select_map, materials, material_groups]:\r\n                //         [number[], Map<number, number>, object[], [number, number, number][]] =\r\n                //         this._modeldata.geom.threejs.get3jsTris(vertex_map);\r\n                for (const tp of <string[]>attr[1]) {\r\n                    if (!timeline_objs[tp]) { continue; }\r\n\r\n                    timeline_objs[tp].point_indices = timeline_objs[tp].point_indices.concat(point_indices);\r\n                    timeline_objs[tp].edge_indices = timeline_objs[tp].edge_indices.concat(edge_indices[0]);\r\n                    timeline_objs[tp].white_edge_indices = timeline_objs[tp].white_edge_indices.concat(edge_indices[1]);\r\n                    timeline_objs[tp].triangle_indices = timeline_objs[tp].triangle_indices.concat(triangle_indices);\r\n                }\r\n            }\r\n        }\r\n\r\n        return timeline_objs;\r\n        // for (const e of geom_array.dn_edges_verts) {\r\n        //     for (const v of e) {\r\n        //         const vert_attrb0 = colors[v * 3];\r\n        //         const vert_attrb1 = colors[v * 3 + 1];\r\n        //         const vert_attrb2 = colors[v * 3 + 2];\r\n        //         if (vert_attrb0 === 1 && vert_attrb1 === 1 && vert_attrb2 === 1) {\r\n        //             colors[v * 3] = 0;\r\n        //             colors[v * 3 + 1] = 0;\r\n        //             colors[v * 3 + 2] = 0;\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n    }\r\n    /**\r\n     * Returns arrays for visualization in Threejs.\r\n     */\r\n    public get3jsData(): IThreeJS {\r\n        // get the attribs at the vertex level\r\n        const [posis_xyz, posis_map]: [number[], Map<number, number>]  =  this._modeldata.attribs.threejs.get3jsSeqPosisCoords();\r\n        const [vertex_xyz, vertex_map]: [number[], Map<number, number>]  =  this._modeldata.attribs.threejs.get3jsSeqVertsCoords();\r\n        const normals_values: number[] = this._modeldata.attribs.threejs.get3jsSeqVertsNormals();\r\n        let colors_values: number[] = this._modeldata.attribs.threejs.get3jsSeqVertsColors();\r\n        if (!colors_values) {\r\n            colors_values = this._generateColors();\r\n        }\r\n        // get posi indices\r\n        const posis_indices: number[] = Array.from(posis_map.values());\r\n        // get the indices of the vertices for edges, points and triangles\r\n        const [tris_verts_i, triangle_select_map, materials, material_groups]:\r\n            [number[], Map<number, number>, object[], [number, number, number][]] = this._modeldata.geom.threejs.get3jsTris(vertex_map);\r\n        const [edges_verts_i, edge_select_map, white_edges_verts_i, white_edge_select_map]:\r\n            [number[], Map<number, number>, number[], Map<number, number>] = this._modeldata.geom.threejs.get3jsEdges(vertex_map);\r\n        const [points_verts_i, point_select_map]: [number[], Map<number, number>] = this._modeldata.geom.threejs.get3jsPoints(vertex_map);\r\n        // return an object containing all the data\r\n        const data: IThreeJS = {\r\n            posis_xyz: posis_xyz,\r\n            posis_indices: posis_indices,\r\n            posis_map: posis_map,\r\n            vertex_xyz: vertex_xyz,\r\n            vertex_map: vertex_map,\r\n            normals: normals_values,\r\n            colors: colors_values,\r\n            point_indices: points_verts_i,\r\n            point_select_map: point_select_map,\r\n            edge_indices: edges_verts_i,\r\n            edge_select_map: edge_select_map,\r\n            white_edge_indices: white_edges_verts_i,\r\n            white_edge_select_map: white_edge_select_map,\r\n            triangle_indices: tris_verts_i,\r\n            triangle_select_map: triangle_select_map,\r\n            materials: materials,\r\n            material_groups: material_groups,\r\n        };\r\n        // console.log(data);\r\n        return data;\r\n    }\r\n}\r\n","import { GIModel } from './GIModel';\r\nimport { IGeomMaps, EEntType, TFace } from './common';\r\nimport { GIGeom } from './GIGeom';\r\n\r\n/**\r\n * Class for comparing the geometry in two models.\r\n */\r\nexport class GIGeomCompare {\r\n    private _geom: GIGeom;\r\n    private _geom_maps: IGeomMaps;\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor(geom: GIGeom, geom_arrays: IGeomMaps) {\r\n        this._geom = geom;\r\n        this._geom_maps = geom_arrays;\r\n    }\r\n\r\n    /**\r\n     * Compares this model and another model.\r\n     * ~\r\n     * The max total score for this method is equal to 5.\r\n     * It assigns 1 mark for for each entity type:\r\n     * points, pline, pgons, and colelctions.\r\n     * In each case, if the number of entities is equal, 1 mark is given.\r\n     * ~\r\n     * @param other_model The model to compare with.\r\n     */\r\n    compare(other_model: GIModel, result: {score: number, total: number, comment: any[]}): void {\r\n        result.comment.push('Comparing number of geometric entities.');\r\n        const eny_types: EEntType[] = [\r\n            EEntType.POINT,\r\n            EEntType.PLINE,\r\n            EEntType.PGON\r\n        ];\r\n        const ent_type_strs: Map<EEntType, string> = new Map([\r\n            [EEntType.POINT, 'points'],\r\n            [EEntType.PLINE, 'polylines'],\r\n            [EEntType.PGON, 'polygons']\r\n        ]);\r\n        const geom_comments: string[] = [];\r\n        for (const ent_type of eny_types) {\r\n            // total marks is not updated, we deduct marks\r\n            // get the number of entitoes in each model\r\n            const this_num_ents: number = this._geom.query.numEnts(ent_type);\r\n            const other_num_ents: number = other_model.modeldata.geom.query.numEnts(ent_type);\r\n            if (this_num_ents > other_num_ents) {\r\n                geom_comments.push([\r\n                    'Mismatch: Model has too few entities of type:',\r\n                    ent_type_strs.get(ent_type) + '.',\r\n                    'There were ' + (this_num_ents - other_num_ents) + ' missing entities.',\r\n                ].join(' '));\r\n            } else if (this_num_ents < other_num_ents) {\r\n                geom_comments.push([\r\n                    'Mismatch: Model has too many entities of type:',\r\n                    ent_type_strs.get(ent_type) + '.',\r\n                    'There were ' + (other_num_ents - this_num_ents) + ' extra entities.',\r\n                    'A penalty of one mark was deducted from the score.'\r\n                ].join(' '));\r\n                // update the score, deduct 1 mark\r\n                result.score -= 1;\r\n            } else {\r\n                // correct\r\n            }\r\n        }\r\n        if (geom_comments.length === 0) {\r\n            geom_comments.push('Number of entities all match.');\r\n        }\r\n        // update the comments in the result\r\n        result.comment.push(geom_comments);\r\n    }\r\n    /**\r\n     * Set the holes in a face by specifying a list of wires.\r\n     * ~\r\n     * This is a low level method used by the compare function to normalize hole order.\r\n     * For making holes in faces, it is safer to use the cutFaceHoles method.\r\n     */\r\n    public setPgonHoles(face_i: number, holes_i: number[]): void {\r\n        const face: TFace = this._geom_maps.dn_faces_wires.get(face_i);\r\n        const wires_i: number[] = [face[0]];\r\n        for (let i = 0; i < holes_i.length; i++) {\r\n            wires_i.push( holes_i[i] );\r\n        }\r\n        this._geom_maps.dn_faces_wires.set(face_i, wires_i);\r\n    }\r\n}\r\n","import { GIAttribMap } from './GIAttribMap';\r\nimport { GIAttribMapBool } from './GIAttribMapBool';\r\n\r\n// longitude latitude in Singapore, NUS\r\nexport const LONGLAT = [103.778329, 1.298759];\r\n\r\n// some constants\r\nexport const XYPLANE: TPlane = [[0, 0, 0], [1, 0, 0], [0, 1, 0]];\r\nexport const YZPLANE: TPlane = [[0, 0, 0], [0, 1, 0], [0, 0, 1]];\r\nexport const ZXPLANE: TPlane = [[0, 0, 0], [0, 0, 1], [1, 0, 0]];\r\n\r\nexport const YXPLANE: TPlane = [[0, 0, 0], [0, 1, 0], [1, 0, 0]];\r\nexport const ZYPLANE: TPlane = [[0, 0, 0], [0, 0, 1], [0, 1, 0]];\r\nexport const XZPLANE: TPlane = [[0, 0, 0], [1, 0, 0], [0, 0, 1]];\r\n\r\n// EEntType and an index\r\nexport type TEntTypeIdx = [EEntType, number];\r\n\r\n// For each entity type, a set of entity indexes\r\nexport interface IEntSets {\r\n    posis_i?: Set<number>;\r\n    points_i?: Set<number>;\r\n    plines_i?: Set<number>;\r\n    pgons_i?: Set<number>;\r\n    colls_i?: Set<number>;\r\n    obj_posis_i?: Set<number>;\r\n    verts_i?: Set<number>;\r\n    tris_i?: Set<number>;\r\n    edges_i?: Set<number>;\r\n    wires_i?: Set<number>;\r\n    faces_i?: Set<number>;\r\n}\r\n\r\n// // Posis, Points, Plines, Pgons, Colls\r\n// export interface IGeomPack {\r\n//     posis_i: number[];\r\n//     points_i: number[];\r\n//     plines_i: number[];\r\n//     pgons_i: number[];\r\n//     colls_i: number[];\r\n//     // posis2_i?: number[];\r\n// }\r\n\r\n// // Object for entities\r\n// export interface IGeomPackTId {\r\n//     ps: TId[];\r\n//     po: TId[];\r\n//     pl: TId[];\r\n//     pg: TId[];\r\n//     co: TId[];\r\n// }\r\n\r\n// Types\r\nexport type TRay = [Txyz, Txyz]; // an origin and a direction vector\r\nexport type TPlane = [Txyz, Txyz, Txyz]; // an origin, an x vec and a y vec\r\nexport type TBBox = [Txyz, Txyz, Txyz, Txyz]; // an origin, an x vec and a y vec\r\nexport type TQuery = string;\r\nexport type TId = string;\r\nexport type TColor = [number, number, number]; // TODO replace with Txyz\r\nexport type TNormal = [number, number, number]; // TODO replace with xyz\r\nexport type TTexture = [number, number];\r\n\r\n// Types of entities\r\nexport enum EEntType {\r\n    POSI,\r\n    TRI,\r\n    VERT,\r\n    EDGE,\r\n    WIRE,\r\n    FACE,\r\n    POINT,\r\n    PLINE,\r\n    PGON,\r\n    COLL,\r\n    MOD\r\n}\r\nexport enum EEntTypeCollCP {\r\n    POSI,\r\n    TRI,\r\n    VERT,\r\n    EDGE,\r\n    WIRE,\r\n    FACE,\r\n    POINT,\r\n    PLINE,\r\n    PGON,\r\n    COLL,\r\n    COLLC,\r\n    COLLP,\r\n    MOD\r\n}\r\n\r\n// Types of entities\r\nexport enum EEntTypeStr {\r\n    'ps',\r\n    '_t',\r\n    '_v',\r\n    '_e',\r\n    '_w',\r\n    '_f',\r\n    'pt',\r\n    'pl',\r\n    'pg',\r\n    'co',\r\n    'mo'\r\n}\r\n\r\nexport enum EEntStrToGeomMaps {\r\n    'up_posis_verts', // 'posis',\r\n    'dn_tris_verts',\r\n    'dn_verts_posis',\r\n    'dn_edges_verts',\r\n    'dn_wires_edges',\r\n    'dn_faces_wires',\r\n    'dn_points_verts',\r\n    'dn_plines_wires',\r\n    'dn_pgons_faces',\r\n    'dn_colls_objs'\r\n}\r\n\r\n/**\r\n * Attribute maps\r\n */\r\n\r\nexport type TAttribMap = GIAttribMap | GIAttribMapBool;\r\n\r\nexport interface IAttribsMaps {\r\n    ps: Map<string, TAttribMap>;\r\n    _v: Map<string, TAttribMap>;\r\n    _e: Map<string, TAttribMap>;\r\n    _w: Map<string, TAttribMap>;\r\n    _f: Map<string, TAttribMap>;\r\n    pt: Map<string, TAttribMap>;\r\n    pl: Map<string, TAttribMap>;\r\n    pg: Map<string, TAttribMap>;\r\n    co: Map<string, TAttribMap>;\r\n    mo: Map<string, any>;\r\n}\r\n\r\n// Names of attributes\r\nexport enum EAttribNames {\r\n    COORDS =  'xyz',\r\n    NORMAL =  'normal',\r\n    COLOR =   'rgb',\r\n    TEXTURE = 'uv',\r\n    NAME = 'name',\r\n    MATERIAL = 'material',\r\n    VISIBILITY = 'visibility',\r\n    LABEL = 'label'\r\n}\r\n\r\n// Wire Type\r\nexport enum EWireType {\r\n    PLINE =  'pline',\r\n    PGON =  'pgon',\r\n    PGON_HOLE =   'pgon_hole'\r\n}\r\n\r\n/**\r\n * The types of operators that can be used in a filter.\r\n */\r\nexport enum EFilterOperatorTypes {\r\n    IS_EQUAL = '==',\r\n    IS_NOT_EQUAL = '!=',\r\n    IS_GREATER_OR_EQUAL = '>=',\r\n    IS_LESS_OR_EQUAL = '<=',\r\n    IS_GREATER = '>',\r\n    IS_LESS = '<',\r\n    EQUAL = '='\r\n}\r\n\r\n/**\r\n * A sort component.\r\n * Each sort can consist of multiple components.\r\n * Some examples of queries\r\n * @name\r\n * @name[2]\r\n */\r\nexport interface ISortComponent {\r\n    attrib_name: string;\r\n    attrib_index: number;\r\n}\r\n\r\nexport enum ESort {\r\n    DESCENDING = 'descending',\r\n    ASCENDING = 'ascending'\r\n}\r\n\r\nexport enum EAttribPush {\r\n    AVERAGE,\r\n    MEDIAN,\r\n    SUM,\r\n    MIN,\r\n    MAX,\r\n    FIRST,\r\n    LAST\r\n}\r\n\r\n// enums\r\nexport enum EAttribDataTypeStrs {\r\n    // INT = 'Int',\r\n    NUMBER = 'number',\r\n    STRING = 'string',\r\n    BOOLEAN = 'boolean',\r\n    LIST = 'list', // a list of anything\r\n    DICT = 'dict // an object'\r\n}\r\n\r\n// types\r\nexport type Txy = [number, number]; // north direction\r\nexport type Txyz = [number, number, number]; // in use\r\nexport type TPosi = number;\r\nexport type TTri = [number, number, number]; // [position, position, position]\r\nexport type TVert = number; // positions\r\nexport type TEdge = [number, number]; // [vertex, vertex]\r\nexport type TWire = number[]; // [edge, edge,....]\r\nexport type TFace = number[]; // [wire, ....]\r\nexport type TFaceTri = number[]; // [triangle, ...]\r\nexport type TPoint = number; // [vertex,....]\r\nexport type TPline = number; // [wire,....]\r\nexport type TPgon = number; // [face,....]\r\nexport type TColl = [number, number[], number[], number[]]; // [parent, [point, ...], [polyline, ...], [polygon, ....]]\r\nexport type TEntity = TTri | TVert | TEdge | TWire | TFace | TPoint | TPline | TPgon | TColl;\r\nexport type TAttribDataTypes = string | number | boolean | any[] | object;\r\nexport type TEntAttribValuesArr = Array<[number, number[]]>;\r\nexport type TModelAttribValuesArr = Array<[string, TAttribDataTypes]>;\r\n\r\n\r\nexport const RE_SPACES: RegExp = /\\s+/g;\r\n\r\n/**\r\n * Geom arrays\r\n */\r\nexport interface IGeomMaps {\r\n    // num_posis: number;\r\n    dn_verts_posis: Map<number, TVert>;\r\n    dn_tris_verts: Map<number, TTri>;\r\n    dn_edges_verts: Map<number, TEdge>;\r\n    dn_wires_edges: Map<number, TWire>;\r\n    dn_faces_wires: Map<number, TFace>;\r\n    dn_faces_tris: Map<number, TFaceTri>;\r\n    dn_points_verts: Map<number, TPoint>;\r\n    dn_plines_wires: Map<number, TPline>;\r\n    dn_pgons_faces: Map<number, TPgon>;\r\n    dn_colls_objs: Map<number, TColl>;\r\n    up_posis_verts: Map<number, number[]>; // one to many\r\n    up_tris_faces: Map<number, number>;\r\n    up_verts_edges: Map<number, number[]>; // one to two\r\n    up_verts_tris: Map<number, number[]>; // one to many\r\n    up_verts_points: Map<number, number>;\r\n    up_edges_wires: Map<number, number>;\r\n    up_wires_faces: Map<number, number>;\r\n    up_wires_plines: Map<number, number>;\r\n    up_faces_pgons: Map<number, number>;\r\n    up_points_colls: Map<number, number[]>; // one to many\r\n    up_plines_colls: Map<number, number[]>; // one to many\r\n    up_pgons_colls: Map<number, number[]>; // one to many\r\n    posis_ts: Map<number, number>;\r\n    points_ts: Map<number, number>;\r\n    plines_ts: Map<number, number>;\r\n    pgons_ts: Map<number, number>;\r\n    colls_ts: Map<number, number>;\r\n}\r\n\r\n// copy geometry\r\nexport interface IGeomCopy {\r\n    points: number[];\r\n    plines: number[];\r\n    pgons: number[];\r\n    colls: number[];\r\n}\r\n\r\n// note the names of the keys must match EAttribDataTypeStrs\r\nexport interface IAttribValues {\r\n    number: [number[], Map<string, number>];\r\n    string: [string[], Map<string, number>];\r\n    list:   [any[],    Map<string, number>];\r\n    dict:   [object[], Map<string, number>];\r\n}\r\n\r\nexport interface IMetaData {\r\n    time_stamp: number;\r\n    posi_count: number;\r\n    vert_count: number;\r\n    tri_count: number;\r\n    edge_count: number;\r\n    wire_count: number;\r\n    face_count: number;\r\n    point_count: number;\r\n    pline_count: number;\r\n    pgon_count: number;\r\n    coll_count: number;\r\n    attrib_values: IAttribValues;\r\n}\r\n\r\n// ================================================================================================\r\n// JSON MODEL\r\n// ================================================================================================\r\n\r\nexport interface IModelJSON {\r\n    meta_data: IMetaJSONData;\r\n    model_data: IModelJSONData;\r\n}\r\n\r\n// ================================================================================================\r\n// JSON META DATA\r\n// ================================================================================================\r\n\r\nexport interface IAttribJSONValues {\r\n    number_vals: number[];\r\n    // number_keys: string[];\r\n    // number_idxs: number[];\r\n\r\n    string_vals: string[];\r\n    // string_keys: string[];\r\n    // string_idxs: number[];\r\n\r\n    list_vals: any[];\r\n    // list_keys: string[];\r\n    // list_idxs: number[];\r\n\r\n    dict_vals: object[];\r\n    // dict_keys: string[];\r\n    // dict_idxs: number[];\r\n}\r\n\r\nexport interface IMetaJSONData {\r\n    time_stamp: number;\r\n    posi_count: number;\r\n    vert_count: number;\r\n    tri_count: number;\r\n    edge_count: number;\r\n    wire_count: number;\r\n    face_count: number;\r\n    point_count: number;\r\n    pline_count: number;\r\n    pgon_count: number;\r\n    coll_count: number;\r\n    attrib_values: IAttribJSONValues;\r\n}\r\n\r\n// ================================================================================================\r\n// JSON MODEL DATA\r\n// ================================================================================================\r\n\r\nexport interface IModelJSONData {\r\n    geometry: IGeomJSONData;\r\n    attributes: IAttribsJSONData;\r\n}\r\n\r\nexport interface IGeomJSONData {\r\n    posis_i: number[];\r\n    // posis_ts: number[];\r\n    verts: TVert[];\r\n    verts_i: number[];\r\n    tris: TTri[];\r\n    tris_i: number[];\r\n    edges: TEdge[];\r\n    edges_i: number[];\r\n    wires: TWire[];\r\n    wires_i: number[];\r\n    faces: TFace[];\r\n    facetris: TFaceTri[];\r\n    faces_i: number[];\r\n    points: TPoint[];\r\n    points_i: number[];\r\n    plines: TPline[];\r\n    plines_i: number[];\r\n    pgons: TPgon[];\r\n    pgons_i: number[];\r\n    colls: TColl[];\r\n    colls_i: number[];\r\n    selected: TEntTypeIdx[];\r\n}\r\nexport interface IAttribJSONData {\r\n    name: string;\r\n    data_type: EAttribDataTypeStrs;\r\n    data_length: number;\r\n    data: TEntAttribValuesArr;\r\n}\r\nexport interface IAttribsJSONData {\r\n    posis: IAttribJSONData[];\r\n    verts: IAttribJSONData[];\r\n    edges: IAttribJSONData[];\r\n    wires: IAttribJSONData[];\r\n    faces: IAttribJSONData[];\r\n    points: IAttribJSONData[];\r\n    plines: IAttribJSONData[];\r\n    pgons: IAttribJSONData[];\r\n    colls: IAttribJSONData[];\r\n    model: TModelAttribValuesArr;\r\n}\r\n\r\n","import { EEntType } from './common';\r\n\r\n/**\r\n * Makes a deep clone of map where keys are integers and values are arrays of integers.\r\n * @param map\r\n */\r\nexport function cloneDeepMapArr(map: Map<number, number[]>): Map<number, number[]> {\r\n    const new_map: Map<number, number[]> = new Map();\r\n    map.forEach( (value, key) => {\r\n        new_map.set(key, value.slice());\r\n    });\r\n    return new_map;\r\n}\r\n/**\r\n * Used for error messages\r\n * @param ent_type_str\r\n */\r\nexport function getEntTypeStr(ent_type_str: EEntType): string {\r\n    switch (ent_type_str) {\r\n        case EEntType.POSI:\r\n            return 'positions';\r\n        case EEntType.VERT:\r\n            return 'vertices';\r\n        case EEntType.TRI:\r\n            return 'triangles';\r\n        case EEntType.EDGE:\r\n            return 'edges';\r\n        case EEntType.WIRE:\r\n            return 'wires';\r\n        case EEntType.FACE:\r\n            return 'faces';\r\n        case EEntType.POINT:\r\n            return 'points';\r\n        case EEntType.PLINE:\r\n            return 'polylines';\r\n        case EEntType.PGON:\r\n            return 'polygons';\r\n        case EEntType.COLL:\r\n            return 'collections';\r\n    }\r\n}\r\n","import { TId, EEntType, EEntTypeStr, TEntTypeIdx } from './common';\r\n\r\n// ============================================================================\r\nexport function getArrDepth(arr: any): number {\r\n    if (Array.isArray(arr)) {\r\n        return 1 + getArrDepth(arr[0]);\r\n    }\r\n    return 0;\r\n}\r\nexport function isEmptyArr(arr: any): boolean {\r\n    if (Array.isArray(arr) && !arr.length) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n// ============================================================================\r\nexport function idsMakeFromIndicies(ent_type: EEntType, idxs: number|number[]|number[][]): TId|TId[]|TId[][] {\r\n    const depth: number = getArrDepth(idxs);\r\n    if (depth === 0) {\r\n        const idx: number = idxs as number;\r\n        return EEntTypeStr[ent_type as EEntType] + idx as TId;\r\n    } else if (depth === 1) {\r\n        const idxs_arr: number[] = idxs as number[];\r\n        if (idxs_arr.length === 0) { return []; } //  deal with empty array\r\n        return idxs_arr.map( idx => idsMakeFromIndicies(ent_type, idx) ) as TId[];\r\n    } else { // depth === 2\r\n        const idxs_arrs: number[][] = idxs as number[][];\r\n        return idxs_arrs.map( idxs_arr => idsMakeFromIndicies(ent_type, idxs_arr) ) as TId[][];\r\n    }\r\n}\r\nexport function idsMake(ent_type_idxs: TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][]): TId|TId[]|TId[][] {\r\n    const depth: number = getArrDepth(ent_type_idxs);\r\n    if (depth === 1) {\r\n        if (ent_type_idxs.length === 0) { return []; } //  deal with empty array\r\n        const ent_type_idx: TEntTypeIdx = ent_type_idxs as TEntTypeIdx;\r\n        return EEntTypeStr[ent_type_idx[0] as EEntType] + ent_type_idx[1] as TId;\r\n    } else if (depth === 2) {\r\n        const ent_type_idxs_arr: TEntTypeIdx[] = ent_type_idxs as TEntTypeIdx[];\r\n        return ent_type_idxs_arr.map( ent_type_idx => idsMake(ent_type_idx) ) as TId[];\r\n    } else { // depth === 3\r\n        const ent_type_idxs_arrs: TEntTypeIdx[][] = ent_type_idxs as TEntTypeIdx[][];\r\n        return ent_type_idxs_arrs.map( ent_type_idxs_arr => idsMake(ent_type_idxs_arr) ) as TId[][];\r\n    }\r\n}\r\nexport function idsBreak(id: TId|TId[]|TId[][]|TId[][][]): TEntTypeIdx|TEntTypeIdx[]|TEntTypeIdx[][]|TEntTypeIdx[][][] {\r\n    // const depth: number = getArrDepth(ids);\r\n    if (id === null) { return null; }\r\n    if (!Array.isArray(id)) {\r\n        id = id as TId;\r\n        if (typeof id !== 'string') { throw new Error('Value is not an entity ID.'); }\r\n        // if (id.length < 3) { throw new Error('String is not an entity ID.'); }\r\n        const ent_type_str: string = id.slice(0, 2);\r\n        const ent_type: EEntType = EEntTypeStr[ent_type_str];\r\n        if (ent_type === undefined) { throw new Error('String is not an entity ID.'); }\r\n        const index: number = Number(id.slice(2));\r\n        return [ent_type, index];\r\n    } else {\r\n        return (id as TId[]).map( a_id => idsBreak(a_id) ) as TEntTypeIdx[];\r\n    }\r\n    // } else if (depth === 1) {\r\n    //     const ids_arr: TId[] = ids as TId[];\r\n    //     return ids_arr.map( id => idsBreak(id) ) as TEntTypeIdx[];\r\n    // } else { // depth === 2\r\n    //     const ids_arr: TId[][] = ids as TId[][];\r\n    //     return ids_arr.map( id => idsBreak(id) ) as TEntTypeIdx[][];\r\n    // }\r\n}\r\nexport function idIndicies(ents_arr: TEntTypeIdx[]): number[] {\r\n    return ents_arr.map( ents => ents[1] );\r\n}\r\n// ============================================================================\r\nexport function isPosi(ent_type: EEntType): boolean {\r\n    return ent_type === EEntType.POSI;\r\n}\r\nexport function isVert(ent_type: EEntType): boolean {\r\n    return ent_type === EEntType.VERT;\r\n}\r\nexport function isTri(ent_type: EEntType): boolean {\r\n    return ent_type === EEntType.TRI;\r\n}\r\nexport function isEdge(ent_type: EEntType): boolean {\r\n    return ent_type === EEntType.EDGE;\r\n}\r\nexport function isWire(ent_type: EEntType): boolean {\r\n    return ent_type === EEntType.WIRE;\r\n}\r\nexport function isFace(ent_type: EEntType): boolean {\r\n    return ent_type === EEntType.FACE;\r\n}\r\nexport function isPoint(ent_type: EEntType): boolean {\r\n    return ent_type === EEntType.POINT;\r\n}\r\nexport function isPline(ent_type: EEntType): boolean {\r\n    return ent_type === EEntType.PLINE;\r\n}\r\nexport function isPgon(ent_type: EEntType): boolean {\r\n    return ent_type === EEntType.PGON;\r\n}\r\nexport function isColl(ent_type: EEntType): boolean {\r\n    return ent_type === EEntType.COLL;\r\n}\r\n// more general test\r\nexport function isTopo(ent_type: EEntType): boolean {\r\n    if (ent_type === EEntType.VERT) { return true; }\r\n    if (ent_type === EEntType.EDGE) { return true; }\r\n    if (ent_type === EEntType.WIRE) { return true; }\r\n    if (ent_type === EEntType.FACE) { return true; }\r\n    return false;\r\n}\r\nexport function isObj(ent_type: EEntType): boolean {\r\n    if (ent_type === EEntType.PGON) { return true; }\r\n    if (ent_type === EEntType.PLINE) { return true; }\r\n    if (ent_type === EEntType.POINT) { return true; }\r\n    return false;\r\n}\r\nexport function isDim0(ent_type: EEntType): boolean {\r\n    if (ent_type === EEntType.POSI) { return true; }\r\n    if (ent_type === EEntType.VERT) { return true; }\r\n    if (ent_type === EEntType.POINT) { return true; }\r\n    return false;\r\n}\r\nexport function isDim1(ent_type: EEntType): boolean {\r\n    if (ent_type === EEntType.EDGE) { return true; }\r\n    if (ent_type === EEntType.PLINE) { return true; }\r\n    return false;\r\n}\r\nexport function isDim2(ent_type: EEntType): boolean {\r\n    if (ent_type === EEntType.FACE) { return true; }\r\n    if (ent_type === EEntType.PGON) { return true; }\r\n    return false;\r\n}\r\n","import { GIModel } from './GIModel';\r\nimport { Txyz, EEntType, TAttribDataTypes, LONGLAT, Txy, TEntTypeIdx, IEntSets } from './common';\r\nimport { getArrDepth } from './id';\r\nimport proj4 from 'proj4';\r\nimport { vecAng2, vecDot } from '../geom/vectors';\r\nimport { rotateMatrix, multMatrix } from '../geom/matrix';\r\nimport { Matrix4 } from 'three';\r\n\r\n\r\nenum EGeojsoFeatureType {\r\n    POINT = 'Point',\r\n    LINESTRING = 'LineString',\r\n    POLYGON = 'Polygon',\r\n    MULTIPOINT = 'MultiPoint',\r\n    MULTILINESTRING = 'MultiLineString',\r\n    MULTIPOLYGON = 'MultiPolygon'\r\n}\r\nexport function exportGeojson(model: GIModel, entities: TEntTypeIdx[], flatten: boolean): string {\r\n    // create the projection object\r\n    const proj_obj: proj4.Converter = _createProjection(model);\r\n    // calculate angle of rotation\r\n    let rot_matrix: Matrix4 = null;\r\n    if (model.modeldata.attribs.query.hasModelAttrib('north')) {\r\n        const north: Txy = model.modeldata.attribs.query.getModelAttribVal('north') as Txy;\r\n        if (Array.isArray(north)) {\r\n            const rot_ang: number = vecAng2([0, 1, 0], [north[0], north[1], 0], [0, 0, 1]);\r\n            rot_matrix = rotateMatrix([[0, 0, 0], [0, 0, 1]], -rot_ang);\r\n        }\r\n    }\r\n    const features: object[] = [];\r\n    for (const [ent_type, ent_i] of entities) {\r\n        switch (ent_type) {\r\n            case EEntType.PGON:\r\n                features.push(_createGeojsonPolygon(model, ent_i, proj_obj, rot_matrix, flatten));\r\n                break;\r\n            case EEntType.PLINE:\r\n                features.push(_createGeojsonLineString(model, ent_i, proj_obj, rot_matrix, flatten));\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    const export_json = {\r\n        'type': 'FeatureCollection',\r\n        'features': features\r\n    };\r\n    return JSON.stringify(export_json, null, 2); // pretty\r\n}\r\nfunction _createGeojsonPolygon(model: GIModel, pgon_i: number, proj_obj: any, rot_matrix: Matrix4, flatten: boolean): object {\r\n    // {\r\n    //     \"type\": \"Feature\",\r\n    //     \"geometry\": {\r\n    //       \"type\": \"Polygon\",\r\n    //       \"coordinates\": [\r\n    //         [\r\n    //           [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\r\n    //           [100.0, 1.0], [100.0, 0.0]\r\n    //         ]\r\n    //       ]\r\n    //     },\r\n    //     \"properties\": {\r\n    //       \"prop0\": \"value0\",\r\n    //       \"prop1\": { \"this\": \"that\" }\r\n    //     }\r\n    // }\r\n    const all_coords: Txy[][] = [];\r\n    const wires_i: number[] = model.modeldata.geom.nav.navAnyToWire(EEntType.PGON, pgon_i);\r\n    for (let i = 0; i < wires_i.length; i++) {\r\n        const coords: Txy[] = [];\r\n        const posis_i: number[] = model.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, wires_i[i]);\r\n        for (const posi_i of posis_i) {\r\n            const xyz: Txyz = model.modeldata.attribs.query.getPosiCoords(posi_i);\r\n            const lat_long: [number, number] = _xformFromXYZToLongLat(xyz, proj_obj, rot_matrix, flatten) as [number, number];\r\n            coords.push(lat_long);\r\n        }\r\n        all_coords.push(coords);\r\n    }\r\n    const all_props = {};\r\n    for (const name of model.modeldata.attribs.query.getAttribNames(EEntType.PGON)) {\r\n        all_props[name] = model.modeldata.attribs.query.getAttribVal(EEntType.PGON, name, pgon_i);\r\n    }\r\n    return {\r\n        'type': 'Feature',\r\n        'geometry': {\r\n            'type': 'Polygon',\r\n            'coordinates': all_coords\r\n        },\r\n        'properties': all_props\r\n    };\r\n}\r\nfunction _createGeojsonLineString(model: GIModel, pline_i: number, proj_obj: any, rot_matrix: Matrix4, flatten: boolean): object {\r\n    // {\r\n    //     \"type\": \"Feature\",\r\n    //     \"geometry\": {\r\n    //       \"type\": \"LineString\",\r\n    //       \"coordinates\": [\r\n    //         [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]\r\n    //       ]\r\n    //     },\r\n    //     \"properties\": {\r\n    //       \"prop0\": \"value0\",\r\n    //       \"prop1\": 0.0\r\n    //     }\r\n    // },\r\n    const coords: Txy[] = [];\r\n    const wire_i: number = model.modeldata.geom.nav.navPlineToWire(pline_i);\r\n    const posis_i: number[] = model.modeldata.geom.nav.navAnyToPosi(EEntType.WIRE, wire_i);\r\n    for (const posi_i of posis_i) {\r\n        const xyz: Txyz = model.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        const lat_long: [number, number] = _xformFromXYZToLongLat(xyz, proj_obj, rot_matrix, flatten) as [number, number];\r\n        coords.push(lat_long);\r\n    }\r\n    if (model.modeldata.geom.query.isWireClosed(wire_i)) {\r\n        coords.push(coords[0]);\r\n    }\r\n    const all_props = {};\r\n    for (const name of model.modeldata.attribs.query.getAttribNames(EEntType.PLINE)) {\r\n        all_props[name] = model.modeldata.attribs.query.getAttribVal(EEntType.PLINE, name, pline_i);\r\n    }\r\n    return {\r\n        'type': 'Feature',\r\n        'geometry': {\r\n            'type': 'LineString',\r\n            'coordinates': coords\r\n        },\r\n        'properties': all_props\r\n    };\r\n}\r\n /**\r\n * Import geojson\r\n */\r\nexport function importGeojson(model: GIModel, geojson_str: string, elevation: number): IEntSets {\r\n    // parse the json data str\r\n    const geojson_obj: any = JSON.parse(geojson_str);\r\n    const proj_obj: proj4.Converter = _createProjection(model);\r\n    // calculate angle of rotation\r\n    let rot_matrix: Matrix4 = null;\r\n    if (model.modeldata.attribs.query.hasModelAttrib('north')) {\r\n        const north: Txy = model.modeldata.attribs.query.getModelAttribVal('north') as Txy;\r\n        if (Array.isArray(north)) {\r\n            const rot_ang: number = vecAng2([0, 1, 0], [north[0], north[1], 0], [0, 0, 1]);\r\n            rot_matrix = rotateMatrix([[0, 0, 0], [0, 0, 1]], rot_ang);\r\n        }\r\n    }\r\n    // arrays for features\r\n    const point_f: any[] = [];\r\n    const linestring_f: any[] = [];\r\n    const polygon_f: any[] = [];\r\n    const multipoint_f: any[] = [];\r\n    const multilinestring_f: any[] = [];\r\n    const multipolygon_f: any[] = [];\r\n    const other_f: any[] = [];\r\n    // arrays for objects\r\n    const points_i: Set<number> = new Set();\r\n    const plines_i: Set<number> = new Set();\r\n    const pgons_i: Set<number> = new Set();\r\n    const colls_i: Set<number> = new Set();\r\n    // loop\r\n    for (const feature of geojson_obj.features) {\r\n        // get the features\r\n        switch (feature.geometry.type) {\r\n            case EGeojsoFeatureType.POINT:\r\n                point_f.push(feature);\r\n                const point_i: number = _addPointToModel(model, feature, proj_obj, rot_matrix, elevation);\r\n                points_i.add(point_i);\r\n                break;\r\n            case EGeojsoFeatureType.LINESTRING:\r\n                linestring_f.push(feature);\r\n                const pline_i: number = _addPlineToModel(model, feature, proj_obj, rot_matrix, elevation);\r\n                plines_i.add(pline_i);\r\n                break;\r\n            case EGeojsoFeatureType.POLYGON:\r\n                polygon_f.push(feature);\r\n                const pgon_i: number = _addPgonToModel(model, feature, proj_obj, rot_matrix, elevation);\r\n                pgons_i.add(pgon_i);\r\n                break;\r\n            case EGeojsoFeatureType.MULTIPOINT:\r\n                multipoint_f.push(feature);\r\n                const points_coll_i: [number[], number] = _addPointCollToModel(model, feature, proj_obj, rot_matrix, elevation);\r\n                for (const point_coll_i of points_coll_i[0]) {\r\n                    points_i.add(point_coll_i);\r\n                }\r\n                colls_i.add(points_coll_i[1]);\r\n                break;\r\n            case EGeojsoFeatureType.MULTILINESTRING:\r\n                multilinestring_f.push(feature);\r\n                const plines_coll_i: [number[], number] = _addPlineCollToModel(model, feature, proj_obj, rot_matrix, elevation);\r\n                for (const pline_coll_i of plines_coll_i[0]) {\r\n                    plines_i.add(pline_coll_i);\r\n                }\r\n                colls_i.add(plines_coll_i[1]);\r\n                break;\r\n            case EGeojsoFeatureType.MULTIPOLYGON:\r\n                multipolygon_f.push(feature);\r\n                const pgons_coll_i: [number[], number] = _addPgonCollToModel(model, feature, proj_obj, rot_matrix, elevation);\r\n                for (const pgon_coll_i of pgons_coll_i[0]) {\r\n                    pgons_i.add(pgon_coll_i);\r\n                }\r\n                colls_i.add(pgons_coll_i[1]);\r\n                break;\r\n            default:\r\n                other_f.push(feature);\r\n                break;\r\n        }\r\n    }\r\n    // return sets\r\n    return {\r\n        points_i: points_i,\r\n        plines_i: plines_i,\r\n        pgons_i: pgons_i,\r\n        colls_i: colls_i\r\n    };\r\n}\r\n\r\n\r\n/**\r\n * Get long lat, Detect CRS, create projection function\r\n * @param model The model.\r\n * @param point The features to add.\r\n */\r\nfunction _createProjection(model: GIModel): proj4.Converter {\r\n        // create the function for transformation\r\n        const proj_str_a = '+proj=tmerc +lat_0=';\r\n        const proj_str_b = ' +lon_0=';\r\n        const proj_str_c = '+k=1 +x_0=0 +y_0=0 +ellps=WGS84 +units=m +no_defs';\r\n        let longitude = LONGLAT[0];\r\n        let latitude = LONGLAT[1];\r\n        if (model.modeldata.attribs.query.hasModelAttrib('geolocation')) {\r\n            const geolocation = model.modeldata.attribs.query.getModelAttribVal('geolocation');\r\n            const long_value: TAttribDataTypes = geolocation['longitude'];\r\n            if (typeof long_value !== 'number') {\r\n                throw new Error('Longitude attribute must be a number.');\r\n            }\r\n            longitude = long_value as number;\r\n            if (longitude < -180 || longitude > 180) {\r\n                throw new Error('Longitude attribute must be between -180 and 180.');\r\n            }\r\n            const lat_value: TAttribDataTypes = geolocation['latitude'];\r\n            if (typeof lat_value !== 'number') {\r\n                throw new Error('Latitude attribute must be a number');\r\n            }\r\n            latitude = lat_value as number;\r\n            if (latitude < 0 || latitude > 90) {\r\n                throw new Error('Latitude attribute must be between 0 and 90.');\r\n            }\r\n        }\r\n        // try to figure out what the projection is of the source file\r\n        // let proj_from_str = 'WGS84';\r\n        // if (geojson_obj.hasOwnProperty('crs')) {\r\n        //     if (geojson_obj.crs.hasOwnProperty('properties')) {\r\n        //         if (geojson_obj.crs.properties.hasOwnProperty('name')) {\r\n        //             const name: string = geojson_obj.crs.properties.name;\r\n        //             const epsg_index = name.indexOf('EPSG');\r\n        //             if (epsg_index !== -1) {\r\n        //                 let epsg = name.slice(epsg_index);\r\n        //                 epsg = epsg.replace(/\\s/g, '+');\r\n        //                 if (epsg === 'EPSG:4326') {\r\n        //                     // do nothing, 'WGS84' is fine\r\n        //                 } else if (['EPSG:4269', 'EPSG:3857', 'EPSG:3785', 'EPSG:900913', 'EPSG:102113'].indexOf(epsg) !== -1) {\r\n        //                     // these are the epsg codes that proj4 knows\r\n        //                     proj_from_str = epsg;\r\n        //                 } else if (epsg === 'EPSG:3414') {\r\n        //                     // singapore\r\n        //                     proj_from_str =\r\n        //                         '+proj=tmerc +lat_0=1.366666666666667 +lon_0=103.8333333333333 +k=1 +x_0=28001.642 +y_0=38744.572 ' +\r\n        //                         '+ellps=WGS84 +units=m +no_defs';\r\n        //                 }\r\n        //             }\r\n        //         }\r\n        //     }\r\n        // }\r\n        // console.log('CRS of geojson data', proj_from_str);\r\n\r\n        const proj_from_str = 'WGS84';\r\n        const proj_to_str = proj_str_a + latitude + proj_str_b + longitude + proj_str_c;\r\n        const proj_obj: proj4.Converter = proj4(proj_from_str, proj_to_str);\r\n        return proj_obj;\r\n}\r\n\r\n/*\r\n    \"geometry\": {\r\n        \"type\": \"Point\",\r\n        \"coordinates\": [40, 40]\r\n    }\r\n*/\r\n/**\r\n * Add a point to the model\r\n * @param model The model.\r\n * @param point The features to add.\r\n */\r\nfunction _addPointToModel(model: GIModel, point: any,\r\n        proj_obj: proj4.Converter, rot_matrix: Matrix4, elevation: number): number {\r\n    // add feature\r\n    let xyz: Txyz = _xformFromLongLatToXYZ(point.geometry.coordinates, proj_obj, elevation) as Txyz;\r\n    // rotate to north\r\n    if (rot_matrix !== null) {\r\n        xyz = multMatrix(xyz, rot_matrix);\r\n    }\r\n    // create the posi\r\n    const posi_i: number = model.modeldata.geom.add.addPosi();\r\n    model.modeldata.attribs.add.setPosiCoords(posi_i, xyz);\r\n    // create the point\r\n    const point_i: number = model.modeldata.geom.add.addPoint(posi_i);\r\n    // add attribs\r\n    _addAttribsToModel(model, EEntType.POINT, point_i, point);\r\n    // return the index\r\n    return point_i;\r\n}\r\n\r\n/*\r\n    \"geometry\": {\r\n        \"type\": \"LineString\",\r\n        \"coordinates\": [\r\n            [30, 10], [10, 30], [40, 40]\r\n        ]\r\n    }\r\n*/\r\n/**\r\n * Add a pline to the model\r\n * @param model The model\r\n * @param linestrings The features to add.\r\n */\r\nfunction _addPlineToModel(model: GIModel, linestring: any,\r\n        proj_obj: proj4.Converter, rot_matrix: Matrix4, elevation: number): number {\r\n    // add feature\r\n    let xyzs: Txyz[] = _xformFromLongLatToXYZ(linestring.geometry.coordinates, proj_obj, elevation) as Txyz[];\r\n    const first_xyz: Txyz = xyzs[0];\r\n    const last_xyz: Txyz = xyzs[xyzs.length - 1];\r\n    const close = xyzs.length > 2 && first_xyz[0] === last_xyz[0] && first_xyz[1] === last_xyz[1];\r\n    if (close) { xyzs = xyzs.slice(0, xyzs.length - 1); }\r\n    // rotate to north\r\n    if (rot_matrix !== null) {\r\n        for (let i = 0; i < xyzs.length; i++) {\r\n            xyzs[i] = multMatrix(xyzs[i], rot_matrix);\r\n        }\r\n    }\r\n    // create the posis\r\n    const posis_i: number[] = [];\r\n    for (const xyz of xyzs) {\r\n        const posi_i: number = model.modeldata.geom.add.addPosi();\r\n        model.modeldata.attribs.add.setPosiCoords(posi_i, xyz);\r\n        posis_i.push(posi_i);\r\n    }\r\n    // create the pline\r\n    const pline_i: number = model.modeldata.geom.add.addPline(posis_i, close);\r\n    // add attribs\r\n    _addAttribsToModel(model, EEntType.PLINE, pline_i, linestring);\r\n    // return the index\r\n    return pline_i;\r\n}\r\n\r\n/*\r\n    \"geometry\": {\r\n        \"type\": \"Polygon\",\r\n        \"coordinates\": [\r\n            [[35, 10], [45, 45], [15, 40], [10, 20], [35, 10]],\r\n            [[20, 30], [35, 35], [30, 20], [20, 30]]\r\n        ]\r\n    }\r\n*/\r\n/**\r\n * Add a pgon to the model\r\n * @param model The model\r\n * @param polygons The features to add.\r\n */\r\nfunction _addPgonToModel(model: GIModel, polygon: any,\r\n        proj_obj: proj4.Converter, rot_matrix: Matrix4, elevation: number): number {\r\n    // add feature\r\n    const rings: number[][] = [];\r\n    for (const ring of polygon.geometry.coordinates) {\r\n        const xyzs: Txyz[] = _xformFromLongLatToXYZ(ring, proj_obj, elevation) as Txyz[];\r\n        // rotate to north\r\n        if (rot_matrix !== null) {\r\n            for (let i = 0; i < xyzs.length; i++) {\r\n                xyzs[i] = multMatrix(xyzs[i], rot_matrix);\r\n            }\r\n        }\r\n        // create the posis\r\n        const posis_i: number[] = [];\r\n        for (const xyz of xyzs) {\r\n            const posi_i: number = model.modeldata.geom.add.addPosi();\r\n            model.modeldata.attribs.add.setPosiCoords(posi_i, xyz);\r\n            posis_i.push(posi_i);\r\n        }\r\n        rings.push(posis_i);\r\n    }\r\n    // create the pgon\r\n    const pgon_i: number = model.modeldata.geom.add.addPgon(rings[0], rings.slice(1));\r\n    // check if it needs flipping\r\n    // TODO there may be a faster way to do this\r\n    const face_i: number = model.modeldata.geom.nav.navPgonToFace(pgon_i);\r\n    const normal: Txyz = model.modeldata.geom.query.getFaceNormal(face_i);\r\n    if (vecDot(normal, [0, 0, 1]) < 0) {\r\n        model.modeldata.geom.modify.reverse(model.modeldata.geom.nav.navFaceToWire(face_i)[0]);\r\n    }\r\n    // add attribs\r\n    _addAttribsToModel(model, EEntType.PGON, pgon_i, polygon);\r\n    // return the index\r\n    return pgon_i;\r\n}\r\n\r\n\r\n/*\r\n    \"geometry\": {\r\n        \"type\": \"MultiPoint\",\r\n        \"coordinates\": [\r\n            [10, 10],\r\n            [40, 40]\r\n        ]\r\n    }\r\n*/\r\n/**\r\n * Adds multipoint to the model\r\n * @param model The model\r\n * @param multipoint The features to add.\r\n */\r\nfunction _addPointCollToModel(model: GIModel, multipoint: any,\r\n        proj_obj: proj4.Converter, rot_matrix: Matrix4, elevation: number): [number[], number] {\r\n    // add features\r\n    const points_i: number[] = [];\r\n    for (const coordinates of multipoint.geometry.coordinates) {\r\n        const point_i: number = _addPointToModel(model, {'geometry': {'coordinates': coordinates}}, proj_obj, rot_matrix, elevation);\r\n        points_i.push(point_i);\r\n    }\r\n    // create the collection\r\n    const coll_i: number = model.modeldata.geom.add.addColl(null, [], points_i, []);\r\n    // add attribs\r\n    _addAttribsToModel(model, EEntType.COLL, coll_i, multipoint);\r\n    // return the indices of the plines and the index of the collection\r\n    return [points_i, coll_i];\r\n}\r\n\r\n/*\r\n    \"geometry\": {\r\n        \"type\": \"MultiLineString\",\r\n        \"coordinates\": [\r\n            [[10, 10], [20, 20], [10, 40]],\r\n            [[40, 40], [30, 30], [40, 20], [30, 10]]\r\n        ]\r\n    }\r\n*/\r\n/**\r\n * Adds multilinestrings to the model\r\n * @param multilinestrings The features to add.\r\n * @param model The model\r\n */\r\nfunction _addPlineCollToModel(model: GIModel, multilinestring: any,\r\n        proj_obj: proj4.Converter, rot_matrix: Matrix4, elevation: number): [number[], number] {\r\n    // add features\r\n    const plines_i: number[] = [];\r\n    for (const coordinates of multilinestring.geometry.coordinates) {\r\n        const pline_i: number = _addPlineToModel(model, {'geometry': {'coordinates': coordinates}}, proj_obj, rot_matrix, elevation);\r\n        plines_i.push(pline_i);\r\n    }\r\n    // create the collection\r\n    const coll_i: number = model.modeldata.geom.add.addColl(null, [], plines_i, []);\r\n    // add attribs\r\n    _addAttribsToModel(model, EEntType.COLL, coll_i, multilinestring);\r\n    // return the indices of the plines and the index of the collection\r\n    return [plines_i, coll_i];\r\n}\r\n\r\n/*\r\n    \"geometry\": {\r\n        \"type\": \"MultiPolygon\",\r\n        \"coordinates\": [\r\n            [\r\n                [[40, 40], [20, 45], [45, 30], [40, 40]]\r\n            ],\r\n            [\r\n                [[20, 35], [10, 30], [10, 10], [30, 5], [45, 20], [20, 35]],\r\n                [[30, 20], [20, 15], [20, 25], [30, 20]]\r\n            ]\r\n        ]\r\n    }\r\n*/\r\n/**\r\n * Adds multipolygons to the model\r\n * @param model The model\r\n * @param multipolygons The features to add.\r\n */\r\nfunction _addPgonCollToModel(model: GIModel, multipolygon: any,\r\n        proj_obj: proj4.Converter, rot_matrix: Matrix4, elevation: number): [number[], number] {\r\n    // add features\r\n    const pgons_i: number[] = [];\r\n    for (const coordinates of multipolygon.geometry.coordinates) {\r\n        const pgon_i: number = _addPgonToModel(model, {'geometry': {'coordinates': coordinates}}, proj_obj, rot_matrix, elevation);\r\n        pgons_i.push(pgon_i);\r\n    }\r\n    // create the collection\r\n    const coll_i: number = model.modeldata.geom.add.addColl(null, [], [], pgons_i);\r\n    // add attribs\r\n    _addAttribsToModel(model, EEntType.COLL, coll_i, multipolygon);\r\n    // return the indices of the plines and the index of the collection\r\n    return [pgons_i, coll_i];\r\n}\r\n\r\n/**\r\n * Adds attributes to the model\r\n * @param model The model\r\n */\r\nfunction _addAttribsToModel(model: GIModel, ent_type: EEntType, ent_i: number, feature: any): void {\r\n    // add attribs\r\n    if (! feature.hasOwnProperty('properties')) { return; }\r\n    for (const name of Object.keys(feature.properties)) {\r\n        let value: any = feature.properties[name];\r\n        const value_type: string = typeof feature.properties[name];\r\n        if (value_type === 'object') {\r\n            value = JSON.stringify(value);\r\n        }\r\n        model.modeldata.attribs.add.setEntAttribVal(ent_type, ent_i, name, value);\r\n    }\r\n}\r\n\r\n/**\r\n * Converts geojson long lat to cartesian coords\r\n * @param long_lat_arr\r\n * @param elevation\r\n */\r\nfunction _xformFromLongLatToXYZ(\r\n        long_lat_arr: [number, number]|[number, number][], proj_obj: proj4.Converter, elevation: number): Txyz|Txyz[] {\r\n    if (getArrDepth(long_lat_arr) === 1) {\r\n        const long_lat: [number, number] = long_lat_arr as [number, number];\r\n        const xy: [number, number] = proj_obj.forward(long_lat);\r\n        return [xy[0], xy[1], elevation];\r\n    } else {\r\n        long_lat_arr = long_lat_arr as [number, number][];\r\n        const xyzs_xformed: Txyz[] = [];\r\n        for (const long_lat of long_lat_arr) {\r\n            const xyz: Txyz = _xformFromLongLatToXYZ(long_lat, proj_obj, elevation) as Txyz;\r\n            xyzs_xformed.push(xyz);\r\n        }\r\n        return xyzs_xformed as Txyz[];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Converts cartesian coords to geojson long lat\r\n * @param xyz\r\n * @param flatten\r\n */\r\nfunction _xformFromXYZToLongLat(\r\n    xyz: Txyz|Txyz[], proj_obj: proj4.Converter, rot_matrix: Matrix4, flatten: boolean): [number, number]|[number, number][] {\r\n    if (getArrDepth(xyz) === 1) {\r\n        xyz = xyz as Txyz;\r\n        // rotate to north\r\n        if (rot_matrix !== null) {\r\n            xyz = multMatrix(xyz, rot_matrix);\r\n        }\r\n        return proj_obj.inverse([xyz[0], xyz[1]]) as [number, number];\r\n    } else {\r\n        xyz = xyz as Txyz[];\r\n        const long_lat_arr: [number, number][] = [];\r\n        for (const a_xyz of xyz) {\r\n            const lat_long: [number, number] = _xformFromXYZToLongLat(a_xyz, proj_obj, rot_matrix, flatten) as [number, number];\r\n            long_lat_arr.push(lat_long);\r\n        }\r\n        return long_lat_arr as [number, number][];\r\n    }\r\n}\r\n","import { GIModel } from './GIModel';\r\nimport {  TColor, TNormal, TTexture, EAttribNames, Txyz, EEntType, TId, TEntTypeIdx } from './common';\r\n\r\nconst NOGROUPS = '---nogroups---';\r\n\r\n/**\r\n * Import obj\r\n */\r\nexport function importObj(obj_str: string): GIModel {\r\n    const model: GIModel = new GIModel();\r\n    enum EObjLine {\r\n        OBJ_COMMENT = '#',\r\n        OBJ_COORD = 'v ',\r\n        OBJ_TEXTURE = 'vt ',\r\n        OBJ_NORMAL = 'vn ',\r\n        OBJ_FACE = 'f ',\r\n        OBJ_LINE = 'l '\r\n    }\r\n    const obj_lines: string[] = obj_str.split(/\\r?\\n/);\r\n    const coords: Txyz[] = [];\r\n    const normals: TNormal[] = [];\r\n    const textures: TTexture[] = [];\r\n    const faces: number[][][] = [];\r\n    const plines: number[][] = [];\r\n    for (const obj_line of obj_lines) {\r\n        if (obj_line.startsWith( EObjLine.OBJ_COMMENT )) {\r\n            // Do not do anything\r\n        } else if (obj_line.startsWith( EObjLine.OBJ_COORD )) {\r\n            const coord: Txyz = obj_line.split(' ').slice(1, 4).map( v => parseFloat(v) ) as Txyz;\r\n            coords.push(coord);\r\n        } else if (obj_line.startsWith( EObjLine.OBJ_TEXTURE )) {\r\n            const normal: TNormal = obj_line.split(' ').slice(1, 4).map( v => parseFloat(v) ) as TNormal;\r\n            normals.push(normal);\r\n        } else if (obj_line.startsWith( EObjLine.OBJ_NORMAL )) {\r\n            const texture: TTexture = obj_line.split(' ').slice(1, 3).map( v => parseFloat(v) ) as TTexture;\r\n            textures.push(texture);\r\n        } else if (obj_line.startsWith( EObjLine.OBJ_FACE )) {\r\n            const face_strs: string[] = obj_line.split(' ').slice(1);\r\n            const v_indexes: number[] = [];\r\n            const t_indexes: number[] = [];\r\n            const n_indexes: number[] = [];\r\n            face_strs.forEach( face_str => {\r\n                const face_sub_indexes: number[] = face_str.split('/').map( str => parseInt(str, 10) - 1 );\r\n                v_indexes.push(face_sub_indexes[0]);\r\n                t_indexes.push(face_sub_indexes[1]);\r\n                n_indexes.push(face_sub_indexes[2]);\r\n            });\r\n            faces.push([v_indexes, t_indexes, n_indexes]);\r\n        } else if (obj_line.startsWith( EObjLine.OBJ_LINE )) {\r\n            const pline: number[] = obj_line.split(' ').slice(1).map( v => parseInt(v, 10) - 1 ) as TTexture;\r\n            plines.push(pline);\r\n        } else {\r\n            console.log('Found unrecognised line of data in OBJ file');\r\n        }\r\n    }\r\n    for (const coord of coords) {\r\n        const posi_i: number = model.modeldata.geom.add.addPosi();\r\n        model.modeldata.attribs.add.setEntAttribVal(EEntType.POSI, posi_i, EAttribNames.COORDS, coord);\r\n    }\r\n    for (const face of faces) {\r\n        const face_i: number = model.modeldata.geom.add.addPgon(face[0]);\r\n        // TODO: texture uv\r\n        // TODO: normals\r\n    }\r\n    return model;\r\n}\r\n\r\n/**\r\n * Export to obj\r\n */\r\nexport function exportVertBasedObj(model: GIModel, entities: TEntTypeIdx[]): string {\r\n    const h_str = '# File generated by Mobius.\\n';\r\n    // the order of data is 1) vertex, 2) texture, 3) normal\r\n    let v_str = '';\r\n    let f_str = '';\r\n    let l_str = '';\r\n    // do we have color, texture, normal?\r\n    const has_color_attrib: boolean = model.modeldata.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.COLOR);\r\n    const has_normal_attrib: boolean = model.modeldata.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.NORMAL);\r\n    const has_texture_attrib: boolean = model.modeldata.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.TEXTURE);\r\n    // get the polgons, polylines, verts, posis\r\n    const [pgons_i, plines_i]: [number[], number[]] = _getPgonsPlines(model, entities);\r\n    const [verts_i, posis_i]: [number[], number[]] = _getVertsPosis(model, pgons_i, plines_i);\r\n    // vertices, v\r\n    const vert_i_to_obj_v: number[] = [];\r\n    let num_v = 0;\r\n    for (let i = 0; i < verts_i.length; i++) {\r\n        const vert_i: number =  verts_i[i];\r\n        const coord: Txyz = model.modeldata.attribs.query.getVertCoords(vert_i);\r\n        if (has_color_attrib) {\r\n            let color: TColor = model.modeldata.attribs.query.getAttribVal(EEntType.VERT, EAttribNames.COLOR, vert_i) as TColor;\r\n            if (color === undefined) { color = [1, 1, 1]; }\r\n            v_str += 'v ' + coord.map( v => v.toString() ).join(' ')  + ' ' + color.map( c => c.toString() ).join(' ') + '\\n';\r\n        } else {\r\n            v_str += 'v ' + coord.map( v => v.toString() ).join(' ') + '\\n';\r\n        }\r\n        vert_i_to_obj_v[vert_i] = i;\r\n        num_v += 1;\r\n    }\r\n   // textures, vt\r\n   const [num_vt, vert_i_obj_vt, vt_str]: [number, number[], string] = _getTexturesStr(model, verts_i, has_texture_attrib);\r\n   // normals, vn\r\n   const [num_vn, vert_i_obj_vn, vn_str]: [number, number[], string] = _getNormalsStr(model, verts_i, has_normal_attrib);\r\n   // polygons, f\r\n   const [keys_pgons, map_colls_to_pgons]: [string[], Map<string, [string[], number[]]>] =\r\n       _getGroups(model, EEntType.PGON, pgons_i);\r\n    // polygons, f\r\n    for (const key of keys_pgons) {\r\n        const [names, group_pgons_i]: [string[], number[]] = map_colls_to_pgons.get(key);\r\n        if (key !== NOGROUPS) {\r\n            f_str += 'g ' + names.join( ' ' ) + '\\n';\r\n        }\r\n        for (const pgon_i of group_pgons_i) {\r\n            const pgon_verts_i_outer: number[] = model.modeldata.geom.nav.navAnyToVert(EEntType.PGON, pgon_i);\r\n            // const verts_i_outer = verts_i[0];\r\n            // TODO what about holes\r\n            f_str += 'f ';\r\n            for (const vert_i of pgon_verts_i_outer) {\r\n                // v\r\n                f_str += (1 + vert_i_to_obj_v[vert_i]);\r\n                if (has_texture_attrib || has_normal_attrib) {\r\n                    // vt\r\n                    if (has_texture_attrib) {\r\n                        // TODO ignore them for now\r\n                        f_str += '/';\r\n                    } else {\r\n                        f_str += '/';\r\n                    }\r\n                    // vn\r\n                    if (has_normal_attrib) {\r\n                        f_str += '/' + (1 + num_v + num_vt + vert_i_obj_vn[vert_i]);\r\n                    } else {\r\n                        f_str += '/';\r\n                    }\r\n                }\r\n                f_str += ' ';\r\n            }\r\n            f_str += '\\n';\r\n        }\r\n    }\r\n    // polylines, l\r\n    const [keys_plines, map_colls_to_plines]: [string[], Map<string, [string[], number[]]>] =\r\n        _getGroups(model, EEntType.PLINE, plines_i);\r\n    // process all the groups\r\n    for (const key of keys_plines) {\r\n        const [names, group_plines_i]: [string[], number[]] = map_colls_to_plines.get(key);\r\n        if (key !== NOGROUPS) {\r\n            f_str += 'g ' + names.join( ' ' ) + '\\n';\r\n        }\r\n        for (const pline_i of group_plines_i) {\r\n            const pline_verts_i: number[] = model.modeldata.geom.nav.navAnyToVert(EEntType.PLINE, pline_i);\r\n            l_str += 'l ' + pline_verts_i.map( vert_i => (vert_i_to_obj_v[vert_i] + 1).toString() ).join(' ') + '\\n';\r\n        }\r\n    }\r\n    // result\r\n    return h_str + v_str + vt_str + vn_str + f_str + l_str;\r\n}\r\n\r\n/**\r\n * Export to obj\r\n */\r\nexport function exportPosiBasedObj(model: GIModel, entities: TEntTypeIdx[]): string {\r\n    const h_str = '# File generated by Mobius.\\n';\r\n    // the order of data is 1) vertex, 2) texture, 3) normal\r\n    let v_str = '';\r\n    let f_str = '';\r\n    let l_str = '';\r\n    // do we have color, texture, normal?\r\n    const has_color_attrib: boolean = model.modeldata.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.COLOR);\r\n    const has_normal_attrib: boolean = model.modeldata.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.NORMAL);\r\n    const has_texture_attrib: boolean = model.modeldata.attribs.query.hasAttrib(EEntType.VERT, EAttribNames.TEXTURE);\r\n    // get the polgons, polylines, verts, posis\r\n    const [pgons_i, plines_i]: [number[], number[]] = _getPgonsPlines(model, entities);\r\n    const [verts_i, posis_i]: [number[], number[]] = _getVertsPosis(model, pgons_i, plines_i);\r\n    // positions\r\n    let num_v = 0;\r\n    const posi_i_to_obj_v: number[] = [];\r\n    for (let i = 0; i < posis_i.length; i++) {\r\n        const posi_i: number =  posis_i[i];\r\n        const coord: Txyz = model.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        if (has_color_attrib) {\r\n            // get the average color from the verts\r\n            const posi_verts_i: number[] = model.modeldata.geom.nav.navPosiToVert(posi_i);\r\n            let color: TColor = [0, 0, 0];\r\n            for (const posi_vert_i of posi_verts_i) {\r\n                let vert_color: TColor =\r\n                    model.modeldata.attribs.query.getAttribVal(EEntType.VERT, EAttribNames.COLOR, posi_vert_i) as TColor;\r\n                if (vert_color === undefined) { vert_color = [1, 1, 1]; }\r\n                color = [color[0] + vert_color[0], color[1] + vert_color[1], color[2] + vert_color[2]];\r\n            }\r\n            const div: number = posi_verts_i.length;\r\n            color = [color[0] / div, color[1] / div, color[2] / div];\r\n            v_str += 'v ' + coord.map( v => v.toString() ).join(' ')  + ' ' + color.map( c => c.toString() ).join(' ') + '\\n';\r\n        } else {\r\n            v_str += 'v ' + coord.map( v => v.toString() ).join(' ') + '\\n';\r\n        }\r\n        posi_i_to_obj_v[posi_i] = i;\r\n        num_v += 1;\r\n    }\r\n    // textures, vt\r\n    const [num_vt, vert_i_obj_vt, vt_str]: [number, number[], string] = _getTexturesStr(model, verts_i, has_texture_attrib);\r\n    // normals, vn\r\n    const [num_vn, vert_i_obj_vn, vn_str]: [number, number[], string] = _getNormalsStr(model, verts_i, has_normal_attrib);\r\n    // polygons, f\r\n    const [keys_pgons, map_colls_to_pgons]: [string[], Map<string, [string[], number[]]>] =\r\n        _getGroups(model, EEntType.PGON, pgons_i);\r\n    // process all the groups\r\n    for (const key of keys_pgons) {\r\n        const [names, group_pgons_i]: [string[], number[]] = map_colls_to_pgons.get(key);\r\n        if (key !== NOGROUPS) {\r\n            f_str += 'g ' + names.join( ' ' ) + '\\n';\r\n        }\r\n        for (const pgon_i of group_pgons_i) {\r\n            const pgon_verts_i_outer: number[] = model.modeldata.geom.nav.navAnyToVert(EEntType.PGON, pgon_i);\r\n            // const verts_i_outer = verts_i[0];\r\n            // TODO what about holes\r\n            f_str += 'f ';\r\n            for (const vert_i of pgon_verts_i_outer) {\r\n                // v\r\n                f_str += (1 + posi_i_to_obj_v[model.modeldata.geom.nav.navVertToPosi(vert_i)]);\r\n                if (has_texture_attrib || has_normal_attrib) {\r\n                    // vt\r\n                    if (has_texture_attrib && vert_i_obj_vt[vert_i] !== undefined) {\r\n                        // TODO ignore them for now\r\n                        f_str += '/';\r\n                    } else {\r\n                        f_str += '/';\r\n                    }\r\n                    // vn\r\n                    if (has_normal_attrib && vert_i_obj_vn[vert_i] !== undefined) {\r\n                        f_str += '/' + (1 + num_v + num_vt + vert_i_obj_vn[vert_i]);\r\n                    } else {\r\n                        f_str += '/';\r\n                    }\r\n                }\r\n                f_str += ' ';\r\n            }\r\n            f_str += '\\n';\r\n        }\r\n    }\r\n    // polylines, l\r\n    const [keys_plines, map_colls_to_plines]: [string[], Map<string, [string[], number[]]>] =\r\n        _getGroups(model, EEntType.PLINE, plines_i);\r\n    // process all the groups\r\n    for (const key of keys_plines) {\r\n        const [names, group_plines_i]: [string[], number[]] = map_colls_to_plines.get(key);\r\n        if (key !== NOGROUPS) {\r\n            f_str += 'g ' + names.join( ' ' ) + '\\n';\r\n        }\r\n        for (const pline_i of group_plines_i) {\r\n            const pline_verts_i: number[] = model.modeldata.geom.nav.navAnyToVert(EEntType.PLINE, pline_i);\r\n            l_str += 'l ' + pline_verts_i.map( vert_i =>\r\n                (posi_i_to_obj_v[model.modeldata.geom.nav.navVertToPosi(vert_i)] + 1).toString() ).join(' ') + '\\n';\r\n        }\r\n    }\r\n    // result\r\n    return h_str + v_str + vt_str + vn_str + f_str + l_str;\r\n}\r\n\r\n/**\r\n * Get the textures\r\n */\r\nfunction _getTexturesStr(model: GIModel, verts_i: number[], has_texture_attrib: boolean): [number, number[], string] {\r\n    let vt_str = '';\r\n    // textures, vt\r\n    let num_vt = 0;\r\n    const vert_i_obj_vt: number[] = []; // sparse array\r\n    if (has_texture_attrib) {\r\n        for (let i = 0; i < verts_i.length; i++) {\r\n            const vert_i  = verts_i[i];\r\n            const texture: TTexture = model.modeldata.attribs.query.getAttribVal(EEntType.VERT, EAttribNames.TEXTURE, vert_i) as TTexture;\r\n            if (texture !== undefined) {\r\n                vt_str += 'vt ' + texture.map( v => v.toString() ).join(' ') + '\\n';\r\n                vert_i_obj_vt[vert_i] = i;\r\n                num_vt += 1;\r\n            }\r\n        }\r\n    }\r\n    return [num_vt, vert_i_obj_vt, vt_str];\r\n}\r\n/**\r\n * Get the normals\r\n */\r\nfunction _getNormalsStr(model: GIModel, verts_i: number[], has_normal_attrib: boolean): [number, number[], string] {\r\n    let vn_str = '';\r\n    // normals, vn\r\n    let num_vn = 0;\r\n    const vert_i_obj_vn: number[] = []; // sparse array\r\n    if (has_normal_attrib) {\r\n        for (let i = 0; i < verts_i.length; i++) {\r\n            const vert_i  = verts_i[i];\r\n            const  normal: TNormal = model.modeldata.attribs.query.getAttribVal(EEntType.VERT, EAttribNames.NORMAL, vert_i) as TNormal;\r\n            if (normal !== undefined) {\r\n                vn_str += 'vn ' + normal.map( v => v.toString() ).join(' ') + '\\n';\r\n                vert_i_obj_vn[vert_i] = i;\r\n                num_vn += 1;\r\n            }\r\n        }\r\n    }\r\n    return [num_vn, vert_i_obj_vn, vn_str];\r\n}\r\n\r\n/**\r\n * Get the groups\r\n */\r\nfunction _getGroups(model: GIModel, ent_type: EEntType, ents_i: number[]): [string[], Map<string, [string[], number[]]>] {\r\n    const map_colls_to_ents: Map<string, [string[], number[]]> = new Map();\r\n    // check if the name attribut exists\r\n    if (!model.modeldata.attribs.query.hasAttrib(EEntType.COLL, 'name')) {\r\n        return [[NOGROUPS], map_colls_to_ents.set(NOGROUPS, [[], ents_i])];\r\n    }\r\n    // get the collections of each entity\r\n    for (const ent_i of ents_i) {\r\n        const colls_i: number[] = model.modeldata.geom.nav.navAnyToColl(ent_type, ent_i);\r\n        const set_all_colls_i: Set<number> = new Set();\r\n        for (const coll_i of colls_i) {\r\n            set_all_colls_i.add(coll_i);\r\n            for (const anc_coll_i of model.modeldata.geom.query.getCollAncestors(coll_i)) {\r\n                set_all_colls_i.add(anc_coll_i);\r\n            }\r\n        }\r\n        const names: string[] = model.modeldata.attribs.query.getAttribVal(EEntType.COLL, 'name', Array.from(set_all_colls_i)) as string[];\r\n        let key = NOGROUPS;\r\n        if (names.length > 0) {\r\n            names.sort();\r\n            key = names.join('-');\r\n        }\r\n        if (!map_colls_to_ents.has(key)) {\r\n            map_colls_to_ents.set(key, [names, []]);\r\n        }\r\n        map_colls_to_ents.get(key)[1].push(ent_i);\r\n    }\r\n    // make sure the ---nogroups--- key is first in the list\r\n    let keys: string[] = Array.from(map_colls_to_ents.keys());\r\n    const ng_i: number = keys.indexOf(NOGROUPS);\r\n    if (ng_i !== -1) {\r\n        keys = keys.splice(ng_i, 1).splice(0, 0, NOGROUPS);\r\n    }\r\n    // return the keys arrays, and the map\r\n    return [keys, map_colls_to_ents];\r\n}\r\n\r\n\r\n/**\r\n * Get all the polygons and polyline entities.\r\n */\r\nfunction _getPgonsPlines(model: GIModel, entities: TEntTypeIdx[]): [number[], number[]] {\r\n    let pgons_i: number[] = [];\r\n    let plines_i: number[] = [];\r\n    if (entities === null) {\r\n        pgons_i = model.modeldata.geom.query.getEnts(EEntType.PGON);\r\n        plines_i = model.modeldata.geom.query.getEnts(EEntType.PLINE);\r\n    } else {\r\n        for (const [ent_type, ent_i] of entities) {\r\n            if (ent_type === EEntType.PGON) {\r\n                pgons_i.push(ent_i);\r\n            } else if (ent_type === EEntType.PLINE) {\r\n                plines_i.push(ent_i);\r\n            } else if (ent_type === EEntType.COLL) {\r\n                for (const pgon_i of model.modeldata.geom.nav.navAnyToPgon(EEntType.COLL, ent_i)) {\r\n                    pgons_i.push(pgon_i);\r\n                }\r\n                for (const pline_i of model.modeldata.geom.nav.navAnyToPline(EEntType.COLL, ent_i)) {\r\n                    plines_i.push(pline_i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return [pgons_i, plines_i];\r\n}\r\n\r\n/**\r\n * Get all the posis from the polygon and polyline entities.\r\n */\r\nfunction _getVertsPosis(model: GIModel, pgons_i: number[], plines_i: number[]): [number[], number[]] {\r\n    const posis_i: Set<number> = new Set();\r\n    const verts_i: Set<number> = new Set();\r\n    for (const pgon_i of pgons_i) {\r\n        for (const vert_i of model.modeldata.geom.nav.navAnyToVert(EEntType.PGON, pgon_i)) {\r\n            verts_i.add(vert_i);\r\n        }\r\n        for (const posi_i of model.modeldata.geom.nav.navAnyToPosi(EEntType.PGON, pgon_i)) {\r\n            posis_i.add(posi_i);\r\n        }\r\n    }\r\n    for (const pline_i of plines_i) {\r\n        for (const vert_i of model.modeldata.geom.nav.navAnyToVert(EEntType.PLINE, pline_i)) {\r\n            verts_i.add(vert_i);\r\n        }\r\n        for (const posi_i of model.modeldata.geom.nav.navAnyToPosi(EEntType.PLINE, pline_i)) {\r\n            posis_i.add(posi_i);\r\n        }\r\n    }\r\n    return [Array.from(verts_i), Array.from(posis_i)];\r\n}\r\n","import { TRay, TPlane, TBBox } from './common';\r\n\r\n// ============================================================================\r\n\r\n\r\nexport function isXYZ(data: any): boolean {\r\n    if (!Array.isArray(data)) { return false; }\r\n    data = data as any[];\r\n    if (data.length !== 3) { return false; }\r\n    for (const item of data) {\r\n        if (typeof item !== 'number') { return false; }\r\n    }\r\n    return true;\r\n}\r\nexport function isRay(data: any): boolean {\r\n    if (!Array.isArray(data)) { return false; }\r\n    data = data as any[];\r\n    if (data.length !== 2) { return false; }\r\n    for (const item of data) {\r\n        if (!isXYZ(item)) { return false; }\r\n    }\r\n    return true;\r\n}\r\nexport function isPlane(data: any): boolean {\r\n    if (!Array.isArray(data)) { return false; }\r\n    data = data as any[];\r\n    if (data.length !== 3) { return false; }\r\n    for (const item of data) {\r\n        if (!isXYZ(item)) { return false; }\r\n    }\r\n    return true;\r\n}\r\nexport function isBBox(data: any): boolean {\r\n    if (!Array.isArray(data)) { return false; }\r\n    data = data as any[];\r\n    if (data.length !== 4) { return false; }\r\n    for (const item of data) {\r\n        if (!isXYZ(item)) { return false; }\r\n    }\r\n    return true;\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport const XAXIS: THREE.Vector3 = new THREE.Vector3(1, 0, 0);\r\nexport const YAXIS: THREE.Vector3 = new THREE.Vector3(0, 1, 0);\r\nexport const ZAXIS: THREE.Vector3 = new THREE.Vector3(0, 0, 1);\r\n","import * as three from 'three';\r\nimport { vecAdd, vecCross } from './vectors';\r\nconst EPS = 1e-6;\r\n\r\ntype Txyz = [number, number, number];\r\ntype TRay = [Txyz, Txyz];\r\ntype TPlane = [Txyz, Txyz, Txyz];\r\n\r\n\r\nfunction _distEuclidean(c1: Txyz, c2: Txyz): number {\r\n    const v: Txyz = [\r\n        c1[0] - c2[0],\r\n        c1[1] - c2[1],\r\n        c1[2] - c2[2]\r\n    ];\r\n    return Math.hypot(v[0], v[1], v[2]);\r\n}\r\nfunction _distManhattan(c1: Txyz, c2: Txyz): number {\r\n    const v: Txyz = [\r\n        Math.abs(c1[0] - c2[0]),\r\n        Math.abs(c1[1] - c2[1]),\r\n        Math.abs(c1[2] - c2[2])\r\n    ];\r\n    return v[0] + v[1] + v[2];\r\n}\r\nfunction _distManhattanSq(c1: Txyz, c2: Txyz): number {\r\n    const v: Txyz = [\r\n        Math.abs(c1[0] - c2[0]),\r\n        Math.abs(c1[1] - c2[1]),\r\n        Math.abs(c1[2] - c2[2])\r\n    ];\r\n    return (v[0] * v[0]) + (v[1] * v[1]) + (v[2] * v[2]);\r\n}\r\nfunction _dist(c1: Txyz, c2: Txyz|TRay|TPlane, func: Function): number {\r\n    if (!Array.isArray(c2[0])) {\r\n        c2 = c2 as Txyz;\r\n        return func(c1, c2);\r\n    } else if (c2.length === 2) {\r\n        c2 = c2 as TRay;\r\n        const tjs_point_proj: three.Vector3 = new three.Vector3(c1[0], c1[1], c1[2]);\r\n        const tjs_origin: three.Vector3 =  new three.Vector3(c2[0][0], c2[0][1], c2[0][2]);\r\n        const p2: Txyz = vecAdd(c2[0], c2[1]);\r\n        const tjs_point2: three.Vector3 =  new three.Vector3(p2[0], p2[1], p2[2]);\r\n        const tjs_new_point: three.Vector3 = new three.Vector3();\r\n        const tjs_line: three.Line3 = new three.Line3(tjs_origin, tjs_point2);\r\n        // project\r\n        tjs_line.closestPointToPoint( tjs_point_proj, false, tjs_new_point );\r\n        return distance(c1, [tjs_new_point.x, tjs_new_point.y, tjs_new_point.z]);\r\n    } else if (c2.length === 3) {\r\n        c2 = c2 as TPlane;\r\n        const tjs_point_proj: three.Vector3 = new three.Vector3(c1[0], c1[1], c1[2]);\r\n        const tjs_new_point: three.Vector3 = new three.Vector3();\r\n        const normal: Txyz = vecCross(c2[1], c2[2]);\r\n        const tjs_normal: three.Vector3 = new three.Vector3(normal[0], normal[1], normal[2]);\r\n        const tjs_origin: three.Vector3 = new three.Vector3(c2[0][0], c2[0][1], c2[0][2]);\r\n        const tjs_plane: three.Plane = new three.Plane();\r\n        // project\r\n        tjs_plane.setFromNormalAndCoplanarPoint( tjs_normal, tjs_origin );\r\n        tjs_plane.projectPoint(tjs_point_proj, tjs_new_point);\r\n        return distance(c1, [tjs_new_point.x, tjs_new_point.y, tjs_new_point.z]);\r\n    } else {\r\n        throw new Error('Error calculating distance. Distance must to either an xyz, a ray, or a plane.');\r\n    }\r\n}\r\n\r\nexport function distance(c1: Txyz, c2: Txyz|TRay|TPlane): number {\r\n    return _dist(c1, c2, _distEuclidean);\r\n}\r\nexport function distanceManhattan(c1: Txyz, c2: Txyz|TRay|TPlane): number {\r\n    return _dist(c1, c2, _distManhattan);\r\n}\r\nexport function distanceManhattanSq(c1: Txyz, c2: Txyz|TRay|TPlane): number {\r\n    return _dist(c1, c2, _distManhattanSq);\r\n}\r\n","import * as mathjs from 'mathjs';\r\nimport * as three from 'three';\r\nimport { vecAdd, vecCross, vecLen, vecFromTo, vecDot, vecNorm, vecMult, vecSetLen } from './vectors';\r\n\r\ntype Txyz = [number, number, number];\r\ntype TRay = [Txyz, Txyz];\r\ntype TPlane = [Txyz, Txyz, Txyz];\r\n\r\nexport function intersect(r1: TRay, r2: TRay|TPlane, met: number = 2): Txyz {\r\n    // function isInRange(num: number, range: [number, number]) {\r\n    //     const range2: [number, number] = range[0] < range[1] ? range : [range[1], range[0]];\r\n    //     if ((num < range2[0]) || (num > range2[1])) { return false; }\r\n    //     return true;\r\n    // }\r\n    // // TODO\r\n    // // This has problems with rounding errors\r\n    // // Especially when lines are orthogonal\r\n    // function isOnLineSegment(coord: Txyz, start: Txyz, end: Txyz): boolean {\r\n    //     const x_range: [number, number] = [start[0], end[0]];\r\n    //     if (!isInRange(coord[0], x_range)) { return false; }\r\n    //     const y_range: [number, number] = [start[1], end[1]];\r\n    //     if (!isInRange(coord[1], y_range)) { return false; }\r\n    //     const z_range: [number, number] = [start[2], end[2]];\r\n    //     if (!isInRange(coord[2], z_range)) { return false; }\r\n    //     return true;\r\n    // }\r\n    // // TODO\r\n    // // This has problems with rounding errors\r\n    // // Especially when lines are orthogonal\r\n    // function isOnRay(coord: Txyz, start: Txyz, end: Txyz): boolean {\r\n    //     const x_range: [number, number] = [start[0], null];\r\n    //     x_range[1] = start[0] === end[0] ? end[0] : start[0] < end[0] ? Infinity : -Infinity;\r\n    //     if (!isInRange(coord[0], x_range)) { return false; }\r\n    //     const y_range: [number, number] = [start[1], null];\r\n    //     y_range[1] = start[1] === end[1] ? end[1] : start[1] < end[1] ? Infinity : -Infinity;\r\n    //     if (!isInRange(coord[1], y_range)) { return false; }\r\n    //     const z_range: [number, number] = [start[2], null];\r\n    //     z_range[1] = start[2] === end[2] ? end[2] : start[2] < end[2] ? Infinity : -Infinity;\r\n    //     if (!isInRange(coord[2], z_range)) { return false; }\r\n    //     return true;\r\n    // }\r\n    if (r2.length === 2) {\r\n        return intersectRayRay(r1, r2, met);\r\n        // const p0: Txyz = r1[0];\r\n        // const p1: Txyz = vecAdd(r1[0], r1[1]);\r\n        // const p2: Txyz = r2[0];\r\n        // const p3: Txyz = vecAdd(r2[0], r2[1]);\r\n        // const isect: Txyz = mathjs.intersect(p0, p1, p2, p3 );\r\n        // if (isect) {\r\n        //     if (met === 2)  {\r\n        //         return isect;\r\n        //     } else if (met === 1) {\r\n        //         if (isOnRay(isect, p0, p1) && isOnRay(isect, p2, p3)) { return isect; }\r\n        //     } else if (met === 0) {\r\n        //         if (isOnLineSegment(isect, p0, p1) && isOnLineSegment(isect, p2, p3)) { return isect; }\r\n        //     } else {\r\n        //         throw new Error('Error calculating intersection. Intersection method not valid. Must be 0, 1, or 2.');\r\n        //     }\r\n        // }\r\n        // return null;\r\n    } else if (r2.length === 3) {\r\n        return intersectRayPlane(r1, r2, met);\r\n        // const p0: Txyz = r1[0];\r\n        // const p1: Txyz = vecAdd(r1[0], r1[1]);\r\n        // const [a, b, c]: Txyz = vecCross(r2[1], r2[2]);\r\n        // const [x1, y1, z1]: Txyz = r2[0];\r\n        // const d: number = a * x1 + b * y1 + c * z1;\r\n        // const isect: Txyz = mathjs.intersect(r1[0], vecAdd(r1[0], r1[1]), [a, b, c, d] );\r\n        // if (isect) {\r\n        //     if (met === 2)  {\r\n        //         return isect;\r\n        //     } else if (met === 1) {\r\n        //         if (isOnRay(isect, p0, p1)) { return isect; }\r\n        //     } else if (met === 0) {\r\n        //         if (isOnLineSegment(isect, p0, p1)) { return isect; }\r\n        //     } else {\r\n        //         throw new Error('Error calculating intersection. Intersection method not valid. Must be 0, 1, or 2.');\r\n        //     }\r\n        // }\r\n        // return null;\r\n    } else {\r\n        throw new Error('Error calculating intersection. Elements to intersect must be either rays or planes.');\r\n    }\r\n}\r\n\r\nexport function intersectRayRay(r1: TRay, r2: TRay, met: number): Txyz {\r\n    const dc: Txyz = vecFromTo(r1[0], r2[0]);\r\n    const da: Txyz = r1[1];\r\n    const db: Txyz = r2[1];\r\n    if (vecDot(dc, vecCross(da, db)) !== 0) { return null; }\r\n    const da_x_db: Txyz = vecCross(da, db);\r\n    const da_x_db_norm2: number = (da_x_db[0] * da_x_db[0]) + (da_x_db[1] * da_x_db[1]) + (da_x_db[2] * da_x_db[2]);\r\n    if (da_x_db_norm2 === 0) { return null; }\r\n    const s = vecDot(vecCross(dc, db), da_x_db) / da_x_db_norm2;\r\n    const t = vecDot(vecCross(dc, da), da_x_db) / da_x_db_norm2;\r\n    switch (met) {\r\n        case 2:\r\n            return vecAdd(r1[0], vecMult(da, s));\r\n        case 1:\r\n            if ((s >= 0) && (t >= 0)) {\r\n                return vecAdd(r1[0], vecMult(da, s));\r\n            }\r\n            return null;\r\n        case 0:\r\n            if ((s >= 0 && s <= 1) && (t >= 0 && t <= 1)) {\r\n                return vecAdd(r1[0], vecMult(da, s));\r\n            }\r\n            return null;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function intersectRayPlane(r: TRay, p: TPlane, met: number): Txyz {\r\n    const normal: Txyz = vecCross(p[1], p[2]);\r\n    const normal_dot_r: number = vecDot(normal, r[1]);\r\n    if (normal_dot_r === 0) { return null; }\r\n    const u: number = vecDot(normal, vecFromTo(r[0], p[0])) / normal_dot_r;\r\n    switch (met) {\r\n        case 2:\r\n            return vecAdd(r[0], vecMult(r[1], u));\r\n        case 1:\r\n            if (u >= 0) {\r\n                return vecAdd(r[0], vecMult(r[1], u));\r\n            }\r\n            return null;\r\n        case 0:\r\n            if (u >= 0 && u <= 1) {\r\n                return vecAdd(r[0], vecMult(r[1], u));\r\n            }\r\n            return null;\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function project(c: Txyz, r: TRay|TPlane, met: number = 2): Txyz {\r\n    if (r.length === 2) {\r\n        return projectCoordOntoRay(c, r, met);\r\n        // const tjs_point_proj: three.Vector3 = new three.Vector3(c[0], c[1], c[2]);\r\n        // const tjs_origin: three.Vector3 =  new three.Vector3(r[0][0], r[0][1], r[0][2]);\r\n        // const p2: Txyz = vecAdd(r[0], r[1]);\r\n        // const tjs_point2: three.Vector3 =  new three.Vector3(p2[0], p2[1], p2[2]);\r\n        // const tjs_new_point: three.Vector3 = new three.Vector3();\r\n        // const tjs_line: three.Line3 = new three.Line3(tjs_origin, tjs_point2);\r\n        // // project\r\n        // tjs_line.closestPointToPoint( tjs_point_proj, false, tjs_new_point );\r\n        // return [tjs_new_point.x, tjs_new_point.y, tjs_new_point.z];\r\n    } else if (r.length === 3) {\r\n        return projectCoordOntoPlane(c, r);\r\n        // const tjs_point_proj: three.Vector3 = new three.Vector3(c[0], c[1], c[2]);\r\n        // const tjs_new_point: three.Vector3 = new three.Vector3();\r\n        // const normal: Txyz = vecCross(r[1], r[2]);\r\n        // const tjs_normal: three.Vector3 = new three.Vector3(normal[0], normal[1], normal[2]);\r\n        // const tjs_origin: three.Vector3 = new three.Vector3(r[0][0], r[0][1], r[0][2]);\r\n        // const tjs_plane: three.Plane = new three.Plane();\r\n        // // project\r\n        // tjs_plane.setFromNormalAndCoplanarPoint( tjs_normal, tjs_origin );\r\n        // tjs_plane.projectPoint(tjs_point_proj, tjs_new_point);\r\n        // return [tjs_new_point.x, tjs_new_point.y, tjs_new_point.z];\r\n    } else {\r\n        throw new Error('Error calculating projection. Projection must be onto either rays or planes.');\r\n    }\r\n}\r\n\r\nexport function projectCoordOntoRay(c: Txyz, r: TRay, met: number): Txyz {\r\n    const vec: Txyz = vecFromTo(r[0], c);\r\n    const dot: number = vecDot(vec, vecNorm(r[1]));\r\n    switch (met) {\r\n        case 2:\r\n            return vecAdd(r[0], vecSetLen(r[1], dot));\r\n        case 1:\r\n            if (dot <= 0) {\r\n                return r[0].slice() as Txyz;\r\n            }\r\n            return vecAdd(r[0], vecSetLen(r[1], dot));\r\n        case 0:\r\n            const length: number = vecLen(r[1]);\r\n            if (dot <= 0) {\r\n                return r[0].slice() as Txyz;\r\n            } else if (dot >= length) {\r\n                return vecAdd(r[0], r[1]);\r\n            }\r\n            return vecAdd(r[0], vecSetLen(r[1], dot));\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport function projectCoordOntoPlane(c: Txyz, p: TPlane): Txyz {\r\n    const vec_to_c: Txyz = vecFromTo(p[0], c);\r\n    const pln_z_vec: Txyz = vecCross(p[1], p[2]);\r\n    const vec_a: Txyz = vecCross(vec_to_c, pln_z_vec);\r\n    if (vecLen(vec_a) === 0) { return p[0].slice() as Txyz; }\r\n    const vec_b: Txyz = vecCross(vec_a, pln_z_vec);\r\n    const dot: number = vecDot(vec_to_c, vecNorm(vec_b));\r\n    return vecAdd(p[0], vecSetLen(vec_b, dot));\r\n}\r\n","import * as three from 'three';\r\nimport { vecNorm, vecCross } from './vectors';\r\ntype Txyz = [number, number, number]; // x, y, z\r\ntype TPlane = [Txyz, Txyz, Txyz]; // origin, xaxis, yaxis\r\ntype TRay = [Txyz, Txyz]; // origin, dir\r\n\r\nexport function multMatrix(xyz: Txyz, m: three.Matrix4): Txyz {\r\n    const v2: three.Vector3 = new three.Vector3(...xyz as Txyz);\r\n    v2.applyMatrix4(m);\r\n    return v2.toArray() as Txyz;\r\n}\r\n\r\nexport function mirrorMatrix(plane: TPlane): three.Matrix4 {\r\n    const origin: Txyz = plane[0];\r\n    const normal: Txyz = vecCross(plane[1], plane[2]);\r\n    // plane normal\r\n    const [a, b, c]: number[] = vecNorm(normal);\r\n    // rotation matrix\r\n    const matrix_mirror: three.Matrix4 = new three.Matrix4();\r\n    matrix_mirror.set(\r\n        1 - (2 * a * a), -2 * a * b, -2 * a * c, 0,\r\n        -2 * a * b, 1 - (2 * b * b), -2 * b * c, 0,\r\n        -2 * a * c, -2 * b * c, 1 - (2 * c * c), 0,\r\n        0, 0, 0, 1\r\n    );\r\n    // translation matrix\r\n    const matrix_trn1: three.Matrix4 = new three.Matrix4();\r\n    matrix_trn1.makeTranslation(-origin[0], -origin[1], -origin[2]);\r\n    const matrix_trn2: three.Matrix4 = new three.Matrix4();\r\n    matrix_trn2.makeTranslation(origin[0], origin[1], origin[2]);\r\n    // final matrix\r\n    const move_mirror_move: three.Matrix4 = matrix_trn2.multiply(matrix_mirror.multiply(matrix_trn1));\r\n    // do the xform\r\n    return move_mirror_move;\r\n}\r\n\r\nexport function rotateMatrix(ray: TRay, angle: number): three.Matrix4 {\r\n    const origin: Txyz = ray[0];\r\n    const axis: Txyz = vecNorm(ray[1]);\r\n    // rotation matrix\r\n    const matrix_rot: three.Matrix4 = new three.Matrix4();\r\n    matrix_rot.makeRotationAxis(new three.Vector3(...axis), angle);\r\n    // translation matrix\r\n    const matrix_trn1: three.Matrix4 = new three.Matrix4();\r\n    matrix_trn1.makeTranslation(-origin[0], -origin[1], -origin[2]);\r\n    const matrix_trn2: three.Matrix4 = new three.Matrix4();\r\n    matrix_trn2.makeTranslation(origin[0], origin[1], origin[2]);\r\n    // final matrix\r\n    const move_rot_move: three.Matrix4 = matrix_trn2.multiply(matrix_rot.multiply(matrix_trn1));\r\n    // do the xform\r\n    return move_rot_move;\r\n}\r\n\r\nexport function scaleMatrix(plane: TPlane, factor: Txyz): three.Matrix4 {\r\n    // scale matrix\r\n    const matrix_scale: three.Matrix4 = new three.Matrix4();\r\n    matrix_scale.makeScale(factor[0], factor[1], factor[2]);\r\n    // xform matrix\r\n    const matrix_xform1: three.Matrix4 = xformMatrix(plane, true);\r\n    const matrix_xform2: three.Matrix4 = xformMatrix(plane, false);\r\n    // final matrix\r\n    const xform_scale_xform: three.Matrix4 = matrix_xform2.multiply(matrix_scale.multiply(matrix_xform1));\r\n    // do the xform\r\n    return xform_scale_xform;\r\n}\r\n\r\nexport function xfromSourceTargetMatrix(source_plane: TPlane, target_plane: TPlane): three.Matrix4 {\r\n    // matrix to xform from source to gcs, then from gcs to target\r\n    const matrix_source_to_gcs: three.Matrix4 = xformMatrix(source_plane, true);\r\n    const matrix_gcs_to_target: three.Matrix4 = xformMatrix(target_plane, false);\r\n    // final matrix\r\n    const xform: three.Matrix4 = matrix_gcs_to_target.multiply(matrix_source_to_gcs);\r\n    // return the matrix\r\n    return xform;\r\n}\r\n\r\n// ================================================================================================\r\n// Helper functions\r\n// ================================================================================================\r\nexport function xformMatrix(plane: TPlane, neg: boolean): three.Matrix4 {\r\n    const o: three.Vector3 = new three.Vector3(...plane[0]);\r\n    const x: three.Vector3 = new three.Vector3(...plane[1]);\r\n    const y: three.Vector3 = new three.Vector3(...plane[2]);\r\n    const z: three.Vector3 = new three.Vector3(...vecCross(plane[1], plane[2]));\r\n    if (neg) {\r\n        o.negate();\r\n    }\r\n    // origin translate matrix\r\n    const m1: three.Matrix4 = new three.Matrix4();\r\n    m1.setPosition(o);\r\n    // xfrom matrix\r\n    const m2: three.Matrix4 = new three.Matrix4();\r\n    m2.makeBasis(x, y, z);\r\n    // combine two matrices\r\n    const m3: three.Matrix4 = new three.Matrix4();\r\n    if (neg) {\r\n        const m2x = (new three.Matrix4()).getInverse(m2);\r\n        // first translate to origin, then xform, so m2 x m1\r\n        m3.multiplyMatrices(m2x, m1);\r\n    } else {\r\n        // first xform, then translate to origin, so m1 x m2\r\n        m3.multiplyMatrices(m1, m2);\r\n    }\r\n    // return the combined matrix\r\n    return m3;\r\n}\r\n\r\n// ---------------------------------------------------------------------------------\r\n\r\n// function _matrixFromXYZ(pts: Txyz[],\r\n//     from_origin: Txyz, from_vectors: Txyz[],\r\n//     to_origin: Txyz, to_vectors: Txyz[]): number[][] {\r\n\r\n//     const e1: three.Vector3 = new three.Vector3(from_vectors[0][0]).normalize();\r\n//     const e2: three.Vector3 = new three.Vector3(from_vectors[0][1]).normalize();\r\n//     const e3: three.Vector3 = new three.Vector3(from_vectors[0][2]).normalize();\r\n\r\n//     const b1: three.Vector3 = new three.Vector3(to_vectors[0][0]).normalize();\r\n//     const b2: three.Vector3 = new three.Vector3(to_vectors[0][1]).normalize();\r\n//     const b3: three.Vector3 = new three.Vector3(to_vectors[0][2]).normalize();\r\n\r\n//     if (e1.dot(e2) === 0) { throw new Error('Orthonormal initial basis required'); }\r\n//     if (e1.dot(e3) === 0) { throw new Error('Orthonormal initial basis required'); }\r\n//     if (e2.dot(e3) === 0) { throw new Error('Orthonormal initial basis required'); }\r\n//     if (b1.dot(b2) === 0) { throw new Error('Orthonormal initial basis required'); }\r\n//     if (b1.dot(b3) === 0) { throw new Error('Orthonormal initial basis required'); }\r\n//     if (b2.dot(b3) === 0) { throw new Error('Orthonormal initial basis required'); }\r\n\r\n//     const matrix: three.Matrix3 = new three.Matrix3();\r\n//     matrix.set(e1.dot(b1), e1.dot(b2), e1.dot(b3),\r\n//     e2.dot(b1), e2.dot(b2), e2.dot(b3),\r\n//     e3.dot(b1), e3.dot(b2), e3.dot(b3));\r\n\r\n//     const t_x: number = to_origin[0] - from_origin[0];\r\n//     const t_y: number = to_origin[1] - from_origin[1];\r\n//     const t_z: number = to_origin[2] - from_origin[2];\r\n\r\n//     return [[e1.dot(b1), e1.dot(b2), e1.dot(b3), t_x],\r\n//     [e2.dot(b1), e2.dot(b2), e2.dot(b3), t_y],\r\n//     [e3.dot(b1), e3.dot(b2), e3.dot(b3), t_z],\r\n//     [0, 0, 0, 1]];\r\n// }\r\n\r\n// export function scaleMatrix(plane: TPlane, factor: Txyz): three.Matrix4 {\r\n//     // scale matrix\r\n//     const matrix_scale: three.Matrix4 = new three.Matrix4();\r\n//     matrix_scale.makeScale(factor[0], factor[1], factor[2]);\r\n//     // xform matrix\r\n//     const matrix_xform1: three.Matrix4 = _xformMatrixFromXYZVectors(\r\n//         plane[0], plane[1], plane[2], true);\r\n//     const matrix_xform2: three.Matrix4 = _xformMatrixFromXYZVectors(\r\n//         plane[0], plane[1], plane[2], false);\r\n//     // final matrix\r\n//     const xform_scale_xform: three.Matrix4 = matrix_xform2.multiply(matrix_scale.multiply(matrix_xform1));\r\n//     // do the xform\r\n//     return xform_scale_xform;\r\n// }\r\n\r\n\r\n// function _dotVectors(v1: three.Vector3, v2: three.Vector3): number {\r\n//     return v1.dot(v2);\r\n// }\r\n\r\n// function _xformMatrixNeg(o: three.Vector3, x: three.Vector3, y: three.Vector3): three.Matrix4 {\r\n//     const m1: three.Matrix4 = new three.Matrix4();\r\n//     const o_neg: three.Vector3 = o.clone().negate();\r\n//     m1.setPosition(o_neg);\r\n//     const m2: three.Matrix4 = new three.Matrix4();\r\n//     m2.makeBasis(x.normalize(), y.normalize(), _crossVectors(x, y, true));\r\n//     m2.getInverse(m2);\r\n//     const m3: three.Matrix4 = new three.Matrix4();\r\n//     // first translate to (0,0,0), then xform, so m1 x m2\r\n//     m3.multiplyMatrices(m2, m1);\r\n//     return m3;\r\n// }\r\n\r\n// function xformMatrixPos(o: three.Vector3, x: three.Vector3, y: three.Vector3): three.Matrix4 {\r\n//     const m1: three.Matrix4 = new three.Matrix4();\r\n//     m1.setPosition(o);\r\n//     const m2: three.Matrix4 = new three.Matrix4();\r\n//     m2.makeBasis(x.normalize(), y.normalize(), _crossVectors(x, y, true));\r\n//     const m3: three.Matrix4 = new three.Matrix4();\r\n//     // first xform, then translate to origin, so m1 x m2\r\n//     m3.multiplyMatrices(m1, m2);\r\n//     return m3;\r\n// }\r\n\r\n\r\n\r\n// function _xformMatrixFromXYZVectors(o: Txyz, xaxis: Txyz, xyplane: Txyz, neg: boolean): three.Matrix4 {\r\n//     const x_vec: three.Vector3 = new three.Vector3(...xaxis).normalize();\r\n//     const xyplane_vec: three.Vector3 = new three.Vector3(...xyplane).normalize();\r\n//     const z_vec: three.Vector3 = _crossVectors(x_vec, xyplane_vec);\r\n//     const y_vec: three.Vector3 = _crossVectors(z_vec, x_vec);\r\n//     if (neg) {\r\n//         return _xformMatrixNeg(new three.Vector3(...o), x_vec, y_vec);\r\n//     }\r\n//     return xformMatrixPos(new three.Vector3(...o), x_vec, y_vec);\r\n// }\r\n\r\n// export function xfromSourceTargetMatrix(source_plane: TPlane, target_plane: TPlane): three.Matrix4 {\r\n//     // matrix to xform from source to gcs, then from gcs to target\r\n//     const matrix_source_to_gcs: three.Matrix4 = _xformMatrixFromXYZVectors(\r\n//         source_plane[0], source_plane[1], source_plane[2], true);\r\n//     const matrix_gcs_to_target: three.Matrix4 = _xformMatrixFromXYZVectors(\r\n//         target_plane[0], target_plane[1], target_plane[2], false);\r\n//     // final matrix\r\n//     const xform: three.Matrix4 = matrix_gcs_to_target.multiply(matrix_source_to_gcs);\r\n//     // return the matrix\r\n//     return xform;\r\n// }\r\n\r\n// function _crossVectors(v1: three.Vector3, v2: three.Vector3, norm: boolean = false): three.Vector3 {\r\n//     const v3: three.Vector3 = new three.Vector3();\r\n//     v3.crossVectors(v1, v2);\r\n//     if (norm) { v3.normalize(); }\r\n//     return v3;\r\n// }\r\n","import * as THREE from 'three';\r\nimport { GIModel } from '@libs/geo-info/GIModel';\r\nimport { TEntTypeIdx, EEntType, Txyz } from '../geo-info/common';\r\n\r\n// ----\r\n// here are three different version of the function to create the threejs mesh, used for raycasting\r\n// the first creates multiple meshes, the second one big mesh, the third one big buffered mesh\r\n// performance tests are not very clear, in theory the big buffered mesh should be faster,\r\n// but it seems that is not the case, the big non-buffered mesh seems faster\r\n// so for now that is the one that is being used\r\n// ----\r\n\r\nexport function createMultipleMeshesTjs(__model__: GIModel, ents_arrs: TEntTypeIdx[]): THREE.Mesh[] {\r\n    // Note that for meshes, faces must be pointed towards the origin of the ray in order to be detected;\r\n    // intersections of the ray passing through the back of a face will not be detected.\r\n    // To raycast against both faces of an object, you'll want to set the material's side property to THREE.DoubleSide.\r\n    const mat_tjs: THREE.Material = new THREE.MeshBasicMaterial();\r\n    mat_tjs.side = THREE.DoubleSide;\r\n    // get all unique posis\r\n    const posis_i_set: Set<number> = new Set();\r\n    for (const [ent_type, ent_i] of ents_arrs) {\r\n        const ent_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n        ent_posis_i.forEach( ent_posi_i => posis_i_set.add(ent_posi_i) );\r\n    }\r\n    // create tjs vectors for each posi and save them in a sparse array\r\n    // the index to the array is the posi_i\r\n    const posis_tjs: THREE.Vector3[] = [];\r\n    for (const posi_i of Array.from(posis_i_set)) {\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        const posi_tjs = new THREE.Vector3(...xyz);\r\n        posis_tjs[posi_i] = posi_tjs;\r\n    }\r\n    // get an array of all the faces\r\n    const faces_i: number[] = [];\r\n    for (const [ent_type, ent_i] of ents_arrs) {\r\n        switch (ent_type) {\r\n            case EEntType.FACE:\r\n                faces_i.push(ent_i);\r\n                break;\r\n            default:\r\n                const coll_faces_i: number[] = __model__.modeldata.geom.nav.navAnyToFace(ent_type, ent_i);\r\n                coll_faces_i.forEach( coll_face_i => faces_i.push(coll_face_i) );\r\n                break;\r\n        }\r\n    }\r\n    // create tjs meshes\r\n    const meshes_tjs: THREE.Mesh[] = [];\r\n    for (const face_i of faces_i) {\r\n        // create the tjs geometry\r\n        const geom_tjs = new THREE.Geometry();\r\n        const tris_i: number[] = __model__.modeldata.geom.nav.navFaceToTri(face_i);\r\n        for (const tri_i of tris_i) {\r\n            const tri_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.TRI, tri_i);\r\n            // add the three vertices to the geometry\r\n            const a: number = geom_tjs.vertices.push(posis_tjs[tri_posis_i[0]]) - 1;\r\n            const b: number = geom_tjs.vertices.push(posis_tjs[tri_posis_i[1]]) - 1;\r\n            const c: number = geom_tjs.vertices.push(posis_tjs[tri_posis_i[2]]) - 1;\r\n            // add the tjs tri to the geometry\r\n            geom_tjs.faces.push( new THREE.Face3( a, b, c ) );\r\n        }\r\n        // create the mesh, assigning the material\r\n        meshes_tjs.push( new THREE.Mesh(geom_tjs, mat_tjs) );\r\n    }\r\n    return meshes_tjs;\r\n}\r\nexport function createSingleMeshTjs(__model__: GIModel, ents_arrs: TEntTypeIdx[]): [THREE.Mesh, number[]] {\r\n    // Note that for meshes, faces must be pointed towards the origin of the ray in order to be detected;\r\n    // intersections of the ray passing through the back of a face will not be detected.\r\n    // To raycast against both faces of an object, you'll want to set the material's side property to THREE.DoubleSide.\r\n    const mat_tjs: THREE.Material = new THREE.MeshBasicMaterial();\r\n    mat_tjs.side = THREE.DoubleSide;\r\n    // get all unique posis\r\n    const posis_i_set: Set<number> = new Set();\r\n    for (const [ent_type, ent_i] of ents_arrs) {\r\n        const ent_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n        ent_posis_i.forEach( ent_posi_i => posis_i_set.add(ent_posi_i) );\r\n    }\r\n    // create tjs vectors for each posi and save them in a sparse array\r\n    // the index to the array is the posi_i\r\n    const posis_tjs: THREE.Vector3[] = [];\r\n    for (const posi_i of Array.from(posis_i_set)) {\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        const posi_tjs = new THREE.Vector3(...xyz);\r\n        posis_tjs[posi_i] = posi_tjs;\r\n    }\r\n    // get an array of all the pgons\r\n    const pgons_i: number[] = [];\r\n    for (const [ent_type, ent_i] of ents_arrs) {\r\n        switch (ent_type) {\r\n            case EEntType.PGON:\r\n                pgons_i.push(ent_i);\r\n                break;\r\n            default:\r\n                const ent_pgons_i: number[] = __model__.modeldata.geom.nav.navAnyToPgon(ent_type, ent_i);\r\n                ent_pgons_i.forEach( ent_pgon_i => pgons_i.push(ent_pgon_i) );\r\n                break;\r\n        }\r\n    }\r\n    // create tjs meshes\r\n    const geom_tjs = new THREE.Geometry();\r\n    const idx_to_pgon_i: number[] = [];\r\n    for (const pgon_i of pgons_i) {\r\n        // create the tjs geometry\r\n        const tris_i: number[] = __model__.modeldata.geom.nav.navAnyToTri(EEntType.PGON, pgon_i);\r\n        for (const tri_i of tris_i) {\r\n            const tri_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.TRI, tri_i);\r\n            // add the three vertices to the geometry\r\n            const a: number = geom_tjs.vertices.push(posis_tjs[tri_posis_i[0]]) - 1;\r\n            const b: number = geom_tjs.vertices.push(posis_tjs[tri_posis_i[1]]) - 1;\r\n            const c: number = geom_tjs.vertices.push(posis_tjs[tri_posis_i[2]]) - 1;\r\n            // add the tjs tri to the geometry\r\n            const idx_tjs: number = geom_tjs.faces.push( new THREE.Face3( a, b, c ) ) - 1;\r\n            idx_to_pgon_i[idx_tjs] = pgon_i;\r\n        }\r\n    }\r\n    // create the mesh, assigning the material\r\n    return [new THREE.Mesh(geom_tjs, mat_tjs), idx_to_pgon_i];\r\n}\r\nexport function createSingleMeshBufTjs(__model__: GIModel, ents_arrs: TEntTypeIdx[]): THREE.Mesh {\r\n    // Note that for meshes, faces must be pointed towards the origin of the ray in order to be detected;\r\n    // intersections of the ray passing through the back of a face will not be detected.\r\n    // To raycast against both faces of an object, you'll want to set the material's side property to THREE.DoubleSide.\r\n    const mat_tjs: THREE.Material = new THREE.MeshBasicMaterial();\r\n    mat_tjs.side = THREE.DoubleSide;\r\n    // get all unique posis\r\n    const posis_i_set: Set<number> = new Set();\r\n    for (const [ent_type, ent_i] of ents_arrs) {\r\n        const ent_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(ent_type, ent_i);\r\n        ent_posis_i.forEach( ent_posi_i => posis_i_set.add(ent_posi_i) );\r\n    }\r\n    // create a flat list of xyz coords\r\n    const xyzs_flat: number[] = [];\r\n    const posi_i_to_xyzs_map: Map<number, number> = new Map();\r\n    const unique_posis_i: number[] = Array.from(posis_i_set);\r\n    for (let i = 0; i < unique_posis_i.length; i++) {\r\n        const posi_i: number = unique_posis_i[i];\r\n        const xyz: Txyz = __model__.modeldata.attribs.query.getPosiCoords(posi_i);\r\n        xyzs_flat.push(...xyz);\r\n        posi_i_to_xyzs_map.set(posi_i, i);\r\n    }\r\n    // get an array of all the faces\r\n    const faces_i: number[] = [];\r\n    for (const [ent_type, ent_i] of ents_arrs) {\r\n        switch (ent_type) {\r\n            case EEntType.FACE:\r\n                faces_i.push(ent_i);\r\n                break;\r\n            default:\r\n                const coll_faces_i: number[] = __model__.modeldata.geom.nav.navAnyToFace(ent_type, ent_i);\r\n                coll_faces_i.forEach( coll_face_i => faces_i.push(coll_face_i) );\r\n                break;\r\n        }\r\n    }\r\n    // create tjs meshes\r\n    const tris_flat: number[] = [];\r\n    for (const face_i of faces_i) {\r\n        // create the tjs geometry\r\n        const tris_i: number[] = __model__.modeldata.geom.nav.navFaceToTri(face_i);\r\n        for (const tri_i of tris_i) {\r\n            const tri_posis_i: number[] = __model__.modeldata.geom.nav.navAnyToPosi(EEntType.TRI, tri_i);\r\n            tris_flat.push( posi_i_to_xyzs_map.get( tri_posis_i[0]) );\r\n            tris_flat.push( posi_i_to_xyzs_map.get( tri_posis_i[1]) );\r\n            tris_flat.push( posi_i_to_xyzs_map.get( tri_posis_i[2]) );\r\n        }\r\n        // create the mesh, assigning the material\r\n    }\r\n    const geom_tjs = new THREE.BufferGeometry();\r\n    geom_tjs.setIndex( tris_flat );\r\n    // geom_tjs.addAttribute( 'position', new THREE.Float32BufferAttribute( xyzs_flat, 3 ) );\r\n    geom_tjs.setAttribute( 'position', new THREE.Float32BufferAttribute( xyzs_flat, 3 ) );\r\n    return new THREE.Mesh(geom_tjs, mat_tjs);\r\n}\r\n","import * as three from 'three';\r\nimport { Vector3, Triangle } from 'three';\r\ntype Txyz = [number, number, number];\r\nconst EPS = 1e-6;\r\n\r\nexport function normal(v1: Txyz, v2: Txyz, v3: Txyz, norm: boolean = false): Txyz {\r\n    const _v1: three.Vector3 = new Vector3(...v1);\r\n    const _v2: three.Vector3 = new Vector3(...v2);\r\n    const _v3: three.Vector3 = new Vector3(...v3);\r\n    const t: three.Triangle = new Triangle(_v1, _v2, _v3);\r\n    const _normal: three.Vector3 = new Vector3();\r\n    t.getNormal(_normal);\r\n    if (norm) {\r\n        _normal.normalize();\r\n    }\r\n    return _normal.toArray() as Txyz;\r\n}\r\n\r\nexport function area(v1: Txyz, v2: Txyz, v3: Txyz): number {\r\n    const _v1: three.Vector3 = new Vector3(...v1);\r\n    const _v2: three.Vector3 = new Vector3(...v2);\r\n    const _v3: three.Vector3 = new Vector3(...v3);\r\n    const t: three.Triangle = new Triangle(_v1, _v2, _v3);\r\n    return t.getArea();\r\n}\r\n","import * as three from 'three';\r\nimport * as mathjs from 'mathjs';\r\ntype Txyz = [number, number, number];\r\nconst EPS = 1e-6;\r\n\r\n//  Vectors using Txyz =======================================================================================================\r\nexport function vecEqual(v1: Txyz, v2: Txyz, tol: number): boolean {\r\n    if (Math.abs(v1[0] - v2[0]) > tol) { return false; }\r\n    if (Math.abs(v1[1] - v2[1]) > tol) { return false; }\r\n    if (Math.abs(v1[2] - v2[2]) > tol) { return false; }\r\n    return true;\r\n}\r\n\r\nexport function vecSub(v1: Txyz, v2: Txyz, norm: boolean = false): Txyz {\r\n    const v3: Txyz = [\r\n        v1[0] - v2[0],\r\n        v1[1] - v2[1],\r\n        v1[2] - v2[2],\r\n    ];\r\n    if (norm) {\r\n        return vecNorm(v3);\r\n    }\r\n    return v3;\r\n}\r\n\r\nexport function vecsSub(vecs: Txyz[], norm: boolean = false): Txyz {\r\n    const vec_sub: Txyz = [0, 0, 0];\r\n    for (const vec of vecs) {\r\n        vec_sub[0] = vec_sub[0] - vec[0];\r\n        vec_sub[1] = vec_sub[1] - vec[1];\r\n        vec_sub[2] = vec_sub[2] - vec[2];\r\n    }\r\n    if (norm) {\r\n        return vecNorm(vec_sub);\r\n    }\r\n    return vec_sub;\r\n}\r\n\r\nexport function vecAdd(v1: Txyz, v2: Txyz, norm: boolean = false): Txyz {\r\n    const v3: Txyz = [\r\n        v1[0] + v2[0],\r\n        v1[1] + v2[1],\r\n        v1[2] + v2[2],\r\n    ];\r\n    if (norm) {\r\n        return vecNorm(v3);\r\n    }\r\n    return v3;\r\n}\r\n\r\nexport function vecsAdd(vecs: Txyz[], norm: boolean = false): Txyz {\r\n    const vec_add: Txyz = [0, 0, 0];\r\n    for (const vec of vecs) {\r\n        vec_add[0] = vec_add[0] + vec[0];\r\n        vec_add[1] = vec_add[1] + vec[1];\r\n        vec_add[2] = vec_add[2] + vec[2];\r\n    }\r\n    if (norm) {\r\n        return vecNorm(vec_add);\r\n    }\r\n    return vec_add;\r\n}\r\n\r\nexport function vecSum(vecs: Txyz[], norm: boolean = false): Txyz {\r\n    const vec_sum: Txyz = [0, 0, 0];\r\n    for (const vec of vecs) {\r\n        vec_sum[0] += vec[0];\r\n        vec_sum[1] += vec[1];\r\n        vec_sum[2] += vec[2];\r\n    }\r\n    if (norm) {\r\n        return vecNorm(vec_sum);\r\n    }\r\n    return vec_sum;\r\n}\r\n\r\nexport function vecAvg(vecs: Txyz[]): Txyz {\r\n    const vec_sum: Txyz = [0, 0, 0];\r\n    for (const vec of vecs) {\r\n        vec_sum[0] += vec[0];\r\n        vec_sum[1] += vec[1];\r\n        vec_sum[2] += vec[2];\r\n    }\r\n    const divisor: number = vecs.length;\r\n    return [\r\n        vec_sum[0] / divisor,\r\n        vec_sum[1] / divisor,\r\n        vec_sum[2] / divisor\r\n    ];\r\n}\r\n\r\nexport function vecDiv(vec: Txyz, divisor: number): Txyz {\r\n    return [\r\n        vec[0] / divisor,\r\n        vec[1] / divisor,\r\n        vec[2] / divisor\r\n    ];\r\n}\r\n\r\nexport function vecMult(vec: Txyz, multiplier: number): Txyz {\r\n    return [\r\n        vec[0] * multiplier,\r\n        vec[1] * multiplier,\r\n        vec[2] * multiplier\r\n    ];\r\n}\r\n\r\nexport function vecCross(v1: Txyz, v2: Txyz, norm: boolean = false): Txyz {\r\n    const n: Txyz = mathjs.cross(v1, v2);\r\n    if (norm) {\r\n        return vecNorm(n);\r\n    }\r\n    return n;\r\n}\r\n\r\nexport function vecDot(v1: Txyz, v2: Txyz): number {\r\n    return mathjs.dot(v1, v2);\r\n}\r\n\r\nexport function vecNorm(v: Txyz): Txyz {\r\n    const length: number = Math.hypot(...v);\r\n    if (length === 0) {return [0, 0, 0]; }\r\n    return [v[0] / length, v[1] / length, v[2] / length];\r\n}\r\n\r\nexport function vecRot(vec: Txyz, axis: Txyz, ang: number): Txyz {\r\n    const vec_tjs: three.Vector3 = new three.Vector3(...vec);\r\n    const axis_tjs: three.Vector3 = new three.Vector3(...axis);\r\n    vec_tjs.applyAxisAngle(axis_tjs, ang);\r\n    return [vec_tjs.x, vec_tjs.y, vec_tjs.z];\r\n}\r\n\r\nexport function vecAng(v1: Txyz, v2: Txyz): number {\r\n    const v1n: Txyz = vecNorm(v1);\r\n    const v2n: Txyz = vecNorm(v2);\r\n    const d: number = mathjs.dot(v1n, v2n);\r\n    return Math.acos( d );\r\n}\r\n\r\nexport function vecAng2(v1: Txyz, v2: Txyz, n: Txyz): number {\r\n    const v1n: Txyz = vecNorm(v1);\r\n    const v2n: Txyz = vecNorm(v2);\r\n    const d: number = mathjs.dot(v1n, v2n);\r\n    if (d === 1) {\r\n        return 0;\r\n    } else if (d === -1) {\r\n        return Math.PI;\r\n    }\r\n    let angle: number = Math.acos( d );\r\n    const c: Txyz = mathjs.cross(v1n, v2n);\r\n    angle = angle * mathjs.compare(mathjs.dot(n, c), 0);\r\n    if (angle < 0) { angle = angle + (Math.PI * 2); }\r\n    return angle;\r\n}\r\n\r\nexport function vecLen(v: Txyz): number {\r\n    return Math.hypot(...v);\r\n}\r\nexport function vecSetLen(v: Txyz, len: number): Txyz {\r\n    const fac: number = len / Math.hypot(...v);\r\n    return [v[0] * fac, v[1] * fac, v[2] * fac];\r\n}\r\nexport function vecRev(v: Txyz): Txyz {\r\n    return [\r\n        v[0] * -1,\r\n        v[1] * -1,\r\n        v[2] * -1\r\n    ];\r\n}\r\n\r\nexport function vecFromTo(v1: Txyz, v2: Txyz): Txyz {\r\n    return vecSub(v2, v1);\r\n}\r\n\r\nexport function vecMakeOrtho(v1: Txyz, v2: Txyz): Txyz {\r\n    return vecCross(v2, vecCross(v1, v2));\r\n}\r\n\r\nexport function vecCodir(v1: Txyz, v2: Txyz) {\r\n    v1  = vecNorm(v1);\r\n    v2  = vecNorm(v2);\r\n    if (Math.abs(1 - mathjs.dot(v1, v2)) > EPS) { return false; }\r\n    return true;\r\n}\r\n\r\nexport function dist(p1: Txyz, p2: Txyz): number {\r\n    return mathjs.distance(p1, p2);\r\n}\r\n\r\n/**\r\n * Finds the normal to a set of points using Newell's method\r\n */\r\nexport function newellNorm(pts: Txyz[]): Txyz {\r\n\r\n    const normal: Txyz = [0, 0, 0];\r\n    for (let i = 0; i < pts.length - 1; i++) {\r\n        const p0: Txyz = pts[i];\r\n        const p1: Txyz = pts[i + 1];\r\n        normal[0] += (p0[1] - p1[1]) * (p0[2] + p1[2]);\r\n        normal[1] += (p0[2] - p1[2]) * (p0[0] + p1[0]);\r\n        normal[2] += (p0[0] - p1[0]) * (p0[1] + p1[1]);\r\n    }\r\n    return vecNorm(normal);\r\n}\r\n\r\n/**\r\n * Create new points between two points.\r\n */\r\nexport function interpByNum(pt1: Txyz, pt2: Txyz, num_points: number): Txyz[] {\r\n    if (num_points < 1) {return []; }\r\n    const sub_vec: Txyz = vecDiv(vecSub(pt2, pt1), num_points + 1);\r\n    const points: Txyz[] = [];\r\n    let next: Txyz = pt1;\r\n    for (let i = 0; i < num_points; i++) {\r\n        next = vecAdd(next, sub_vec);\r\n        points.push(next);\r\n    }\r\n    return points;\r\n}\r\nexport function interpByLen(pt1: Txyz, pt2: Txyz, len: number): Txyz[] {\r\n    const vec: Txyz = vecSub(pt2, pt1);\r\n    const num_points: number = Math.floor(vecLen(vec) / len);\r\n    const sub_vec: Txyz = vecMult(vecNorm(vec), len);\r\n    const points: Txyz[] = [];\r\n    let next: Txyz = pt1;\r\n    for (let i = 0; i < num_points; i++) {\r\n        next = vecAdd(next, sub_vec);\r\n        points.push(next);\r\n    }\r\n    return points;\r\n}\r\n\r\n","/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n * Port from https://github.com/mapbox/earcut (v2.1.2)\r\n */\r\n\r\nconst Earcut = {\r\n\r\n    triangulate: function ( data, holeIndices?, dim? ) {\r\n\r\n        dim = dim || 2;\r\n\r\n        const hasHoles = holeIndices && holeIndices.length;\r\n        const outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\r\n        let outerNode = linkedList( data, 0, outerLen, dim, true );\r\n        const triangles = [];\r\n\r\n        if ( ! outerNode ) { return triangles; }\r\n\r\n        let minX, minY, maxX, maxY, x, y, invSize;\r\n\r\n        if ( hasHoles ) { outerNode = eliminateHoles( data, holeIndices, outerNode, dim ); }\r\n\r\n        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n\r\n        if ( data.length > 80 * dim ) {\r\n\r\n            minX = maxX = data[ 0 ];\r\n            minY = maxY = data[ 1 ];\r\n\r\n            for ( let i = dim; i < outerLen; i += dim ) {\r\n\r\n                x = data[ i ];\r\n                y = data[ i + 1 ];\r\n                if ( x < minX ) { minX = x; }\r\n                if ( y < minY ) { minY = y; }\r\n                if ( x > maxX ) { maxX = x; }\r\n                if ( y > maxY ) { maxY = y; }\r\n\r\n            }\r\n\r\n            // minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n\r\n            invSize = Math.max( maxX - minX, maxY - minY );\r\n            invSize = invSize !== 0 ? 1 / invSize : 0;\r\n\r\n        }\r\n\r\n        earcutLinked( outerNode, triangles, dim, minX, minY, invSize );\r\n\r\n        return triangles;\r\n\r\n    }\r\n\r\n};\r\n\r\n// create a circular doubly linked list from polygon points in the specified winding order\r\n\r\nfunction linkedList( data, start, end, dim, clockwise ) {\r\n\r\n    let i, last;\r\n\r\n    if ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\r\n\r\n        for ( i = start; i < end; i += dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\r\n\r\n    } else {\r\n\r\n        for ( i = end - dim; i >= start; i -= dim ) { last = insertNode( i, data[ i ], data[ i + 1 ], last ); }\r\n\r\n    }\r\n\r\n    if ( last && equals( last, last.next ) ) {\r\n\r\n        removeNode( last );\r\n        last = last.next;\r\n\r\n    }\r\n\r\n    return last;\r\n\r\n}\r\n\r\n// eliminate colinear or duplicate points\r\n\r\nfunction filterPoints( start, end? ) {\r\n\r\n    if ( ! start ) { return start; }\r\n    if ( ! end ) { end = start; }\r\n\r\n    let p = start, again;\r\n\r\n    do {\r\n\r\n        again = false;\r\n\r\n        if ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\r\n\r\n            removeNode( p );\r\n            p = end = p.prev;\r\n            if ( p === p.next ) { break; }\r\n            again = true;\r\n\r\n        } else {\r\n\r\n            p = p.next;\r\n\r\n        }\r\n\r\n    } while ( again || p !== end );\r\n\r\n    return end;\r\n\r\n}\r\n\r\n// main ear slicing loop which triangulates a polygon (given as a linked list)\r\n\r\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass? ) {\r\n\r\n    if ( ! ear ) { return; }\r\n\r\n    // interlink polygon nodes in z-order\r\n\r\n    if ( ! pass && invSize ) { indexCurve( ear, minX, minY, invSize ); }\r\n\r\n    let stop = ear, prev, next;\r\n\r\n    // iterate through ears, slicing them one by one\r\n\r\n    while ( ear.prev !== ear.next ) {\r\n\r\n        prev = ear.prev;\r\n        next = ear.next;\r\n\r\n        if ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\r\n\r\n            // cut off the triangle\r\n            triangles.push( prev.i / dim );\r\n            triangles.push( ear.i / dim );\r\n            triangles.push( next.i / dim );\r\n\r\n            removeNode( ear );\r\n\r\n            // skipping the next vertice leads to less sliver triangles\r\n            ear = next.next;\r\n            stop = next.next;\r\n\r\n            continue;\r\n\r\n        }\r\n\r\n        ear = next;\r\n\r\n        // if we looped through the whole remaining polygon and can't find any more ears\r\n\r\n        if ( ear === stop ) {\r\n\r\n            // try filtering points and slicing again\r\n\r\n            if ( ! pass ) {\r\n\r\n                earcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\r\n\r\n                // if this didn't work, try curing all small self-intersections locally\r\n\r\n            } else if ( pass === 1 ) {\r\n\r\n                ear = cureLocalIntersections( ear, triangles, dim );\r\n                earcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\r\n\r\n            // as a last resort, try splitting the remaining polygon into two\r\n\r\n            } else if ( pass === 2 ) {\r\n\r\n                splitEarcut( ear, triangles, dim, minX, minY, invSize );\r\n\r\n            }\r\n\r\n            break;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// check whether a polygon node forms a valid ear with adjacent nodes\r\n\r\nfunction isEar( ear ) {\r\n\r\n    const a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\r\n\r\n    // now make sure we don't have other points inside the potential ear\r\n    let p = ear.next.next;\r\n\r\n    while ( p !== ear.prev ) {\r\n\r\n        if ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n        p = p.next;\r\n\r\n    }\r\n\r\n    return true;\r\n\r\n}\r\n\r\nfunction isEarHashed( ear, minX, minY, invSize ) {\r\n\r\n    const a = ear.prev,\r\n        b = ear,\r\n        c = ear.next;\r\n\r\n    if ( area( a, b, c ) >= 0 ) { return false; } // reflex, can't be an ear\r\n\r\n    // triangle bbox; min & max are calculated like this for speed\r\n\r\n    const minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\r\n        minTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\r\n        maxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\r\n        maxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\r\n\r\n    // z-order range for the current triangle bbox;\r\n\r\n    const minZ = zOrder( minTX, minTY, minX, minY, invSize ),\r\n        maxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\r\n\r\n    // first look for points inside the triangle in increasing z-order\r\n\r\n    let p = ear.nextZ;\r\n\r\n    while ( p && p.z <= maxZ ) {\r\n\r\n        if ( p !== ear.prev && p !== ear.next &&\r\n                pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n                area( p.prev, p, p.next ) >= 0 ) { return false; }\r\n        p = p.nextZ;\r\n\r\n    }\r\n\r\n    // then look for points in decreasing z-order\r\n\r\n    p = ear.prevZ;\r\n\r\n    while ( p && p.z >= minZ ) {\r\n\r\n        if ( p !== ear.prev && p !== ear.next &&\r\n                pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\r\n                area( p.prev, p, p.next ) >= 0 ) { return false; }\r\n\r\n        p = p.prevZ;\r\n\r\n    }\r\n\r\n    return true;\r\n\r\n}\r\n\r\n// go through all polygon nodes and cure small local self-intersections\r\n\r\nfunction cureLocalIntersections( start, triangles, dim ) {\r\n\r\n    let p = start;\r\n\r\n    do {\r\n\r\n        const a = p.prev, b = p.next.next;\r\n\r\n        if ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\r\n\r\n            triangles.push( a.i / dim );\r\n            triangles.push( p.i / dim );\r\n            triangles.push( b.i / dim );\r\n\r\n            // remove two nodes involved\r\n\r\n            removeNode( p );\r\n            removeNode( p.next );\r\n\r\n            p = start = b;\r\n\r\n        }\r\n\r\n        p = p.next;\r\n\r\n    } while ( p !== start );\r\n\r\n    return p;\r\n\r\n}\r\n\r\n// try splitting polygon into two and triangulate them independently\r\n\r\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\r\n\r\n    // look for a valid diagonal that divides the polygon into two\r\n\r\n    let a = start;\r\n\r\n    do {\r\n\r\n        let b = a.next.next;\r\n\r\n        while ( b !== a.prev ) {\r\n\r\n            if ( a.i !== b.i && isValidDiagonal( a, b ) ) {\r\n\r\n                // split the polygon in two by the diagonal\r\n\r\n                let c = splitPolygon( a, b );\r\n\r\n                // filter colinear points around the cuts\r\n\r\n                a = filterPoints( a, a.next );\r\n                c = filterPoints( c, c.next );\r\n\r\n                // run earcut on each half\r\n\r\n                earcutLinked( a, triangles, dim, minX, minY, invSize );\r\n                earcutLinked( c, triangles, dim, minX, minY, invSize );\r\n                return;\r\n\r\n            }\r\n\r\n            b = b.next;\r\n\r\n        }\r\n\r\n        a = a.next;\r\n\r\n    } while ( a !== start );\r\n\r\n}\r\n\r\n// link every hole into the outer loop, producing a single-ring polygon without holes\r\n\r\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\r\n\r\n    let queue = [], i, len, start, end, list;\r\n\r\n    for ( i = 0, len = holeIndices.length; i < len; i ++ ) {\r\n\r\n        start = holeIndices[ i ] * dim;\r\n        end = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\r\n        list = linkedList( data, start, end, dim, false );\r\n        if ( list === list.next ) { list.steiner = true; }\r\n        queue.push( getLeftmost( list ) );\r\n\r\n    }\r\n\r\n    queue.sort( compareX );\r\n\r\n    // process holes from left to right\r\n\r\n    for ( i = 0; i < queue.length; i ++ ) {\r\n\r\n        eliminateHole( queue[ i ], outerNode );\r\n        outerNode = filterPoints( outerNode, outerNode.next );\r\n\r\n    }\r\n\r\n    return outerNode;\r\n\r\n}\r\n\r\nfunction compareX( a, b ) {\r\n\r\n    return a.x - b.x;\r\n\r\n}\r\n\r\n// find a bridge between vertices that connects hole with an outer ring and and link it\r\n\r\nfunction eliminateHole( hole, outerNode ) {\r\n\r\n    outerNode = findHoleBridge( hole, outerNode );\r\n\r\n    if ( outerNode ) {\r\n\r\n        const b = splitPolygon( outerNode, hole );\r\n\r\n        filterPoints( b, b.next );\r\n\r\n    }\r\n\r\n}\r\n\r\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\r\n\r\nfunction findHoleBridge( hole, outerNode ) {\r\n\r\n    let p = outerNode;\r\n    const hx = hole.x;\r\n    const hy = hole.y;\r\n    let qx = - Infinity;\r\n    let m;\r\n\r\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\r\n    // segment's endpoint with lesser x will be potential connection point\r\n\r\n    do {\r\n\r\n        if ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\r\n\r\n            const x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\r\n\r\n            if ( x <= hx && x > qx ) {\r\n\r\n                qx = x;\r\n\r\n                if ( x === hx ) {\r\n\r\n                    if ( hy === p.y ) { return p; }\r\n                    if ( hy === p.next.y ) { return p.next; }\r\n\r\n                }\r\n\r\n                m = p.x < p.next.x ? p : p.next;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        p = p.next;\r\n\r\n    } while ( p !== outerNode );\r\n\r\n    if ( ! m ) { return null; }\r\n\r\n    if ( hx === qx ) { return m.prev; } // hole touches outer segment; pick lower endpoint\r\n\r\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\r\n    // if there are no points found, we have a valid connection;\r\n    // otherwise choose the point of the minimum angle with the ray as connection point\r\n\r\n    const stop = m;\r\n    const mx = m.x;\r\n    const my = m.y;\r\n    let tanMin = Infinity;\r\n    let tan;\r\n\r\n    p = m.next;\r\n\r\n    while ( p !== stop ) {\r\n\r\n        if ( hx >= p.x && p.x >= mx && hx !== p.x &&\r\n                        pointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\r\n\r\n            tan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\r\n\r\n            if ( ( tan < tanMin || ( tan === tanMin && p.x > m.x ) ) && locallyInside( p, hole ) ) {\r\n\r\n                m = p;\r\n                tanMin = tan;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        p = p.next;\r\n\r\n    }\r\n\r\n    return m;\r\n\r\n}\r\n\r\n// interlink polygon nodes in z-order\r\n\r\nfunction indexCurve( start, minX, minY, invSize ) {\r\n\r\n    let p = start;\r\n\r\n    do {\r\n\r\n        if ( p.z === null ) { p.z = zOrder( p.x, p.y, minX, minY, invSize ); }\r\n        p.prevZ = p.prev;\r\n        p.nextZ = p.next;\r\n        p = p.next;\r\n\r\n    } while ( p !== start );\r\n\r\n    p.prevZ.nextZ = null;\r\n    p.prevZ = null;\r\n\r\n    sortLinked( p );\r\n\r\n}\r\n\r\n// Simon Tatham's linked list merge sort algorithm\r\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\n\r\nfunction sortLinked( list ) {\r\n\r\n    let i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\r\n\r\n    do {\r\n\r\n        p = list;\r\n        list = null;\r\n        tail = null;\r\n        numMerges = 0;\r\n\r\n        while ( p ) {\r\n\r\n            numMerges ++;\r\n            q = p;\r\n            pSize = 0;\r\n\r\n            for ( i = 0; i < inSize; i ++ ) {\r\n\r\n                pSize ++;\r\n                q = q.nextZ;\r\n                if ( ! q ) { break; }\r\n\r\n            }\r\n\r\n            qSize = inSize;\r\n\r\n            while ( pSize > 0 || ( qSize > 0 && q ) ) {\r\n\r\n                if ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\r\n\r\n                    e = p;\r\n                    p = p.nextZ;\r\n                    pSize --;\r\n\r\n                } else {\r\n\r\n                    e = q;\r\n                    q = q.nextZ;\r\n                    qSize --;\r\n\r\n                }\r\n\r\n                if ( tail ) { tail.nextZ = e; } else { list = e; }\r\n\r\n                e.prevZ = tail;\r\n                tail = e;\r\n\r\n            }\r\n\r\n            p = q;\r\n\r\n        }\r\n\r\n        tail.nextZ = null;\r\n        inSize *= 2;\r\n\r\n    } while ( numMerges > 1 );\r\n\r\n    return list;\r\n\r\n}\r\n\r\n// z-order of a point given coords and inverse of the longer side of data bbox\r\n\r\nfunction zOrder( x, y, minX, minY, invSize ) {\r\n\r\n    // coords are transformed into non-negative 15-bit integer range\r\n\r\n    x = 32767 * ( x - minX ) * invSize;\r\n    y = 32767 * ( y - minY ) * invSize;\r\n\r\n    x = ( x | ( x << 8 ) ) & 0x00FF00FF;\r\n    x = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\r\n    x = ( x | ( x << 2 ) ) & 0x33333333;\r\n    x = ( x | ( x << 1 ) ) & 0x55555555;\r\n\r\n    y = ( y | ( y << 8 ) ) & 0x00FF00FF;\r\n    y = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\r\n    y = ( y | ( y << 2 ) ) & 0x33333333;\r\n    y = ( y | ( y << 1 ) ) & 0x55555555;\r\n\r\n    return x | ( y << 1 );\r\n\r\n}\r\n\r\n// find the leftmost node of a polygon ring\r\n\r\nfunction getLeftmost( start ) {\r\n\r\n    let p = start, leftmost = start;\r\n\r\n    do {\r\n\r\n        if ( p.x < leftmost.x ) { leftmost = p; }\r\n        p = p.next;\r\n\r\n    } while ( p !== start );\r\n\r\n    return leftmost;\r\n\r\n}\r\n\r\n// check if a point lies within a convex triangle\r\n\r\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\r\n\r\n    return ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\r\n     ( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\r\n     ( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\r\n\r\n}\r\n\r\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\n\r\nfunction isValidDiagonal( a, b ) {\r\n\r\n    return a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) &&\r\n        locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b );\r\n\r\n}\r\n\r\n// signed area of a triangle\r\n\r\nfunction area( p, q, r ) {\r\n\r\n    return ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\r\n\r\n}\r\n\r\n// check if two points are equal\r\n\r\nfunction equals( p1, p2 ) {\r\n\r\n    return p1.x === p2.x && p1.y === p2.y;\r\n\r\n}\r\n\r\n// check if two segments intersect\r\n\r\nfunction intersects( p1, q1, p2, q2 ) {\r\n\r\n    if ( ( equals( p1, q1 ) && equals( p2, q2 ) ) ||\r\n            ( equals( p1, q2 ) && equals( p2, q1 ) ) ) { return true; }\r\n\r\n    return area( p1, q1, p2 ) > 0 !== area( p1, q1, q2 ) > 0 &&\r\n                 area( p2, q2, p1 ) > 0 !== area( p2, q2, q1 ) > 0;\r\n\r\n}\r\n\r\n// check if a polygon diagonal intersects any polygon segments\r\n\r\nfunction intersectsPolygon( a, b ) {\r\n\r\n    let p = a;\r\n\r\n    do {\r\n\r\n        if ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n                        intersects( p, p.next, a, b ) ) {\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n        p = p.next;\r\n\r\n    } while ( p !== a );\r\n\r\n    return false;\r\n\r\n}\r\n\r\n// check if a polygon diagonal is locally inside the polygon\r\n\r\nfunction locallyInside( a, b ) {\r\n\r\n    return area( a.prev, a, a.next ) < 0 ?\r\n        area( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\r\n        area( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\r\n\r\n}\r\n\r\n// check if the middle point of a polygon diagonal is inside the polygon\r\n\r\nfunction middleInside( a, b ) {\r\n\r\n    let p = a;\r\n    let inside = false;\r\n    const px = ( a.x + b.x ) / 2;\r\n    const py = ( a.y + b.y ) / 2;\r\n\r\n    do {\r\n\r\n        if ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\r\n                        ( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) ) {\r\n\r\n            inside = ! inside;\r\n\r\n        }\r\n\r\n        p = p.next;\r\n\r\n    } while ( p !== a );\r\n\r\n    return inside;\r\n\r\n}\r\n\r\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\n\r\nfunction splitPolygon( a, b ) {\r\n\r\n    const a2 = new Node( a.i, a.x, a.y ),\r\n        b2 = new Node( b.i, b.x, b.y ),\r\n        an = a.next,\r\n        bp = b.prev;\r\n\r\n    a.next = b;\r\n    b.prev = a;\r\n\r\n    a2.next = an;\r\n    an.prev = a2;\r\n\r\n    b2.next = a2;\r\n    a2.prev = b2;\r\n\r\n    bp.next = b2;\r\n    b2.prev = bp;\r\n\r\n    return b2;\r\n\r\n}\r\n\r\n// create a node and optionally link it with previous one (in a circular doubly linked list)\r\n\r\nfunction insertNode( i, x, y, last ) {\r\n\r\n    const p = new Node( i, x, y );\r\n\r\n    if ( ! last ) {\r\n\r\n        p.prev = p;\r\n        p.next = p;\r\n\r\n    } else {\r\n\r\n        p.next = last.next;\r\n        p.prev = last;\r\n        last.next.prev = p;\r\n        last.next = p;\r\n\r\n    }\r\n\r\n    return p;\r\n\r\n}\r\n\r\nfunction removeNode( p ) {\r\n\r\n    p.next.prev = p.prev;\r\n    p.prev.next = p.next;\r\n\r\n    if ( p.prevZ ) { p.prevZ.nextZ = p.nextZ; }\r\n    if ( p.nextZ ) { p.nextZ.prevZ = p.prevZ; }\r\n\r\n}\r\n\r\nfunction Node( i, x, y ) {\r\n\r\n    // vertice index in coordinates array\r\n    this.i = i;\r\n\r\n    // vertex coordinates\r\n    this.x = x;\r\n    this.y = y;\r\n\r\n    // previous and next vertice nodes in a polygon ring\r\n    this.prev = null;\r\n    this.next = null;\r\n\r\n    // z-order curve value\r\n    this.z = null;\r\n\r\n    // previous and next nodes in z-order\r\n    this.prevZ = null;\r\n    this.nextZ = null;\r\n\r\n    // indicates whether this is a steiner point\r\n    this.steiner = false;\r\n\r\n}\r\n\r\nfunction signedArea( data, start, end, dim ) {\r\n\r\n    let sum = 0;\r\n\r\n    for ( let i = start, j = end - dim; i < end; i += dim ) {\r\n\r\n        sum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\r\n        j = i;\r\n\r\n    }\r\n\r\n    return sum;\r\n\r\n}\r\n\r\nexport { Earcut };\r\n","import * as three from 'three';\r\n\r\nconst EPS = 1e-6;\r\n/**\r\n * Utility functions for threejs.\r\n */\r\n\r\n // Matrices ======================================================================================================\r\n\r\nexport function multVectorMatrix(v: three.Vector3, m: three.Matrix4): three.Vector3 {\r\n    const v2: three.Vector3 = v.clone();\r\n    v2.applyMatrix4(m);\r\n    return v2;\r\n}\r\n\r\nexport function xformMatrix(o: three.Vector3, x: three.Vector3, y: three.Vector3, z: three.Vector3): three.Matrix4 {\r\n    x.normalize();\r\n    y.normalize();\r\n    z.normalize();\r\n    const m1: three.Matrix4 = new three.Matrix4();\r\n    const o_neg: three.Vector3 = o.clone().negate();\r\n    m1.setPosition(o_neg);\r\n    const m2: three.Matrix4 = new three.Matrix4();\r\n    m2.makeBasis(x, y, z);\r\n    m2.getInverse(m2);\r\n    const m3: three.Matrix4 = new three.Matrix4();\r\n    m3.multiplyMatrices(m2, m1);\r\n    return m3;\r\n}\r\n\r\nexport function matrixInv(m: three.Matrix4): three.Matrix4 {\r\n    const m2: three.Matrix4 = new three.Matrix4();\r\n    return m2.getInverse(m);\r\n}\r\n\r\n//  Vectors =======================================================================================================\r\n\r\nexport function subVectors(v1: three.Vector3, v2: three.Vector3, norm: boolean = false): three.Vector3 {\r\n    const v3: three.Vector3 = new three.Vector3();\r\n    v3.subVectors(v1, v2);\r\n    if (norm) {v3.normalize(); }\r\n    return v3;\r\n}\r\n\r\nexport function addVectors(v1: three.Vector3, v2: three.Vector3, norm: boolean = false): three.Vector3 {\r\n    const v3: three.Vector3 = new three.Vector3();\r\n    v3.addVectors(v1, v2);\r\n    if (norm) {v3.normalize(); }\r\n    return v3;\r\n}\r\n\r\nexport function crossVectors(v1: three.Vector3, v2: three.Vector3, norm: boolean = false): three.Vector3 {\r\n    const v3: three.Vector3 = new three.Vector3();\r\n    v3.crossVectors(v1, v2);\r\n    if (norm) {v3.normalize(); }\r\n    return v3;\r\n}\r\n","\r\nimport * as three from 'three';\r\nimport * as threex from './threex';\r\nimport * as earcut from './earcut';\r\nimport { Txyz } from '../geo-info/common';\r\nimport { area } from '../geom/triangle';\r\n// import { ConvexHull } from 'three/examples/jsm/math/ConvexHull';\r\n// import { ConvexGeometry } from 'three/examples/jsm/geometries/ConvexGeometry';\r\n// import { Earcut } from 'three/Earcut';\r\n\r\nconst EPS = 1e-6;\r\n\r\n\r\n//  3D to 2D ======================================================================================================\r\n\r\n/**\r\n * Function that returns a matrix to transform a set of vertices in 3d space onto the xy plane.\r\n * This function assumes that the vertices are more or less co-planar.\r\n * Returns null if the plane cannot be found, e.g. points are all colinear.\r\n */\r\n// function _getMatrixOld(points: three.Vector3[]): three.Matrix4 {\r\n//     // calculate origin\r\n//     const o: three.Vector3 = new three.Vector3();\r\n//     for (const v of points) {\r\n//         o.add(v);\r\n//     }\r\n//     o.divideScalar(points.length);\r\n//     // find three vectors\r\n//     let vx: three.Vector3;\r\n//     let vz: three.Vector3;\r\n//     let got_vx = false;\r\n//     for (let i = 0; i < points.length; i++) {\r\n//         if (!got_vx) {\r\n//             vx =  threex.subVectors(points[i], o);\r\n//             if (vx.lengthSq() !== 0) {got_vx = true; }\r\n//         } else {\r\n//             vz = threex.crossVectors(vx, threex.subVectors(points[i], o));\r\n//             if (vz.lengthSq() !== 0) { break; }\r\n//         }\r\n//         if (i === points.length - 1) { return null; } // could not find any pair of vectors\r\n//     }\r\n//     const vy: three.Vector3 =  threex.crossVectors(vz, vx);\r\n//     // create matrix\r\n//     vx.normalize();\r\n//     vy.normalize();\r\n//     vz.normalize();\r\n//     const m2: three.Matrix4 = new three.Matrix4();\r\n//     m2.makeBasis(vx, vy, vz);\r\n//     m2.getInverse(m2);\r\n//     return m2;\r\n// }\r\n\r\n/**\r\n * Gtes three extreme points that can be used to calculate the transform matrix\r\n */\r\nfunction _getThreePoints(points: three.Vector3[]): three.Vector3[] {\r\n    // console.log(\"_getExtremePoints\")\r\n    // basic case, a triangle with holes\r\n    if (points.length === 3) {\r\n        return points;\r\n    }\r\n    // find the extreme points\r\n    const extremes: number[] = [0, 0, 0, 0, 0, 0];\r\n    // min x, min y, min z, max x, max y, max z\r\n    for (let i = 0; i < points.length; i++) {\r\n        if (points[i].x < points[extremes[0]].x) {\r\n            extremes[0] = i;\r\n        }\r\n        if (points[i].y < points[extremes[1]].y) {\r\n            extremes[1] = i;\r\n        }\r\n        if (points[i].z < points[extremes[2]].z) {\r\n            extremes[2] = i;\r\n        }\r\n        if (points[i].x > points[extremes[3]].x) {\r\n            extremes[3] = i;\r\n        }\r\n        if (points[i].y > points[extremes[4]].y) {\r\n            extremes[4] = i;\r\n        }\r\n        if (points[i].z > points[extremes[5]].z) {\r\n            extremes[5] = i;\r\n        }\r\n    }\r\n    // calc sizes\r\n    const x_size: number = Math.abs(points[extremes[3]].x - points[extremes[0]].x);\r\n    const y_size: number = Math.abs(points[extremes[4]].y - points[extremes[1]].y);\r\n    const z_size: number = Math.abs(points[extremes[5]].z - points[extremes[2]].z);\r\n    // add the extreme points\r\n    const set_selected: Set<number> = new Set();\r\n    if (x_size > 0) { set_selected.add(extremes[0]); set_selected.add(extremes[3]); }\r\n    if (y_size > 0) { set_selected.add(extremes[1]); set_selected.add(extremes[4]); }\r\n    if (z_size > 0) { set_selected.add(extremes[2]); set_selected.add(extremes[5]); }\r\n    // get three points that are not too close together\r\n    const LIMIT = 0.0001; /// I am not sure what to set this to\r\n    const selected: number[] = Array.from(set_selected).sort((a, b) => a - b );\r\n    let three_selected: number[] = [selected[0]];\r\n    for (let i = 1; i < selected.length; i++) {\r\n        // I am not really sure if this distance check is needed\r\n        // we already got extreme points\r\n        // but it is possible that two or even three extreme points are right next to each other\r\n        // squashed together in a corner... so I leave this check for now\r\n        if (points[selected[i - 1]].manhattanDistanceTo(points[selected[i]]) > LIMIT) {\r\n            three_selected.push(selected[i]);\r\n        }\r\n        if (three_selected.length === 3) { break; }\r\n    }\r\n    // we should now have three points\r\n    if (three_selected.length === 3) {\r\n        // console.log(\"FAST METHOD\");\r\n        return three_selected.map( i => points[i] );\r\n    } else if (three_selected.length === 2) {\r\n        // there is always a special case... the dreaded diagonal shape\r\n        // console.log(\"SLOW METHOD\", [first, second]);\r\n        const [first, second]: [number, number] = three_selected as [number, number];\r\n        const line: three.Line3 = new three.Line3(points[first], points[second]);\r\n        let third: number;\r\n        let dist = 0;\r\n        for (let i = 0; i < points.length; i++) {\r\n            const cur_point: three.Vector3 = points[i];\r\n            if (cur_point !== points[first] && cur_point !== points[second]) {\r\n                const dummy: three.Vector3 = new three.Vector3();\r\n                const close_point: three.Vector3   = line.closestPointToPoint(cur_point, true, dummy);\r\n                const cur_dist = cur_point.manhattanDistanceTo(close_point);\r\n                if (dist < cur_dist) {\r\n                    third = i;\r\n                    dist = cur_dist;\r\n                }\r\n            }\r\n            if (dist > LIMIT) { break; }\r\n        }\r\n        if (third === undefined) { return null; }\r\n        three_selected = [first, second, third].sort((a, b) => a - b );\r\n        return three_selected.map( i => points[i] );\r\n    }\r\n    // else if (selected.size === 2) { // special diagonal case\r\n    //     console.log(\"XXXXXXXXXXXXXXX\")\r\n    //     return null;\r\n    //     // TODO replace with convex hull\r\n    //     const pair_idxs: number[] = Array.from(selected.values());\r\n    //     const line: three.Line3 = new three.Line3(points[pair_idxs[0]], points[pair_idxs[1]]);\r\n    //     const line_len: number = line.delta(new three.Vector3()).manhattanLength();\r\n    //     let max_dist = 1e-4;\r\n    //     let third_point_idx = null;\r\n    //     for (let i = 0; i < points.length; i++) {\r\n    //         if (i !== pair_idxs[0] && i !== pair_idxs[1]) {\r\n    //             const point_on_line: three.Vector3 = line.closestPointToPoint(points[i], false, new three.Vector3());\r\n    //             const dist_to_line: number = point_on_line.manhattanDistanceTo(points[i]);\r\n    //             if (dist_to_line > max_dist) {\r\n    //                 third_point_idx = i;\r\n    //                 max_dist = dist_to_line;\r\n    //             }\r\n    //             if (dist_to_line / line_len > 0.01) { break; }\r\n    //         }\r\n    //     }\r\n    //     if (third_point_idx === null) { return null; }\r\n    //     const extreme_points: three.Vector3[] =\r\n    // [pair_idxs[0], pair_idxs[1], third_point_idx].sort((a, b) => a - b ).map( i => points[i] );\r\n    //     return extreme_points;\r\n    // }\r\n    // could not find points\r\n    return null;\r\n}\r\n\r\n/**\r\n * Function that returns a matrix to transform a set of vertices in 3d space onto the xy plane.\r\n * This function assumes that the vertices are more or less co-planar.\r\n * Returns null if the plane cannot be found, e.g. points are all colinear.\r\n */\r\nfunction _getMatrix(points: three.Vector3[]): three.Matrix4 {\r\n\r\n    const three_points: three.Vector3[] = _getThreePoints(points);\r\n    // if (extreme_points === null) {\r\n    //     console.log(\"POINTS = \",points)\r\n    //     extreme_points = _getExtremePointsConvex(points);\r\n    // }\r\n    if (three_points === null) { return null; }\r\n\r\n    // console.log(\"points\", points)\r\n    // console.log(\"extremes\", extremes)\r\n    // console.log(\"selected\", selected)\r\n    // console.log(\"points2\", points2)\r\n\r\n    // calculate origin\r\n    // const o: three.Vector3 = new three.Vector3();\r\n    // o.x = (points2[0].x + points2[0].x + points2[0].x) / 3;\r\n    // o.y = (points2[1].y + points2[1].y + points2[1].y) / 3;\r\n    // o.z = (points2[2].z + points2[2].z + points2[2].z) / 3;\r\n\r\n    const vx: three.Vector3 = threex.subVectors(three_points[1], three_points[0]).normalize();\r\n    const v2: three.Vector3 = threex.subVectors(three_points[2], three_points[1]).normalize();\r\n    const vz: three.Vector3 = threex.crossVectors(vx, v2).normalize();\r\n    const vy: three.Vector3 =  threex.crossVectors(vz, vx).normalize();\r\n\r\n    // console.log(vx, vy, vz)\r\n\r\n    // create matrix\r\n    const m2: three.Matrix4 = new three.Matrix4();\r\n    m2.makeBasis(vx, vy, vz);\r\n    m2.getInverse(m2);\r\n    return m2;\r\n}\r\n\r\n/**\r\n * Triangulate a 4 sided shape\r\n * @param coords\r\n */\r\nexport function triangulateQuad(coords: Txyz[]): number[][] {\r\n    // TODO this does not take into account degenerate cases\r\n    // TODO two points in same location\r\n    // TODO Three points that are colinear\r\n    const area1: number = area(coords[0], coords[1], coords[2]) + area(coords[2], coords[3], coords[0]);\r\n    const area2: number = area(coords[0], coords[1], coords[3]) + area(coords[1], coords[2], coords[3]);\r\n    // const tri1a: Txyz[] = [coords[0], coords[1], coords[2]];\r\n    // const tri1b: Txyz[] = [coords[2], coords[3], coords[0]];\r\n    // const tri2a: Txyz[] = [coords[0], coords[1], coords[3]];\r\n    // const tri2b: Txyz[] = [coords[1], coords[2], coords[3]];\r\n    if (area1 < area2) {\r\n        return [[0, 1, 2], [2, 3, 0]];\r\n    } else {\r\n        return [[0, 1, 3], [1, 2, 3]];\r\n    }\r\n}\r\n\r\n/**\r\n * Triangulates a set of coords in 3d with holes\r\n * If the coords cannot be triangulated, it returns [].\r\n * @param coords\r\n */\r\nexport function triangulate(coords: Txyz[], holes?: Txyz[][]): number[][] {\r\n\r\n    // check if we have holes\r\n    const has_holes: boolean = (holes !== undefined && holes.length !== 0);\r\n\r\n    // basic case, a triangle with no holes\r\n    if (coords.length === 3 && !has_holes) {\r\n        return [[0, 1, 2]];\r\n    }\r\n\r\n    // basic case, a quad with no holes\r\n    if (coords.length === 4 && !has_holes) {\r\n        return triangulateQuad(coords);\r\n    }\r\n\r\n    // get the matrix to transform from 2D to 3D\r\n    const coords_v: three.Vector3[] = coords.map( coord => new three.Vector3(...coord));\r\n    const matrix: three.Matrix4 = _getMatrix( coords_v );\r\n\r\n    // check for null, which means no plane could be found\r\n    if (matrix === null) {\r\n        return [];\r\n    }\r\n\r\n    // create an array to store all x y vertex coordinates\r\n    const flat_vert_xys: number[] = [];\r\n\r\n    // get the perimeter vertices and add them to the array\r\n    const coords_v_2d: three.Vector3[] = coords_v.map((coord_v) => threex.multVectorMatrix(coord_v, matrix));\r\n    if (coords_v_2d === undefined || coords_v_2d === null || coords_v_2d.length === 0) {\r\n        console.log('WARNING: triangulation failed.');\r\n        return [];\r\n    }\r\n    coords_v_2d.forEach(coord_v_2d => flat_vert_xys.push(coord_v_2d.x, coord_v_2d.y));\r\n\r\n    // hole vertices uing EARCUT\r\n    // holes is an array of hole indices if any (e.g. [5, 8] for a 12-vertex input would mean\r\n    // one hole with vertices 5–7 and another with 8–11).\r\n    const hole_indices: number[] = [];\r\n    let index_counter: number = coords_v.length;\r\n    if (has_holes) {\r\n        for (const hole of holes) {\r\n            hole_indices.push(index_counter);\r\n            if (hole.length) {\r\n                const hole_coords_v: three.Vector3[] = hole.map( hole_coord => new three.Vector3(...hole_coord));\r\n                const hole_coords_v_2d: three.Vector3[] = hole_coords_v.map((hole_coord_v) =>\r\n                    threex.multVectorMatrix(hole_coord_v, matrix));\r\n                const one_hole: number[] = [];\r\n                hole_coords_v_2d.forEach(hole_coord_v => flat_vert_xys.push(hole_coord_v.x, hole_coord_v.y));\r\n                index_counter += hole.length;\r\n            }\r\n        }\r\n    }\r\n\r\n    // do the triangulation\r\n    const flat_tris_i: number[] = earcut.Earcut.triangulate(flat_vert_xys, hole_indices);\r\n\r\n    // convert the triangles into lists of three\r\n    const tris_i: number[][] = [];\r\n    for (let i = 0; i < flat_tris_i.length; i += 3) {\r\n        tris_i.push([flat_tris_i[i], flat_tris_i[i + 1], flat_tris_i[i + 2]]);\r\n    }\r\n\r\n    // return the list of triangles\r\n    return tris_i;\r\n}\r\n","/**\r\n * Remove an item from an array\r\n * @param arr\r\n * @param item\r\n */\r\nexport function arrRem(arr: any[], item: any): void {\r\n    const index: number = arr.indexOf(item);\r\n    if (index === -1) { return; }\r\n    arr.splice(index, 1);\r\n}\r\n\r\n/**\r\n * Add an item to an array in an array\r\n * @param arr\r\n * @param item\r\n */\r\nexport function arrIdxAdd(arr: any[], idx: number, item: any): void {\r\n    if (arr[idx] === undefined || arr[idx] === null) {\r\n        arr[idx] = [];\r\n    }\r\n    arr[idx].push(item);\r\n}\r\n/**\r\n * Remove an item from an array in an array\r\n * @param arr\r\n * @param item\r\n */\r\nexport function arrIdxRem(arr: any[], idx: number, item: any, del_empty: boolean): void {\r\n    if (arr[idx] === undefined || arr[idx] === null) {\r\n        return;\r\n    }\r\n    const rem_index: number = arr[idx].indexOf(item);\r\n    if (rem_index === -1) { return; }\r\n    arr[idx].splice(rem_index, 1);\r\n    if (del_empty && arr[idx].length === 0) {\r\n        delete arr[idx];\r\n    }\r\n}\r\n/**\r\n * Make flat array (depth = 1) from anything.\r\n * ~\r\n * If it is not an array, then make it an array\r\n * ~\r\n * If it is an array, then make it flat\r\n * ~\r\n * @param data\r\n */\r\nexport function arrMakeFlat(data: any): any[] {\r\n    if (!Array.isArray(data)) {\r\n        return [data];\r\n    }\r\n    // const depth = arrMaxDepth(data);\r\n    // // @ts-ignore\r\n    // const new_array = data.flat(depth - 1);\r\n    // return new_array;\r\n    const flattend = [];\r\n    function flat(data2: any) {\r\n        data2.forEach(function(el: any) {\r\n            if (Array.isArray(el)) {\r\n                flat(el);\r\n            } else {\r\n                flattend.push(el);\r\n            }\r\n        });\r\n    }\r\n    flat(data);\r\n    return flattend;\r\n}\r\n/**\r\n * Make an array of depth 2 from anything.\r\n * ~\r\n * If it is not an array, then make it an array\r\n * ~\r\n * If it is an array, then make it flat\r\n * ~\r\n * @param data\r\n */\r\n// export function arrMake2Deep(data: any): any[] {\r\n//     if (!Array.isArray(data)) {\r\n//         return [[data]];\r\n//     }\r\n//     // return new_array;\r\n//     const flattend = [];\r\n//     function flat(data2: any) {\r\n//         data2.forEach(function(el: any) {\r\n//             if (!Array.isArray(el)) {\r\n//                 flattend.push([el]);\r\n//             } else if (!Array.isArray(el[0])) {\r\n//                 flattend.push(el);\r\n//             } else {\r\n//                 flat(el);\r\n//             }\r\n//         });\r\n//     }\r\n//     flat(data);\r\n//     return flattend;\r\n// }\r\n\r\n\r\n/**\r\n * Maximum depth of an array\r\n * @param data\r\n */\r\nexport function arrMaxDepth(data: any[]): number {\r\n    let d1 = 0;\r\n    if (Array.isArray(data)) {\r\n        d1 = 1;\r\n        let max = 0;\r\n        for (const item of data) {\r\n            if (Array.isArray(data)) {\r\n                const d2 = arrMaxDepth(item);\r\n                if (d2 > max) {\r\n                    max = d2;\r\n                }\r\n            }\r\n        }\r\n        d1 += max;\r\n    }\r\n    return d1;\r\n}\r\n\r\n/**\r\n * Converts a value to an array of specified length.\r\n * ~\r\n * @param data\r\n */\r\nexport function arrFill(data: any, length: number): any[] {\r\n    if (! Array.isArray(data)) {\r\n        data = [data];\r\n    }\r\n    data = data as any[];\r\n    const last = data[data.length - 1];\r\n    for (let i = data.length; i < length; i++)  {\r\n        data[i] = last;\r\n    }\r\n    if (data.length > length)   {\r\n        data = data.slice(0, length);\r\n    }\r\n    return data;\r\n}\r\n\r\nexport function getArrDepth2(arr: any): number {\r\n    if (Array.isArray(arr)) {\r\n        return 1 + getArrDepth2(arr[0]);\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport function isEmptyArr2(arr: any): boolean {\r\n    if (Array.isArray(arr) && !arr.length) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n","/**\r\n * Sort Map by Key, return a Sorted Map\r\n * @param unsortedMap\r\n */\r\nexport function sortByKey(unsortedMap) {\r\n    const keys = [];\r\n    const sortedMap = new Map();\r\n\r\n    unsortedMap.forEach((value, key) => {\r\n        keys.push(key);\r\n    });\r\n\r\n    keys.sort((a, b) => {\r\n        const x = Number(a.substr(2)), y = Number(b.substr(2));\r\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n    }).map(function(key) {\r\n        sortedMap.set(key, unsortedMap.get(key));\r\n    });\r\n    return sortedMap;\r\n}\r\n","// Header for verb for JavaScript\r\n// Borrowed from browserify, this header supports AMD (define) and common js (require) style modules\r\n\r\n(function(f){\r\n    if(typeof exports===\"object\"&&typeof module!==\"undefined\"){\r\n        module.exports=f()\r\n    } else if(typeof define===\"function\"&&define.amd){\r\n        define([],f)\r\n    } else {\r\n        var g;\r\n        if(typeof window!==\"undefined\"){\r\n            g=window\r\n        } else if(typeof global!==\"undefined\"){\r\n            g=global\r\n        } else if(typeof self!==\"undefined\"){\r\n            g=self\r\n        } else{\r\n            g=this\r\n        }\r\n\r\n        g.verb = f()\r\n    }\r\n})(function(){\r\n    var verb = {};\r\n\r\n    var global = this;\r\n\r\n    var isBrowser = new Function(\"try {return this===window;}catch(e){ return false;}\");\r\n\t// var isNode=new Function(\"try {return this===global;}catch(e){return false;}\");\r\n\t// var isWebworker=new Function(\"try {return typeof importScripts === 'function';}catch(e){return false;}\");\r\n\r\n    // // node.js context, but not WebWorker\r\n    // if ( isNode() && !isWebworker() ){\r\n    //     Worker = require('webworker-threads').Worker;\r\n    // }\r\n\r\n    // // WebWorker or node.js context\r\n    // if ( isNode() || isWebworker() ){\r\n\r\n    //     var window = global; // required for promhx\r\n\r\n    //     // WebWorker\r\n    //     if ( isWebworker() ){\r\n\r\n    //         var lookup = function(className, methodName){\r\n\r\n    //             var obj = global;\r\n\r\n    //             className.split(\".\").forEach(function(x){\r\n    //                 if (obj) obj = obj[ x ];\r\n    //             });\r\n\r\n    //             if (!obj) return null;\r\n\r\n    //             return obj[ methodName ];\r\n    //         }\r\n\r\n    //         onmessage = function( e ){\r\n\r\n    //             if (!e.data.className || !e.data.methodName) return;\r\n\r\n    //             var method = lookup( e.data.className, e.data.methodName );\r\n\r\n    //             if (!method){\r\n    //                 return console.error(\"could not find \" + e.data.className + \".\" + e.data.methodName)\r\n    //             }\r\n\r\n    //             postMessage( { result: method.apply( null, e.data.args ), id: e.data.id } );\r\n\r\n    //         };\r\n    //     }\r\n    // }\r\n\r\n(function (console, $hx_exports, $global) { \"use strict\";\r\n$hx_exports.geom = $hx_exports.geom || {};\r\n$hx_exports.exe = $hx_exports.exe || {};\r\n$hx_exports.eval = $hx_exports.eval || {};\r\n$hx_exports.core = $hx_exports.core || {};\r\n$hx_exports.promhx = $hx_exports.promhx || {};\r\nvar $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };\r\nfunction $extend(from, fields) {\r\n\tfunction Inherit() {} Inherit.prototype = from; var proto = new Inherit();\r\n\tfor (var name in fields) proto[name] = fields[name];\r\n\tif( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;\r\n\treturn proto;\r\n}\r\nvar HxOverrides = function() { };\r\n$hxClasses[\"HxOverrides\"] = HxOverrides;\r\nHxOverrides.__name__ = [\"HxOverrides\"];\r\nHxOverrides.strDate = function(s) {\r\n\tvar _g = s.length;\r\n\tswitch(_g) {\r\n\tcase 8:\r\n\t\tvar k = s.split(\":\");\r\n\t\tvar d = new Date();\r\n\t\td.setTime(0);\r\n\t\td.setUTCHours(k[0]);\r\n\t\td.setUTCMinutes(k[1]);\r\n\t\td.setUTCSeconds(k[2]);\r\n\t\treturn d;\r\n\tcase 10:\r\n\t\tvar k1 = s.split(\"-\");\r\n\t\treturn new Date(k1[0],k1[1] - 1,k1[2],0,0,0);\r\n\tcase 19:\r\n\t\tvar k2 = s.split(\" \");\r\n\t\tvar y = k2[0].split(\"-\");\r\n\t\tvar t = k2[1].split(\":\");\r\n\t\treturn new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);\r\n\tdefault:\r\n\t\tthrow new js__$Boot_HaxeError(\"Invalid date format : \" + s);\r\n\t}\r\n};\r\nHxOverrides.cca = function(s,index) {\r\n\tvar x = s.charCodeAt(index);\r\n\tif(x != x) return undefined;\r\n\treturn x;\r\n};\r\nHxOverrides.substr = function(s,pos,len) {\r\n\tif(pos != null && pos != 0 && len != null && len < 0) return \"\";\r\n\tif(len == null) len = s.length;\r\n\tif(pos < 0) {\r\n\t\tpos = s.length + pos;\r\n\t\tif(pos < 0) pos = 0;\r\n\t} else if(len < 0) len = s.length + len - pos;\r\n\treturn s.substr(pos,len);\r\n};\r\nHxOverrides.iter = function(a) {\r\n\treturn { cur : 0, arr : a, hasNext : function() {\r\n\t\treturn this.cur < this.arr.length;\r\n\t}, next : function() {\r\n\t\treturn this.arr[this.cur++];\r\n\t}};\r\n};\r\nvar Lambda = function() { };\r\n$hxClasses[\"Lambda\"] = Lambda;\r\nLambda.__name__ = [\"Lambda\"];\r\nLambda.fold = function(it,f,first) {\r\n\tvar $it0 = $iterator(it)();\r\n\twhile( $it0.hasNext() ) {\r\n\t\tvar x = $it0.next();\r\n\t\tfirst = f(x,first);\r\n\t}\r\n\treturn first;\r\n};\r\nvar List = function() {\r\n\tthis.length = 0;\r\n};\r\n$hxClasses[\"List\"] = List;\r\nList.__name__ = [\"List\"];\r\nList.prototype = {\r\n\tadd: function(item) {\r\n\t\tvar x = [item];\r\n\t\tif(this.h == null) this.h = x; else this.q[1] = x;\r\n\t\tthis.q = x;\r\n\t\tthis.length++;\r\n\t}\r\n\t,pop: function() {\r\n\t\tif(this.h == null) return null;\r\n\t\tvar x = this.h[0];\r\n\t\tthis.h = this.h[1];\r\n\t\tif(this.h == null) this.q = null;\r\n\t\tthis.length--;\r\n\t\treturn x;\r\n\t}\r\n\t,isEmpty: function() {\r\n\t\treturn this.h == null;\r\n\t}\r\n\t,__class__: List\r\n};\r\nMath.__name__ = [\"Math\"];\r\nvar Reflect = function() { };\r\n$hxClasses[\"Reflect\"] = Reflect;\r\nReflect.__name__ = [\"Reflect\"];\r\nReflect.field = function(o,field) {\r\n\ttry {\r\n\t\treturn o[field];\r\n\t} catch( e ) {\r\n\t\tif (e instanceof js__$Boot_HaxeError) e = e.val;\r\n\t\treturn null;\r\n\t}\r\n};\r\nReflect.callMethod = function(o,func,args) {\r\n\treturn func.apply(o,args);\r\n};\r\nReflect.fields = function(o) {\r\n\tvar a = [];\r\n\tif(o != null) {\r\n\t\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\t\tfor( var f in o ) {\r\n\t\tif(f != \"__id__\" && f != \"hx__closures__\" && hasOwnProperty.call(o,f)) a.push(f);\r\n\t\t}\r\n\t}\r\n\treturn a;\r\n};\r\nReflect.isFunction = function(f) {\r\n\treturn typeof(f) == \"function\" && !(f.__name__ || f.__ename__);\r\n};\r\nReflect.deleteField = function(o,field) {\r\n\tif(!Object.prototype.hasOwnProperty.call(o,field)) return false;\r\n\tdelete(o[field]);\r\n\treturn true;\r\n};\r\nvar Std = function() { };\r\n$hxClasses[\"Std\"] = Std;\r\nStd.__name__ = [\"Std\"];\r\nStd.string = function(s) {\r\n\treturn js_Boot.__string_rec(s,\"\");\r\n};\r\nStd.parseFloat = function(x) {\r\n\treturn parseFloat(x);\r\n};\r\nvar StringBuf = function() {\r\n\tthis.b = \"\";\r\n};\r\n$hxClasses[\"StringBuf\"] = StringBuf;\r\nStringBuf.__name__ = [\"StringBuf\"];\r\nStringBuf.prototype = {\r\n\tadd: function(x) {\r\n\t\tthis.b += Std.string(x);\r\n\t}\r\n\t,__class__: StringBuf\r\n};\r\nvar StringTools = function() { };\r\n$hxClasses[\"StringTools\"] = StringTools;\r\nStringTools.__name__ = [\"StringTools\"];\r\nStringTools.fastCodeAt = function(s,index) {\r\n\treturn s.charCodeAt(index);\r\n};\r\nvar ValueType = $hxClasses[\"ValueType\"] = { __ename__ : [\"ValueType\"], __constructs__ : [\"TNull\",\"TInt\",\"TFloat\",\"TBool\",\"TObject\",\"TFunction\",\"TClass\",\"TEnum\",\"TUnknown\"] };\r\nValueType.TNull = [\"TNull\",0];\r\nValueType.TNull.toString = $estr;\r\nValueType.TNull.__enum__ = ValueType;\r\nValueType.TInt = [\"TInt\",1];\r\nValueType.TInt.toString = $estr;\r\nValueType.TInt.__enum__ = ValueType;\r\nValueType.TFloat = [\"TFloat\",2];\r\nValueType.TFloat.toString = $estr;\r\nValueType.TFloat.__enum__ = ValueType;\r\nValueType.TBool = [\"TBool\",3];\r\nValueType.TBool.toString = $estr;\r\nValueType.TBool.__enum__ = ValueType;\r\nValueType.TObject = [\"TObject\",4];\r\nValueType.TObject.toString = $estr;\r\nValueType.TObject.__enum__ = ValueType;\r\nValueType.TFunction = [\"TFunction\",5];\r\nValueType.TFunction.toString = $estr;\r\nValueType.TFunction.__enum__ = ValueType;\r\nValueType.TClass = function(c) { var $x = [\"TClass\",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };\r\nValueType.TEnum = function(e) { var $x = [\"TEnum\",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };\r\nValueType.TUnknown = [\"TUnknown\",8];\r\nValueType.TUnknown.toString = $estr;\r\nValueType.TUnknown.__enum__ = ValueType;\r\nvar Type = function() { };\r\n$hxClasses[\"Type\"] = Type;\r\nType.__name__ = [\"Type\"];\r\nType.getClassName = function(c) {\r\n\tvar a = c.__name__;\r\n\tif(a == null) return null;\r\n\treturn a.join(\".\");\r\n};\r\nType.getEnumName = function(e) {\r\n\tvar a = e.__ename__;\r\n\treturn a.join(\".\");\r\n};\r\nType.resolveClass = function(name) {\r\n\tvar cl = $hxClasses[name];\r\n\tif(cl == null || !cl.__name__) return null;\r\n\treturn cl;\r\n};\r\nType.resolveEnum = function(name) {\r\n\tvar e = $hxClasses[name];\r\n\tif(e == null || !e.__ename__) return null;\r\n\treturn e;\r\n};\r\nType.createEmptyInstance = function(cl) {\r\n\tfunction empty() {}; empty.prototype = cl.prototype;\r\n\treturn new empty();\r\n};\r\nType.createEnum = function(e,constr,params) {\r\n\tvar f = Reflect.field(e,constr);\r\n\tif(f == null) throw new js__$Boot_HaxeError(\"No such constructor \" + constr);\r\n\tif(Reflect.isFunction(f)) {\r\n\t\tif(params == null) throw new js__$Boot_HaxeError(\"Constructor \" + constr + \" need parameters\");\r\n\t\treturn Reflect.callMethod(e,f,params);\r\n\t}\r\n\tif(params != null && params.length != 0) throw new js__$Boot_HaxeError(\"Constructor \" + constr + \" does not need parameters\");\r\n\treturn f;\r\n};\r\nType.getEnumConstructs = function(e) {\r\n\tvar a = e.__constructs__;\r\n\treturn a.slice();\r\n};\r\nType[\"typeof\"] = function(v) {\r\n\tvar _g = typeof(v);\r\n\tswitch(_g) {\r\n\tcase \"boolean\":\r\n\t\treturn ValueType.TBool;\r\n\tcase \"string\":\r\n\t\treturn ValueType.TClass(String);\r\n\tcase \"number\":\r\n\t\tif(Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;\r\n\t\treturn ValueType.TFloat;\r\n\tcase \"object\":\r\n\t\tif(v == null) return ValueType.TNull;\r\n\t\tvar e = v.__enum__;\r\n\t\tif(e != null) return ValueType.TEnum(e);\r\n\t\tvar c = js_Boot.getClass(v);\r\n\t\tif(c != null) return ValueType.TClass(c);\r\n\t\treturn ValueType.TObject;\r\n\tcase \"function\":\r\n\t\tif(v.__name__ || v.__ename__) return ValueType.TObject;\r\n\t\treturn ValueType.TFunction;\r\n\tcase \"undefined\":\r\n\t\treturn ValueType.TNull;\r\n\tdefault:\r\n\t\treturn ValueType.TUnknown;\r\n\t}\r\n};\r\nvar haxe_IMap = function() { };\r\n$hxClasses[\"haxe.IMap\"] = haxe_IMap;\r\nhaxe_IMap.__name__ = [\"haxe\",\"IMap\"];\r\nvar haxe__$Int64__$_$_$Int64 = function(high,low) {\r\n\tthis.high = high;\r\n\tthis.low = low;\r\n};\r\n$hxClasses[\"haxe._Int64.___Int64\"] = haxe__$Int64__$_$_$Int64;\r\nhaxe__$Int64__$_$_$Int64.__name__ = [\"haxe\",\"_Int64\",\"___Int64\"];\r\nhaxe__$Int64__$_$_$Int64.prototype = {\r\n\t__class__: haxe__$Int64__$_$_$Int64\r\n};\r\nvar haxe_Serializer = function() {\r\n\tthis.buf = new StringBuf();\r\n\tthis.cache = [];\r\n\tthis.useCache = haxe_Serializer.USE_CACHE;\r\n\tthis.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;\r\n\tthis.shash = new haxe_ds_StringMap();\r\n\tthis.scount = 0;\r\n};\r\n$hxClasses[\"haxe.Serializer\"] = haxe_Serializer;\r\nhaxe_Serializer.__name__ = [\"haxe\",\"Serializer\"];\r\nhaxe_Serializer.prototype = {\r\n\ttoString: function() {\r\n\t\treturn this.buf.b;\r\n\t}\r\n\t,serializeString: function(s) {\r\n\t\tvar x = this.shash.get(s);\r\n\t\tif(x != null) {\r\n\t\t\tthis.buf.b += \"R\";\r\n\t\t\tif(x == null) this.buf.b += \"null\"; else this.buf.b += \"\" + x;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.shash.set(s,this.scount++);\r\n\t\tthis.buf.b += \"y\";\r\n\t\ts = encodeURIComponent(s);\r\n\t\tif(s.length == null) this.buf.b += \"null\"; else this.buf.b += \"\" + s.length;\r\n\t\tthis.buf.b += \":\";\r\n\t\tif(s == null) this.buf.b += \"null\"; else this.buf.b += \"\" + s;\r\n\t}\r\n\t,serializeRef: function(v) {\r\n\t\tvar vt = typeof(v);\r\n\t\tvar _g1 = 0;\r\n\t\tvar _g = this.cache.length;\r\n\t\twhile(_g1 < _g) {\r\n\t\t\tvar i = _g1++;\r\n\t\t\tvar ci = this.cache[i];\r\n\t\t\tif(typeof(ci) == vt && ci == v) {\r\n\t\t\t\tthis.buf.b += \"r\";\r\n\t\t\t\tif(i == null) this.buf.b += \"null\"; else this.buf.b += \"\" + i;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.cache.push(v);\r\n\t\treturn false;\r\n\t}\r\n\t,serializeFields: function(v) {\r\n\t\tvar _g = 0;\r\n\t\tvar _g1 = Reflect.fields(v);\r\n\t\twhile(_g < _g1.length) {\r\n\t\t\tvar f = _g1[_g];\r\n\t\t\t++_g;\r\n\t\t\tthis.serializeString(f);\r\n\t\t\tthis.serialize(Reflect.field(v,f));\r\n\t\t}\r\n\t\tthis.buf.b += \"g\";\r\n\t}\r\n\t,serialize: function(v) {\r\n\t\t{\r\n\t\t\tvar _g = Type[\"typeof\"](v);\r\n\t\t\tswitch(_g[1]) {\r\n\t\t\tcase 0:\r\n\t\t\t\tthis.buf.b += \"n\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\tvar v1 = v;\r\n\t\t\t\tif(v1 == 0) {\r\n\t\t\t\t\tthis.buf.b += \"z\";\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.buf.b += \"i\";\r\n\t\t\t\tif(v1 == null) this.buf.b += \"null\"; else this.buf.b += \"\" + v1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tvar v2 = v;\r\n\t\t\t\tif(isNaN(v2)) this.buf.b += \"k\"; else if(!isFinite(v2)) if(v2 < 0) this.buf.b += \"m\"; else this.buf.b += \"p\"; else {\r\n\t\t\t\t\tthis.buf.b += \"d\";\r\n\t\t\t\t\tif(v2 == null) this.buf.b += \"null\"; else this.buf.b += \"\" + v2;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tif(v) this.buf.b += \"t\"; else this.buf.b += \"f\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\tvar c = _g[2];\r\n\t\t\t\tif(c == String) {\r\n\t\t\t\t\tthis.serializeString(v);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.useCache && this.serializeRef(v)) return;\r\n\t\t\t\tswitch(c) {\r\n\t\t\t\tcase Array:\r\n\t\t\t\t\tvar ucount = 0;\r\n\t\t\t\t\tthis.buf.b += \"a\";\r\n\t\t\t\t\tvar l = v.length;\r\n\t\t\t\t\tvar _g1 = 0;\r\n\t\t\t\t\twhile(_g1 < l) {\r\n\t\t\t\t\t\tvar i = _g1++;\r\n\t\t\t\t\t\tif(v[i] == null) ucount++; else {\r\n\t\t\t\t\t\t\tif(ucount > 0) {\r\n\t\t\t\t\t\t\t\tif(ucount == 1) this.buf.b += \"n\"; else {\r\n\t\t\t\t\t\t\t\t\tthis.buf.b += \"u\";\r\n\t\t\t\t\t\t\t\t\tif(ucount == null) this.buf.b += \"null\"; else this.buf.b += \"\" + ucount;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tucount = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis.serialize(v[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(ucount > 0) {\r\n\t\t\t\t\t\tif(ucount == 1) this.buf.b += \"n\"; else {\r\n\t\t\t\t\t\t\tthis.buf.b += \"u\";\r\n\t\t\t\t\t\t\tif(ucount == null) this.buf.b += \"null\"; else this.buf.b += \"\" + ucount;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.buf.b += \"h\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase List:\r\n\t\t\t\t\tthis.buf.b += \"l\";\r\n\t\t\t\t\tvar v3 = v;\r\n\t\t\t\t\tvar _g1_head = v3.h;\r\n\t\t\t\t\tvar _g1_val = null;\r\n\t\t\t\t\twhile(_g1_head != null) {\r\n\t\t\t\t\t\tvar i1;\r\n\t\t\t\t\t\t_g1_val = _g1_head[0];\r\n\t\t\t\t\t\t_g1_head = _g1_head[1];\r\n\t\t\t\t\t\ti1 = _g1_val;\r\n\t\t\t\t\t\tthis.serialize(i1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.buf.b += \"h\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase Date:\r\n\t\t\t\t\tvar d = v;\r\n\t\t\t\t\tthis.buf.b += \"v\";\r\n\t\t\t\t\tthis.buf.add(d.getTime());\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase haxe_ds_StringMap:\r\n\t\t\t\t\tthis.buf.b += \"b\";\r\n\t\t\t\t\tvar v4 = v;\r\n\t\t\t\t\tvar $it0 = v4.keys();\r\n\t\t\t\t\twhile( $it0.hasNext() ) {\r\n\t\t\t\t\t\tvar k = $it0.next();\r\n\t\t\t\t\t\tthis.serializeString(k);\r\n\t\t\t\t\t\tthis.serialize(__map_reserved[k] != null?v4.getReserved(k):v4.h[k]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.buf.b += \"h\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase haxe_ds_IntMap:\r\n\t\t\t\t\tthis.buf.b += \"q\";\r\n\t\t\t\t\tvar v5 = v;\r\n\t\t\t\t\tvar $it1 = v5.keys();\r\n\t\t\t\t\twhile( $it1.hasNext() ) {\r\n\t\t\t\t\t\tvar k1 = $it1.next();\r\n\t\t\t\t\t\tthis.buf.b += \":\";\r\n\t\t\t\t\t\tif(k1 == null) this.buf.b += \"null\"; else this.buf.b += \"\" + k1;\r\n\t\t\t\t\t\tthis.serialize(v5.h[k1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.buf.b += \"h\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase haxe_ds_ObjectMap:\r\n\t\t\t\t\tthis.buf.b += \"M\";\r\n\t\t\t\t\tvar v6 = v;\r\n\t\t\t\t\tvar $it2 = v6.keys();\r\n\t\t\t\t\twhile( $it2.hasNext() ) {\r\n\t\t\t\t\t\tvar k2 = $it2.next();\r\n\t\t\t\t\t\tvar id = Reflect.field(k2,\"__id__\");\r\n\t\t\t\t\t\tReflect.deleteField(k2,\"__id__\");\r\n\t\t\t\t\t\tthis.serialize(k2);\r\n\t\t\t\t\t\tk2.__id__ = id;\r\n\t\t\t\t\t\tthis.serialize(v6.h[k2.__id__]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.buf.b += \"h\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase haxe_io_Bytes:\r\n\t\t\t\t\tvar v7 = v;\r\n\t\t\t\t\tvar i2 = 0;\r\n\t\t\t\t\tvar max = v7.length - 2;\r\n\t\t\t\t\tvar charsBuf = new StringBuf();\r\n\t\t\t\t\tvar b64 = haxe_Serializer.BASE64;\r\n\t\t\t\t\twhile(i2 < max) {\r\n\t\t\t\t\t\tvar b1 = v7.get(i2++);\r\n\t\t\t\t\t\tvar b2 = v7.get(i2++);\r\n\t\t\t\t\t\tvar b3 = v7.get(i2++);\r\n\t\t\t\t\t\tcharsBuf.add(b64.charAt(b1 >> 2));\r\n\t\t\t\t\t\tcharsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));\r\n\t\t\t\t\t\tcharsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));\r\n\t\t\t\t\t\tcharsBuf.add(b64.charAt(b3 & 63));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(i2 == max) {\r\n\t\t\t\t\t\tvar b11 = v7.get(i2++);\r\n\t\t\t\t\t\tvar b21 = v7.get(i2++);\r\n\t\t\t\t\t\tcharsBuf.add(b64.charAt(b11 >> 2));\r\n\t\t\t\t\t\tcharsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));\r\n\t\t\t\t\t\tcharsBuf.add(b64.charAt(b21 << 2 & 63));\r\n\t\t\t\t\t} else if(i2 == max + 1) {\r\n\t\t\t\t\t\tvar b12 = v7.get(i2++);\r\n\t\t\t\t\t\tcharsBuf.add(b64.charAt(b12 >> 2));\r\n\t\t\t\t\t\tcharsBuf.add(b64.charAt(b12 << 4 & 63));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar chars = charsBuf.b;\r\n\t\t\t\t\tthis.buf.b += \"s\";\r\n\t\t\t\t\tif(chars.length == null) this.buf.b += \"null\"; else this.buf.b += \"\" + chars.length;\r\n\t\t\t\t\tthis.buf.b += \":\";\r\n\t\t\t\t\tif(chars == null) this.buf.b += \"null\"; else this.buf.b += \"\" + chars;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(this.useCache) this.cache.pop();\r\n\t\t\t\t\tif(v.hxSerialize != null) {\r\n\t\t\t\t\t\tthis.buf.b += \"C\";\r\n\t\t\t\t\t\tthis.serializeString(Type.getClassName(c));\r\n\t\t\t\t\t\tif(this.useCache) this.cache.push(v);\r\n\t\t\t\t\t\tv.hxSerialize(this);\r\n\t\t\t\t\t\tthis.buf.b += \"g\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.buf.b += \"c\";\r\n\t\t\t\t\t\tthis.serializeString(Type.getClassName(c));\r\n\t\t\t\t\t\tif(this.useCache) this.cache.push(v);\r\n\t\t\t\t\t\tthis.serializeFields(v);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tif(js_Boot.__instanceof(v,Class)) {\r\n\t\t\t\t\tvar className = Type.getClassName(v);\r\n\t\t\t\t\tthis.buf.b += \"A\";\r\n\t\t\t\t\tthis.serializeString(className);\r\n\t\t\t\t} else if(js_Boot.__instanceof(v,Enum)) {\r\n\t\t\t\t\tthis.buf.b += \"B\";\r\n\t\t\t\t\tthis.serializeString(Type.getEnumName(v));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif(this.useCache && this.serializeRef(v)) return;\r\n\t\t\t\t\tthis.buf.b += \"o\";\r\n\t\t\t\t\tthis.serializeFields(v);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 7:\r\n\t\t\t\tvar e = _g[2];\r\n\t\t\t\tif(this.useCache) {\r\n\t\t\t\t\tif(this.serializeRef(v)) return;\r\n\t\t\t\t\tthis.cache.pop();\r\n\t\t\t\t}\r\n\t\t\t\tif(this.useEnumIndex) this.buf.b += \"j\"; else this.buf.b += \"w\";\r\n\t\t\t\tthis.serializeString(Type.getEnumName(e));\r\n\t\t\t\tif(this.useEnumIndex) {\r\n\t\t\t\t\tthis.buf.b += \":\";\r\n\t\t\t\t\tthis.buf.b += Std.string(v[1]);\r\n\t\t\t\t} else this.serializeString(v[0]);\r\n\t\t\t\tthis.buf.b += \":\";\r\n\t\t\t\tvar l1 = v.length;\r\n\t\t\t\tthis.buf.b += Std.string(l1 - 2);\r\n\t\t\t\tvar _g11 = 2;\r\n\t\t\t\twhile(_g11 < l1) {\r\n\t\t\t\t\tvar i3 = _g11++;\r\n\t\t\t\t\tthis.serialize(v[i3]);\r\n\t\t\t\t}\r\n\t\t\t\tif(this.useCache) this.cache.push(v);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tthrow new js__$Boot_HaxeError(\"Cannot serialize function\");\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new js__$Boot_HaxeError(\"Cannot serialize \" + Std.string(v));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t,__class__: haxe_Serializer\r\n};\r\nvar haxe_Unserializer = function(buf) {\r\n\tthis.buf = buf;\r\n\tthis.length = buf.length;\r\n\tthis.pos = 0;\r\n\tthis.scache = [];\r\n\tthis.cache = [];\r\n\tvar r = haxe_Unserializer.DEFAULT_RESOLVER;\r\n\tif(r == null) {\r\n\t\tr = Type;\r\n\t\thaxe_Unserializer.DEFAULT_RESOLVER = r;\r\n\t}\r\n\tthis.setResolver(r);\r\n};\r\n$hxClasses[\"haxe.Unserializer\"] = haxe_Unserializer;\r\nhaxe_Unserializer.__name__ = [\"haxe\",\"Unserializer\"];\r\nhaxe_Unserializer.initCodes = function() {\r\n\tvar codes = [];\r\n\tvar _g1 = 0;\r\n\tvar _g = haxe_Unserializer.BASE64.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tcodes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;\r\n\t}\r\n\treturn codes;\r\n};\r\nhaxe_Unserializer.prototype = {\r\n\tsetResolver: function(r) {\r\n\t\tif(r == null) this.resolver = { resolveClass : function(_) {\r\n\t\t\treturn null;\r\n\t\t}, resolveEnum : function(_1) {\r\n\t\t\treturn null;\r\n\t\t}}; else this.resolver = r;\r\n\t}\r\n\t,get: function(p) {\r\n\t\treturn this.buf.charCodeAt(p);\r\n\t}\r\n\t,readDigits: function() {\r\n\t\tvar k = 0;\r\n\t\tvar s = false;\r\n\t\tvar fpos = this.pos;\r\n\t\twhile(true) {\r\n\t\t\tvar c = this.buf.charCodeAt(this.pos);\r\n\t\t\tif(c != c) break;\r\n\t\t\tif(c == 45) {\r\n\t\t\t\tif(this.pos != fpos) break;\r\n\t\t\t\ts = true;\r\n\t\t\t\tthis.pos++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif(c < 48 || c > 57) break;\r\n\t\t\tk = k * 10 + (c - 48);\r\n\t\t\tthis.pos++;\r\n\t\t}\r\n\t\tif(s) k *= -1;\r\n\t\treturn k;\r\n\t}\r\n\t,readFloat: function() {\r\n\t\tvar p1 = this.pos;\r\n\t\twhile(true) {\r\n\t\t\tvar c = this.buf.charCodeAt(this.pos);\r\n\t\t\tif(c >= 43 && c < 58 || c == 101 || c == 69) this.pos++; else break;\r\n\t\t}\r\n\t\treturn Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));\r\n\t}\r\n\t,unserializeObject: function(o) {\r\n\t\twhile(true) {\r\n\t\t\tif(this.pos >= this.length) throw new js__$Boot_HaxeError(\"Invalid object\");\r\n\t\t\tif(this.buf.charCodeAt(this.pos) == 103) break;\r\n\t\t\tvar k = this.unserialize();\r\n\t\t\tif(!(typeof(k) == \"string\")) throw new js__$Boot_HaxeError(\"Invalid object key\");\r\n\t\t\tvar v = this.unserialize();\r\n\t\t\to[k] = v;\r\n\t\t}\r\n\t\tthis.pos++;\r\n\t}\r\n\t,unserializeEnum: function(edecl,tag) {\r\n\t\tif(this.get(this.pos++) != 58) throw new js__$Boot_HaxeError(\"Invalid enum format\");\r\n\t\tvar nargs = this.readDigits();\r\n\t\tif(nargs == 0) return Type.createEnum(edecl,tag);\r\n\t\tvar args = [];\r\n\t\twhile(nargs-- > 0) args.push(this.unserialize());\r\n\t\treturn Type.createEnum(edecl,tag,args);\r\n\t}\r\n\t,unserialize: function() {\r\n\t\tvar _g = this.get(this.pos++);\r\n\t\tswitch(_g) {\r\n\t\tcase 110:\r\n\t\t\treturn null;\r\n\t\tcase 116:\r\n\t\t\treturn true;\r\n\t\tcase 102:\r\n\t\t\treturn false;\r\n\t\tcase 122:\r\n\t\t\treturn 0;\r\n\t\tcase 105:\r\n\t\t\treturn this.readDigits();\r\n\t\tcase 100:\r\n\t\t\treturn this.readFloat();\r\n\t\tcase 121:\r\n\t\t\tvar len = this.readDigits();\r\n\t\t\tif(this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError(\"Invalid string length\");\r\n\t\t\tvar s = HxOverrides.substr(this.buf,this.pos,len);\r\n\t\t\tthis.pos += len;\r\n\t\t\ts = decodeURIComponent(s.split(\"+\").join(\" \"));\r\n\t\t\tthis.scache.push(s);\r\n\t\t\treturn s;\r\n\t\tcase 107:\r\n\t\t\treturn NaN;\r\n\t\tcase 109:\r\n\t\t\treturn -Infinity;\r\n\t\tcase 112:\r\n\t\t\treturn Infinity;\r\n\t\tcase 97:\r\n\t\t\tvar buf = this.buf;\r\n\t\t\tvar a = [];\r\n\t\t\tthis.cache.push(a);\r\n\t\t\twhile(true) {\r\n\t\t\t\tvar c = this.buf.charCodeAt(this.pos);\r\n\t\t\t\tif(c == 104) {\r\n\t\t\t\t\tthis.pos++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif(c == 117) {\r\n\t\t\t\t\tthis.pos++;\r\n\t\t\t\t\tvar n = this.readDigits();\r\n\t\t\t\t\ta[a.length + n - 1] = null;\r\n\t\t\t\t} else a.push(this.unserialize());\r\n\t\t\t}\r\n\t\t\treturn a;\r\n\t\tcase 111:\r\n\t\t\tvar o = { };\r\n\t\t\tthis.cache.push(o);\r\n\t\t\tthis.unserializeObject(o);\r\n\t\t\treturn o;\r\n\t\tcase 114:\r\n\t\t\tvar n1 = this.readDigits();\r\n\t\t\tif(n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError(\"Invalid reference\");\r\n\t\t\treturn this.cache[n1];\r\n\t\tcase 82:\r\n\t\t\tvar n2 = this.readDigits();\r\n\t\t\tif(n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError(\"Invalid string reference\");\r\n\t\t\treturn this.scache[n2];\r\n\t\tcase 120:\r\n\t\t\tthrow new js__$Boot_HaxeError(this.unserialize());\r\n\t\t\tbreak;\r\n\t\tcase 99:\r\n\t\t\tvar name = this.unserialize();\r\n\t\t\tvar cl = this.resolver.resolveClass(name);\r\n\t\t\tif(cl == null) throw new js__$Boot_HaxeError(\"Class not found \" + name);\r\n\t\t\tvar o1 = Type.createEmptyInstance(cl);\r\n\t\t\tthis.cache.push(o1);\r\n\t\t\tthis.unserializeObject(o1);\r\n\t\t\treturn o1;\r\n\t\tcase 119:\r\n\t\t\tvar name1 = this.unserialize();\r\n\t\t\tvar edecl = this.resolver.resolveEnum(name1);\r\n\t\t\tif(edecl == null) throw new js__$Boot_HaxeError(\"Enum not found \" + name1);\r\n\t\t\tvar e = this.unserializeEnum(edecl,this.unserialize());\r\n\t\t\tthis.cache.push(e);\r\n\t\t\treturn e;\r\n\t\tcase 106:\r\n\t\t\tvar name2 = this.unserialize();\r\n\t\t\tvar edecl1 = this.resolver.resolveEnum(name2);\r\n\t\t\tif(edecl1 == null) throw new js__$Boot_HaxeError(\"Enum not found \" + name2);\r\n\t\t\tthis.pos++;\r\n\t\t\tvar index = this.readDigits();\r\n\t\t\tvar tag = Type.getEnumConstructs(edecl1)[index];\r\n\t\t\tif(tag == null) throw new js__$Boot_HaxeError(\"Unknown enum index \" + name2 + \"@\" + index);\r\n\t\t\tvar e1 = this.unserializeEnum(edecl1,tag);\r\n\t\t\tthis.cache.push(e1);\r\n\t\t\treturn e1;\r\n\t\tcase 108:\r\n\t\t\tvar l = new List();\r\n\t\t\tthis.cache.push(l);\r\n\t\t\tvar buf1 = this.buf;\r\n\t\t\twhile(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());\r\n\t\t\tthis.pos++;\r\n\t\t\treturn l;\r\n\t\tcase 98:\r\n\t\t\tvar h = new haxe_ds_StringMap();\r\n\t\t\tthis.cache.push(h);\r\n\t\t\tvar buf2 = this.buf;\r\n\t\t\twhile(this.buf.charCodeAt(this.pos) != 104) {\r\n\t\t\t\tvar s1 = this.unserialize();\r\n\t\t\t\th.set(s1,this.unserialize());\r\n\t\t\t}\r\n\t\t\tthis.pos++;\r\n\t\t\treturn h;\r\n\t\tcase 113:\r\n\t\t\tvar h1 = new haxe_ds_IntMap();\r\n\t\t\tthis.cache.push(h1);\r\n\t\t\tvar buf3 = this.buf;\r\n\t\t\tvar c1 = this.get(this.pos++);\r\n\t\t\twhile(c1 == 58) {\r\n\t\t\t\tvar i = this.readDigits();\r\n\t\t\t\th1.set(i,this.unserialize());\r\n\t\t\t\tc1 = this.get(this.pos++);\r\n\t\t\t}\r\n\t\t\tif(c1 != 104) throw new js__$Boot_HaxeError(\"Invalid IntMap format\");\r\n\t\t\treturn h1;\r\n\t\tcase 77:\r\n\t\t\tvar h2 = new haxe_ds_ObjectMap();\r\n\t\t\tthis.cache.push(h2);\r\n\t\t\tvar buf4 = this.buf;\r\n\t\t\twhile(this.buf.charCodeAt(this.pos) != 104) {\r\n\t\t\t\tvar s2 = this.unserialize();\r\n\t\t\t\th2.set(s2,this.unserialize());\r\n\t\t\t}\r\n\t\t\tthis.pos++;\r\n\t\t\treturn h2;\r\n\t\tcase 118:\r\n\t\t\tvar d;\r\n\t\t\tif(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {\r\n\t\t\t\tvar s3 = HxOverrides.substr(this.buf,this.pos,19);\r\n\t\t\t\td = HxOverrides.strDate(s3);\r\n\t\t\t\tthis.pos += 19;\r\n\t\t\t} else {\r\n\t\t\t\tvar t = this.readFloat();\r\n\t\t\t\tvar d1 = new Date();\r\n\t\t\t\td1.setTime(t);\r\n\t\t\t\td = d1;\r\n\t\t\t}\r\n\t\t\tthis.cache.push(d);\r\n\t\t\treturn d;\r\n\t\tcase 115:\r\n\t\t\tvar len1 = this.readDigits();\r\n\t\t\tvar buf5 = this.buf;\r\n\t\t\tif(this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError(\"Invalid bytes length\");\r\n\t\t\tvar codes = haxe_Unserializer.CODES;\r\n\t\t\tif(codes == null) {\r\n\t\t\t\tcodes = haxe_Unserializer.initCodes();\r\n\t\t\t\thaxe_Unserializer.CODES = codes;\r\n\t\t\t}\r\n\t\t\tvar i1 = this.pos;\r\n\t\t\tvar rest = len1 & 3;\r\n\t\t\tvar size;\r\n\t\t\tsize = (len1 >> 2) * 3 + (rest >= 2?rest - 1:0);\r\n\t\t\tvar max = i1 + (len1 - rest);\r\n\t\t\tvar bytes = haxe_io_Bytes.alloc(size);\r\n\t\t\tvar bpos = 0;\r\n\t\t\twhile(i1 < max) {\r\n\t\t\t\tvar c11 = codes[StringTools.fastCodeAt(buf5,i1++)];\r\n\t\t\t\tvar c2 = codes[StringTools.fastCodeAt(buf5,i1++)];\r\n\t\t\t\tbytes.set(bpos++,c11 << 2 | c2 >> 4);\r\n\t\t\t\tvar c3 = codes[StringTools.fastCodeAt(buf5,i1++)];\r\n\t\t\t\tbytes.set(bpos++,c2 << 4 | c3 >> 2);\r\n\t\t\t\tvar c4 = codes[StringTools.fastCodeAt(buf5,i1++)];\r\n\t\t\t\tbytes.set(bpos++,c3 << 6 | c4);\r\n\t\t\t}\r\n\t\t\tif(rest >= 2) {\r\n\t\t\t\tvar c12 = codes[StringTools.fastCodeAt(buf5,i1++)];\r\n\t\t\t\tvar c21 = codes[StringTools.fastCodeAt(buf5,i1++)];\r\n\t\t\t\tbytes.set(bpos++,c12 << 2 | c21 >> 4);\r\n\t\t\t\tif(rest == 3) {\r\n\t\t\t\t\tvar c31 = codes[StringTools.fastCodeAt(buf5,i1++)];\r\n\t\t\t\t\tbytes.set(bpos++,c21 << 4 | c31 >> 2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.pos += len1;\r\n\t\t\tthis.cache.push(bytes);\r\n\t\t\treturn bytes;\r\n\t\tcase 67:\r\n\t\t\tvar name3 = this.unserialize();\r\n\t\t\tvar cl1 = this.resolver.resolveClass(name3);\r\n\t\t\tif(cl1 == null) throw new js__$Boot_HaxeError(\"Class not found \" + name3);\r\n\t\t\tvar o2 = Type.createEmptyInstance(cl1);\r\n\t\t\tthis.cache.push(o2);\r\n\t\t\to2.hxUnserialize(this);\r\n\t\t\tif(this.get(this.pos++) != 103) throw new js__$Boot_HaxeError(\"Invalid custom data\");\r\n\t\t\treturn o2;\r\n\t\tcase 65:\r\n\t\t\tvar name4 = this.unserialize();\r\n\t\t\tvar cl2 = this.resolver.resolveClass(name4);\r\n\t\t\tif(cl2 == null) throw new js__$Boot_HaxeError(\"Class not found \" + name4);\r\n\t\t\treturn cl2;\r\n\t\tcase 66:\r\n\t\t\tvar name5 = this.unserialize();\r\n\t\t\tvar e2 = this.resolver.resolveEnum(name5);\r\n\t\t\tif(e2 == null) throw new js__$Boot_HaxeError(\"Enum not found \" + name5);\r\n\t\t\treturn e2;\r\n\t\tdefault:\r\n\t\t}\r\n\t\tthis.pos--;\r\n\t\tthrow new js__$Boot_HaxeError(\"Invalid char \" + this.buf.charAt(this.pos) + \" at position \" + this.pos);\r\n\t}\r\n\t,__class__: haxe_Unserializer\r\n};\r\nvar haxe_ds_IntMap = function() {\r\n\tthis.h = { };\r\n};\r\n$hxClasses[\"haxe.ds.IntMap\"] = haxe_ds_IntMap;\r\nhaxe_ds_IntMap.__name__ = [\"haxe\",\"ds\",\"IntMap\"];\r\nhaxe_ds_IntMap.__interfaces__ = [haxe_IMap];\r\nhaxe_ds_IntMap.prototype = {\r\n\tset: function(key,value) {\r\n\t\tthis.h[key] = value;\r\n\t}\r\n\t,remove: function(key) {\r\n\t\tif(!this.h.hasOwnProperty(key)) return false;\r\n\t\tdelete(this.h[key]);\r\n\t\treturn true;\r\n\t}\r\n\t,keys: function() {\r\n\t\tvar a = [];\r\n\t\tfor( var key in this.h ) {\r\n\t\tif(this.h.hasOwnProperty(key)) a.push(key | 0);\r\n\t\t}\r\n\t\treturn HxOverrides.iter(a);\r\n\t}\r\n\t,__class__: haxe_ds_IntMap\r\n};\r\nvar haxe_ds_ObjectMap = function() {\r\n\tthis.h = { };\r\n\tthis.h.__keys__ = { };\r\n};\r\n$hxClasses[\"haxe.ds.ObjectMap\"] = haxe_ds_ObjectMap;\r\nhaxe_ds_ObjectMap.__name__ = [\"haxe\",\"ds\",\"ObjectMap\"];\r\nhaxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];\r\nhaxe_ds_ObjectMap.prototype = {\r\n\tset: function(key,value) {\r\n\t\tvar id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);\r\n\t\tthis.h[id] = value;\r\n\t\tthis.h.__keys__[id] = key;\r\n\t}\r\n\t,keys: function() {\r\n\t\tvar a = [];\r\n\t\tfor( var key in this.h.__keys__ ) {\r\n\t\tif(this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);\r\n\t\t}\r\n\t\treturn HxOverrides.iter(a);\r\n\t}\r\n\t,__class__: haxe_ds_ObjectMap\r\n};\r\nvar haxe_ds_Option = $hxClasses[\"haxe.ds.Option\"] = { __ename__ : [\"haxe\",\"ds\",\"Option\"], __constructs__ : [\"Some\",\"None\"] };\r\nhaxe_ds_Option.Some = function(v) { var $x = [\"Some\",0,v]; $x.__enum__ = haxe_ds_Option; $x.toString = $estr; return $x; };\r\nhaxe_ds_Option.None = [\"None\",1];\r\nhaxe_ds_Option.None.toString = $estr;\r\nhaxe_ds_Option.None.__enum__ = haxe_ds_Option;\r\nvar haxe_ds_StringMap = function() {\r\n\tthis.h = { };\r\n};\r\n$hxClasses[\"haxe.ds.StringMap\"] = haxe_ds_StringMap;\r\nhaxe_ds_StringMap.__name__ = [\"haxe\",\"ds\",\"StringMap\"];\r\nhaxe_ds_StringMap.__interfaces__ = [haxe_IMap];\r\nhaxe_ds_StringMap.prototype = {\r\n\tset: function(key,value) {\r\n\t\tif(__map_reserved[key] != null) this.setReserved(key,value); else this.h[key] = value;\r\n\t}\r\n\t,get: function(key) {\r\n\t\tif(__map_reserved[key] != null) return this.getReserved(key);\r\n\t\treturn this.h[key];\r\n\t}\r\n\t,setReserved: function(key,value) {\r\n\t\tif(this.rh == null) this.rh = { };\r\n\t\tthis.rh[\"$\" + key] = value;\r\n\t}\r\n\t,getReserved: function(key) {\r\n\t\tif(this.rh == null) return null; else return this.rh[\"$\" + key];\r\n\t}\r\n\t,keys: function() {\r\n\t\tvar _this = this.arrayKeys();\r\n\t\treturn HxOverrides.iter(_this);\r\n\t}\r\n\t,arrayKeys: function() {\r\n\t\tvar out = [];\r\n\t\tfor( var key in this.h ) {\r\n\t\tif(this.h.hasOwnProperty(key)) out.push(key);\r\n\t\t}\r\n\t\tif(this.rh != null) {\r\n\t\t\tfor( var key in this.rh ) {\r\n\t\t\tif(key.charCodeAt(0) == 36) out.push(key.substr(1));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn out;\r\n\t}\r\n\t,__class__: haxe_ds_StringMap\r\n};\r\nvar haxe_io_Bytes = function(data) {\r\n\tthis.length = data.byteLength;\r\n\tthis.b = new Uint8Array(data);\r\n\tthis.b.bufferValue = data;\r\n\tdata.hxBytes = this;\r\n\tdata.bytes = this.b;\r\n};\r\n$hxClasses[\"haxe.io.Bytes\"] = haxe_io_Bytes;\r\nhaxe_io_Bytes.__name__ = [\"haxe\",\"io\",\"Bytes\"];\r\nhaxe_io_Bytes.alloc = function(length) {\r\n\treturn new haxe_io_Bytes(new ArrayBuffer(length));\r\n};\r\nhaxe_io_Bytes.prototype = {\r\n\tget: function(pos) {\r\n\t\treturn this.b[pos];\r\n\t}\r\n\t,set: function(pos,v) {\r\n\t\tthis.b[pos] = v & 255;\r\n\t}\r\n\t,__class__: haxe_io_Bytes\r\n};\r\nvar haxe_io_Error = $hxClasses[\"haxe.io.Error\"] = { __ename__ : [\"haxe\",\"io\",\"Error\"], __constructs__ : [\"Blocked\",\"Overflow\",\"OutsideBounds\",\"Custom\"] };\r\nhaxe_io_Error.Blocked = [\"Blocked\",0];\r\nhaxe_io_Error.Blocked.toString = $estr;\r\nhaxe_io_Error.Blocked.__enum__ = haxe_io_Error;\r\nhaxe_io_Error.Overflow = [\"Overflow\",1];\r\nhaxe_io_Error.Overflow.toString = $estr;\r\nhaxe_io_Error.Overflow.__enum__ = haxe_io_Error;\r\nhaxe_io_Error.OutsideBounds = [\"OutsideBounds\",2];\r\nhaxe_io_Error.OutsideBounds.toString = $estr;\r\nhaxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;\r\nhaxe_io_Error.Custom = function(e) { var $x = [\"Custom\",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };\r\nvar haxe_io_FPHelper = function() { };\r\n$hxClasses[\"haxe.io.FPHelper\"] = haxe_io_FPHelper;\r\nhaxe_io_FPHelper.__name__ = [\"haxe\",\"io\",\"FPHelper\"];\r\nhaxe_io_FPHelper.i32ToFloat = function(i) {\r\n\tvar sign = 1 - (i >>> 31 << 1);\r\n\tvar exp = i >>> 23 & 255;\r\n\tvar sig = i & 8388607;\r\n\tif(sig == 0 && exp == 0) return 0.0;\r\n\treturn sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);\r\n};\r\nhaxe_io_FPHelper.floatToI32 = function(f) {\r\n\tif(f == 0) return 0;\r\n\tvar af;\r\n\tif(f < 0) af = -f; else af = f;\r\n\tvar exp = Math.floor(Math.log(af) / 0.6931471805599453);\r\n\tif(exp < -127) exp = -127; else if(exp > 128) exp = 128;\r\n\tvar sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;\r\n\treturn (f < 0?-2147483648:0) | exp + 127 << 23 | sig;\r\n};\r\nhaxe_io_FPHelper.i64ToDouble = function(low,high) {\r\n\tvar sign = 1 - (high >>> 31 << 1);\r\n\tvar exp = (high >> 20 & 2047) - 1023;\r\n\tvar sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);\r\n\tif(sig == 0 && exp == -1023) return 0.0;\r\n\treturn sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);\r\n};\r\nhaxe_io_FPHelper.doubleToI64 = function(v) {\r\n\tvar i64 = haxe_io_FPHelper.i64tmp;\r\n\tif(v == 0) {\r\n\t\ti64.low = 0;\r\n\t\ti64.high = 0;\r\n\t} else {\r\n\t\tvar av;\r\n\t\tif(v < 0) av = -v; else av = v;\r\n\t\tvar exp = Math.floor(Math.log(av) / 0.6931471805599453);\r\n\t\tvar sig;\r\n\t\tvar v1 = (av / Math.pow(2,exp) - 1) * 4503599627370496.;\r\n\t\tsig = Math.round(v1);\r\n\t\tvar sig_l = sig | 0;\r\n\t\tvar sig_h = sig / 4294967296.0 | 0;\r\n\t\ti64.low = sig_l;\r\n\t\ti64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | sig_h;\r\n\t}\r\n\treturn i64;\r\n};\r\nvar js__$Boot_HaxeError = function(val) {\r\n\tError.call(this);\r\n\tthis.val = val;\r\n\tthis.message = String(val);\r\n\tif(Error.captureStackTrace) Error.captureStackTrace(this,js__$Boot_HaxeError);\r\n};\r\n$hxClasses[\"js._Boot.HaxeError\"] = js__$Boot_HaxeError;\r\njs__$Boot_HaxeError.__name__ = [\"js\",\"_Boot\",\"HaxeError\"];\r\njs__$Boot_HaxeError.__super__ = Error;\r\njs__$Boot_HaxeError.prototype = $extend(Error.prototype,{\r\n\t__class__: js__$Boot_HaxeError\r\n});\r\nvar js_Boot = function() { };\r\n$hxClasses[\"js.Boot\"] = js_Boot;\r\njs_Boot.__name__ = [\"js\",\"Boot\"];\r\njs_Boot.getClass = function(o) {\r\n\tif((o instanceof Array) && o.__enum__ == null) return Array; else {\r\n\t\tvar cl = o.__class__;\r\n\t\tif(cl != null) return cl;\r\n\t\tvar name = js_Boot.__nativeClassName(o);\r\n\t\tif(name != null) return js_Boot.__resolveNativeClass(name);\r\n\t\treturn null;\r\n\t}\r\n};\r\njs_Boot.__string_rec = function(o,s) {\r\n\tif(o == null) return \"null\";\r\n\tif(s.length >= 5) return \"<...>\";\r\n\tvar t = typeof(o);\r\n\tif(t == \"function\" && (o.__name__ || o.__ename__)) t = \"object\";\r\n\tswitch(t) {\r\n\tcase \"object\":\r\n\t\tif(o instanceof Array) {\r\n\t\t\tif(o.__enum__) {\r\n\t\t\t\tif(o.length == 2) return o[0];\r\n\t\t\t\tvar str2 = o[0] + \"(\";\r\n\t\t\t\ts += \"\\t\";\r\n\t\t\t\tvar _g1 = 2;\r\n\t\t\t\tvar _g = o.length;\r\n\t\t\t\twhile(_g1 < _g) {\r\n\t\t\t\t\tvar i1 = _g1++;\r\n\t\t\t\t\tif(i1 != 2) str2 += \",\" + js_Boot.__string_rec(o[i1],s); else str2 += js_Boot.__string_rec(o[i1],s);\r\n\t\t\t\t}\r\n\t\t\t\treturn str2 + \")\";\r\n\t\t\t}\r\n\t\t\tvar l = o.length;\r\n\t\t\tvar i;\r\n\t\t\tvar str1 = \"[\";\r\n\t\t\ts += \"\\t\";\r\n\t\t\tvar _g2 = 0;\r\n\t\t\twhile(_g2 < l) {\r\n\t\t\t\tvar i2 = _g2++;\r\n\t\t\t\tstr1 += (i2 > 0?\",\":\"\") + js_Boot.__string_rec(o[i2],s);\r\n\t\t\t}\r\n\t\t\tstr1 += \"]\";\r\n\t\t\treturn str1;\r\n\t\t}\r\n\t\tvar tostr;\r\n\t\ttry {\r\n\t\t\ttostr = o.toString;\r\n\t\t} catch( e ) {\r\n\t\t\tif (e instanceof js__$Boot_HaxeError) e = e.val;\r\n\t\t\treturn \"???\";\r\n\t\t}\r\n\t\tif(tostr != null && tostr != Object.toString && typeof(tostr) == \"function\") {\r\n\t\t\tvar s2 = o.toString();\r\n\t\t\tif(s2 != \"[object Object]\") return s2;\r\n\t\t}\r\n\t\tvar k = null;\r\n\t\tvar str = \"{\\n\";\r\n\t\ts += \"\\t\";\r\n\t\tvar hasp = o.hasOwnProperty != null;\r\n\t\tfor( var k in o ) {\r\n\t\tif(hasp && !o.hasOwnProperty(k)) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif(k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\") {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif(str.length != 2) str += \", \\n\";\r\n\t\tstr += s + k + \" : \" + js_Boot.__string_rec(o[k],s);\r\n\t\t}\r\n\t\ts = s.substring(1);\r\n\t\tstr += \"\\n\" + s + \"}\";\r\n\t\treturn str;\r\n\tcase \"function\":\r\n\t\treturn \"<function>\";\r\n\tcase \"string\":\r\n\t\treturn o;\r\n\tdefault:\r\n\t\treturn String(o);\r\n\t}\r\n};\r\njs_Boot.__interfLoop = function(cc,cl) {\r\n\tif(cc == null) return false;\r\n\tif(cc == cl) return true;\r\n\tvar intf = cc.__interfaces__;\r\n\tif(intf != null) {\r\n\t\tvar _g1 = 0;\r\n\t\tvar _g = intf.length;\r\n\t\twhile(_g1 < _g) {\r\n\t\t\tvar i = _g1++;\r\n\t\t\tvar i1 = intf[i];\r\n\t\t\tif(i1 == cl || js_Boot.__interfLoop(i1,cl)) return true;\r\n\t\t}\r\n\t}\r\n\treturn js_Boot.__interfLoop(cc.__super__,cl);\r\n};\r\njs_Boot.__instanceof = function(o,cl) {\r\n\tif(cl == null) return false;\r\n\tswitch(cl) {\r\n\tcase Int:\r\n\t\treturn (o|0) === o;\r\n\tcase Float:\r\n\t\treturn typeof(o) == \"number\";\r\n\tcase Bool:\r\n\t\treturn typeof(o) == \"boolean\";\r\n\tcase String:\r\n\t\treturn typeof(o) == \"string\";\r\n\tcase Array:\r\n\t\treturn (o instanceof Array) && o.__enum__ == null;\r\n\tcase Dynamic:\r\n\t\treturn true;\r\n\tdefault:\r\n\t\tif(o != null) {\r\n\t\t\tif(typeof(cl) == \"function\") {\r\n\t\t\t\tif(o instanceof cl) return true;\r\n\t\t\t\tif(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) return true;\r\n\t\t\t} else if(typeof(cl) == \"object\" && js_Boot.__isNativeObj(cl)) {\r\n\t\t\t\tif(o instanceof cl) return true;\r\n\t\t\t}\r\n\t\t} else return false;\r\n\t\tif(cl == Class && o.__name__ != null) return true;\r\n\t\tif(cl == Enum && o.__ename__ != null) return true;\r\n\t\treturn o.__enum__ == cl;\r\n\t}\r\n};\r\njs_Boot.__nativeClassName = function(o) {\r\n\tvar name = js_Boot.__toStr.call(o).slice(8,-1);\r\n\tif(name == \"Object\" || name == \"Function\" || name == \"Math\" || name == \"JSON\") return null;\r\n\treturn name;\r\n};\r\njs_Boot.__isNativeObj = function(o) {\r\n\treturn js_Boot.__nativeClassName(o) != null;\r\n};\r\njs_Boot.__resolveNativeClass = function(name) {\r\n\treturn $global[name];\r\n};\r\nvar js_html_compat_ArrayBuffer = function(a) {\r\n\tif((a instanceof Array) && a.__enum__ == null) {\r\n\t\tthis.a = a;\r\n\t\tthis.byteLength = a.length;\r\n\t} else {\r\n\t\tvar len = a;\r\n\t\tthis.a = [];\r\n\t\tvar _g = 0;\r\n\t\twhile(_g < len) {\r\n\t\t\tvar i = _g++;\r\n\t\t\tthis.a[i] = 0;\r\n\t\t}\r\n\t\tthis.byteLength = len;\r\n\t}\r\n};\r\n$hxClasses[\"js.html.compat.ArrayBuffer\"] = js_html_compat_ArrayBuffer;\r\njs_html_compat_ArrayBuffer.__name__ = [\"js\",\"html\",\"compat\",\"ArrayBuffer\"];\r\njs_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {\r\n\tvar u = new Uint8Array(this,begin,end == null?null:end - begin);\r\n\tvar result = new ArrayBuffer(u.byteLength);\r\n\tvar resultArray = new Uint8Array(result);\r\n\tresultArray.set(u);\r\n\treturn result;\r\n};\r\njs_html_compat_ArrayBuffer.prototype = {\r\n\tslice: function(begin,end) {\r\n\t\treturn new js_html_compat_ArrayBuffer(this.a.slice(begin,end));\r\n\t}\r\n\t,__class__: js_html_compat_ArrayBuffer\r\n};\r\nvar js_html_compat_DataView = function(buffer,byteOffset,byteLength) {\r\n\tthis.buf = buffer;\r\n\tif(byteOffset == null) this.offset = 0; else this.offset = byteOffset;\r\n\tif(byteLength == null) this.length = buffer.byteLength - this.offset; else this.length = byteLength;\r\n\tif(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);\r\n};\r\n$hxClasses[\"js.html.compat.DataView\"] = js_html_compat_DataView;\r\njs_html_compat_DataView.__name__ = [\"js\",\"html\",\"compat\",\"DataView\"];\r\njs_html_compat_DataView.prototype = {\r\n\tgetInt8: function(byteOffset) {\r\n\t\tvar v = this.buf.a[this.offset + byteOffset];\r\n\t\tif(v >= 128) return v - 256; else return v;\r\n\t}\r\n\t,getUint8: function(byteOffset) {\r\n\t\treturn this.buf.a[this.offset + byteOffset];\r\n\t}\r\n\t,getInt16: function(byteOffset,littleEndian) {\r\n\t\tvar v = this.getUint16(byteOffset,littleEndian);\r\n\t\tif(v >= 32768) return v - 65536; else return v;\r\n\t}\r\n\t,getUint16: function(byteOffset,littleEndian) {\r\n\t\tif(littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8; else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];\r\n\t}\r\n\t,getInt32: function(byteOffset,littleEndian) {\r\n\t\tvar p = this.offset + byteOffset;\r\n\t\tvar a = this.buf.a[p++];\r\n\t\tvar b = this.buf.a[p++];\r\n\t\tvar c = this.buf.a[p++];\r\n\t\tvar d = this.buf.a[p++];\r\n\t\tif(littleEndian) return a | b << 8 | c << 16 | d << 24; else return d | c << 8 | b << 16 | a << 24;\r\n\t}\r\n\t,getUint32: function(byteOffset,littleEndian) {\r\n\t\tvar v = this.getInt32(byteOffset,littleEndian);\r\n\t\tif(v < 0) return v + 4294967296.; else return v;\r\n\t}\r\n\t,getFloat32: function(byteOffset,littleEndian) {\r\n\t\treturn haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));\r\n\t}\r\n\t,getFloat64: function(byteOffset,littleEndian) {\r\n\t\tvar a = this.getInt32(byteOffset,littleEndian);\r\n\t\tvar b = this.getInt32(byteOffset + 4,littleEndian);\r\n\t\treturn haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);\r\n\t}\r\n\t,setInt8: function(byteOffset,value) {\r\n\t\tif(value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255; else this.buf.a[byteOffset + this.offset] = value & 255;\r\n\t}\r\n\t,setUint8: function(byteOffset,value) {\r\n\t\tthis.buf.a[byteOffset + this.offset] = value & 255;\r\n\t}\r\n\t,setInt16: function(byteOffset,value,littleEndian) {\r\n\t\tthis.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);\r\n\t}\r\n\t,setUint16: function(byteOffset,value,littleEndian) {\r\n\t\tvar p = byteOffset + this.offset;\r\n\t\tif(littleEndian) {\r\n\t\t\tthis.buf.a[p] = value & 255;\r\n\t\t\tthis.buf.a[p++] = value >> 8 & 255;\r\n\t\t} else {\r\n\t\t\tthis.buf.a[p++] = value >> 8 & 255;\r\n\t\t\tthis.buf.a[p] = value & 255;\r\n\t\t}\r\n\t}\r\n\t,setInt32: function(byteOffset,value,littleEndian) {\r\n\t\tthis.setUint32(byteOffset,value,littleEndian);\r\n\t}\r\n\t,setUint32: function(byteOffset,value,littleEndian) {\r\n\t\tvar p = byteOffset + this.offset;\r\n\t\tif(littleEndian) {\r\n\t\t\tthis.buf.a[p++] = value & 255;\r\n\t\t\tthis.buf.a[p++] = value >> 8 & 255;\r\n\t\t\tthis.buf.a[p++] = value >> 16 & 255;\r\n\t\t\tthis.buf.a[p++] = value >>> 24;\r\n\t\t} else {\r\n\t\t\tthis.buf.a[p++] = value >>> 24;\r\n\t\t\tthis.buf.a[p++] = value >> 16 & 255;\r\n\t\t\tthis.buf.a[p++] = value >> 8 & 255;\r\n\t\t\tthis.buf.a[p++] = value & 255;\r\n\t\t}\r\n\t}\r\n\t,setFloat32: function(byteOffset,value,littleEndian) {\r\n\t\tthis.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);\r\n\t}\r\n\t,setFloat64: function(byteOffset,value,littleEndian) {\r\n\t\tvar i64 = haxe_io_FPHelper.doubleToI64(value);\r\n\t\tif(littleEndian) {\r\n\t\t\tthis.setUint32(byteOffset,i64.low);\r\n\t\t\tthis.setUint32(byteOffset,i64.high);\r\n\t\t} else {\r\n\t\t\tthis.setUint32(byteOffset,i64.high);\r\n\t\t\tthis.setUint32(byteOffset,i64.low);\r\n\t\t}\r\n\t}\r\n\t,__class__: js_html_compat_DataView\r\n};\r\nvar js_html_compat_Uint8Array = function() { };\r\n$hxClasses[\"js.html.compat.Uint8Array\"] = js_html_compat_Uint8Array;\r\njs_html_compat_Uint8Array.__name__ = [\"js\",\"html\",\"compat\",\"Uint8Array\"];\r\njs_html_compat_Uint8Array._new = function(arg1,offset,length) {\r\n\tvar arr;\r\n\tif(typeof(arg1) == \"number\") {\r\n\t\tarr = [];\r\n\t\tvar _g = 0;\r\n\t\twhile(_g < arg1) {\r\n\t\t\tvar i = _g++;\r\n\t\t\tarr[i] = 0;\r\n\t\t}\r\n\t\tarr.byteLength = arr.length;\r\n\t\tarr.byteOffset = 0;\r\n\t\tarr.buffer = new js_html_compat_ArrayBuffer(arr);\r\n\t} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {\r\n\t\tvar buffer = arg1;\r\n\t\tif(offset == null) offset = 0;\r\n\t\tif(length == null) length = buffer.byteLength - offset;\r\n\t\tif(offset == 0) arr = buffer.a; else arr = buffer.a.slice(offset,offset + length);\r\n\t\tarr.byteLength = arr.length;\r\n\t\tarr.byteOffset = offset;\r\n\t\tarr.buffer = buffer;\r\n\t} else if((arg1 instanceof Array) && arg1.__enum__ == null) {\r\n\t\tarr = arg1.slice();\r\n\t\tarr.byteLength = arr.length;\r\n\t\tarr.byteOffset = 0;\r\n\t\tarr.buffer = new js_html_compat_ArrayBuffer(arr);\r\n\t} else throw new js__$Boot_HaxeError(\"TODO \" + Std.string(arg1));\r\n\tarr.subarray = js_html_compat_Uint8Array._subarray;\r\n\tarr.set = js_html_compat_Uint8Array._set;\r\n\treturn arr;\r\n};\r\njs_html_compat_Uint8Array._set = function(arg,offset) {\r\n\tvar t = this;\r\n\tif(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {\r\n\t\tvar a = arg;\r\n\t\tif(arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError(\"set() outside of range\");\r\n\t\tvar _g1 = 0;\r\n\t\tvar _g = arg.byteLength;\r\n\t\twhile(_g1 < _g) {\r\n\t\t\tvar i = _g1++;\r\n\t\t\tt[i + offset] = a[i];\r\n\t\t}\r\n\t} else if((arg instanceof Array) && arg.__enum__ == null) {\r\n\t\tvar a1 = arg;\r\n\t\tif(a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError(\"set() outside of range\");\r\n\t\tvar _g11 = 0;\r\n\t\tvar _g2 = a1.length;\r\n\t\twhile(_g11 < _g2) {\r\n\t\t\tvar i1 = _g11++;\r\n\t\t\tt[i1 + offset] = a1[i1];\r\n\t\t}\r\n\t} else throw new js__$Boot_HaxeError(\"TODO\");\r\n};\r\njs_html_compat_Uint8Array._subarray = function(start,end) {\r\n\tvar t = this;\r\n\tvar a = js_html_compat_Uint8Array._new(t.slice(start,end));\r\n\ta.byteOffset = start;\r\n\treturn a;\r\n};\r\nvar promhx_base_AsyncBase = function(d) {\r\n\tthis._resolved = false;\r\n\tthis._pending = false;\r\n\tthis._errorPending = false;\r\n\tthis._fulfilled = false;\r\n\tthis._update = [];\r\n\tthis._error = [];\r\n\tthis._errored = false;\r\n\tif(d != null) promhx_base_AsyncBase.link(d,this,function(x) {\r\n\t\treturn x;\r\n\t});\r\n};\r\n$hxClasses[\"promhx.base.AsyncBase\"] = promhx_base_AsyncBase;\r\npromhx_base_AsyncBase.__name__ = [\"promhx\",\"base\",\"AsyncBase\"];\r\npromhx_base_AsyncBase.link = function(current,next,f) {\r\n\tcurrent._update.push({ async : next, linkf : function(x) {\r\n\t\tnext.handleResolve(f(x));\r\n\t}});\r\n\tpromhx_base_AsyncBase.immediateLinkUpdate(current,next,f);\r\n};\r\npromhx_base_AsyncBase.immediateLinkUpdate = function(current,next,f) {\r\n\tif(current._errored && !current._errorPending && !(current._error.length > 0)) next.handleError(current._errorVal);\r\n\tif(current._resolved && !current._pending) try {\r\n\t\tnext.handleResolve(f(current._val));\r\n\t} catch( e ) {\r\n\t\tif (e instanceof js__$Boot_HaxeError) e = e.val;\r\n\t\tnext.handleError(e);\r\n\t}\r\n};\r\npromhx_base_AsyncBase.linkAll = function(all,next) {\r\n\tvar cthen = function(arr,current,v) {\r\n\t\tif(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {\r\n\t\t\tvar vals;\r\n\t\t\tvar _g = [];\r\n\t\t\tvar $it0 = $iterator(all)();\r\n\t\t\twhile( $it0.hasNext() ) {\r\n\t\t\t\tvar a = $it0.next();\r\n\t\t\t\t_g.push(a == current?v:a._val);\r\n\t\t\t}\r\n\t\t\tvals = _g;\r\n\t\t\tnext.handleResolve(vals);\r\n\t\t}\r\n\t\tnull;\r\n\t\treturn;\r\n\t};\r\n\tvar $it1 = $iterator(all)();\r\n\twhile( $it1.hasNext() ) {\r\n\t\tvar a1 = $it1.next();\r\n\t\ta1._update.push({ async : next, linkf : (function(f,a11,a2) {\r\n\t\t\treturn function(v1) {\r\n\t\t\t\tf(a11,a2,v1);\r\n\t\t\t\treturn;\r\n\t\t\t};\r\n\t\t})(cthen,(function($this) {\r\n\t\t\tvar $r;\r\n\t\t\tvar _g1 = [];\r\n\t\t\tvar $it2 = $iterator(all)();\r\n\t\t\twhile( $it2.hasNext() ) {\r\n\t\t\t\tvar a21 = $it2.next();\r\n\t\t\t\tif(a21 != a1) _g1.push(a21);\r\n\t\t\t}\r\n\t\t\t$r = _g1;\r\n\t\t\treturn $r;\r\n\t\t}(this)),a1)});\r\n\t}\r\n\tif(promhx_base_AsyncBase.allFulfilled(all)) next.handleResolve((function($this) {\r\n\t\tvar $r;\r\n\t\tvar _g2 = [];\r\n\t\tvar $it3 = $iterator(all)();\r\n\t\twhile( $it3.hasNext() ) {\r\n\t\t\tvar a3 = $it3.next();\r\n\t\t\t_g2.push(a3._val);\r\n\t\t}\r\n\t\t$r = _g2;\r\n\t\treturn $r;\r\n\t}(this)));\r\n};\r\npromhx_base_AsyncBase.pipeLink = function(current,ret,f) {\r\n\tvar linked = false;\r\n\tvar linkf = function(x) {\r\n\t\tif(!linked) {\r\n\t\t\tlinked = true;\r\n\t\t\tvar pipe_ret = f(x);\r\n\t\t\tpipe_ret._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});\r\n\t\t\tpromhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret,function(x1) {\r\n\t\t\t\treturn x1;\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tcurrent._update.push({ async : ret, linkf : linkf});\r\n\tif(current._resolved && !current._pending) try {\r\n\t\tlinkf(current._val);\r\n\t} catch( e ) {\r\n\t\tif (e instanceof js__$Boot_HaxeError) e = e.val;\r\n\t\tret.handleError(e);\r\n\t}\r\n};\r\npromhx_base_AsyncBase.allResolved = function($as) {\r\n\tvar $it0 = $iterator($as)();\r\n\twhile( $it0.hasNext() ) {\r\n\t\tvar a = $it0.next();\r\n\t\tif(!a._resolved) return false;\r\n\t}\r\n\treturn true;\r\n};\r\npromhx_base_AsyncBase.allFulfilled = function($as) {\r\n\tvar $it0 = $iterator($as)();\r\n\twhile( $it0.hasNext() ) {\r\n\t\tvar a = $it0.next();\r\n\t\tif(!a._fulfilled) return false;\r\n\t}\r\n\treturn true;\r\n};\r\npromhx_base_AsyncBase.prototype = {\r\n\tcatchError: function(f) {\r\n\t\tthis._error.push(f);\r\n\t\treturn this;\r\n\t}\r\n\t,errorThen: function(f) {\r\n\t\tthis._errorMap = f;\r\n\t\treturn this;\r\n\t}\r\n\t,isResolved: function() {\r\n\t\treturn this._resolved;\r\n\t}\r\n\t,isErrored: function() {\r\n\t\treturn this._errored;\r\n\t}\r\n\t,isErrorHandled: function() {\r\n\t\treturn this._error.length > 0;\r\n\t}\r\n\t,isErrorPending: function() {\r\n\t\treturn this._errorPending;\r\n\t}\r\n\t,isFulfilled: function() {\r\n\t\treturn this._fulfilled;\r\n\t}\r\n\t,isPending: function() {\r\n\t\treturn this._pending;\r\n\t}\r\n\t,handleResolve: function(val) {\r\n\t\tthis._resolve(val);\r\n\t}\r\n\t,_resolve: function(val) {\r\n\t\tvar _g = this;\r\n\t\tif(this._pending) promhx_base_EventLoop.enqueue((function(f,a1) {\r\n\t\t\treturn function() {\r\n\t\t\t\tf(a1);\r\n\t\t\t};\r\n\t\t})($bind(this,this._resolve),val)); else {\r\n\t\t\tthis._resolved = true;\r\n\t\t\tthis._pending = true;\r\n\t\t\tpromhx_base_EventLoop.queue.add(function() {\r\n\t\t\t\t_g._val = val;\r\n\t\t\t\tvar _g1 = 0;\r\n\t\t\t\tvar _g2 = _g._update;\r\n\t\t\t\twhile(_g1 < _g2.length) {\r\n\t\t\t\t\tvar up = _g2[_g1];\r\n\t\t\t\t\t++_g1;\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tup.linkf(val);\r\n\t\t\t\t\t} catch( e ) {\r\n\t\t\t\t\t\tif (e instanceof js__$Boot_HaxeError) e = e.val;\r\n\t\t\t\t\t\tup.async.handleError(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t_g._fulfilled = true;\r\n\t\t\t\t_g._pending = false;\r\n\t\t\t});\r\n\t\t\tpromhx_base_EventLoop.continueOnNextLoop();\r\n\t\t}\r\n\t}\r\n\t,handleError: function(error) {\r\n\t\tthis._handleError(error);\r\n\t}\r\n\t,_handleError: function(error) {\r\n\t\tvar _g = this;\r\n\t\tvar update_errors = function(e) {\r\n\t\t\tif(_g._error.length > 0) {\r\n\t\t\t\tvar _g1 = 0;\r\n\t\t\t\tvar _g2 = _g._error;\r\n\t\t\t\twhile(_g1 < _g2.length) {\r\n\t\t\t\t\tvar ef = _g2[_g1];\r\n\t\t\t\t\t++_g1;\r\n\t\t\t\t\tef(e);\r\n\t\t\t\t}\r\n\t\t\t} else if(_g._update.length > 0) {\r\n\t\t\t\tvar _g11 = 0;\r\n\t\t\t\tvar _g21 = _g._update;\r\n\t\t\t\twhile(_g11 < _g21.length) {\r\n\t\t\t\t\tvar up = _g21[_g11];\r\n\t\t\t\t\t++_g11;\r\n\t\t\t\t\tup.async.handleError(e);\r\n\t\t\t\t}\r\n\t\t\t} else throw new js__$Boot_HaxeError(e);\r\n\t\t\t_g._errorPending = false;\r\n\t\t};\r\n\t\tif(!this._errorPending) {\r\n\t\t\tthis._errorPending = true;\r\n\t\t\tthis._errored = true;\r\n\t\t\tthis._errorVal = error;\r\n\t\t\tpromhx_base_EventLoop.queue.add(function() {\r\n\t\t\t\tif(_g._errorMap != null) try {\r\n\t\t\t\t\t_g._resolve(_g._errorMap(error));\r\n\t\t\t\t} catch( e1 ) {\r\n\t\t\t\t\tif (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;\r\n\t\t\t\t\tupdate_errors(e1);\r\n\t\t\t\t} else update_errors(error);\r\n\t\t\t});\r\n\t\t\tpromhx_base_EventLoop.continueOnNextLoop();\r\n\t\t}\r\n\t}\r\n\t,then: function(f) {\r\n\t\tvar ret = new promhx_base_AsyncBase(null);\r\n\t\tpromhx_base_AsyncBase.link(this,ret,f);\r\n\t\treturn ret;\r\n\t}\r\n\t,unlink: function(to) {\r\n\t\tvar _g = this;\r\n\t\tpromhx_base_EventLoop.queue.add(function() {\r\n\t\t\t_g._update = _g._update.filter(function(x) {\r\n\t\t\t\treturn x.async != to;\r\n\t\t\t});\r\n\t\t});\r\n\t\tpromhx_base_EventLoop.continueOnNextLoop();\r\n\t}\r\n\t,isLinked: function(to) {\r\n\t\tvar updated = false;\r\n\t\tvar _g = 0;\r\n\t\tvar _g1 = this._update;\r\n\t\twhile(_g < _g1.length) {\r\n\t\t\tvar u = _g1[_g];\r\n\t\t\t++_g;\r\n\t\t\tif(u.async == to) return true;\r\n\t\t}\r\n\t\treturn updated;\r\n\t}\r\n\t,__class__: promhx_base_AsyncBase\r\n};\r\nvar promhx_Deferred = $hx_exports.promhx.Deferred = function() {\r\n\tpromhx_base_AsyncBase.call(this);\r\n};\r\n$hxClasses[\"promhx.Deferred\"] = promhx_Deferred;\r\npromhx_Deferred.__name__ = [\"promhx\",\"Deferred\"];\r\npromhx_Deferred.__super__ = promhx_base_AsyncBase;\r\npromhx_Deferred.prototype = $extend(promhx_base_AsyncBase.prototype,{\r\n\tresolve: function(val) {\r\n\t\tthis.handleResolve(val);\r\n\t}\r\n\t,throwError: function(e) {\r\n\t\tthis.handleError(e);\r\n\t}\r\n\t,promise: function() {\r\n\t\treturn new promhx_Promise(this);\r\n\t}\r\n\t,stream: function() {\r\n\t\treturn new promhx_Stream(this);\r\n\t}\r\n\t,publicStream: function() {\r\n\t\treturn new promhx_PublicStream(this);\r\n\t}\r\n\t,__class__: promhx_Deferred\r\n});\r\nvar promhx_Promise = $hx_exports.promhx.Promise = function(d) {\r\n\tpromhx_base_AsyncBase.call(this,d);\r\n\tthis._rejected = false;\r\n};\r\n$hxClasses[\"promhx.Promise\"] = promhx_Promise;\r\npromhx_Promise.__name__ = [\"promhx\",\"Promise\"];\r\npromhx_Promise.whenAll = function(itb) {\r\n\tvar ret = new promhx_Promise(null);\r\n\tpromhx_base_AsyncBase.linkAll(itb,ret);\r\n\treturn ret;\r\n};\r\npromhx_Promise.promise = function(_val) {\r\n\tvar ret = new promhx_Promise();\r\n\tret.handleResolve(_val);\r\n\treturn ret;\r\n};\r\npromhx_Promise.__super__ = promhx_base_AsyncBase;\r\npromhx_Promise.prototype = $extend(promhx_base_AsyncBase.prototype,{\r\n\tisRejected: function() {\r\n\t\treturn this._rejected;\r\n\t}\r\n\t,reject: function(e) {\r\n\t\tthis._rejected = true;\r\n\t\tthis.handleError(e);\r\n\t}\r\n\t,handleResolve: function(val) {\r\n\t\tif(this._resolved) {\r\n\t\t\tvar msg = \"Promise has already been resolved\";\r\n\t\t\tthrow new js__$Boot_HaxeError(promhx_error_PromiseError.AlreadyResolved(msg));\r\n\t\t}\r\n\t\tthis._resolve(val);\r\n\t}\r\n\t,then: function(f) {\r\n\t\tvar ret = new promhx_Promise(null);\r\n\t\tpromhx_base_AsyncBase.link(this,ret,f);\r\n\t\treturn ret;\r\n\t}\r\n\t,unlink: function(to) {\r\n\t\tvar _g = this;\r\n\t\tpromhx_base_EventLoop.queue.add(function() {\r\n\t\t\tif(!_g._fulfilled) {\r\n\t\t\t\tvar msg = \"Downstream Promise is not fullfilled\";\r\n\t\t\t\t_g.handleError(promhx_error_PromiseError.DownstreamNotFullfilled(msg));\r\n\t\t\t} else _g._update = _g._update.filter(function(x) {\r\n\t\t\t\treturn x.async != to;\r\n\t\t\t});\r\n\t\t});\r\n\t\tpromhx_base_EventLoop.continueOnNextLoop();\r\n\t}\r\n\t,handleError: function(error) {\r\n\t\tthis._rejected = true;\r\n\t\tthis._handleError(error);\r\n\t}\r\n\t,pipe: function(f) {\r\n\t\tvar ret = new promhx_Promise(null);\r\n\t\tpromhx_base_AsyncBase.pipeLink(this,ret,f);\r\n\t\treturn ret;\r\n\t}\r\n\t,errorPipe: function(f) {\r\n\t\tvar ret = new promhx_Promise();\r\n\t\tthis.catchError(function(e) {\r\n\t\t\tvar piped = f(e);\r\n\t\t\tpiped.then($bind(ret,ret._resolve));\r\n\t\t});\r\n\t\tthis.then($bind(ret,ret._resolve));\r\n\t\treturn ret;\r\n\t}\r\n\t,__class__: promhx_Promise\r\n});\r\nvar promhx_Stream = $hx_exports.promhx.Stream = function(d) {\r\n\tpromhx_base_AsyncBase.call(this,d);\r\n\tthis._end_promise = new promhx_Promise();\r\n};\r\n$hxClasses[\"promhx.Stream\"] = promhx_Stream;\r\npromhx_Stream.__name__ = [\"promhx\",\"Stream\"];\r\npromhx_Stream.foreach = function(itb) {\r\n\tvar s = new promhx_Stream(null);\r\n\tvar $it0 = $iterator(itb)();\r\n\twhile( $it0.hasNext() ) {\r\n\t\tvar i = $it0.next();\r\n\t\ts.handleResolve(i);\r\n\t}\r\n\ts.end();\r\n\treturn s;\r\n};\r\npromhx_Stream.wheneverAll = function(itb) {\r\n\tvar ret = new promhx_Stream(null);\r\n\tpromhx_base_AsyncBase.linkAll(itb,ret);\r\n\treturn ret;\r\n};\r\npromhx_Stream.concatAll = function(itb) {\r\n\tvar ret = new promhx_Stream(null);\r\n\tvar $it0 = $iterator(itb)();\r\n\twhile( $it0.hasNext() ) {\r\n\t\tvar i = $it0.next();\r\n\t\tret.concat(i);\r\n\t}\r\n\treturn ret;\r\n};\r\npromhx_Stream.mergeAll = function(itb) {\r\n\tvar ret = new promhx_Stream(null);\r\n\tvar $it0 = $iterator(itb)();\r\n\twhile( $it0.hasNext() ) {\r\n\t\tvar i = $it0.next();\r\n\t\tret.merge(i);\r\n\t}\r\n\treturn ret;\r\n};\r\npromhx_Stream.stream = function(_val) {\r\n\tvar ret = new promhx_Stream(null);\r\n\tret.handleResolve(_val);\r\n\treturn ret;\r\n};\r\npromhx_Stream.__super__ = promhx_base_AsyncBase;\r\npromhx_Stream.prototype = $extend(promhx_base_AsyncBase.prototype,{\r\n\tthen: function(f) {\r\n\t\tvar ret = new promhx_Stream(null);\r\n\t\tpromhx_base_AsyncBase.link(this,ret,f);\r\n\t\tthis._end_promise._update.push({ async : ret._end_promise, linkf : function(x) {\r\n\t\t\tret.end();\r\n\t\t}});\r\n\t\treturn ret;\r\n\t}\r\n\t,detachStream: function(str) {\r\n\t\tvar filtered = [];\r\n\t\tvar removed = false;\r\n\t\tvar _g = 0;\r\n\t\tvar _g1 = this._update;\r\n\t\twhile(_g < _g1.length) {\r\n\t\t\tvar u = _g1[_g];\r\n\t\t\t++_g;\r\n\t\t\tif(u.async == str) {\r\n\t\t\t\tthis._end_promise._update = this._end_promise._update.filter(function(x) {\r\n\t\t\t\t\treturn x.async != str._end_promise;\r\n\t\t\t\t});\r\n\t\t\t\tremoved = true;\r\n\t\t\t} else filtered.push(u);\r\n\t\t}\r\n\t\tthis._update = filtered;\r\n\t\treturn removed;\r\n\t}\r\n\t,first: function() {\r\n\t\tvar s = new promhx_Promise(null);\r\n\t\tthis.then(function(x) {\r\n\t\t\tif(!s._resolved) s.handleResolve(x);\r\n\t\t});\r\n\t\treturn s;\r\n\t}\r\n\t,handleResolve: function(val) {\r\n\t\tif(!this._end && !this._pause) this._resolve(val);\r\n\t}\r\n\t,pause: function(set) {\r\n\t\tif(set == null) set = !this._pause;\r\n\t\tthis._pause = set;\r\n\t}\r\n\t,pipe: function(f) {\r\n\t\tvar ret = new promhx_Stream(null);\r\n\t\tpromhx_base_AsyncBase.pipeLink(this,ret,f);\r\n\t\tthis._end_promise.then(function(x) {\r\n\t\t\tret.end();\r\n\t\t});\r\n\t\treturn ret;\r\n\t}\r\n\t,errorPipe: function(f) {\r\n\t\tvar ret = new promhx_Stream(null);\r\n\t\tthis.catchError(function(e) {\r\n\t\t\tvar piped = f(e);\r\n\t\t\tpiped.then($bind(ret,ret._resolve));\r\n\t\t\tpiped._end_promise.then(($_=ret._end_promise,$bind($_,$_._resolve)));\r\n\t\t});\r\n\t\tthis.then($bind(ret,ret._resolve));\r\n\t\tthis._end_promise.then(function(x) {\r\n\t\t\tret.end();\r\n\t\t});\r\n\t\treturn ret;\r\n\t}\r\n\t,handleEnd: function() {\r\n\t\tif(this._pending) {\r\n\t\t\tpromhx_base_EventLoop.queue.add($bind(this,this.handleEnd));\r\n\t\t\tpromhx_base_EventLoop.continueOnNextLoop();\r\n\t\t} else if(this._end_promise._resolved) return; else {\r\n\t\t\tthis._end = true;\r\n\t\t\tvar o;\r\n\t\t\tif(this._resolved) o = haxe_ds_Option.Some(this._val); else o = haxe_ds_Option.None;\r\n\t\t\tthis._end_promise.handleResolve(o);\r\n\t\t\tthis._update = [];\r\n\t\t\tthis._error = [];\r\n\t\t}\r\n\t}\r\n\t,end: function() {\r\n\t\tpromhx_base_EventLoop.queue.add($bind(this,this.handleEnd));\r\n\t\tpromhx_base_EventLoop.continueOnNextLoop();\r\n\t\treturn this;\r\n\t}\r\n\t,endThen: function(f) {\r\n\t\treturn this._end_promise.then(f);\r\n\t}\r\n\t,filter: function(f) {\r\n\t\tvar ret = new promhx_Stream(null);\r\n\t\tthis._update.push({ async : ret, linkf : function(x) {\r\n\t\t\tif(f(x)) ret.handleResolve(x);\r\n\t\t}});\r\n\t\tpromhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x1) {\r\n\t\t\treturn x1;\r\n\t\t});\r\n\t\treturn ret;\r\n\t}\r\n\t,concat: function(s) {\r\n\t\tvar ret = new promhx_Stream(null);\r\n\t\tthis._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});\r\n\t\tpromhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {\r\n\t\t\treturn x;\r\n\t\t});\r\n\t\tthis._end_promise.then(function(_) {\r\n\t\t\ts.pipe(function(x1) {\r\n\t\t\t\tret.handleResolve(x1);\r\n\t\t\t\treturn ret;\r\n\t\t\t});\r\n\t\t\ts._end_promise.then(function(_1) {\r\n\t\t\t\tret.end();\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn ret;\r\n\t}\r\n\t,merge: function(s) {\r\n\t\tvar ret = new promhx_Stream(null);\r\n\t\tthis._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});\r\n\t\ts._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});\r\n\t\tpromhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {\r\n\t\t\treturn x;\r\n\t\t});\r\n\t\tpromhx_base_AsyncBase.immediateLinkUpdate(s,ret,function(x1) {\r\n\t\t\treturn x1;\r\n\t\t});\r\n\t\treturn ret;\r\n\t}\r\n\t,__class__: promhx_Stream\r\n});\r\nvar promhx_PublicStream = $hx_exports.promhx.PublicStream = function(def) {\r\n\tpromhx_Stream.call(this,def);\r\n};\r\n$hxClasses[\"promhx.PublicStream\"] = promhx_PublicStream;\r\npromhx_PublicStream.__name__ = [\"promhx\",\"PublicStream\"];\r\npromhx_PublicStream.publicstream = function(val) {\r\n\tvar ps = new promhx_PublicStream(null);\r\n\tps.handleResolve(val);\r\n\treturn ps;\r\n};\r\npromhx_PublicStream.__super__ = promhx_Stream;\r\npromhx_PublicStream.prototype = $extend(promhx_Stream.prototype,{\r\n\tresolve: function(val) {\r\n\t\tthis.handleResolve(val);\r\n\t}\r\n\t,throwError: function(e) {\r\n\t\tthis.handleError(e);\r\n\t}\r\n\t,update: function(val) {\r\n\t\tthis.handleResolve(val);\r\n\t}\r\n\t,__class__: promhx_PublicStream\r\n});\r\nvar promhx_base_EventLoop = function() { };\r\n$hxClasses[\"promhx.base.EventLoop\"] = promhx_base_EventLoop;\r\npromhx_base_EventLoop.__name__ = [\"promhx\",\"base\",\"EventLoop\"];\r\npromhx_base_EventLoop.enqueue = function(eqf) {\r\n\tpromhx_base_EventLoop.queue.add(eqf);\r\n\tpromhx_base_EventLoop.continueOnNextLoop();\r\n};\r\npromhx_base_EventLoop.set_nextLoop = function(f) {\r\n\tif(promhx_base_EventLoop.nextLoop != null) throw new js__$Boot_HaxeError(\"nextLoop has already been set\"); else promhx_base_EventLoop.nextLoop = f;\r\n\treturn promhx_base_EventLoop.nextLoop;\r\n};\r\npromhx_base_EventLoop.queueEmpty = function() {\r\n\treturn promhx_base_EventLoop.queue.isEmpty();\r\n};\r\npromhx_base_EventLoop.finish = function(max_iterations) {\r\n\tif(max_iterations == null) max_iterations = 1000;\r\n\tvar fn = null;\r\n\twhile(max_iterations-- > 0 && (fn = promhx_base_EventLoop.queue.pop()) != null) fn();\r\n\treturn promhx_base_EventLoop.queue.isEmpty();\r\n};\r\npromhx_base_EventLoop.clear = function() {\r\n\tpromhx_base_EventLoop.queue = new List();\r\n};\r\npromhx_base_EventLoop.f = function() {\r\n\tvar fn = promhx_base_EventLoop.queue.pop();\r\n\tif(fn != null) fn();\r\n\tif(!promhx_base_EventLoop.queue.isEmpty()) promhx_base_EventLoop.continueOnNextLoop();\r\n};\r\npromhx_base_EventLoop.continueOnNextLoop = function() {\r\n\tif(promhx_base_EventLoop.nextLoop != null) promhx_base_EventLoop.nextLoop(promhx_base_EventLoop.f); else setImmediate(promhx_base_EventLoop.f);\r\n};\r\nvar promhx_error_PromiseError = $hxClasses[\"promhx.error.PromiseError\"] = { __ename__ : [\"promhx\",\"error\",\"PromiseError\"], __constructs__ : [\"AlreadyResolved\",\"DownstreamNotFullfilled\"] };\r\npromhx_error_PromiseError.AlreadyResolved = function(message) { var $x = [\"AlreadyResolved\",0,message]; $x.__enum__ = promhx_error_PromiseError; $x.toString = $estr; return $x; };\r\npromhx_error_PromiseError.DownstreamNotFullfilled = function(message) { var $x = [\"DownstreamNotFullfilled\",1,message]; $x.__enum__ = promhx_error_PromiseError; $x.toString = $estr; return $x; };\r\nvar verb_Verb = function() { };\r\n$hxClasses[\"verb.Verb\"] = verb_Verb;\r\nverb_Verb.__name__ = [\"verb\",\"Verb\"];\r\nverb_Verb.main = function() {\r\n\tconsole.log(\"verb 2.1.0\");\r\n};\r\nvar verb_core_ArrayExtensions = function() { };\r\n$hxClasses[\"verb.core.ArrayExtensions\"] = verb_core_ArrayExtensions;\r\nverb_core_ArrayExtensions.__name__ = [\"verb\",\"core\",\"ArrayExtensions\"];\r\nverb_core_ArrayExtensions.alloc = function(a,n) {\r\n\tif(n < 0) return;\r\n\twhile(a.length < n) a.push(null);\r\n};\r\nverb_core_ArrayExtensions.reversed = function(a) {\r\n\tvar ac = a.slice();\r\n\tac.reverse();\r\n\treturn ac;\r\n};\r\nverb_core_ArrayExtensions.last = function(a) {\r\n\treturn a[a.length - 1];\r\n};\r\nverb_core_ArrayExtensions.first = function(a) {\r\n\treturn a[0];\r\n};\r\nverb_core_ArrayExtensions.spliceAndInsert = function(a,start,end,ele) {\r\n\ta.splice(start,end);\r\n\ta.splice(start,0,ele);\r\n};\r\nverb_core_ArrayExtensions.left = function(arr) {\r\n\tif(arr.length == 0) return [];\r\n\tvar len = Math.ceil(arr.length / 2);\r\n\treturn arr.slice(0,len);\r\n};\r\nverb_core_ArrayExtensions.right = function(arr) {\r\n\tif(arr.length == 0) return [];\r\n\tvar len = Math.ceil(arr.length / 2);\r\n\treturn arr.slice(len);\r\n};\r\nverb_core_ArrayExtensions.rightWithPivot = function(arr) {\r\n\tif(arr.length == 0) return [];\r\n\tvar len = Math.ceil(arr.length / 2);\r\n\treturn arr.slice(len - 1);\r\n};\r\nverb_core_ArrayExtensions.unique = function(arr,comp) {\r\n\tif(arr.length == 0) return [];\r\n\tvar uniques = [arr.pop()];\r\n\twhile(arr.length > 0) {\r\n\t\tvar ele = arr.pop();\r\n\t\tvar isUnique = true;\r\n\t\tvar _g = 0;\r\n\t\twhile(_g < uniques.length) {\r\n\t\t\tvar unique = uniques[_g];\r\n\t\t\t++_g;\r\n\t\t\tif(comp(ele,unique)) {\r\n\t\t\t\tisUnique = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(isUnique) uniques.push(ele);\r\n\t}\r\n\treturn uniques;\r\n};\r\nvar verb_core_Binomial = function() { };\r\n$hxClasses[\"verb.core.Binomial\"] = verb_core_Binomial;\r\nverb_core_Binomial.__name__ = [\"verb\",\"core\",\"Binomial\"];\r\nverb_core_Binomial.get = function(n,k) {\r\n\tif(k == 0.0) return 1.0;\r\n\tif(n == 0 || k > n) return 0.0;\r\n\tif(k > n - k) k = n - k;\r\n\tif(verb_core_Binomial.memo_exists(n,k)) return verb_core_Binomial.get_memo(n,k);\r\n\tvar r = 1;\r\n\tvar n_o = n;\r\n\tvar _g1 = 1;\r\n\tvar _g = k + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar d = _g1++;\r\n\t\tif(verb_core_Binomial.memo_exists(n_o,d)) {\r\n\t\t\tn--;\r\n\t\t\tr = verb_core_Binomial.get_memo(n_o,d);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tr *= n--;\r\n\t\tr /= d;\r\n\t\tverb_core_Binomial.memoize(n_o,d,r);\r\n\t}\r\n\treturn r;\r\n};\r\nverb_core_Binomial.get_no_memo = function(n,k) {\r\n\tif(k == 0) return 1;\r\n\tif(n == 0 || k > n) return 0;\r\n\tif(k > n - k) k = n - k;\r\n\tvar r = 1;\r\n\tvar n_o = n;\r\n\tvar _g1 = 1;\r\n\tvar _g = k + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar d = _g1++;\r\n\t\tr *= n--;\r\n\t\tr /= d;\r\n\t}\r\n\treturn r;\r\n};\r\nverb_core_Binomial.memo_exists = function(n,k) {\r\n\treturn verb_core_Binomial.memo.h.hasOwnProperty(n) && verb_core_Binomial.memo.h[n].h.hasOwnProperty(k);\r\n};\r\nverb_core_Binomial.get_memo = function(n,k) {\r\n\treturn verb_core_Binomial.memo.h[n].h[k];\r\n};\r\nverb_core_Binomial.memoize = function(n,k,val) {\r\n\tif(!verb_core_Binomial.memo.h.hasOwnProperty(n)) verb_core_Binomial.memo.set(n,new haxe_ds_IntMap());\r\n\tverb_core_Binomial.memo.h[n].h[k] = val;\r\n};\r\nvar verb_core_BoundingBox = $hx_exports.core.BoundingBox = function(pts) {\r\n\tthis.max = null;\r\n\tthis.min = null;\r\n\tthis.dim = 3;\r\n\tthis.initialized = false;\r\n\tif(pts != null) this.addRange(pts);\r\n};\r\n$hxClasses[\"verb.core.BoundingBox\"] = verb_core_BoundingBox;\r\nverb_core_BoundingBox.__name__ = [\"verb\",\"core\",\"BoundingBox\"];\r\nverb_core_BoundingBox.intervalsOverlap = function(a1,a2,b1,b2,tol) {\r\n\tif(tol == null) tol = -1;\r\n\tvar tol1;\r\n\tif(tol < -0.5) tol1 = verb_core_Constants.TOLERANCE; else tol1 = tol;\r\n\tvar x1 = Math.min(a1,a2) - tol1;\r\n\tvar x2 = Math.max(a1,a2) + tol1;\r\n\tvar y1 = Math.min(b1,b2) - tol1;\r\n\tvar y2 = Math.max(b1,b2) + tol1;\r\n\treturn x1 >= y1 && x1 <= y2 || x2 >= y1 && x2 <= y2 || y1 >= x1 && y1 <= x2 || y2 >= x1 && y2 <= x2;\r\n};\r\nverb_core_BoundingBox.prototype = {\r\n\tfromPoint: function(pt) {\r\n\t\treturn new verb_core_BoundingBox([pt]);\r\n\t}\r\n\t,add: function(point) {\r\n\t\tif(!this.initialized) {\r\n\t\t\tthis.dim = point.length;\r\n\t\t\tthis.min = point.slice(0);\r\n\t\t\tthis.max = point.slice(0);\r\n\t\t\tthis.initialized = true;\r\n\t\t\treturn this;\r\n\t\t}\r\n\t\tvar _g1 = 0;\r\n\t\tvar _g = this.dim;\r\n\t\twhile(_g1 < _g) {\r\n\t\t\tvar i = _g1++;\r\n\t\t\tif(point[i] > this.max[i]) this.max[i] = point[i];\r\n\t\t\tif(point[i] < this.min[i]) this.min[i] = point[i];\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t,addRange: function(points) {\r\n\t\tvar l = points.length;\r\n\t\tvar _g = 0;\r\n\t\twhile(_g < l) {\r\n\t\t\tvar i = _g++;\r\n\t\t\tthis.add(points[i]);\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\t,contains: function(point,tol) {\r\n\t\tif(tol == null) tol = -1;\r\n\t\tif(!this.initialized) return false;\r\n\t\treturn this.intersects(new verb_core_BoundingBox([point]),tol);\r\n\t}\r\n\t,intersects: function(bb,tol) {\r\n\t\tif(tol == null) tol = -1;\r\n\t\tif(!this.initialized || !bb.initialized) return false;\r\n\t\tvar a1 = this.min;\r\n\t\tvar a2 = this.max;\r\n\t\tvar b1 = bb.min;\r\n\t\tvar b2 = bb.max;\r\n\t\tvar _g1 = 0;\r\n\t\tvar _g = this.dim;\r\n\t\twhile(_g1 < _g) {\r\n\t\t\tvar i = _g1++;\r\n\t\t\tif(!verb_core_BoundingBox.intervalsOverlap(a1[i],a2[i],b1[i],b2[i],tol)) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t,clear: function() {\r\n\t\tthis.initialized = false;\r\n\t\treturn this;\r\n\t}\r\n\t,getLongestAxis: function() {\r\n\t\tvar max = 0.0;\r\n\t\tvar id = 0;\r\n\t\tvar _g1 = 0;\r\n\t\tvar _g = this.dim;\r\n\t\twhile(_g1 < _g) {\r\n\t\t\tvar i = _g1++;\r\n\t\t\tvar l = this.getAxisLength(i);\r\n\t\t\tif(l > max) {\r\n\t\t\t\tmax = l;\r\n\t\t\t\tid = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn id;\r\n\t}\r\n\t,getAxisLength: function(i) {\r\n\t\tif(i < 0 || i > this.dim - 1) return 0.0;\r\n\t\treturn Math.abs(this.min[i] - this.max[i]);\r\n\t}\r\n\t,intersect: function(bb,tol) {\r\n\t\tif(!this.initialized) return null;\r\n\t\tvar a1 = this.min;\r\n\t\tvar a2 = this.max;\r\n\t\tvar b1 = bb.min;\r\n\t\tvar b2 = bb.max;\r\n\t\tif(!this.intersects(bb,tol)) return null;\r\n\t\tvar maxbb = [];\r\n\t\tvar minbb = [];\r\n\t\tvar _g1 = 0;\r\n\t\tvar _g = this.dim;\r\n\t\twhile(_g1 < _g) {\r\n\t\t\tvar i = _g1++;\r\n\t\t\tmaxbb.push(Math.min(a2[i],b2[i]));\r\n\t\t\tminbb.push(Math.max(a1[i],b1[i]));\r\n\t\t}\r\n\t\treturn new verb_core_BoundingBox([minbb,maxbb]);\r\n\t}\r\n\t,__class__: verb_core_BoundingBox\r\n};\r\nvar verb_core_Constants = $hx_exports.core.Constants = function() { };\r\n$hxClasses[\"verb.core.Constants\"] = verb_core_Constants;\r\nverb_core_Constants.__name__ = [\"verb\",\"core\",\"Constants\"];\r\nvar verb_core_SerializableBase = $hx_exports.core.SerializableBase = function() { };\r\n$hxClasses[\"verb.core.SerializableBase\"] = verb_core_SerializableBase;\r\nverb_core_SerializableBase.__name__ = [\"verb\",\"core\",\"SerializableBase\"];\r\nverb_core_SerializableBase.prototype = {\r\n\tserialize: function() {\r\n\t\tvar serializer = new haxe_Serializer();\r\n\t\tserializer.serialize(this);\r\n\t\treturn serializer.toString();\r\n\t}\r\n\t,__class__: verb_core_SerializableBase\r\n};\r\nvar verb_core_Plane = $hx_exports.core.Plane = function(origin,normal) {\r\n\tthis.origin = origin;\r\n\tthis.normal = normal;\r\n};\r\n$hxClasses[\"verb.core.Plane\"] = verb_core_Plane;\r\nverb_core_Plane.__name__ = [\"verb\",\"core\",\"Plane\"];\r\nverb_core_Plane.__super__ = verb_core_SerializableBase;\r\nverb_core_Plane.prototype = $extend(verb_core_SerializableBase.prototype,{\r\n\t__class__: verb_core_Plane\r\n});\r\nvar verb_core_Ray = $hx_exports.core.Ray = function(origin,dir) {\r\n\tthis.origin = origin;\r\n\tthis.dir = dir;\r\n};\r\n$hxClasses[\"verb.core.Ray\"] = verb_core_Ray;\r\nverb_core_Ray.__name__ = [\"verb\",\"core\",\"Ray\"];\r\nverb_core_Ray.__super__ = verb_core_SerializableBase;\r\nverb_core_Ray.prototype = $extend(verb_core_SerializableBase.prototype,{\r\n\t__class__: verb_core_Ray\r\n});\r\nvar verb_core_NurbsCurveData = $hx_exports.core.NurbsCurveData = function(degree,knots,controlPoints) {\r\n\tthis.degree = degree;\r\n\tthis.controlPoints = controlPoints;\r\n\tthis.knots = knots;\r\n};\r\n$hxClasses[\"verb.core.NurbsCurveData\"] = verb_core_NurbsCurveData;\r\nverb_core_NurbsCurveData.__name__ = [\"verb\",\"core\",\"NurbsCurveData\"];\r\nverb_core_NurbsCurveData.__super__ = verb_core_SerializableBase;\r\nverb_core_NurbsCurveData.prototype = $extend(verb_core_SerializableBase.prototype,{\r\n\t__class__: verb_core_NurbsCurveData\r\n});\r\nvar verb_core_NurbsSurfaceData = $hx_exports.core.NurbsSurfaceData = function(degreeU,degreeV,knotsU,knotsV,controlPoints) {\r\n\tthis.degreeU = degreeU;\r\n\tthis.degreeV = degreeV;\r\n\tthis.knotsU = knotsU;\r\n\tthis.knotsV = knotsV;\r\n\tthis.controlPoints = controlPoints;\r\n};\r\n$hxClasses[\"verb.core.NurbsSurfaceData\"] = verb_core_NurbsSurfaceData;\r\nverb_core_NurbsSurfaceData.__name__ = [\"verb\",\"core\",\"NurbsSurfaceData\"];\r\nverb_core_NurbsSurfaceData.__super__ = verb_core_SerializableBase;\r\nverb_core_NurbsSurfaceData.prototype = $extend(verb_core_SerializableBase.prototype,{\r\n\t__class__: verb_core_NurbsSurfaceData\r\n});\r\nvar verb_core_MeshData = $hx_exports.core.MeshData = function(faces,points,normals,uvs) {\r\n\tthis.faces = faces;\r\n\tthis.points = points;\r\n\tthis.normals = normals;\r\n\tthis.uvs = uvs;\r\n};\r\n$hxClasses[\"verb.core.MeshData\"] = verb_core_MeshData;\r\nverb_core_MeshData.__name__ = [\"verb\",\"core\",\"MeshData\"];\r\nverb_core_MeshData.empty = function() {\r\n\treturn new verb_core_MeshData([],[],[],[]);\r\n};\r\nverb_core_MeshData.__super__ = verb_core_SerializableBase;\r\nverb_core_MeshData.prototype = $extend(verb_core_SerializableBase.prototype,{\r\n\t__class__: verb_core_MeshData\r\n});\r\nvar verb_core_PolylineData = $hx_exports.core.PolylineData = function(points,params) {\r\n\tthis.points = points;\r\n\tthis.params = params;\r\n};\r\n$hxClasses[\"verb.core.PolylineData\"] = verb_core_PolylineData;\r\nverb_core_PolylineData.__name__ = [\"verb\",\"core\",\"PolylineData\"];\r\nverb_core_PolylineData.__super__ = verb_core_SerializableBase;\r\nverb_core_PolylineData.prototype = $extend(verb_core_SerializableBase.prototype,{\r\n\t__class__: verb_core_PolylineData\r\n});\r\nvar verb_core_VolumeData = $hx_exports.core.VolumeData = function(degreeU,degreeV,degreeW,knotsU,knotsV,knotsW,controlPoints) {\r\n\tthis.degreeU = degreeU;\r\n\tthis.degreeV = degreeV;\r\n\tthis.degreeW = degreeW;\r\n\tthis.knotsU = knotsU;\r\n\tthis.knotsV = knotsV;\r\n\tthis.knotsW = knotsW;\r\n\tthis.controlPoints = controlPoints;\r\n};\r\n$hxClasses[\"verb.core.VolumeData\"] = verb_core_VolumeData;\r\nverb_core_VolumeData.__name__ = [\"verb\",\"core\",\"VolumeData\"];\r\nverb_core_VolumeData.__super__ = verb_core_SerializableBase;\r\nverb_core_VolumeData.prototype = $extend(verb_core_SerializableBase.prototype,{\r\n\t__class__: verb_core_VolumeData\r\n});\r\nvar verb_core_Pair = $hx_exports.core.Pair = function(item1,item2) {\r\n\tthis.item0 = item1;\r\n\tthis.item1 = item2;\r\n};\r\n$hxClasses[\"verb.core.Pair\"] = verb_core_Pair;\r\nverb_core_Pair.__name__ = [\"verb\",\"core\",\"Pair\"];\r\nverb_core_Pair.prototype = {\r\n\t__class__: verb_core_Pair\r\n};\r\nvar verb_core_Interval = $hx_exports.core.Interval = function(min,max) {\r\n\tthis.min = min;\r\n\tthis.max = max;\r\n};\r\n$hxClasses[\"verb.core.Interval\"] = verb_core_Interval;\r\nverb_core_Interval.__name__ = [\"verb\",\"core\",\"Interval\"];\r\nverb_core_Interval.prototype = {\r\n\t__class__: verb_core_Interval\r\n};\r\nvar verb_core_CurveCurveIntersection = $hx_exports.core.CurveCurveIntersection = function(point0,point1,u0,u1) {\r\n\tthis.point0 = point0;\r\n\tthis.point1 = point1;\r\n\tthis.u0 = u0;\r\n\tthis.u1 = u1;\r\n};\r\n$hxClasses[\"verb.core.CurveCurveIntersection\"] = verb_core_CurveCurveIntersection;\r\nverb_core_CurveCurveIntersection.__name__ = [\"verb\",\"core\",\"CurveCurveIntersection\"];\r\nverb_core_CurveCurveIntersection.prototype = {\r\n\t__class__: verb_core_CurveCurveIntersection\r\n};\r\nvar verb_core_CurveSurfaceIntersection = $hx_exports.core.CurveSurfaceIntersection = function(u,uv,curvePoint,surfacePoint) {\r\n\tthis.u = u;\r\n\tthis.uv = uv;\r\n\tthis.curvePoint = curvePoint;\r\n\tthis.surfacePoint = surfacePoint;\r\n};\r\n$hxClasses[\"verb.core.CurveSurfaceIntersection\"] = verb_core_CurveSurfaceIntersection;\r\nverb_core_CurveSurfaceIntersection.__name__ = [\"verb\",\"core\",\"CurveSurfaceIntersection\"];\r\nverb_core_CurveSurfaceIntersection.prototype = {\r\n\t__class__: verb_core_CurveSurfaceIntersection\r\n};\r\nvar verb_core_MeshIntersectionPoint = $hx_exports.core.MeshIntersectionPoint = function(uv0,uv1,point,faceIndex0,faceIndex1) {\r\n\tthis.visited = false;\r\n\tthis.adj = null;\r\n\tthis.opp = null;\r\n\tthis.uv0 = uv0;\r\n\tthis.uv1 = uv1;\r\n\tthis.point = point;\r\n\tthis.faceIndex0;\r\n\tthis.faceIndex1;\r\n};\r\n$hxClasses[\"verb.core.MeshIntersectionPoint\"] = verb_core_MeshIntersectionPoint;\r\nverb_core_MeshIntersectionPoint.__name__ = [\"verb\",\"core\",\"MeshIntersectionPoint\"];\r\nverb_core_MeshIntersectionPoint.prototype = {\r\n\t__class__: verb_core_MeshIntersectionPoint\r\n};\r\nvar verb_core_PolylineMeshIntersection = $hx_exports.core.PolylineMeshIntersection = function(point,u,uv,polylineIndex,faceIndex) {\r\n\tthis.point = point;\r\n\tthis.u = u;\r\n\tthis.uv = uv;\r\n\tthis.polylineIndex = polylineIndex;\r\n\tthis.faceIndex = faceIndex;\r\n};\r\n$hxClasses[\"verb.core.PolylineMeshIntersection\"] = verb_core_PolylineMeshIntersection;\r\nverb_core_PolylineMeshIntersection.__name__ = [\"verb\",\"core\",\"PolylineMeshIntersection\"];\r\nverb_core_PolylineMeshIntersection.prototype = {\r\n\t__class__: verb_core_PolylineMeshIntersection\r\n};\r\nvar verb_core_SurfaceSurfaceIntersectionPoint = $hx_exports.core.SurfaceSurfaceIntersectionPoint = function(uv0,uv1,point,dist) {\r\n\tthis.uv0 = uv0;\r\n\tthis.uv1 = uv1;\r\n\tthis.point = point;\r\n\tthis.dist = dist;\r\n};\r\n$hxClasses[\"verb.core.SurfaceSurfaceIntersectionPoint\"] = verb_core_SurfaceSurfaceIntersectionPoint;\r\nverb_core_SurfaceSurfaceIntersectionPoint.__name__ = [\"verb\",\"core\",\"SurfaceSurfaceIntersectionPoint\"];\r\nverb_core_SurfaceSurfaceIntersectionPoint.prototype = {\r\n\t__class__: verb_core_SurfaceSurfaceIntersectionPoint\r\n};\r\nvar verb_core_TriSegmentIntersection = $hx_exports.core.TriSegmentIntersection = function(point,s,t,r) {\r\n\tthis.point = point;\r\n\tthis.s = s;\r\n\tthis.t = t;\r\n\tthis.p = r;\r\n};\r\n$hxClasses[\"verb.core.TriSegmentIntersection\"] = verb_core_TriSegmentIntersection;\r\nverb_core_TriSegmentIntersection.__name__ = [\"verb\",\"core\",\"TriSegmentIntersection\"];\r\nverb_core_TriSegmentIntersection.prototype = {\r\n\t__class__: verb_core_TriSegmentIntersection\r\n};\r\nvar verb_core_CurveTriPoint = $hx_exports.core.CurveTriPoint = function(u,point,uv) {\r\n\tthis.u = u;\r\n\tthis.point = point;\r\n\tthis.uv = uv;\r\n};\r\n$hxClasses[\"verb.core.CurveTriPoint\"] = verb_core_CurveTriPoint;\r\nverb_core_CurveTriPoint.__name__ = [\"verb\",\"core\",\"CurveTriPoint\"];\r\nverb_core_CurveTriPoint.prototype = {\r\n\t__class__: verb_core_CurveTriPoint\r\n};\r\nvar verb_core_SurfacePoint = function(point,normal,uv,id,degen) {\r\n\tif(degen == null) degen = false;\r\n\tif(id == null) id = -1;\r\n\tthis.uv = uv;\r\n\tthis.point = point;\r\n\tthis.normal = normal;\r\n\tthis.id = id;\r\n\tthis.degen = degen;\r\n};\r\n$hxClasses[\"verb.core.SurfacePoint\"] = verb_core_SurfacePoint;\r\nverb_core_SurfacePoint.__name__ = [\"verb\",\"core\",\"SurfacePoint\"];\r\nverb_core_SurfacePoint.fromUv = function(u,v) {\r\n\treturn new verb_core_SurfacePoint(null,null,[u,v]);\r\n};\r\nverb_core_SurfacePoint.prototype = {\r\n\t__class__: verb_core_SurfacePoint\r\n};\r\nvar verb_core_CurvePoint = $hx_exports.core.CurvePoint = function(u,pt) {\r\n\tthis.u = u;\r\n\tthis.pt = pt;\r\n};\r\n$hxClasses[\"verb.core.CurvePoint\"] = verb_core_CurvePoint;\r\nverb_core_CurvePoint.__name__ = [\"verb\",\"core\",\"CurvePoint\"];\r\nverb_core_CurvePoint.prototype = {\r\n\t__class__: verb_core_CurvePoint\r\n};\r\nvar verb_core_KdTree = $hx_exports.core.KdTree = function(points,distanceFunction) {\r\n\tthis.dim = 3;\r\n\tthis.points = points;\r\n\tthis.distanceFunction = distanceFunction;\r\n\tthis.dim = points[0].point.length;\r\n\tthis.root = this.buildTree(points,0,null);\r\n};\r\n$hxClasses[\"verb.core.KdTree\"] = verb_core_KdTree;\r\nverb_core_KdTree.__name__ = [\"verb\",\"core\",\"KdTree\"];\r\nverb_core_KdTree.prototype = {\r\n\tbuildTree: function(points,depth,parent) {\r\n\t\tvar dim = depth % this.dim;\r\n\t\tvar median;\r\n\t\tvar node;\r\n\t\tif(points.length == 0) return null;\r\n\t\tif(points.length == 1) return new verb_core_KdNode(points[0],dim,parent);\r\n\t\tpoints.sort(function(a,b) {\r\n\t\t\tvar diff = a.point[dim] - b.point[dim];\r\n\t\t\tif(diff == 0.0) return 0; else if(diff > 0) return 1; else return -1;\r\n\t\t});\r\n\t\tmedian = Math.floor(points.length / 2);\r\n\t\tnode = new verb_core_KdNode(points[median],dim,parent);\r\n\t\tnode.left = this.buildTree(points.slice(0,median),depth + 1,node);\r\n\t\tnode.right = this.buildTree(points.slice(median + 1),depth + 1,node);\r\n\t\treturn node;\r\n\t}\r\n\t,nearest: function(point,maxNodes,maxDistance) {\r\n\t\tvar _g = this;\r\n\t\tvar bestNodes = new verb_core_BinaryHeap(function(e) {\r\n\t\t\treturn -e.item1;\r\n\t\t});\r\n\t\tvar nearestSearch;\r\n\t\tvar nearestSearch1 = null;\r\n\t\tnearestSearch1 = function(node) {\r\n\t\t\tvar bestChild;\r\n\t\t\tvar dimension = node.dimension;\r\n\t\t\tvar ownDistance = _g.distanceFunction(point,node.kdPoint.point);\r\n\t\t\tvar linearPoint;\r\n\t\t\tvar _g1 = [];\r\n\t\t\tvar _g3 = 0;\r\n\t\t\tvar _g2 = _g.dim;\r\n\t\t\twhile(_g3 < _g2) {\r\n\t\t\t\tvar i1 = _g3++;\r\n\t\t\t\t_g1.push(0.0);\r\n\t\t\t}\r\n\t\t\tlinearPoint = _g1;\r\n\t\t\tvar linearDistance;\r\n\t\t\tvar otherChild;\r\n\t\t\tvar i;\r\n\t\t\tvar saveNode = function(node1,distance) {\r\n\t\t\t\tbestNodes.push(new verb_core_Pair(node1,distance));\r\n\t\t\t\tif(bestNodes.size() > maxNodes) bestNodes.pop();\r\n\t\t\t};\r\n\t\t\tvar _g31 = 0;\r\n\t\t\tvar _g21 = _g.dim;\r\n\t\t\twhile(_g31 < _g21) {\r\n\t\t\t\tvar i2 = _g31++;\r\n\t\t\t\tif(i2 == node.dimension) linearPoint[i2] = point[i2]; else linearPoint[i2] = node.kdPoint.point[i2];\r\n\t\t\t}\r\n\t\t\tlinearDistance = _g.distanceFunction(linearPoint,node.kdPoint.point);\r\n\t\t\tif(node.right == null && node.left == null) {\r\n\t\t\t\tif(bestNodes.size() < maxNodes || ownDistance < bestNodes.peek().item1) saveNode(node,ownDistance);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(node.right == null) bestChild = node.left; else if(node.left == null) bestChild = node.right; else if(point[dimension] < node.kdPoint.point[dimension]) bestChild = node.left; else bestChild = node.right;\r\n\t\t\tnearestSearch1(bestChild);\r\n\t\t\tif(bestNodes.size() < maxNodes || ownDistance < bestNodes.peek().item1) saveNode(node,ownDistance);\r\n\t\t\tif(bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek().item1) {\r\n\t\t\t\tif(bestChild == node.left) otherChild = node.right; else otherChild = node.left;\r\n\t\t\t\tif(otherChild != null) nearestSearch1(otherChild);\r\n\t\t\t}\r\n\t\t};\r\n\t\tnearestSearch = nearestSearch1;\r\n\t\tvar _g4 = 0;\r\n\t\twhile(_g4 < maxNodes) {\r\n\t\t\tvar i3 = _g4++;\r\n\t\t\tbestNodes.push(new verb_core_Pair(null,maxDistance));\r\n\t\t}\r\n\t\tnearestSearch(this.root);\r\n\t\tvar result = [];\r\n\t\tvar _g5 = 0;\r\n\t\twhile(_g5 < maxNodes) {\r\n\t\t\tvar i4 = _g5++;\r\n\t\t\tif(bestNodes.content[i4].item0 != null) result.push(new verb_core_Pair(bestNodes.content[i4].item0.kdPoint,bestNodes.content[i4].item1));\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t,__class__: verb_core_KdTree\r\n};\r\nvar verb_core_BinaryHeap = function(scoreFunction) {\r\n\tthis.content = [];\r\n\tthis.scoreFunction = scoreFunction;\r\n};\r\n$hxClasses[\"verb.core.BinaryHeap\"] = verb_core_BinaryHeap;\r\nverb_core_BinaryHeap.__name__ = [\"verb\",\"core\",\"BinaryHeap\"];\r\nverb_core_BinaryHeap.prototype = {\r\n\tpush: function(element) {\r\n\t\tthis.content.push(element);\r\n\t\tthis.bubbleUp(this.content.length - 1);\r\n\t}\r\n\t,pop: function() {\r\n\t\tvar result = this.content[0];\r\n\t\tvar end = this.content.pop();\r\n\t\tif(this.content.length > 0) {\r\n\t\t\tthis.content[0] = end;\r\n\t\t\tthis.sinkDown(0);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\t,peek: function() {\r\n\t\treturn this.content[0];\r\n\t}\r\n\t,remove: function(node) {\r\n\t\tvar len = this.content.length;\r\n\t\tvar _g = 0;\r\n\t\twhile(_g < len) {\r\n\t\t\tvar i = _g++;\r\n\t\t\tif(this.content[i] == node) {\r\n\t\t\t\tvar end = this.content.pop();\r\n\t\t\t\tif(i != len - 1) {\r\n\t\t\t\t\tthis.content[i] = end;\r\n\t\t\t\t\tif(this.scoreFunction(end) < this.scoreFunction(node)) this.bubbleUp(i); else this.sinkDown(i);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthrow new js__$Boot_HaxeError(\"Node not found.\");\r\n\t}\r\n\t,size: function() {\r\n\t\treturn this.content.length;\r\n\t}\r\n\t,bubbleUp: function(n) {\r\n\t\tvar element = this.content[n];\r\n\t\twhile(n > 0) {\r\n\t\t\tvar parentN = Math.floor((n + 1.0) / 2) - 1;\r\n\t\t\tvar parent = this.content[parentN];\r\n\t\t\tif(this.scoreFunction(element) < this.scoreFunction(parent)) {\r\n\t\t\t\tthis.content[parentN] = element;\r\n\t\t\t\tthis.content[n] = parent;\r\n\t\t\t\tn = parentN;\r\n\t\t\t} else break;\r\n\t\t}\r\n\t}\r\n\t,sinkDown: function(n) {\r\n\t\tvar length = this.content.length;\r\n\t\tvar element = this.content[n];\r\n\t\tvar elemScore = this.scoreFunction(element);\r\n\t\twhile(true) {\r\n\t\t\tvar child2N = (n + 1) * 2;\r\n\t\t\tvar child1N = child2N - 1;\r\n\t\t\tvar swap = -1;\r\n\t\t\tvar child1Score = 0.0;\r\n\t\t\tif(child1N < length) {\r\n\t\t\t\tvar child1 = this.content[child1N];\r\n\t\t\t\tchild1Score = this.scoreFunction(child1);\r\n\t\t\t\tif(child1Score < elemScore) swap = child1N;\r\n\t\t\t}\r\n\t\t\tif(child2N < length) {\r\n\t\t\t\tvar child2 = this.content[child2N];\r\n\t\t\t\tvar child2Score = this.scoreFunction(child2);\r\n\t\t\t\tif(child2Score < (swap == -1?elemScore:child1Score)) swap = child2N;\r\n\t\t\t}\r\n\t\t\tif(swap != -1) {\r\n\t\t\t\tthis.content[n] = this.content[swap];\r\n\t\t\t\tthis.content[swap] = element;\r\n\t\t\t\tn = swap;\r\n\t\t\t} else break;\r\n\t\t}\r\n\t}\r\n\t,__class__: verb_core_BinaryHeap\r\n};\r\nvar verb_core_KdPoint = $hx_exports.core.KdPoint = function(point,obj) {\r\n\tthis.point = point;\r\n\tthis.obj = obj;\r\n};\r\n$hxClasses[\"verb.core.KdPoint\"] = verb_core_KdPoint;\r\nverb_core_KdPoint.__name__ = [\"verb\",\"core\",\"KdPoint\"];\r\nverb_core_KdPoint.prototype = {\r\n\t__class__: verb_core_KdPoint\r\n};\r\nvar verb_core_KdNode = $hx_exports.core.KdNode = function(kdPoint,dimension,parent) {\r\n\tthis.kdPoint = kdPoint;\r\n\tthis.left = null;\r\n\tthis.right = null;\r\n\tthis.parent = parent;\r\n\tthis.dimension = dimension;\r\n};\r\n$hxClasses[\"verb.core.KdNode\"] = verb_core_KdNode;\r\nverb_core_KdNode.__name__ = [\"verb\",\"core\",\"KdNode\"];\r\nverb_core_KdNode.prototype = {\r\n\t__class__: verb_core_KdNode\r\n};\r\nvar verb_eval_IBoundingBoxTree = function() { };\r\n$hxClasses[\"verb.eval.IBoundingBoxTree\"] = verb_eval_IBoundingBoxTree;\r\nverb_eval_IBoundingBoxTree.__name__ = [\"verb\",\"eval\",\"IBoundingBoxTree\"];\r\nverb_eval_IBoundingBoxTree.prototype = {\r\n\t__class__: verb_eval_IBoundingBoxTree\r\n};\r\nvar verb_core_LazyCurveBoundingBoxTree = function(curve,knotTol) {\r\n\tthis._boundingBox = null;\r\n\tthis._curve = curve;\r\n\tif(knotTol == null) knotTol = verb_core_Vec.domain(this._curve.knots) / 64;\r\n\tthis._knotTol = knotTol;\r\n};\r\n$hxClasses[\"verb.core.LazyCurveBoundingBoxTree\"] = verb_core_LazyCurveBoundingBoxTree;\r\nverb_core_LazyCurveBoundingBoxTree.__name__ = [\"verb\",\"core\",\"LazyCurveBoundingBoxTree\"];\r\nverb_core_LazyCurveBoundingBoxTree.__interfaces__ = [verb_eval_IBoundingBoxTree];\r\nverb_core_LazyCurveBoundingBoxTree.prototype = {\r\n\tsplit: function() {\r\n\t\tvar min = verb_core_ArrayExtensions.first(this._curve.knots);\r\n\t\tvar max = verb_core_ArrayExtensions.last(this._curve.knots);\r\n\t\tvar dom = max - min;\r\n\t\tvar crvs = verb_eval_Divide.curveSplit(this._curve,(max + min) / 2.0 + dom * 0.1 * Math.random());\r\n\t\treturn new verb_core_Pair(new verb_core_LazyCurveBoundingBoxTree(crvs[0],this._knotTol),new verb_core_LazyCurveBoundingBoxTree(crvs[1],this._knotTol));\r\n\t}\r\n\t,boundingBox: function() {\r\n\t\tif(this._boundingBox == null) this._boundingBox = new verb_core_BoundingBox(verb_eval_Eval.dehomogenize1d(this._curve.controlPoints));\r\n\t\treturn this._boundingBox;\r\n\t}\r\n\t,'yield': function() {\r\n\t\treturn this._curve;\r\n\t}\r\n\t,indivisible: function(tolerance) {\r\n\t\treturn verb_core_Vec.domain(this._curve.knots) < this._knotTol;\r\n\t}\r\n\t,empty: function() {\r\n\t\treturn false;\r\n\t}\r\n\t,__class__: verb_core_LazyCurveBoundingBoxTree\r\n};\r\nvar verb_core_LazyMeshBoundingBoxTree = function(mesh,faceIndices) {\r\n\tthis._boundingBox = null;\r\n\tthis._mesh = mesh;\r\n\tif(faceIndices == null) {\r\n\t\tvar _g = [];\r\n\t\tvar _g2 = 0;\r\n\t\tvar _g1 = mesh.faces.length;\r\n\t\twhile(_g2 < _g1) {\r\n\t\t\tvar i = _g2++;\r\n\t\t\t_g.push(i);\r\n\t\t}\r\n\t\tfaceIndices = _g;\r\n\t}\r\n\tthis._faceIndices = faceIndices;\r\n};\r\n$hxClasses[\"verb.core.LazyMeshBoundingBoxTree\"] = verb_core_LazyMeshBoundingBoxTree;\r\nverb_core_LazyMeshBoundingBoxTree.__name__ = [\"verb\",\"core\",\"LazyMeshBoundingBoxTree\"];\r\nverb_core_LazyMeshBoundingBoxTree.__interfaces__ = [verb_eval_IBoundingBoxTree];\r\nverb_core_LazyMeshBoundingBoxTree.prototype = {\r\n\tsplit: function() {\r\n\t\tvar $as = verb_core_Mesh.sortTrianglesOnLongestAxis(this.boundingBox(),this._mesh,this._faceIndices);\r\n\t\tvar l = verb_core_ArrayExtensions.left($as);\r\n\t\tvar r = verb_core_ArrayExtensions.right($as);\r\n\t\treturn new verb_core_Pair(new verb_core_LazyMeshBoundingBoxTree(this._mesh,l),new verb_core_LazyMeshBoundingBoxTree(this._mesh,r));\r\n\t}\r\n\t,boundingBox: function() {\r\n\t\tif(this._boundingBox == null) this._boundingBox = verb_core_Mesh.makeMeshAabb(this._mesh,this._faceIndices);\r\n\t\treturn this._boundingBox;\r\n\t}\r\n\t,'yield': function() {\r\n\t\treturn this._faceIndices[0];\r\n\t}\r\n\t,indivisible: function(tolerance) {\r\n\t\treturn this._faceIndices.length == 1;\r\n\t}\r\n\t,empty: function() {\r\n\t\treturn this._faceIndices.length == 0;\r\n\t}\r\n\t,__class__: verb_core_LazyMeshBoundingBoxTree\r\n};\r\nvar verb_core_LazyPolylineBoundingBoxTree = function(polyline,interval) {\r\n\tthis._boundingBox = null;\r\n\tthis._polyline = polyline;\r\n\tif(interval == null) interval = new verb_core_Interval(0,polyline.points.length != 0?polyline.points.length - 1:0);\r\n\tthis._interval = interval;\r\n};\r\n$hxClasses[\"verb.core.LazyPolylineBoundingBoxTree\"] = verb_core_LazyPolylineBoundingBoxTree;\r\nverb_core_LazyPolylineBoundingBoxTree.__name__ = [\"verb\",\"core\",\"LazyPolylineBoundingBoxTree\"];\r\nverb_core_LazyPolylineBoundingBoxTree.__interfaces__ = [verb_eval_IBoundingBoxTree];\r\nverb_core_LazyPolylineBoundingBoxTree.prototype = {\r\n\tsplit: function() {\r\n\t\tvar min = this._interval.min;\r\n\t\tvar max = this._interval.max;\r\n\t\tvar pivot = min + Math.ceil((max - min) / 2);\r\n\t\tvar l = new verb_core_Interval(min,pivot);\r\n\t\tvar r = new verb_core_Interval(pivot,max);\r\n\t\treturn new verb_core_Pair(new verb_core_LazyPolylineBoundingBoxTree(this._polyline,l),new verb_core_LazyPolylineBoundingBoxTree(this._polyline,r));\r\n\t}\r\n\t,boundingBox: function() {\r\n\t\tif(this._boundingBox == null) this._boundingBox = new verb_core_BoundingBox(this._polyline.points);\r\n\t\treturn this._boundingBox;\r\n\t}\r\n\t,'yield': function() {\r\n\t\treturn this._interval.min;\r\n\t}\r\n\t,indivisible: function(tolerance) {\r\n\t\treturn this._interval.max - this._interval.min == 1;\r\n\t}\r\n\t,empty: function() {\r\n\t\treturn this._interval.max - this._interval.min == 0;\r\n\t}\r\n\t,__class__: verb_core_LazyPolylineBoundingBoxTree\r\n};\r\nvar verb_core_LazySurfaceBoundingBoxTree = function(surface,splitV,knotTolU,knotTolV) {\r\n\tif(splitV == null) splitV = false;\r\n\tthis._boundingBox = null;\r\n\tthis._surface = surface;\r\n\tthis._splitV = splitV;\r\n\tif(knotTolU == null) knotTolU = verb_core_Vec.domain(surface.knotsU) / 16;\r\n\tif(knotTolV == null) knotTolV = verb_core_Vec.domain(surface.knotsV) / 16;\r\n\tthis._knotTolU = knotTolU;\r\n\tthis._knotTolV = knotTolV;\r\n};\r\n$hxClasses[\"verb.core.LazySurfaceBoundingBoxTree\"] = verb_core_LazySurfaceBoundingBoxTree;\r\nverb_core_LazySurfaceBoundingBoxTree.__name__ = [\"verb\",\"core\",\"LazySurfaceBoundingBoxTree\"];\r\nverb_core_LazySurfaceBoundingBoxTree.__interfaces__ = [verb_eval_IBoundingBoxTree];\r\nverb_core_LazySurfaceBoundingBoxTree.prototype = {\r\n\tsplit: function() {\r\n\t\tvar min;\r\n\t\tvar max;\r\n\t\tif(this._splitV) {\r\n\t\t\tmin = verb_core_ArrayExtensions.first(this._surface.knotsV);\r\n\t\t\tmax = verb_core_ArrayExtensions.last(this._surface.knotsV);\r\n\t\t} else {\r\n\t\t\tmin = verb_core_ArrayExtensions.first(this._surface.knotsU);\r\n\t\t\tmax = verb_core_ArrayExtensions.last(this._surface.knotsU);\r\n\t\t}\r\n\t\tvar dom = max - min;\r\n\t\tvar pivot = (min + max) / 2.0;\r\n\t\tvar srfs = verb_eval_Divide.surfaceSplit(this._surface,pivot,this._splitV);\r\n\t\treturn new verb_core_Pair(new verb_core_LazySurfaceBoundingBoxTree(srfs[0],!this._splitV,this._knotTolU,this._knotTolV),new verb_core_LazySurfaceBoundingBoxTree(srfs[1],!this._splitV,this._knotTolU,this._knotTolV));\r\n\t}\r\n\t,boundingBox: function() {\r\n\t\tif(this._boundingBox == null) {\r\n\t\t\tthis._boundingBox = new verb_core_BoundingBox();\r\n\t\t\tvar _g = 0;\r\n\t\t\tvar _g1 = this._surface.controlPoints;\r\n\t\t\twhile(_g < _g1.length) {\r\n\t\t\t\tvar row = _g1[_g];\r\n\t\t\t\t++_g;\r\n\t\t\t\tthis._boundingBox.addRange(verb_eval_Eval.dehomogenize1d(row));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._boundingBox;\r\n\t}\r\n\t,'yield': function() {\r\n\t\treturn this._surface;\r\n\t}\r\n\t,indivisible: function(tolerance) {\r\n\t\treturn verb_core_Vec.domain(this._surface.knotsV) < this._knotTolV && verb_core_Vec.domain(this._surface.knotsU) < this._knotTolU;\r\n\t}\r\n\t,empty: function() {\r\n\t\treturn false;\r\n\t}\r\n\t,__class__: verb_core_LazySurfaceBoundingBoxTree\r\n};\r\nvar verb_core_Mat = $hx_exports.core.Mat = function() { };\r\n$hxClasses[\"verb.core.Mat\"] = verb_core_Mat;\r\nverb_core_Mat.__name__ = [\"verb\",\"core\",\"Mat\"];\r\nverb_core_Mat.mul = function(a,b) {\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = b.length;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push(verb_core_Vec.mul(a,b[i]));\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Mat.mult = function(x,y) {\r\n\tvar p;\r\n\tvar q;\r\n\tvar r;\r\n\tvar ret;\r\n\tvar foo;\r\n\tvar bar;\r\n\tvar woo;\r\n\tvar i0;\r\n\tvar k0;\r\n\tvar p0;\r\n\tvar r0;\r\n\tp = x.length;\r\n\tq = y.length;\r\n\tr = y[0].length;\r\n\tret = [];\r\n\tvar i = p - 1;\r\n\tvar j = 0;\r\n\tvar k = 0;\r\n\twhile(i >= 0) {\r\n\t\tfoo = [];\r\n\t\tbar = x[i];\r\n\t\tk = r - 1;\r\n\t\twhile(k >= 0) {\r\n\t\t\twoo = bar[q - 1] * y[q - 1][k];\r\n\t\t\tj = q - 2;\r\n\t\t\twhile(j >= 1) {\r\n\t\t\t\ti0 = j - 1;\r\n\t\t\t\twoo += bar[j] * y[j][k] + bar[i0] * y[i0][k];\r\n\t\t\t\tj -= 2;\r\n\t\t\t}\r\n\t\t\tif(j == 0) woo += bar[0] * y[0][k];\r\n\t\t\tfoo[k] = woo;\r\n\t\t\tk--;\r\n\t\t}\r\n\t\tret[i] = foo;\r\n\t\ti--;\r\n\t}\r\n\treturn ret;\r\n};\r\nverb_core_Mat.add = function(a,b) {\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = a.length;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push(verb_core_Vec.add(a[i],b[i]));\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Mat.div = function(a,b) {\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = a.length;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push(verb_core_Vec.div(a[i],b));\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Mat.sub = function(a,b) {\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = a.length;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push(verb_core_Vec.sub(a[i],b[i]));\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Mat.dot = function(a,b) {\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = a.length;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push(verb_core_Vec.dot(a[i],b));\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Mat.identity = function(n) {\r\n\tvar zeros = verb_core_Vec.zeros2d(n,n);\r\n\tvar _g = 0;\r\n\twhile(_g < n) {\r\n\t\tvar i = _g++;\r\n\t\tzeros[i][i] = 1.0;\r\n\t}\r\n\treturn zeros;\r\n};\r\nverb_core_Mat.transpose = function(a) {\r\n\tif(a.length == 0) return [];\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = a[0].length;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push((function($this) {\r\n\t\t\tvar $r;\r\n\t\t\tvar _g3 = [];\r\n\t\t\t{\r\n\t\t\t\tvar _g5 = 0;\r\n\t\t\t\tvar _g4 = a.length;\r\n\t\t\t\twhile(_g5 < _g4) {\r\n\t\t\t\t\tvar j = _g5++;\r\n\t\t\t\t\t_g3.push(a[j][i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$r = _g3;\r\n\t\t\treturn $r;\r\n\t\t}(this)));\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Mat.solve = function(A,b) {\r\n\treturn verb_core_Mat.LUsolve(verb_core_Mat.LU(A),b);\r\n};\r\nverb_core_Mat.LUsolve = function(LUP,b) {\r\n\tvar i;\r\n\tvar j;\r\n\tvar LU = LUP.LU;\r\n\tvar n = LU.length;\r\n\tvar x = b.slice();\r\n\tvar P = LUP.P;\r\n\tvar Pi;\r\n\tvar LUi;\r\n\tvar LUii;\r\n\tvar tmp;\r\n\ti = n - 1;\r\n\twhile(i != -1) {\r\n\t\tx[i] = b[i];\r\n\t\t--i;\r\n\t}\r\n\ti = 0;\r\n\twhile(i < n) {\r\n\t\tPi = P[i];\r\n\t\tif(P[i] != i) {\r\n\t\t\ttmp = x[i];\r\n\t\t\tx[i] = x[Pi];\r\n\t\t\tx[Pi] = tmp;\r\n\t\t}\r\n\t\tLUi = LU[i];\r\n\t\tj = 0;\r\n\t\twhile(j < i) {\r\n\t\t\tx[i] -= x[j] * LUi[j];\r\n\t\t\t++j;\r\n\t\t}\r\n\t\t++i;\r\n\t}\r\n\ti = n - 1;\r\n\twhile(i >= 0) {\r\n\t\tLUi = LU[i];\r\n\t\tj = i + 1;\r\n\t\twhile(j < n) {\r\n\t\t\tx[i] -= x[j] * LUi[j];\r\n\t\t\t++j;\r\n\t\t}\r\n\t\tx[i] /= LUi[i];\r\n\t\t--i;\r\n\t}\r\n\treturn x;\r\n};\r\nverb_core_Mat.LU = function(A) {\r\n\tvar abs = Math.abs;\r\n\tvar i;\r\n\tvar j;\r\n\tvar k;\r\n\tvar absAjk;\r\n\tvar Akk;\r\n\tvar Ak;\r\n\tvar Pk;\r\n\tvar Ai;\r\n\tvar max;\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = A.length;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i1 = _g2++;\r\n\t\t_g.push(A[i1].slice());\r\n\t}\r\n\tA = _g;\r\n\tvar n = A.length;\r\n\tvar n1 = n - 1;\r\n\tvar P = [];\r\n\tk = 0;\r\n\twhile(k < n) {\r\n\t\tPk = k;\r\n\t\tAk = A[k];\r\n\t\tmax = Math.abs(Ak[k]);\r\n\t\tj = k + 1;\r\n\t\twhile(j < n) {\r\n\t\t\tabsAjk = Math.abs(A[j][k]);\r\n\t\t\tif(max < absAjk) {\r\n\t\t\t\tmax = absAjk;\r\n\t\t\t\tPk = j;\r\n\t\t\t}\r\n\t\t\t++j;\r\n\t\t}\r\n\t\tP[k] = Pk;\r\n\t\tif(Pk != k) {\r\n\t\t\tA[k] = A[Pk];\r\n\t\t\tA[Pk] = Ak;\r\n\t\t\tAk = A[k];\r\n\t\t}\r\n\t\tAkk = Ak[k];\r\n\t\ti = k + 1;\r\n\t\twhile(i < n) {\r\n\t\t\tA[i][k] /= Akk;\r\n\t\t\t++i;\r\n\t\t}\r\n\t\ti = k + 1;\r\n\t\twhile(i < n) {\r\n\t\t\tAi = A[i];\r\n\t\t\tj = k + 1;\r\n\t\t\twhile(j < n1) {\r\n\t\t\t\tAi[j] -= Ai[k] * Ak[j];\r\n\t\t\t\t++j;\r\n\t\t\t\tAi[j] -= Ai[k] * Ak[j];\r\n\t\t\t\t++j;\r\n\t\t\t}\r\n\t\t\tif(j == n1) Ai[j] -= Ai[k] * Ak[j];\r\n\t\t\t++i;\r\n\t\t}\r\n\t\t++k;\r\n\t}\r\n\treturn new verb_core__$Mat_LUDecomp(A,P);\r\n};\r\nvar verb_core__$Mat_LUDecomp = function(lu,p) {\r\n\tthis.LU = lu;\r\n\tthis.P = p;\r\n};\r\n$hxClasses[\"verb.core._Mat.LUDecomp\"] = verb_core__$Mat_LUDecomp;\r\nverb_core__$Mat_LUDecomp.__name__ = [\"verb\",\"core\",\"_Mat\",\"LUDecomp\"];\r\nverb_core__$Mat_LUDecomp.prototype = {\r\n\t__class__: verb_core__$Mat_LUDecomp\r\n};\r\nvar verb_core_Mesh = $hx_exports.core.Mesh = function() { };\r\n$hxClasses[\"verb.core.Mesh\"] = verb_core_Mesh;\r\nverb_core_Mesh.__name__ = [\"verb\",\"core\",\"Mesh\"];\r\nverb_core_Mesh.getTriangleNorm = function(points,tri) {\r\n\tvar v0 = points[tri[0]];\r\n\tvar v1 = points[tri[1]];\r\n\tvar v2 = points[tri[2]];\r\n\tvar u = verb_core_Vec.sub(v1,v0);\r\n\tvar v = verb_core_Vec.sub(v2,v0);\r\n\tvar n = verb_core_Vec.cross(u,v);\r\n\treturn verb_core_Vec.mul(1 / verb_core_Vec.norm(n),n);\r\n};\r\nverb_core_Mesh.makeMeshAabb = function(mesh,faceIndices) {\r\n\tvar bb = new verb_core_BoundingBox();\r\n\tvar _g = 0;\r\n\twhile(_g < faceIndices.length) {\r\n\t\tvar x = faceIndices[_g];\r\n\t\t++_g;\r\n\t\tbb.add(mesh.points[mesh.faces[x][0]]);\r\n\t\tbb.add(mesh.points[mesh.faces[x][1]]);\r\n\t\tbb.add(mesh.points[mesh.faces[x][2]]);\r\n\t}\r\n\treturn bb;\r\n};\r\nverb_core_Mesh.sortTrianglesOnLongestAxis = function(bb,mesh,faceIndices) {\r\n\tvar longAxis = bb.getLongestAxis();\r\n\tvar minCoordFaceMap = [];\r\n\tvar _g = 0;\r\n\twhile(_g < faceIndices.length) {\r\n\t\tvar faceIndex = faceIndices[_g];\r\n\t\t++_g;\r\n\t\tvar tri_min = verb_core_Mesh.getMinCoordOnAxis(mesh.points,mesh.faces[faceIndex],longAxis);\r\n\t\tminCoordFaceMap.push(new verb_core_Pair(tri_min,faceIndex));\r\n\t}\r\n\tminCoordFaceMap.sort(function(a,b) {\r\n\t\tvar a0 = a.item0;\r\n\t\tvar b0 = b.item0;\r\n\t\tif(a0 == b0) return 0; else if(a0 > b0) return 1; else return -1;\r\n\t});\r\n\tvar sortedFaceIndices = [];\r\n\tvar _g1 = 0;\r\n\tvar _g2 = minCoordFaceMap.length;\r\n\twhile(_g1 < _g2) {\r\n\t\tvar i = _g1++;\r\n\t\tsortedFaceIndices.push(minCoordFaceMap[i].item1);\r\n\t}\r\n\treturn sortedFaceIndices;\r\n};\r\nverb_core_Mesh.getMinCoordOnAxis = function(points,tri,axis) {\r\n\tvar min = Infinity;\r\n\tvar _g = 0;\r\n\twhile(_g < 3) {\r\n\t\tvar i = _g++;\r\n\t\tvar coord = points[tri[i]][axis];\r\n\t\tif(coord < min) min = coord;\r\n\t}\r\n\treturn min;\r\n};\r\nverb_core_Mesh.getTriangleCentroid = function(points,tri) {\r\n\tvar centroid = [0.0,0.0,0.0];\r\n\tvar _g = 0;\r\n\twhile(_g < 3) {\r\n\t\tvar i = _g++;\r\n\t\tvar _g1 = 0;\r\n\t\twhile(_g1 < 3) {\r\n\t\t\tvar j = _g1++;\r\n\t\t\tcentroid[j] += points[tri[i]][j];\r\n\t\t}\r\n\t}\r\n\tvar _g2 = 0;\r\n\twhile(_g2 < 3) {\r\n\t\tvar i1 = _g2++;\r\n\t\tcentroid[i1] /= 3;\r\n\t}\r\n\treturn centroid;\r\n};\r\nverb_core_Mesh.triangleUVFromPoint = function(mesh,faceIndex,f) {\r\n\tvar tri = mesh.faces[faceIndex];\r\n\tvar p1 = mesh.points[tri[0]];\r\n\tvar p2 = mesh.points[tri[1]];\r\n\tvar p3 = mesh.points[tri[2]];\r\n\tvar uv1 = mesh.uvs[tri[0]];\r\n\tvar uv2 = mesh.uvs[tri[1]];\r\n\tvar uv3 = mesh.uvs[tri[2]];\r\n\tvar f1 = verb_core_Vec.sub(p1,f);\r\n\tvar f2 = verb_core_Vec.sub(p2,f);\r\n\tvar f3 = verb_core_Vec.sub(p3,f);\r\n\tvar a = verb_core_Vec.norm(verb_core_Vec.cross(verb_core_Vec.sub(p1,p2),verb_core_Vec.sub(p1,p3)));\r\n\tvar a1 = verb_core_Vec.norm(verb_core_Vec.cross(f2,f3)) / a;\r\n\tvar a2 = verb_core_Vec.norm(verb_core_Vec.cross(f3,f1)) / a;\r\n\tvar a3 = verb_core_Vec.norm(verb_core_Vec.cross(f1,f2)) / a;\r\n\treturn verb_core_Vec.add(verb_core_Vec.mul(a1,uv1),verb_core_Vec.add(verb_core_Vec.mul(a2,uv2),verb_core_Vec.mul(a3,uv3)));\r\n};\r\nvar verb_core_MeshBoundingBoxTree = function(mesh,faceIndices) {\r\n\tthis._empty = false;\r\n\tthis._face = -1;\r\n\tif(faceIndices == null) {\r\n\t\tvar _g = [];\r\n\t\tvar _g2 = 0;\r\n\t\tvar _g1 = mesh.faces.length;\r\n\t\twhile(_g2 < _g1) {\r\n\t\t\tvar i = _g2++;\r\n\t\t\t_g.push(i);\r\n\t\t}\r\n\t\tfaceIndices = _g;\r\n\t}\r\n\tthis._boundingBox = verb_core_Mesh.makeMeshAabb(mesh,faceIndices);\r\n\tif(faceIndices.length < 1) {\r\n\t\tthis._empty = true;\r\n\t\treturn;\r\n\t} else if(faceIndices.length < 2) {\r\n\t\tthis._face = faceIndices[0];\r\n\t\treturn;\r\n\t}\r\n\tvar $as = verb_core_Mesh.sortTrianglesOnLongestAxis(this._boundingBox,mesh,faceIndices);\r\n\tvar l = verb_core_ArrayExtensions.left($as);\r\n\tvar r = verb_core_ArrayExtensions.right($as);\r\n\tthis._children = new verb_core_Pair(new verb_core_MeshBoundingBoxTree(mesh,l),new verb_core_MeshBoundingBoxTree(mesh,r));\r\n};\r\n$hxClasses[\"verb.core.MeshBoundingBoxTree\"] = verb_core_MeshBoundingBoxTree;\r\nverb_core_MeshBoundingBoxTree.__name__ = [\"verb\",\"core\",\"MeshBoundingBoxTree\"];\r\nverb_core_MeshBoundingBoxTree.__interfaces__ = [verb_eval_IBoundingBoxTree];\r\nverb_core_MeshBoundingBoxTree.prototype = {\r\n\tsplit: function() {\r\n\t\treturn this._children;\r\n\t}\r\n\t,boundingBox: function() {\r\n\t\treturn this._boundingBox;\r\n\t}\r\n\t,'yield': function() {\r\n\t\treturn this._face;\r\n\t}\r\n\t,indivisible: function(tolerance) {\r\n\t\treturn this._children == null;\r\n\t}\r\n\t,empty: function() {\r\n\t\treturn this._empty;\r\n\t}\r\n\t,__class__: verb_core_MeshBoundingBoxTree\r\n};\r\nvar verb_core_Minimizer = $hx_exports.core.Minimizer = function() { };\r\n$hxClasses[\"verb.core.Minimizer\"] = verb_core_Minimizer;\r\nverb_core_Minimizer.__name__ = [\"verb\",\"core\",\"Minimizer\"];\r\nverb_core_Minimizer.uncmin = function(f,x0,tol,gradient,maxit) {\r\n\tif(tol == null) tol = 1e-8;\r\n\tif(gradient == null) gradient = function(x) {\r\n\t\treturn verb_core_Minimizer.numericalGradient(f,x);\r\n\t};\r\n\tif(maxit == null) maxit = 1000;\r\n\tx0 = x0.slice(0);\r\n\tvar n = x0.length;\r\n\tvar f0 = f(x0);\r\n\tvar f1 = f0;\r\n\tvar df0;\r\n\tif(isNaN(f0)) throw new js__$Boot_HaxeError(\"uncmin: f(x0) is a NaN!\");\r\n\ttol = Math.max(tol,verb_core_Constants.EPSILON);\r\n\tvar step;\r\n\tvar g0;\r\n\tvar g1;\r\n\tvar H1 = verb_core_Mat.identity(n);\r\n\tvar it = 0;\r\n\tvar i;\r\n\tvar s = [];\r\n\tvar x1;\r\n\tvar y;\r\n\tvar Hy;\r\n\tvar Hs;\r\n\tvar ys;\r\n\tvar i0;\r\n\tvar t;\r\n\tvar nstep;\r\n\tvar t1;\r\n\tvar t2;\r\n\tvar msg = \"\";\r\n\tg0 = gradient(x0);\r\n\twhile(it < maxit) {\r\n\t\tif(!verb_core_Vec.all(verb_core_Vec.finite(g0))) {\r\n\t\t\tmsg = \"Gradient has Infinity or NaN\";\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tstep = verb_core_Vec.neg(verb_core_Mat.dot(H1,g0));\r\n\t\tif(!verb_core_Vec.all(verb_core_Vec.finite(step))) {\r\n\t\t\tmsg = \"Search direction has Infinity or NaN\";\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tnstep = verb_core_Vec.norm(step);\r\n\t\tif(nstep < tol) {\r\n\t\t\tmsg = \"Newton step smaller than tol\";\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tt = 1.0;\r\n\t\tdf0 = verb_core_Vec.dot(g0,step);\r\n\t\tx1 = x0;\r\n\t\twhile(it < maxit) {\r\n\t\t\tif(t * nstep < tol) break;\r\n\t\t\ts = verb_core_Vec.mul(t,step);\r\n\t\t\tx1 = verb_core_Vec.add(x0,s);\r\n\t\t\tf1 = f(x1);\r\n\t\t\tif(f1 - f0 >= 0.1 * t * df0 || isNaN(f1)) {\r\n\t\t\t\tt *= 0.5;\r\n\t\t\t\t++it;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tif(t * nstep < tol) {\r\n\t\t\tmsg = \"Line search step size smaller than tol\";\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tif(it == maxit) {\r\n\t\t\tmsg = \"maxit reached during line search\";\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tg1 = gradient(x1);\r\n\t\ty = verb_core_Vec.sub(g1,g0);\r\n\t\tys = verb_core_Vec.dot(y,s);\r\n\t\tHy = verb_core_Mat.dot(H1,y);\r\n\t\tH1 = verb_core_Mat.sub(verb_core_Mat.add(H1,verb_core_Mat.mul((ys + verb_core_Vec.dot(y,Hy)) / (ys * ys),verb_core_Minimizer.tensor(s,s))),verb_core_Mat.div(verb_core_Mat.add(verb_core_Minimizer.tensor(Hy,s),verb_core_Minimizer.tensor(s,Hy)),ys));\r\n\t\tx0 = x1;\r\n\t\tf0 = f1;\r\n\t\tg0 = g1;\r\n\t\t++it;\r\n\t}\r\n\treturn new verb_core_MinimizationResult(x0,f0,g0,H1,it,msg);\r\n};\r\nverb_core_Minimizer.numericalGradient = function(f,x) {\r\n\tvar n = x.length;\r\n\tvar f0 = f(x);\r\n\tif(f0 == NaN) throw new js__$Boot_HaxeError(\"gradient: f(x) is a NaN!\");\r\n\tvar i;\r\n\tvar x0 = x.slice(0);\r\n\tvar f1;\r\n\tvar f2;\r\n\tvar J = [];\r\n\tvar errest;\r\n\tvar roundoff;\r\n\tvar eps = 1e-3;\r\n\tvar t0;\r\n\tvar t1;\r\n\tvar t2;\r\n\tvar it = 0;\r\n\tvar d1;\r\n\tvar d2;\r\n\tvar N;\r\n\tvar _g = 0;\r\n\twhile(_g < n) {\r\n\t\tvar i1 = _g++;\r\n\t\tvar h = Math.max(1e-6 * f0,1e-8);\r\n\t\twhile(true) {\r\n\t\t\t++it;\r\n\t\t\tif(it > 20) throw new js__$Boot_HaxeError(\"Numerical gradient fails\");\r\n\t\t\tx0[i1] = x[i1] + h;\r\n\t\t\tf1 = f(x0);\r\n\t\t\tx0[i1] = x[i1] - h;\r\n\t\t\tf2 = f(x0);\r\n\t\t\tx0[i1] = x[i1];\r\n\t\t\tif(isNaN(f1) || isNaN(f2)) {\r\n\t\t\t\th /= 16;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tJ[i1] = (f1 - f2) / (2 * h);\r\n\t\t\tt0 = x[i1] - h;\r\n\t\t\tt1 = x[i1];\r\n\t\t\tt2 = x[i1] + h;\r\n\t\t\td1 = (f1 - f0) / h;\r\n\t\t\td2 = (f0 - f2) / h;\r\n\t\t\tN = verb_core_Vec.max([Math.abs(J[i1]),Math.abs(f0),Math.abs(f1),Math.abs(f2),Math.abs(t0),Math.abs(t1),Math.abs(t2),1e-8]);\r\n\t\t\terrest = Math.min(verb_core_Vec.max([Math.abs(d1 - J[i1]),Math.abs(d2 - J[i1]),Math.abs(d1 - d2)]) / N,h / N);\r\n\t\t\tif(errest > eps) h /= 16; else break;\r\n\t\t}\r\n\t}\r\n\treturn J;\r\n};\r\nverb_core_Minimizer.tensor = function(x,y) {\r\n\tvar m = x.length;\r\n\tvar n = y.length;\r\n\tvar A = [];\r\n\tvar Ai;\r\n\tvar xi;\r\n\tvar i = m - 1;\r\n\twhile(i >= 0) {\r\n\t\tAi = [];\r\n\t\txi = x[i];\r\n\t\tvar j = n - 1;\r\n\t\twhile(j >= 3) {\r\n\t\t\tAi[j] = xi * y[j];\r\n\t\t\t--j;\r\n\t\t\tAi[j] = xi * y[j];\r\n\t\t\t--j;\r\n\t\t\tAi[j] = xi * y[j];\r\n\t\t\t--j;\r\n\t\t\tAi[j] = xi * y[j];\r\n\t\t\t--j;\r\n\t\t}\r\n\t\twhile(j >= 0) {\r\n\t\t\tAi[j] = xi * y[j];\r\n\t\t\t--j;\r\n\t\t}\r\n\t\tA[i] = Ai;\r\n\t\ti--;\r\n\t}\r\n\treturn A;\r\n};\r\nvar verb_core_MinimizationResult = function(solution,value,gradient,invHessian,iterations,message) {\r\n\tthis.solution = solution;\r\n\tthis.value = value;\r\n\tthis.gradient = gradient;\r\n\tthis.invHessian = invHessian;\r\n\tthis.iterations = iterations;\r\n\tthis.message = message;\r\n};\r\n$hxClasses[\"verb.core.MinimizationResult\"] = verb_core_MinimizationResult;\r\nverb_core_MinimizationResult.__name__ = [\"verb\",\"core\",\"MinimizationResult\"];\r\nverb_core_MinimizationResult.prototype = {\r\n\t__class__: verb_core_MinimizationResult\r\n};\r\nvar verb_core_ISerializable = function() { };\r\n$hxClasses[\"verb.core.ISerializable\"] = verb_core_ISerializable;\r\nverb_core_ISerializable.__name__ = [\"verb\",\"core\",\"ISerializable\"];\r\nverb_core_ISerializable.prototype = {\r\n\t__class__: verb_core_ISerializable\r\n};\r\nvar verb_core_Deserializer = $hx_exports.core.Deserializer = function() { };\r\n$hxClasses[\"verb.core.Deserializer\"] = verb_core_Deserializer;\r\nverb_core_Deserializer.__name__ = [\"verb\",\"core\",\"Deserializer\"];\r\nverb_core_Deserializer.deserialize = function(s) {\r\n\tvar unserializer = new haxe_Unserializer(s);\r\n\tvar r = unserializer.unserialize();\r\n\treturn r;\r\n};\r\nvar verb_core_Trig = $hx_exports.core.Trig = function() { };\r\n$hxClasses[\"verb.core.Trig\"] = verb_core_Trig;\r\nverb_core_Trig.__name__ = [\"verb\",\"core\",\"Trig\"];\r\nverb_core_Trig.isPointInPlane = function(pt,p,tol) {\r\n\treturn Math.abs(verb_core_Vec.dot(verb_core_Vec.sub(pt,p.origin),p.normal)) < tol;\r\n};\r\nverb_core_Trig.distToSegment = function(a,b,c) {\r\n\tvar res = verb_core_Trig.segmentClosestPoint(b,a,c,0.0,1.0);\r\n\treturn verb_core_Vec.dist(b,res.pt);\r\n};\r\nverb_core_Trig.rayClosestPoint = function(pt,o,r) {\r\n\tvar o2pt = verb_core_Vec.sub(pt,o);\r\n\tvar do2ptr = verb_core_Vec.dot(o2pt,r);\r\n\tvar proj = verb_core_Vec.add(o,verb_core_Vec.mul(do2ptr,r));\r\n\treturn proj;\r\n};\r\nverb_core_Trig.distToRay = function(pt,o,r) {\r\n\tvar d = verb_core_Trig.rayClosestPoint(pt,o,r);\r\n\tvar dif = verb_core_Vec.sub(d,pt);\r\n\treturn verb_core_Vec.norm(dif);\r\n};\r\nverb_core_Trig.threePointsAreFlat = function(p1,p2,p3,tol) {\r\n\tvar p2mp1 = verb_core_Vec.sub(p2,p1);\r\n\tvar p3mp1 = verb_core_Vec.sub(p3,p1);\r\n\tvar norm = verb_core_Vec.cross(p2mp1,p3mp1);\r\n\tvar area = verb_core_Vec.dot(norm,norm);\r\n\treturn area < tol;\r\n};\r\nverb_core_Trig.segmentClosestPoint = function(pt,segpt0,segpt1,u0,u1) {\r\n\tvar dif = verb_core_Vec.sub(segpt1,segpt0);\r\n\tvar l = verb_core_Vec.norm(dif);\r\n\tif(l < verb_core_Constants.EPSILON) return { u : u0, pt : segpt0};\r\n\tvar o = segpt0;\r\n\tvar r = verb_core_Vec.mul(1 / l,dif);\r\n\tvar o2pt = verb_core_Vec.sub(pt,o);\r\n\tvar do2ptr = verb_core_Vec.dot(o2pt,r);\r\n\tif(do2ptr < 0) return { u : u0, pt : segpt0}; else if(do2ptr > l) return { u : u1, pt : segpt1};\r\n\treturn { u : u0 + (u1 - u0) * do2ptr / l, pt : verb_core_Vec.add(o,verb_core_Vec.mul(do2ptr,r))};\r\n};\r\nvar verb_core_Vec = $hx_exports.core.Vec = function() { };\r\n$hxClasses[\"verb.core.Vec\"] = verb_core_Vec;\r\nverb_core_Vec.__name__ = [\"verb\",\"core\",\"Vec\"];\r\nverb_core_Vec.angleBetween = function(a,b) {\r\n\treturn Math.acos(verb_core_Vec.dot(a,b) / (verb_core_Vec.norm(a) * verb_core_Vec.norm(b)));\r\n};\r\nverb_core_Vec.positiveAngleBetween = function(a,b,n) {\r\n\tvar nab = verb_core_Vec.cross(a,b);\r\n\tvar al = verb_core_Vec.norm(a);\r\n\tvar bl = verb_core_Vec.norm(b);\r\n\tvar abl = al * bl;\r\n\tvar adb = verb_core_Vec.dot(a,b);\r\n\tvar sina = verb_core_Vec.norm(nab) / abl;\r\n\tvar cosa = adb / abl;\r\n\tvar w = Math.atan2(sina,cosa);\r\n\tvar s = verb_core_Vec.dot(n,nab);\r\n\tif(Math.abs(s) < verb_core_Constants.EPSILON) return w;\r\n\tif(s > 0) return w; else return -w;\r\n};\r\nverb_core_Vec.signedAngleBetween = function(a,b,n) {\r\n\tvar nab = verb_core_Vec.cross(a,b);\r\n\tvar al = verb_core_Vec.norm(a);\r\n\tvar bl = verb_core_Vec.norm(b);\r\n\tvar abl = al * bl;\r\n\tvar adb = verb_core_Vec.dot(a,b);\r\n\tvar sina = verb_core_Vec.norm(nab) / abl;\r\n\tvar cosa = adb / abl;\r\n\tvar w = Math.atan2(sina,cosa);\r\n\tvar s = verb_core_Vec.dot(n,nab);\r\n\tif(s > 0.0) return w; else return 2 * Math.PI - w;\r\n};\r\nverb_core_Vec.angleBetweenNormalized2d = function(a,b) {\r\n\tvar perpDot = a[0] * b[1] - a[1] * b[0];\r\n\treturn Math.atan2(perpDot,verb_core_Vec.dot(a,b));\r\n};\r\nverb_core_Vec.domain = function(a) {\r\n\treturn verb_core_ArrayExtensions.last(a) - verb_core_ArrayExtensions.first(a);\r\n};\r\nverb_core_Vec.range = function(max) {\r\n\tvar l = [];\r\n\tvar f = 0.0;\r\n\tvar _g = 0;\r\n\twhile(_g < max) {\r\n\t\tvar i = _g++;\r\n\t\tl.push(f);\r\n\t\tf += 1.0;\r\n\t}\r\n\treturn l;\r\n};\r\nverb_core_Vec.span = function(min,max,step) {\r\n\tif(step == null) return [];\r\n\tif(step < verb_core_Constants.EPSILON) return [];\r\n\tif(min > max && step > 0.0) return [];\r\n\tif(max > min && step < 0.0) return [];\r\n\tvar l = [];\r\n\tvar cur = min;\r\n\twhile(cur <= max) {\r\n\t\tl.push(cur);\r\n\t\tcur += step;\r\n\t}\r\n\treturn l;\r\n};\r\nverb_core_Vec.neg = function(arr) {\r\n\treturn arr.map(function(x) {\r\n\t\treturn -x;\r\n\t});\r\n};\r\nverb_core_Vec.min = function(arr) {\r\n\treturn Lambda.fold(arr,function(x,a) {\r\n\t\treturn Math.min(x,a);\r\n\t},Infinity);\r\n};\r\nverb_core_Vec.max = function(arr) {\r\n\treturn Lambda.fold(arr,function(x,a) {\r\n\t\treturn Math.max(x,a);\r\n\t},-Infinity);\r\n};\r\nverb_core_Vec.all = function(arr) {\r\n\treturn Lambda.fold(arr,function(x,a) {\r\n\t\treturn a && x;\r\n\t},true);\r\n};\r\nverb_core_Vec.finite = function(arr) {\r\n\treturn arr.map(function(x) {\r\n\t\treturn isFinite(x);\r\n\t});\r\n};\r\nverb_core_Vec.onRay = function(origin,dir,u) {\r\n\treturn verb_core_Vec.add(origin,verb_core_Vec.mul(u,dir));\r\n};\r\nverb_core_Vec.lerp = function(i,u,v) {\r\n\treturn verb_core_Vec.add(verb_core_Vec.mul(i,u),verb_core_Vec.mul(1.0 - i,v));\r\n};\r\nverb_core_Vec.normalized = function(arr) {\r\n\treturn verb_core_Vec.div(arr,verb_core_Vec.norm(arr));\r\n};\r\nverb_core_Vec.cross = function(u,v) {\r\n\treturn [u[1] * v[2] - u[2] * v[1],u[2] * v[0] - u[0] * v[2],u[0] * v[1] - u[1] * v[0]];\r\n};\r\nverb_core_Vec.dist = function(a,b) {\r\n\treturn verb_core_Vec.norm(verb_core_Vec.sub(a,b));\r\n};\r\nverb_core_Vec.distSquared = function(a,b) {\r\n\treturn verb_core_Vec.normSquared(verb_core_Vec.sub(a,b));\r\n};\r\nverb_core_Vec.sum = function(a) {\r\n\treturn Lambda.fold(a,function(x,a1) {\r\n\t\treturn a1 + x;\r\n\t},0);\r\n};\r\nverb_core_Vec.addAll = function(a) {\r\n\tvar i = $iterator(a)();\r\n\tif(!i.hasNext()) return null;\r\n\tvar f = i.next().length;\r\n\treturn Lambda.fold(a,function(x,a1) {\r\n\t\treturn verb_core_Vec.add(a1,x);\r\n\t},verb_core_Vec.rep(f,0.0));\r\n};\r\nverb_core_Vec.addAllMutate = function(a) {\r\n\tvar f = a[0];\r\n\tvar _g1 = 1;\r\n\tvar _g = a.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tverb_core_Vec.addMutate(f,a[i]);\r\n\t}\r\n};\r\nverb_core_Vec.addMulMutate = function(a,s,b) {\r\n\tvar _g1 = 0;\r\n\tvar _g = a.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\ta[i] = a[i] + s * b[i];\r\n\t}\r\n};\r\nverb_core_Vec.subMulMutate = function(a,s,b) {\r\n\tvar _g1 = 0;\r\n\tvar _g = a.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\ta[i] = a[i] - s * b[i];\r\n\t}\r\n};\r\nverb_core_Vec.addMutate = function(a,b) {\r\n\tvar _g1 = 0;\r\n\tvar _g = a.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\ta[i] = a[i] + b[i];\r\n\t}\r\n};\r\nverb_core_Vec.subMutate = function(a,b) {\r\n\tvar _g1 = 0;\r\n\tvar _g = a.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\ta[i] = a[i] - b[i];\r\n\t}\r\n};\r\nverb_core_Vec.mulMutate = function(a,b) {\r\n\tvar _g1 = 0;\r\n\tvar _g = b.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tb[i] = b[i] * a;\r\n\t}\r\n};\r\nverb_core_Vec.norm = function(a) {\r\n\tvar norm2 = verb_core_Vec.normSquared(a);\r\n\tif(norm2 != 0.0) return Math.sqrt(norm2); else return norm2;\r\n};\r\nverb_core_Vec.normSquared = function(a) {\r\n\treturn Lambda.fold(a,function(x,a1) {\r\n\t\treturn a1 + x * x;\r\n\t},0);\r\n};\r\nverb_core_Vec.rep = function(num,ele) {\r\n\tvar _g = [];\r\n\tvar _g1 = 0;\r\n\twhile(_g1 < num) {\r\n\t\tvar i = _g1++;\r\n\t\t_g.push(ele);\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Vec.zeros1d = function(rows) {\r\n\tvar _g = [];\r\n\tvar _g1 = 0;\r\n\twhile(_g1 < rows) {\r\n\t\tvar i = _g1++;\r\n\t\t_g.push(0.0);\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Vec.zeros2d = function(rows,cols) {\r\n\tvar _g = [];\r\n\tvar _g1 = 0;\r\n\twhile(_g1 < rows) {\r\n\t\tvar i = _g1++;\r\n\t\t_g.push(verb_core_Vec.zeros1d(cols));\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Vec.zeros3d = function(rows,cols,depth) {\r\n\tvar _g = [];\r\n\tvar _g1 = 0;\r\n\twhile(_g1 < rows) {\r\n\t\tvar i = _g1++;\r\n\t\t_g.push(verb_core_Vec.zeros2d(cols,depth));\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Vec.dot = function(a,b) {\r\n\tvar sum = 0;\r\n\tvar _g1 = 0;\r\n\tvar _g = a.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tsum += a[i] * b[i];\r\n\t}\r\n\treturn sum;\r\n};\r\nverb_core_Vec.add = function(a,b) {\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = a.length;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push(a[i] + b[i]);\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Vec.mul = function(a,b) {\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = b.length;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push(a * b[i]);\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Vec.div = function(a,b) {\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = a.length;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push(a[i] / b);\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Vec.sub = function(a,b) {\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = a.length;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push(a[i] - b[i]);\r\n\t}\r\n\treturn _g;\r\n};\r\nverb_core_Vec.isZero = function(vec) {\r\n\tvar _g1 = 0;\r\n\tvar _g = vec.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tif(Math.abs(vec[i]) > verb_core_Constants.TOLERANCE) return false;\r\n\t}\r\n\treturn true;\r\n};\r\nverb_core_Vec.sortedSetUnion = function(a,b) {\r\n\tvar merged = [];\r\n\tvar ai = 0;\r\n\tvar bi = 0;\r\n\twhile(ai < a.length || bi < b.length) {\r\n\t\tif(ai >= a.length) {\r\n\t\t\tmerged.push(b[bi]);\r\n\t\t\tbi++;\r\n\t\t\tcontinue;\r\n\t\t} else if(bi >= b.length) {\r\n\t\t\tmerged.push(a[ai]);\r\n\t\t\tai++;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tvar diff = a[ai] - b[bi];\r\n\t\tif(Math.abs(diff) < verb_core_Constants.EPSILON) {\r\n\t\t\tmerged.push(a[ai]);\r\n\t\t\tai++;\r\n\t\t\tbi++;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif(diff > 0.0) {\r\n\t\t\tmerged.push(b[bi]);\r\n\t\t\tbi++;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tmerged.push(a[ai]);\r\n\t\tai++;\r\n\t}\r\n\treturn merged;\r\n};\r\nverb_core_Vec.sortedSetSub = function(a,b) {\r\n\tvar result = [];\r\n\tvar ai = 0;\r\n\tvar bi = 0;\r\n\twhile(ai < a.length) {\r\n\t\tif(bi >= b.length) {\r\n\t\t\tresult.push(a[ai]);\r\n\t\t\tai++;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif(Math.abs(a[ai] - b[bi]) < verb_core_Constants.EPSILON) {\r\n\t\t\tai++;\r\n\t\t\tbi++;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tresult.push(a[ai]);\r\n\t\tai++;\r\n\t}\r\n\treturn result;\r\n};\r\nvar verb_eval_Analyze = $hx_exports.eval.Analyze = function() { };\r\n$hxClasses[\"verb.eval.Analyze\"] = verb_eval_Analyze;\r\nverb_eval_Analyze.__name__ = [\"verb\",\"eval\",\"Analyze\"];\r\nverb_eval_Analyze.knotMultiplicities = function(knots) {\r\n\tvar mults = [new verb_eval_KnotMultiplicity(knots[0],0)];\r\n\tvar curr = mults[0];\r\n\tvar _g = 0;\r\n\twhile(_g < knots.length) {\r\n\t\tvar knot = knots[_g];\r\n\t\t++_g;\r\n\t\tif(Math.abs(knot - curr.knot) > verb_core_Constants.EPSILON) {\r\n\t\t\tcurr = new verb_eval_KnotMultiplicity(knot,0);\r\n\t\t\tmults.push(curr);\r\n\t\t}\r\n\t\tcurr.inc();\r\n\t}\r\n\treturn mults;\r\n};\r\nverb_eval_Analyze.isRationalSurfaceClosed = function(surface,uDir) {\r\n\tif(uDir == null) uDir = true;\r\n\tvar cpts;\r\n\tif(uDir) cpts = surface.controlPoints; else cpts = verb_core_Mat.transpose(surface.controlPoints);\r\n\tvar _g1 = 0;\r\n\tvar _g = cpts[0].length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tvar test = verb_core_Vec.dist(verb_core_ArrayExtensions.first(cpts)[i],verb_core_ArrayExtensions.last(cpts)[i]) < verb_core_Constants.EPSILON;\r\n\t\tif(!test) return false;\r\n\t}\r\n\treturn true;\r\n};\r\nverb_eval_Analyze.rationalSurfaceClosestPoint = function(surface,p) {\r\n\tvar uv = verb_eval_Analyze.rationalSurfaceClosestParam(surface,p);\r\n\treturn verb_eval_Eval.rationalSurfacePoint(surface,uv[0],uv[1]);\r\n};\r\nverb_eval_Analyze.rationalSurfaceClosestParam = function(surface,p) {\r\n\tvar maxits = 5;\r\n\tvar i = 0;\r\n\tvar e;\r\n\tvar eps1 = 0.0001;\r\n\tvar eps2 = 0.0005;\r\n\tvar dif;\r\n\tvar minu = surface.knotsU[0];\r\n\tvar maxu = verb_core_ArrayExtensions.last(surface.knotsU);\r\n\tvar minv = surface.knotsV[0];\r\n\tvar maxv = verb_core_ArrayExtensions.last(surface.knotsV);\r\n\tvar closedu = verb_eval_Analyze.isRationalSurfaceClosed(surface);\r\n\tvar closedv = verb_eval_Analyze.isRationalSurfaceClosed(surface,false);\r\n\tvar cuv;\r\n\tvar tess = verb_eval_Tess.rationalSurfaceAdaptive(surface,new verb_eval_AdaptiveRefinementOptions());\r\n\tvar dmin = Infinity;\r\n\tvar _g1 = 0;\r\n\tvar _g = tess.points.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i1 = _g1++;\r\n\t\tvar x = tess.points[i1];\r\n\t\tvar d1 = verb_core_Vec.normSquared(verb_core_Vec.sub(p,x));\r\n\t\tif(d1 < dmin) {\r\n\t\t\tdmin = d1;\r\n\t\t\tcuv = tess.uvs[i1];\r\n\t\t}\r\n\t}\r\n\tvar f = function(uv) {\r\n\t\treturn verb_eval_Eval.rationalSurfaceDerivatives(surface,uv[0],uv[1],2);\r\n\t};\r\n\tvar n = function(uv1,e1,r) {\r\n\t\tvar Su = e1[1][0];\r\n\t\tvar Sv = e1[0][1];\r\n\t\tvar Suu = e1[2][0];\r\n\t\tvar Svv = e1[0][2];\r\n\t\tvar Suv = e1[1][1];\r\n\t\tvar Svu = e1[1][1];\r\n\t\tvar f1 = verb_core_Vec.dot(Su,r);\r\n\t\tvar g = verb_core_Vec.dot(Sv,r);\r\n\t\tvar k = [-f1,-g];\r\n\t\tvar J00 = verb_core_Vec.dot(Su,Su) + verb_core_Vec.dot(Suu,r);\r\n\t\tvar J01 = verb_core_Vec.dot(Su,Sv) + verb_core_Vec.dot(Suv,r);\r\n\t\tvar J10 = verb_core_Vec.dot(Su,Sv) + verb_core_Vec.dot(Svu,r);\r\n\t\tvar J11 = verb_core_Vec.dot(Sv,Sv) + verb_core_Vec.dot(Svv,r);\r\n\t\tvar J = [[J00,J01],[J10,J11]];\r\n\t\tvar d = verb_core_Mat.solve(J,k);\r\n\t\treturn verb_core_Vec.add(d,uv1);\r\n\t};\r\n\twhile(i < maxits) {\r\n\t\te = f(cuv);\r\n\t\tdif = verb_core_Vec.sub(e[0][0],p);\r\n\t\tvar c1v = verb_core_Vec.norm(dif);\r\n\t\tvar c2an = verb_core_Vec.dot(e[1][0],dif);\r\n\t\tvar c2ad = verb_core_Vec.norm(e[1][0]) * c1v;\r\n\t\tvar c2bn = verb_core_Vec.dot(e[0][1],dif);\r\n\t\tvar c2bd = verb_core_Vec.norm(e[0][1]) * c1v;\r\n\t\tvar c2av = c2an / c2ad;\r\n\t\tvar c2bv = c2bn / c2bd;\r\n\t\tvar c1 = c1v < eps1;\r\n\t\tvar c2a = c2av < eps2;\r\n\t\tvar c2b = c2bv < eps2;\r\n\t\tif(c1 && c2a && c2b) return cuv;\r\n\t\tvar ct = n(cuv,e,dif);\r\n\t\tif(ct[0] < minu) if(closedu) ct = [maxu - (ct[0] - minu),ct[1]]; else ct = [minu + verb_core_Constants.EPSILON,ct[1]]; else if(ct[0] > maxu) if(closedu) ct = [minu + (ct[0] - maxu),ct[1]]; else ct = [maxu - verb_core_Constants.EPSILON,ct[1]];\r\n\t\tif(ct[1] < minv) if(closedv) ct = [ct[0],maxv - (ct[1] - minv)]; else ct = [ct[0],minv + verb_core_Constants.EPSILON]; else if(ct[1] > maxv) if(closedv) ct = [ct[0],minv + (ct[0] - maxv)]; else ct = [ct[0],maxv - verb_core_Constants.EPSILON];\r\n\t\tvar c3v0 = verb_core_Vec.norm(verb_core_Vec.mul(ct[0] - cuv[0],e[1][0]));\r\n\t\tvar c3v1 = verb_core_Vec.norm(verb_core_Vec.mul(ct[1] - cuv[1],e[0][1]));\r\n\t\tif(c3v0 + c3v1 < eps1) return cuv;\r\n\t\tcuv = ct;\r\n\t\ti++;\r\n\t}\r\n\treturn cuv;\r\n};\r\nverb_eval_Analyze.rationalCurveClosestPoint = function(curve,p) {\r\n\treturn verb_eval_Eval.rationalCurvePoint(curve,verb_eval_Analyze.rationalCurveClosestParam(curve,p));\r\n};\r\nverb_eval_Analyze.rationalCurveClosestParam = function(curve,p) {\r\n\tvar min = Infinity;\r\n\tvar u = 0.0;\r\n\tvar pts = verb_eval_Tess.rationalCurveRegularSample(curve,curve.controlPoints.length * curve.degree,true);\r\n\tvar _g1 = 0;\r\n\tvar _g = pts.length - 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i1 = _g1++;\r\n\t\tvar u0 = pts[i1][0];\r\n\t\tvar u11 = pts[i1 + 1][0];\r\n\t\tvar p0 = pts[i1].slice(1);\r\n\t\tvar p1 = pts[i1 + 1].slice(1);\r\n\t\tvar proj = verb_core_Trig.segmentClosestPoint(p,p0,p1,u0,u11);\r\n\t\tvar d1 = verb_core_Vec.norm(verb_core_Vec.sub(p,proj.pt));\r\n\t\tif(d1 < min) {\r\n\t\t\tmin = d1;\r\n\t\t\tu = proj.u;\r\n\t\t}\r\n\t}\r\n\tvar maxits = 5;\r\n\tvar i = 0;\r\n\tvar e;\r\n\tvar eps1 = 0.0001;\r\n\tvar eps2 = 0.0005;\r\n\tvar dif;\r\n\tvar minu = curve.knots[0];\r\n\tvar maxu = verb_core_ArrayExtensions.last(curve.knots);\r\n\tvar closed = verb_core_Vec.normSquared(verb_core_Vec.sub(curve.controlPoints[0],verb_core_ArrayExtensions.last(curve.controlPoints))) < verb_core_Constants.EPSILON;\r\n\tvar cu = u;\r\n\tvar f = function(u1) {\r\n\t\treturn verb_eval_Eval.rationalCurveDerivatives(curve,u1,2);\r\n\t};\r\n\tvar n = function(u2,e1,d) {\r\n\t\tvar f1 = verb_core_Vec.dot(e1[1],d);\r\n\t\tvar s0 = verb_core_Vec.dot(e1[2],d);\r\n\t\tvar s1 = verb_core_Vec.dot(e1[1],e1[1]);\r\n\t\tvar df = s0 + s1;\r\n\t\treturn u2 - f1 / df;\r\n\t};\r\n\twhile(i < maxits) {\r\n\t\te = f(cu);\r\n\t\tdif = verb_core_Vec.sub(e[0],p);\r\n\t\tvar c1v = verb_core_Vec.norm(dif);\r\n\t\tvar c2n = verb_core_Vec.dot(e[1],dif);\r\n\t\tvar c2d = verb_core_Vec.norm(e[1]) * c1v;\r\n\t\tvar c2v = c2n / c2d;\r\n\t\tvar c1 = c1v < eps1;\r\n\t\tvar c2 = Math.abs(c2v) < eps2;\r\n\t\tif(c1 && c2) return cu;\r\n\t\tvar ct = n(cu,e,dif);\r\n\t\tif(ct < minu) if(closed) ct = maxu - (ct - minu); else ct = minu; else if(ct > maxu) if(closed) ct = minu + (ct - maxu); else ct = maxu;\r\n\t\tvar c3v = verb_core_Vec.norm(verb_core_Vec.mul(ct - cu,e[1]));\r\n\t\tif(c3v < eps1) return cu;\r\n\t\tcu = ct;\r\n\t\ti++;\r\n\t}\r\n\treturn cu;\r\n};\r\nverb_eval_Analyze.rationalCurveParamAtArcLength = function(curve,len,tol,beziers,bezierLengths) {\r\n\tif(tol == null) tol = 1e-3;\r\n\tif(len < verb_core_Constants.EPSILON) return curve.knots[0];\r\n\tvar crvs;\r\n\tif(beziers != null) crvs = beziers; else crvs = verb_eval_Modify.decomposeCurveIntoBeziers(curve);\r\n\tvar i = 0;\r\n\tvar cc = crvs[i];\r\n\tvar cl = -verb_core_Constants.EPSILON;\r\n\tvar bezier_lengths;\r\n\tif(bezierLengths != null) bezier_lengths = bezierLengths; else bezier_lengths = [];\r\n\twhile(cl < len && i < crvs.length) {\r\n\t\tif(i < bezier_lengths.length) bezier_lengths[i] = bezier_lengths[i]; else bezier_lengths[i] = verb_eval_Analyze.rationalBezierCurveArcLength(curve);\r\n\t\tcl += bezier_lengths[i];\r\n\t\tif(len < cl + verb_core_Constants.EPSILON) return verb_eval_Analyze.rationalBezierCurveParamAtArcLength(curve,len,tol,bezier_lengths[i]);\r\n\t\ti++;\r\n\t}\r\n\treturn -1;\r\n};\r\nverb_eval_Analyze.rationalBezierCurveParamAtArcLength = function(curve,len,tol,totalLength) {\r\n\tif(len < 0) return curve.knots[0];\r\n\tvar totalLen;\r\n\tif(totalLength != null) totalLen = totalLength; else totalLen = verb_eval_Analyze.rationalBezierCurveArcLength(curve);\r\n\tif(len > totalLen) return verb_core_ArrayExtensions.last(curve.knots);\r\n\tvar start_p = curve.knots[0];\r\n\tvar start_l = 0.0;\r\n\tvar end_p = verb_core_ArrayExtensions.last(curve.knots);\r\n\tvar end_l = totalLen;\r\n\tvar mid_p = 0.0;\r\n\tvar mid_l = 0.0;\r\n\tvar tol1;\r\n\tif(tol != null) tol1 = tol; else tol1 = verb_core_Constants.TOLERANCE * 2;\r\n\twhile(end_l - start_l > tol1) {\r\n\t\tmid_p = (start_p + end_p) / 2;\r\n\t\tmid_l = verb_eval_Analyze.rationalBezierCurveArcLength(curve,mid_p);\r\n\t\tif(mid_l > len) {\r\n\t\t\tend_p = mid_p;\r\n\t\t\tend_l = mid_l;\r\n\t\t} else {\r\n\t\t\tstart_p = mid_p;\r\n\t\t\tstart_l = mid_l;\r\n\t\t}\r\n\t}\r\n\treturn (start_p + end_p) / 2;\r\n};\r\nverb_eval_Analyze.rationalCurveArcLength = function(curve,u,gaussDegIncrease) {\r\n\tif(gaussDegIncrease == null) gaussDegIncrease = 16;\r\n\tif(u == null) u = verb_core_ArrayExtensions.last(curve.knots); else u = u;\r\n\tvar crvs = verb_eval_Modify.decomposeCurveIntoBeziers(curve);\r\n\tvar i = 0;\r\n\tvar cc = crvs[0];\r\n\tvar sum = 0.0;\r\n\twhile(i < crvs.length && cc.knots[0] + verb_core_Constants.EPSILON < u) {\r\n\t\tvar param = Math.min(verb_core_ArrayExtensions.last(cc.knots),u);\r\n\t\tsum += verb_eval_Analyze.rationalBezierCurveArcLength(cc,param,gaussDegIncrease);\r\n\t\tcc = crvs[++i];\r\n\t}\r\n\treturn sum;\r\n};\r\nverb_eval_Analyze.rationalBezierCurveArcLength = function(curve,u,gaussDegIncrease) {\r\n\tif(gaussDegIncrease == null) gaussDegIncrease = 16;\r\n\tvar u1;\r\n\tif(u == null) u1 = verb_core_ArrayExtensions.last(curve.knots); else u1 = u;\r\n\tvar z = (u1 - curve.knots[0]) / 2;\r\n\tvar sum = 0.0;\r\n\tvar gaussDeg = curve.degree + gaussDegIncrease;\r\n\tvar cu;\r\n\tvar tan;\r\n\tvar _g = 0;\r\n\twhile(_g < gaussDeg) {\r\n\t\tvar i = _g++;\r\n\t\tcu = z * verb_eval_Analyze.Tvalues[gaussDeg][i] + z + curve.knots[0];\r\n\t\ttan = verb_eval_Eval.rationalCurveDerivatives(curve,cu,1);\r\n\t\tsum += verb_eval_Analyze.Cvalues[gaussDeg][i] * verb_core_Vec.norm(tan[1]);\r\n\t}\r\n\treturn z * sum;\r\n};\r\nvar verb_eval_KnotMultiplicity = $hx_exports.eval.KnotMultiplicity = function(knot,mult) {\r\n\tthis.knot = knot;\r\n\tthis.mult = mult;\r\n};\r\n$hxClasses[\"verb.eval.KnotMultiplicity\"] = verb_eval_KnotMultiplicity;\r\nverb_eval_KnotMultiplicity.__name__ = [\"verb\",\"eval\",\"KnotMultiplicity\"];\r\nverb_eval_KnotMultiplicity.prototype = {\r\n\tinc: function() {\r\n\t\tthis.mult++;\r\n\t}\r\n\t,__class__: verb_eval_KnotMultiplicity\r\n};\r\nvar verb_eval_Check = $hx_exports.eval.Check = function() { };\r\n$hxClasses[\"verb.eval.Check\"] = verb_eval_Check;\r\nverb_eval_Check.__name__ = [\"verb\",\"eval\",\"Check\"];\r\nverb_eval_Check.isValidKnotVector = function(vec,degree) {\r\n\tif(vec.length == 0) return false;\r\n\tif(vec.length < (degree + 1) * 2) return false;\r\n\tvar rep = verb_core_ArrayExtensions.first(vec);\r\n\tvar _g1 = 0;\r\n\tvar _g = degree + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tif(Math.abs(vec[i] - rep) > verb_core_Constants.EPSILON) return false;\r\n\t}\r\n\trep = verb_core_ArrayExtensions.last(vec);\r\n\tvar _g11 = vec.length - degree - 1;\r\n\tvar _g2 = vec.length;\r\n\twhile(_g11 < _g2) {\r\n\t\tvar i1 = _g11++;\r\n\t\tif(Math.abs(vec[i1] - rep) > verb_core_Constants.EPSILON) return false;\r\n\t}\r\n\treturn verb_eval_Check.isNonDecreasing(vec);\r\n};\r\nverb_eval_Check.isNonDecreasing = function(vec) {\r\n\tvar rep = verb_core_ArrayExtensions.first(vec);\r\n\tvar _g1 = 0;\r\n\tvar _g = vec.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tif(vec[i] < rep - verb_core_Constants.EPSILON) return false;\r\n\t\trep = vec[i];\r\n\t}\r\n\treturn true;\r\n};\r\nverb_eval_Check.isValidNurbsCurveData = function(data) {\r\n\tif(data.controlPoints == null) throw new js__$Boot_HaxeError(\"Control points array cannot be null!\");\r\n\tif(data.degree == null) throw new js__$Boot_HaxeError(\"Degree cannot be null!\");\r\n\tif(data.degree < 1) throw new js__$Boot_HaxeError(\"Degree must be greater than 1!\");\r\n\tif(data.knots == null) throw new js__$Boot_HaxeError(\"Knots cannot be null!\");\r\n\tif(data.knots.length != data.controlPoints.length + data.degree + 1) throw new js__$Boot_HaxeError(\"controlPoints.length + degree + 1 must equal knots.length!\");\r\n\tif(!verb_eval_Check.isValidKnotVector(data.knots,data.degree)) throw new js__$Boot_HaxeError(\"Invalid knot vector format!  Should begin with degree + 1 repeats and end with degree + 1 repeats!\");\r\n\treturn data;\r\n};\r\nverb_eval_Check.isValidNurbsSurfaceData = function(data) {\r\n\tif(data.controlPoints == null) throw new js__$Boot_HaxeError(\"Control points array cannot be null!\");\r\n\tif(data.degreeU == null) throw new js__$Boot_HaxeError(\"DegreeU cannot be null!\");\r\n\tif(data.degreeV == null) throw new js__$Boot_HaxeError(\"DegreeV cannot be null!\");\r\n\tif(data.degreeU < 1) throw new js__$Boot_HaxeError(\"DegreeU must be greater than 1!\");\r\n\tif(data.degreeV < 1) throw new js__$Boot_HaxeError(\"DegreeV must be greater than 1!\");\r\n\tif(data.knotsU == null) throw new js__$Boot_HaxeError(\"KnotsU cannot be null!\");\r\n\tif(data.knotsV == null) throw new js__$Boot_HaxeError(\"KnotsV cannot be null!\");\r\n\tif(data.knotsU.length != data.controlPoints.length + data.degreeU + 1) throw new js__$Boot_HaxeError(\"controlPointsU.length + degreeU + 1 must equal knotsU.length!\");\r\n\tif(data.knotsV.length != data.controlPoints[0].length + data.degreeV + 1) throw new js__$Boot_HaxeError(\"controlPointsV.length + degreeV + 1 must equal knotsV.length!\");\r\n\tif(!verb_eval_Check.isValidKnotVector(data.knotsU,data.degreeU) || !verb_eval_Check.isValidKnotVector(data.knotsV,data.degreeV)) throw new js__$Boot_HaxeError(\"Invalid knot vector format!  Should begin with degree + 1 repeats and end with degree + 1 repeats!\");\r\n\treturn data;\r\n};\r\nvar verb_eval_Divide = $hx_exports.eval.Divide = function() { };\r\n$hxClasses[\"verb.eval.Divide\"] = verb_eval_Divide;\r\nverb_eval_Divide.__name__ = [\"verb\",\"eval\",\"Divide\"];\r\nverb_eval_Divide.surfaceSplit = function(surface,u,useV) {\r\n\tif(useV == null) useV = false;\r\n\tvar knots;\r\n\tvar degree;\r\n\tvar controlPoints;\r\n\tif(!useV) {\r\n\t\tcontrolPoints = verb_core_Mat.transpose(surface.controlPoints);\r\n\t\tknots = surface.knotsU;\r\n\t\tdegree = surface.degreeU;\r\n\t} else {\r\n\t\tcontrolPoints = surface.controlPoints;\r\n\t\tknots = surface.knotsV;\r\n\t\tdegree = surface.degreeV;\r\n\t}\r\n\tvar knots_to_insert;\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = degree + 1;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push(u);\r\n\t}\r\n\tknots_to_insert = _g;\r\n\tvar newpts0 = [];\r\n\tvar newpts1 = [];\r\n\tvar s = verb_eval_Eval.knotSpan(degree,u,knots);\r\n\tvar res = null;\r\n\tvar _g11 = 0;\r\n\twhile(_g11 < controlPoints.length) {\r\n\t\tvar cps = controlPoints[_g11];\r\n\t\t++_g11;\r\n\t\tres = verb_eval_Modify.curveKnotRefine(new verb_core_NurbsCurveData(degree,knots,cps),knots_to_insert);\r\n\t\tnewpts0.push(res.controlPoints.slice(0,s + 1));\r\n\t\tnewpts1.push(res.controlPoints.slice(s + 1));\r\n\t}\r\n\tvar knots0 = res.knots.slice(0,s + degree + 2);\r\n\tvar knots1 = res.knots.slice(s + 1);\r\n\tif(!useV) {\r\n\t\tnewpts0 = verb_core_Mat.transpose(newpts0);\r\n\t\tnewpts1 = verb_core_Mat.transpose(newpts1);\r\n\t\treturn [new verb_core_NurbsSurfaceData(degree,surface.degreeV,knots0,surface.knotsV.slice(),newpts0),new verb_core_NurbsSurfaceData(degree,surface.degreeV,knots1,surface.knotsV.slice(),newpts1)];\r\n\t}\r\n\treturn [new verb_core_NurbsSurfaceData(surface.degreeU,degree,surface.knotsU.slice(),knots0,newpts0),new verb_core_NurbsSurfaceData(surface.degreeU,degree,surface.knotsU.slice(),knots1,newpts1)];\r\n};\r\nverb_eval_Divide.curveSplit = function(curve,u) {\r\n\tvar degree = curve.degree;\r\n\tvar controlPoints = curve.controlPoints;\r\n\tvar knots = curve.knots;\r\n\tvar knots_to_insert;\r\n\tvar _g = [];\r\n\tvar _g2 = 0;\r\n\tvar _g1 = degree + 1;\r\n\twhile(_g2 < _g1) {\r\n\t\tvar i = _g2++;\r\n\t\t_g.push(u);\r\n\t}\r\n\tknots_to_insert = _g;\r\n\tvar res = verb_eval_Modify.curveKnotRefine(curve,knots_to_insert);\r\n\tvar s = verb_eval_Eval.knotSpan(degree,u,knots);\r\n\tvar knots0 = res.knots.slice(0,s + degree + 2);\r\n\tvar knots1 = res.knots.slice(s + 1);\r\n\tvar cpts0 = res.controlPoints.slice(0,s + 1);\r\n\tvar cpts1 = res.controlPoints.slice(s + 1);\r\n\treturn [new verb_core_NurbsCurveData(degree,knots0,cpts0),new verb_core_NurbsCurveData(degree,knots1,cpts1)];\r\n};\r\nverb_eval_Divide.rationalCurveByEqualArcLength = function(curve,num) {\r\n\tvar tlen = verb_eval_Analyze.rationalCurveArcLength(curve);\r\n\tvar inc = tlen / num;\r\n\treturn verb_eval_Divide.rationalCurveByArcLength(curve,inc);\r\n};\r\nverb_eval_Divide.rationalCurveByArcLength = function(curve,l) {\r\n\tvar crvs = verb_eval_Modify.decomposeCurveIntoBeziers(curve);\r\n\tvar crvlens = crvs.map(function(x) {\r\n\t\treturn verb_eval_Analyze.rationalBezierCurveArcLength(x);\r\n\t});\r\n\tvar totlen = verb_core_Vec.sum(crvlens);\r\n\tvar pts = [new verb_eval_CurveLengthSample(curve.knots[0],0.0)];\r\n\tif(l > totlen) return pts;\r\n\tvar inc = l;\r\n\tvar i = 0;\r\n\tvar lc = inc;\r\n\tvar runsum = 0.0;\r\n\tvar runsum1 = 0.0;\r\n\tvar u;\r\n\twhile(i < crvs.length) {\r\n\t\trunsum += crvlens[i];\r\n\t\twhile(lc < runsum + verb_core_Constants.EPSILON) {\r\n\t\t\tu = verb_eval_Analyze.rationalBezierCurveParamAtArcLength(crvs[i],lc - runsum1,verb_core_Constants.TOLERANCE,crvlens[i]);\r\n\t\t\tpts.push(new verb_eval_CurveLengthSample(u,lc));\r\n\t\t\tlc += inc;\r\n\t\t}\r\n\t\trunsum1 += crvlens[i];\r\n\t\ti++;\r\n\t}\r\n\treturn pts;\r\n};\r\nvar verb_eval_CurveLengthSample = $hx_exports.eval.CurveLengthSample = function(u,len) {\r\n\tthis.u = u;\r\n\tthis.len = len;\r\n};\r\n$hxClasses[\"verb.eval.CurveLengthSample\"] = verb_eval_CurveLengthSample;\r\nverb_eval_CurveLengthSample.__name__ = [\"verb\",\"eval\",\"CurveLengthSample\"];\r\nverb_eval_CurveLengthSample.prototype = {\r\n\t__class__: verb_eval_CurveLengthSample\r\n};\r\nvar verb_eval_Eval = $hx_exports.eval.Eval = function() { };\r\n$hxClasses[\"verb.eval.Eval\"] = verb_eval_Eval;\r\nverb_eval_Eval.__name__ = [\"verb\",\"eval\",\"Eval\"];\r\nverb_eval_Eval.rationalCurveTangent = function(curve,u) {\r\n\tvar derivs = verb_eval_Eval.rationalCurveDerivatives(curve,u,1);\r\n\treturn derivs[1];\r\n};\r\nverb_eval_Eval.rationalSurfaceNormal = function(surface,u,v) {\r\n\tvar derivs = verb_eval_Eval.rationalSurfaceDerivatives(surface,u,v,1);\r\n\treturn verb_core_Vec.cross(derivs[1][0],derivs[0][1]);\r\n};\r\nverb_eval_Eval.rationalSurfaceDerivatives = function(surface,u,v,numDerivs) {\r\n\tif(numDerivs == null) numDerivs = 1;\r\n\tvar ders = verb_eval_Eval.surfaceDerivatives(surface,u,v,numDerivs);\r\n\tvar Aders = verb_eval_Eval.rational2d(ders);\r\n\tvar wders = verb_eval_Eval.weight2d(ders);\r\n\tvar SKL = [];\r\n\tvar dim = Aders[0][0].length;\r\n\tvar _g1 = 0;\r\n\tvar _g = numDerivs + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar k = _g1++;\r\n\t\tSKL.push([]);\r\n\t\tvar _g3 = 0;\r\n\t\tvar _g2 = numDerivs - k + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar l = _g3++;\r\n\t\t\tvar v1 = Aders[k][l];\r\n\t\t\tvar _g5 = 1;\r\n\t\t\tvar _g4 = l + 1;\r\n\t\t\twhile(_g5 < _g4) {\r\n\t\t\t\tvar j = _g5++;\r\n\t\t\t\tverb_core_Vec.subMulMutate(v1,verb_core_Binomial.get(l,j) * wders[0][j],SKL[k][l - j]);\r\n\t\t\t}\r\n\t\t\tvar _g51 = 1;\r\n\t\t\tvar _g41 = k + 1;\r\n\t\t\twhile(_g51 < _g41) {\r\n\t\t\t\tvar i = _g51++;\r\n\t\t\t\tverb_core_Vec.subMulMutate(v1,verb_core_Binomial.get(k,i) * wders[i][0],SKL[k - i][l]);\r\n\t\t\t\tvar v2 = verb_core_Vec.zeros1d(dim);\r\n\t\t\t\tvar _g7 = 1;\r\n\t\t\t\tvar _g6 = l + 1;\r\n\t\t\t\twhile(_g7 < _g6) {\r\n\t\t\t\t\tvar j1 = _g7++;\r\n\t\t\t\t\tverb_core_Vec.addMulMutate(v2,verb_core_Binomial.get(l,j1) * wders[i][j1],SKL[k - i][l - j1]);\r\n\t\t\t\t}\r\n\t\t\t\tverb_core_Vec.subMulMutate(v1,verb_core_Binomial.get(k,i),v2);\r\n\t\t\t}\r\n\t\t\tverb_core_Vec.mulMutate(1 / wders[0][0],v1);\r\n\t\t\tSKL[k].push(v1);\r\n\t\t}\r\n\t}\r\n\treturn SKL;\r\n};\r\nverb_eval_Eval.rationalSurfacePoint = function(surface,u,v) {\r\n\treturn verb_eval_Eval.dehomogenize(verb_eval_Eval.surfacePoint(surface,u,v));\r\n};\r\nverb_eval_Eval.rationalCurveDerivatives = function(curve,u,numDerivs) {\r\n\tif(numDerivs == null) numDerivs = 1;\r\n\tvar ders = verb_eval_Eval.curveDerivatives(curve,u,numDerivs);\r\n\tvar Aders = verb_eval_Eval.rational1d(ders);\r\n\tvar wders = verb_eval_Eval.weight1d(ders);\r\n\tvar k = 0;\r\n\tvar i = 0;\r\n\tvar CK = [];\r\n\tvar _g1 = 0;\r\n\tvar _g = numDerivs + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar k1 = _g1++;\r\n\t\tvar v = Aders[k1];\r\n\t\tvar _g3 = 1;\r\n\t\tvar _g2 = k1 + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar i1 = _g3++;\r\n\t\t\tverb_core_Vec.subMulMutate(v,verb_core_Binomial.get(k1,i1) * wders[i1],CK[k1 - i1]);\r\n\t\t}\r\n\t\tverb_core_Vec.mulMutate(1 / wders[0],v);\r\n\t\tCK.push(v);\r\n\t}\r\n\treturn CK;\r\n};\r\nverb_eval_Eval.rationalCurvePoint = function(curve,u) {\r\n\treturn verb_eval_Eval.dehomogenize(verb_eval_Eval.curvePoint(curve,u));\r\n};\r\nverb_eval_Eval.surfaceDerivatives = function(surface,u,v,numDerivs) {\r\n\tvar n = surface.knotsU.length - surface.degreeU - 2;\r\n\tvar m = surface.knotsV.length - surface.degreeV - 2;\r\n\treturn verb_eval_Eval.surfaceDerivativesGivenNM(n,m,surface,u,v,numDerivs);\r\n};\r\nverb_eval_Eval.surfaceDerivativesGivenNM = function(n,m,surface,u,v,numDerivs) {\r\n\tvar degreeU = surface.degreeU;\r\n\tvar degreeV = surface.degreeV;\r\n\tvar controlPoints = surface.controlPoints;\r\n\tvar knotsU = surface.knotsU;\r\n\tvar knotsV = surface.knotsV;\r\n\tif(!verb_eval_Eval.areValidRelations(degreeU,controlPoints.length,knotsU.length) || !verb_eval_Eval.areValidRelations(degreeV,controlPoints[0].length,knotsV.length)) throw new js__$Boot_HaxeError(\"Invalid relations between control points, knot vector, and n\");\r\n\tvar dim = controlPoints[0][0].length;\r\n\tvar du;\r\n\tif(numDerivs < degreeU) du = numDerivs; else du = degreeU;\r\n\tvar dv;\r\n\tif(numDerivs < degreeV) dv = numDerivs; else dv = degreeV;\r\n\tvar SKL = verb_core_Vec.zeros3d(numDerivs + 1,numDerivs + 1,dim);\r\n\tvar knotSpan_index_u = verb_eval_Eval.knotSpanGivenN(n,degreeU,u,knotsU);\r\n\tvar knotSpan_index_v = verb_eval_Eval.knotSpanGivenN(m,degreeV,v,knotsV);\r\n\tvar uders = verb_eval_Eval.derivativeBasisFunctionsGivenNI(knotSpan_index_u,u,degreeU,n,knotsU);\r\n\tvar vders = verb_eval_Eval.derivativeBasisFunctionsGivenNI(knotSpan_index_v,v,degreeV,m,knotsV);\r\n\tvar temp = verb_core_Vec.zeros2d(degreeV + 1,dim);\r\n\tvar dd = 0;\r\n\tvar _g1 = 0;\r\n\tvar _g = du + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar k = _g1++;\r\n\t\tvar _g3 = 0;\r\n\t\tvar _g2 = degreeV + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar s = _g3++;\r\n\t\t\ttemp[s] = verb_core_Vec.zeros1d(dim);\r\n\t\t\tvar _g5 = 0;\r\n\t\t\tvar _g4 = degreeU + 1;\r\n\t\t\twhile(_g5 < _g4) {\r\n\t\t\t\tvar r = _g5++;\r\n\t\t\t\tverb_core_Vec.addMulMutate(temp[s],uders[k][r],controlPoints[knotSpan_index_u - degreeU + r][knotSpan_index_v - degreeV + s]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar nk = numDerivs - k;\r\n\t\tif(nk < dv) dd = nk; else dd = dv;\r\n\t\tvar _g31 = 0;\r\n\t\tvar _g21 = dd + 1;\r\n\t\twhile(_g31 < _g21) {\r\n\t\t\tvar l = _g31++;\r\n\t\t\tSKL[k][l] = verb_core_Vec.zeros1d(dim);\r\n\t\t\tvar _g51 = 0;\r\n\t\t\tvar _g41 = degreeV + 1;\r\n\t\t\twhile(_g51 < _g41) {\r\n\t\t\t\tvar s1 = _g51++;\r\n\t\t\t\tverb_core_Vec.addMulMutate(SKL[k][l],vders[l][s1],temp[s1]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn SKL;\r\n};\r\nverb_eval_Eval.surfacePoint = function(surface,u,v) {\r\n\tvar n = surface.knotsU.length - surface.degreeU - 2;\r\n\tvar m = surface.knotsV.length - surface.degreeV - 2;\r\n\treturn verb_eval_Eval.surfacePointGivenNM(n,m,surface,u,v);\r\n};\r\nverb_eval_Eval.surfacePointGivenNM = function(n,m,surface,u,v) {\r\n\tvar degreeU = surface.degreeU;\r\n\tvar degreeV = surface.degreeV;\r\n\tvar controlPoints = surface.controlPoints;\r\n\tvar knotsU = surface.knotsU;\r\n\tvar knotsV = surface.knotsV;\r\n\tif(!verb_eval_Eval.areValidRelations(degreeU,controlPoints.length,knotsU.length) || !verb_eval_Eval.areValidRelations(degreeV,controlPoints[0].length,knotsV.length)) throw new js__$Boot_HaxeError(\"Invalid relations between control points, knot vector, and n\");\r\n\tvar dim = controlPoints[0][0].length;\r\n\tvar knotSpan_index_u = verb_eval_Eval.knotSpanGivenN(n,degreeU,u,knotsU);\r\n\tvar knotSpan_index_v = verb_eval_Eval.knotSpanGivenN(m,degreeV,v,knotsV);\r\n\tvar u_basis_vals = verb_eval_Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index_u,u,degreeU,knotsU);\r\n\tvar v_basis_vals = verb_eval_Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index_v,v,degreeV,knotsV);\r\n\tvar uind = knotSpan_index_u - degreeU;\r\n\tvar vind = knotSpan_index_v;\r\n\tvar position = verb_core_Vec.zeros1d(dim);\r\n\tvar temp = verb_core_Vec.zeros1d(dim);\r\n\tvar _g1 = 0;\r\n\tvar _g = degreeV + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar l = _g1++;\r\n\t\ttemp = verb_core_Vec.zeros1d(dim);\r\n\t\tvind = knotSpan_index_v - degreeV + l;\r\n\t\tvar _g3 = 0;\r\n\t\tvar _g2 = degreeU + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar k = _g3++;\r\n\t\t\tverb_core_Vec.addMulMutate(temp,u_basis_vals[k],controlPoints[uind + k][vind]);\r\n\t\t}\r\n\t\tverb_core_Vec.addMulMutate(position,v_basis_vals[l],temp);\r\n\t}\r\n\treturn position;\r\n};\r\nverb_eval_Eval.curveRegularSamplePoints = function(crv,divs) {\r\n\tvar derivs = verb_eval_Eval.curveDerivatives(crv,crv.knots[0],crv.degree);\r\n\tvar t = 1.0 / divs;\r\n\tvar temp = t * t;\r\n\tvar f = derivs[0];\r\n\tvar fd = verb_core_Vec.mul(t,derivs[1]);\r\n\tvar fdd_per2 = verb_core_Vec.mul(temp * 0.5,derivs[2]);\r\n\tvar fddd_per2 = verb_core_Vec.mul(temp * t * 0.5,derivs[3]);\r\n\tvar fdd = verb_core_Vec.add(fdd_per2,fdd_per2);\r\n\tvar fddd = verb_core_Vec.add(fddd_per2,fddd_per2);\r\n\tvar fddd_per6 = verb_core_Vec.mul(0.333333333333333315,fddd_per2);\r\n\tvar pts = [];\r\n\tvar _g1 = 0;\r\n\tvar _g = divs + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tpts.push(verb_eval_Eval.dehomogenize(f));\r\n\t\tverb_core_Vec.addAllMutate([f,fd,fdd_per2,fddd_per6]);\r\n\t\tverb_core_Vec.addAllMutate([fd,fdd,fddd_per2]);\r\n\t\tverb_core_Vec.addAllMutate([fdd,fddd]);\r\n\t\tverb_core_Vec.addAllMutate([fdd_per2,fddd_per2]);\r\n\t}\r\n\treturn pts;\r\n};\r\nverb_eval_Eval.curveRegularSamplePoints2 = function(crv,divs) {\r\n\tvar derivs = verb_eval_Eval.curveDerivatives(crv,crv.knots[0],crv.degree);\r\n\tvar t = 1.0 / divs;\r\n\tvar temp = t * t;\r\n\tvar f = derivs[0];\r\n\tvar fd = verb_core_Vec.mul(t,derivs[1]);\r\n\tvar fdd_per2 = verb_core_Vec.mul(temp * 0.5,derivs[2]);\r\n\tvar fddd_per2 = verb_core_Vec.mul(temp * t * 0.5,derivs[3]);\r\n\tvar fdd = verb_core_Vec.add(fdd_per2,fdd_per2);\r\n\tvar fddd = verb_core_Vec.add(fddd_per2,fddd_per2);\r\n\tvar fddd_per6 = verb_core_Vec.mul(0.333333333333333315,fddd_per2);\r\n\tvar pts = [];\r\n\tvar _g1 = 0;\r\n\tvar _g = divs + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tpts.push(verb_eval_Eval.dehomogenize(f));\r\n\t\tverb_core_Vec.addAllMutate([f,fd,fdd_per2,fddd_per6]);\r\n\t\tverb_core_Vec.addAllMutate([fd,fdd,fddd_per2]);\r\n\t\tverb_core_Vec.addAllMutate([fdd,fddd]);\r\n\t\tverb_core_Vec.addAllMutate([fdd_per2,fddd_per2]);\r\n\t}\r\n\treturn pts;\r\n};\r\nverb_eval_Eval.rationalSurfaceRegularSampleDerivatives = function(surface,divsU,divsV,numDerivs) {\r\n\tvar allders = verb_eval_Eval.surfaceRegularSampleDerivatives(surface,divsU,divsV,numDerivs);\r\n\tvar allratders = [];\r\n\tvar divsU1 = divsU + 1;\r\n\tvar divsV1 = divsV + 1;\r\n\tvar numDerivs1 = numDerivs + 1;\r\n\tvar _g = 0;\r\n\twhile(_g < divsU1) {\r\n\t\tvar i = _g++;\r\n\t\tvar rowders = [];\r\n\t\tallratders.push(rowders);\r\n\t\tvar _g1 = 0;\r\n\t\twhile(_g1 < divsV1) {\r\n\t\t\tvar j = _g1++;\r\n\t\t\tvar ders = allders[i][j];\r\n\t\t\tvar Aders = verb_eval_Eval.rational2d(ders);\r\n\t\t\tvar wders = verb_eval_Eval.weight2d(ders);\r\n\t\t\tvar SKL = [];\r\n\t\t\tvar dim = Aders[0][0].length;\r\n\t\t\tvar _g2 = 0;\r\n\t\t\twhile(_g2 < numDerivs1) {\r\n\t\t\t\tvar k = _g2++;\r\n\t\t\t\tSKL.push([]);\r\n\t\t\t\tvar _g4 = 0;\r\n\t\t\t\tvar _g3 = numDerivs1 - k;\r\n\t\t\t\twhile(_g4 < _g3) {\r\n\t\t\t\t\tvar l = _g4++;\r\n\t\t\t\t\tvar v = Aders[k][l];\r\n\t\t\t\t\tvar _g6 = 1;\r\n\t\t\t\t\tvar _g5 = l + 1;\r\n\t\t\t\t\twhile(_g6 < _g5) {\r\n\t\t\t\t\t\tvar j1 = _g6++;\r\n\t\t\t\t\t\tverb_core_Vec.subMulMutate(v,verb_core_Binomial.get(l,j1) * wders[0][j1],SKL[k][l - j1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar _g61 = 1;\r\n\t\t\t\t\tvar _g51 = k + 1;\r\n\t\t\t\t\twhile(_g61 < _g51) {\r\n\t\t\t\t\t\tvar i1 = _g61++;\r\n\t\t\t\t\t\tverb_core_Vec.subMulMutate(v,verb_core_Binomial.get(k,i1) * wders[i1][0],SKL[k - i1][l]);\r\n\t\t\t\t\t\tvar v2 = verb_core_Vec.zeros1d(dim);\r\n\t\t\t\t\t\tvar _g8 = 1;\r\n\t\t\t\t\t\tvar _g7 = l + 1;\r\n\t\t\t\t\t\twhile(_g8 < _g7) {\r\n\t\t\t\t\t\t\tvar j2 = _g8++;\r\n\t\t\t\t\t\t\tverb_core_Vec.addMulMutate(v2,verb_core_Binomial.get(l,j2) * wders[i1][j2],SKL[k - i1][l - j2]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tverb_core_Vec.subMulMutate(v,verb_core_Binomial.get(k,i1),v2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tverb_core_Vec.mulMutate(1 / wders[0][0],v);\r\n\t\t\t\t\tSKL[k].push(v);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\trowders.push(SKL);\r\n\t\t}\r\n\t}\r\n\treturn allratders;\r\n};\r\nverb_eval_Eval.surfaceRegularSampleDerivatives = function(surface,divsU,divsV,numDerivs) {\r\n\tvar degreeU = surface.degreeU;\r\n\tvar degreeV = surface.degreeV;\r\n\tvar controlPoints = surface.controlPoints;\r\n\tvar knotsU = surface.knotsU;\r\n\tvar knotsV = surface.knotsV;\r\n\tvar dim = controlPoints[0][0].length;\r\n\tvar spanU = (verb_core_ArrayExtensions.last(knotsU) - knotsU[0]) / divsU;\r\n\tvar spanV = (verb_core_ArrayExtensions.last(knotsV) - knotsV[0]) / divsV;\r\n\tvar knotSpansBasesU = verb_eval_Eval.regularlySpacedDerivativeBasisFunctions(degreeU,knotsU,divsU);\r\n\tvar knotSpansU = knotSpansBasesU.item0;\r\n\tvar basesU = knotSpansBasesU.item1;\r\n\tvar knotSpansBasesV = verb_eval_Eval.regularlySpacedDerivativeBasisFunctions(degreeV,knotsV,divsV);\r\n\tvar knotSpansV = knotSpansBasesV.item0;\r\n\tvar basesV = knotSpansBasesV.item1;\r\n\tvar pts = [];\r\n\tvar divsU1 = divsU + 1;\r\n\tvar divsV1 = divsV + 1;\r\n\tvar _g = 0;\r\n\twhile(_g < divsU1) {\r\n\t\tvar i = _g++;\r\n\t\tvar ptsi = [];\r\n\t\tpts.push(ptsi);\r\n\t\tvar _g1 = 0;\r\n\t\twhile(_g1 < divsV1) {\r\n\t\t\tvar j = _g1++;\r\n\t\t\tptsi.push(verb_eval_Eval.surfaceDerivativesGivenBasesKnotSpans(degreeU,degreeV,controlPoints,knotSpansU[i],knotSpansV[j],basesU[i],basesV[j],dim,numDerivs));\r\n\t\t}\r\n\t}\r\n\treturn pts;\r\n};\r\nverb_eval_Eval.rationalSurfaceRegularSamplePoints = function(surface,divsU,divsV) {\r\n\treturn verb_eval_Eval.dehomogenize2d(verb_eval_Eval.surfaceRegularSamplePoints(surface,divsU,divsV));\r\n};\r\nverb_eval_Eval.surfaceRegularSamplePoints = function(surface,divsU,divsV) {\r\n\tvar degreeU = surface.degreeU;\r\n\tvar degreeV = surface.degreeV;\r\n\tvar controlPoints = surface.controlPoints;\r\n\tvar knotsU = surface.knotsU;\r\n\tvar knotsV = surface.knotsV;\r\n\tvar dim = controlPoints[0][0].length;\r\n\tvar spanU = (verb_core_ArrayExtensions.last(knotsU) - knotsU[0]) / divsU;\r\n\tvar spanV = (verb_core_ArrayExtensions.last(knotsV) - knotsV[0]) / divsV;\r\n\tvar knotSpansBasesU = verb_eval_Eval.regularlySpacedBasisFunctions(degreeU,knotsU,divsU);\r\n\tvar knotSpansU = knotSpansBasesU.item0;\r\n\tvar basesU = knotSpansBasesU.item1;\r\n\tvar knotSpansBasesV = verb_eval_Eval.regularlySpacedBasisFunctions(degreeV,knotsV,divsV);\r\n\tvar knotSpansV = knotSpansBasesV.item0;\r\n\tvar basesV = knotSpansBasesV.item1;\r\n\tvar pts = [];\r\n\tvar divsU1 = divsU + 1;\r\n\tvar divsV1 = divsV + 1;\r\n\tvar _g = 0;\r\n\twhile(_g < divsU1) {\r\n\t\tvar i = _g++;\r\n\t\tvar ptsi = [];\r\n\t\tpts.push(ptsi);\r\n\t\tvar _g1 = 0;\r\n\t\twhile(_g1 < divsV1) {\r\n\t\t\tvar j = _g1++;\r\n\t\t\tptsi.push(verb_eval_Eval.surfacePointGivenBasesKnotSpans(degreeU,degreeV,controlPoints,knotSpansU[i],knotSpansV[j],basesU[i],basesV[j],dim));\r\n\t\t}\r\n\t}\r\n\treturn pts;\r\n};\r\nverb_eval_Eval.regularlySpacedBasisFunctions = function(degree,knots,divs) {\r\n\tvar n = knots.length - degree - 2;\r\n\tvar span = (verb_core_ArrayExtensions.last(knots) - knots[0]) / divs;\r\n\tvar bases = [];\r\n\tvar knotspans = [];\r\n\tvar u = knots[0];\r\n\tvar knotIndex = verb_eval_Eval.knotSpanGivenN(n,degree,u,knots);\r\n\tvar div1 = divs + 1;\r\n\tvar _g = 0;\r\n\twhile(_g < div1) {\r\n\t\tvar i = _g++;\r\n\t\twhile(u >= knots[knotIndex + 1]) knotIndex++;\r\n\t\tknotspans.push(knotIndex);\r\n\t\tbases.push(verb_eval_Eval.basisFunctionsGivenKnotSpanIndex(knotIndex,u,degree,knots));\r\n\t\tu += span;\r\n\t}\r\n\treturn new verb_core_Pair(knotspans,bases);\r\n};\r\nverb_eval_Eval.regularlySpacedDerivativeBasisFunctions = function(degree,knots,divs) {\r\n\tvar n = knots.length - degree - 2;\r\n\tvar span = (verb_core_ArrayExtensions.last(knots) - knots[0]) / divs;\r\n\tvar bases = [];\r\n\tvar knotspans = [];\r\n\tvar u = knots[0];\r\n\tvar knotIndex = verb_eval_Eval.knotSpanGivenN(n,degree,u,knots);\r\n\tvar div1 = divs + 1;\r\n\tvar _g = 0;\r\n\twhile(_g < div1) {\r\n\t\tvar i = _g++;\r\n\t\twhile(u >= knots[knotIndex + 1]) knotIndex++;\r\n\t\tknotspans.push(knotIndex);\r\n\t\tbases.push(verb_eval_Eval.derivativeBasisFunctionsGivenNI(knotIndex,u,degree,n,knots));\r\n\t\tu += span;\r\n\t}\r\n\treturn new verb_core_Pair(knotspans,bases);\r\n};\r\nverb_eval_Eval.surfacePointGivenBasesKnotSpans = function(degreeU,degreeV,controlPoints,knotSpanU,knotSpanV,basesU,basesV,dim) {\r\n\tvar position = verb_core_Vec.zeros1d(dim);\r\n\tvar temp;\r\n\tvar uind = knotSpanU - degreeU;\r\n\tvar vind = knotSpanV - degreeV;\r\n\tvar _g1 = 0;\r\n\tvar _g = degreeV + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar l = _g1++;\r\n\t\ttemp = verb_core_Vec.zeros1d(dim);\r\n\t\tvar _g3 = 0;\r\n\t\tvar _g2 = degreeU + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar k = _g3++;\r\n\t\t\tverb_core_Vec.addMulMutate(temp,basesU[k],controlPoints[uind + k][vind]);\r\n\t\t}\r\n\t\tvind++;\r\n\t\tverb_core_Vec.addMulMutate(position,basesV[l],temp);\r\n\t}\r\n\treturn position;\r\n};\r\nverb_eval_Eval.surfaceDerivativesGivenBasesKnotSpans = function(degreeU,degreeV,controlPoints,knotSpanU,knotSpanV,basesU,basesV,dim,numDerivs) {\r\n\tvar dim1 = controlPoints[0][0].length;\r\n\tvar du;\r\n\tif(numDerivs < degreeU) du = numDerivs; else du = degreeU;\r\n\tvar dv;\r\n\tif(numDerivs < degreeV) dv = numDerivs; else dv = degreeV;\r\n\tvar SKL = verb_core_Vec.zeros3d(du + 1,dv + 1,dim1);\r\n\tvar temp = verb_core_Vec.zeros2d(degreeV + 1,dim1);\r\n\tvar dd = 0;\r\n\tvar _g1 = 0;\r\n\tvar _g = du + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar k = _g1++;\r\n\t\tvar _g3 = 0;\r\n\t\tvar _g2 = degreeV + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar s = _g3++;\r\n\t\t\ttemp[s] = verb_core_Vec.zeros1d(dim1);\r\n\t\t\tvar _g5 = 0;\r\n\t\t\tvar _g4 = degreeU + 1;\r\n\t\t\twhile(_g5 < _g4) {\r\n\t\t\t\tvar r = _g5++;\r\n\t\t\t\tverb_core_Vec.addMulMutate(temp[s],basesU[k][r],controlPoints[knotSpanU - degreeU + r][knotSpanV - degreeV + s]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar nk = numDerivs - k;\r\n\t\tif(nk < dv) dd = nk; else dd = dv;\r\n\t\tvar _g31 = 0;\r\n\t\tvar _g21 = dd + 1;\r\n\t\twhile(_g31 < _g21) {\r\n\t\t\tvar l = _g31++;\r\n\t\t\tSKL[k][l] = verb_core_Vec.zeros1d(dim1);\r\n\t\t\tvar _g51 = 0;\r\n\t\t\tvar _g41 = degreeV + 1;\r\n\t\t\twhile(_g51 < _g41) {\r\n\t\t\t\tvar s1 = _g51++;\r\n\t\t\t\tverb_core_Vec.addMulMutate(SKL[k][l],basesV[l][s1],temp[s1]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn SKL;\r\n};\r\nverb_eval_Eval.curveDerivatives = function(crv,u,numDerivs) {\r\n\tvar n = crv.knots.length - crv.degree - 2;\r\n\treturn verb_eval_Eval.curveDerivativesGivenN(n,crv,u,numDerivs);\r\n};\r\nverb_eval_Eval.curveDerivativesGivenN = function(n,curve,u,numDerivs) {\r\n\tvar degree = curve.degree;\r\n\tvar controlPoints = curve.controlPoints;\r\n\tvar knots = curve.knots;\r\n\tif(!verb_eval_Eval.areValidRelations(degree,controlPoints.length,knots.length)) throw new js__$Boot_HaxeError(\"Invalid relations between control points, knot vector, and n\");\r\n\tvar dim = controlPoints[0].length;\r\n\tvar du;\r\n\tif(numDerivs < degree) du = numDerivs; else du = degree;\r\n\tvar CK = verb_core_Vec.zeros2d(numDerivs + 1,dim);\r\n\tvar knotSpan_index = verb_eval_Eval.knotSpanGivenN(n,degree,u,knots);\r\n\tvar nders = verb_eval_Eval.derivativeBasisFunctionsGivenNI(knotSpan_index,u,degree,du,knots);\r\n\tvar k = 0;\r\n\tvar j = 0;\r\n\tvar _g1 = 0;\r\n\tvar _g = du + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar k1 = _g1++;\r\n\t\tvar _g3 = 0;\r\n\t\tvar _g2 = degree + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar j1 = _g3++;\r\n\t\t\tverb_core_Vec.addMulMutate(CK[k1],nders[k1][j1],controlPoints[knotSpan_index - degree + j1]);\r\n\t\t}\r\n\t}\r\n\treturn CK;\r\n};\r\nverb_eval_Eval.curvePoint = function(curve,u) {\r\n\tvar n = curve.knots.length - curve.degree - 2;\r\n\treturn verb_eval_Eval.curvePointGivenN(n,curve,u);\r\n};\r\nverb_eval_Eval.areValidRelations = function(degree,num_controlPoints,knots_length) {\r\n\treturn num_controlPoints + degree + 1 - knots_length == 0;\r\n};\r\nverb_eval_Eval.curvePointGivenN = function(n,curve,u) {\r\n\tvar degree = curve.degree;\r\n\tvar controlPoints = curve.controlPoints;\r\n\tvar knots = curve.knots;\r\n\tif(!verb_eval_Eval.areValidRelations(degree,controlPoints.length,knots.length)) {\r\n\t\tthrow new js__$Boot_HaxeError(\"Invalid relations between control points, knot Array, and n\");\r\n\t\treturn null;\r\n\t}\r\n\tvar knotSpan_index = verb_eval_Eval.knotSpanGivenN(n,degree,u,knots);\r\n\tvar basis_values = verb_eval_Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index,u,degree,knots);\r\n\tvar position = verb_core_Vec.zeros1d(controlPoints[0].length);\r\n\tvar _g1 = 0;\r\n\tvar _g = degree + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar j = _g1++;\r\n\t\tverb_core_Vec.addMulMutate(position,basis_values[j],controlPoints[knotSpan_index - degree + j]);\r\n\t}\r\n\treturn position;\r\n};\r\nverb_eval_Eval.volumePoint = function(volume,u,v,w) {\r\n\tvar n = volume.knotsU.length - volume.degreeU - 2;\r\n\tvar m = volume.knotsV.length - volume.degreeV - 2;\r\n\tvar l = volume.knotsW.length - volume.degreeW - 2;\r\n\treturn verb_eval_Eval.volumePointGivenNML(volume,n,m,l,u,v,w);\r\n};\r\nverb_eval_Eval.volumePointGivenNML = function(volume,n,m,l,u,v,w) {\r\n\tif(!verb_eval_Eval.areValidRelations(volume.degreeU,volume.controlPoints.length,volume.knotsU.length) || !verb_eval_Eval.areValidRelations(volume.degreeV,volume.controlPoints[0].length,volume.knotsV.length) || !verb_eval_Eval.areValidRelations(volume.degreeW,volume.controlPoints[0][0].length,volume.knotsW.length)) throw new js__$Boot_HaxeError(\"Invalid relations between control points and knot vector\");\r\n\tvar controlPoints = volume.controlPoints;\r\n\tvar degreeU = volume.degreeU;\r\n\tvar degreeV = volume.degreeV;\r\n\tvar degreeW = volume.degreeW;\r\n\tvar knotsU = volume.knotsU;\r\n\tvar knotsV = volume.knotsV;\r\n\tvar knotsW = volume.knotsW;\r\n\tvar dim = controlPoints[0][0][0].length;\r\n\tvar knotSpan_index_u = verb_eval_Eval.knotSpanGivenN(n,degreeU,u,knotsU);\r\n\tvar knotSpan_index_v = verb_eval_Eval.knotSpanGivenN(m,degreeV,v,knotsV);\r\n\tvar knotSpan_index_w = verb_eval_Eval.knotSpanGivenN(l,degreeW,w,knotsW);\r\n\tvar u_basis_vals = verb_eval_Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index_u,u,degreeU,knotsU);\r\n\tvar v_basis_vals = verb_eval_Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index_v,v,degreeV,knotsV);\r\n\tvar w_basis_vals = verb_eval_Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index_w,w,degreeW,knotsW);\r\n\tvar uind = knotSpan_index_u - degreeU;\r\n\tvar position = verb_core_Vec.zeros1d(dim);\r\n\tvar temp = verb_core_Vec.zeros1d(dim);\r\n\tvar temp2 = verb_core_Vec.zeros1d(dim);\r\n\tvar _g1 = 0;\r\n\tvar _g = degreeW + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\ttemp2 = verb_core_Vec.zeros1d(dim);\r\n\t\tvar wind = knotSpan_index_w - degreeW + i;\r\n\t\tvar _g3 = 0;\r\n\t\tvar _g2 = degreeV + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar j = _g3++;\r\n\t\t\ttemp = verb_core_Vec.zeros1d(dim);\r\n\t\t\tvar vind = knotSpan_index_v - degreeV + j;\r\n\t\t\tvar _g5 = 0;\r\n\t\t\tvar _g4 = degreeU + 1;\r\n\t\t\twhile(_g5 < _g4) {\r\n\t\t\t\tvar k = _g5++;\r\n\t\t\t\tverb_core_Vec.addMulMutate(temp,u_basis_vals[k],controlPoints[uind + k][vind][wind]);\r\n\t\t\t}\r\n\t\t\tverb_core_Vec.addMulMutate(temp2,v_basis_vals[j],temp);\r\n\t\t}\r\n\t\tverb_core_Vec.addMulMutate(position,w_basis_vals[i],temp2);\r\n\t}\r\n\treturn position;\r\n};\r\nverb_eval_Eval.derivativeBasisFunctions = function(u,degree,knots) {\r\n\tvar knotSpan_index = verb_eval_Eval.knotSpan(degree,u,knots);\r\n\tvar m = knots.length - 1;\r\n\tvar n = m - degree - 1;\r\n\treturn verb_eval_Eval.derivativeBasisFunctionsGivenNI(knotSpan_index,u,degree,n,knots);\r\n};\r\nverb_eval_Eval.derivativeBasisFunctionsGivenNI = function(knotIndex,u,p,n,knots) {\r\n\tvar ndu = verb_core_Vec.zeros2d(p + 1,p + 1);\r\n\tvar left = verb_core_Vec.zeros1d(p + 1);\r\n\tvar right = verb_core_Vec.zeros1d(p + 1);\r\n\tvar saved = 0.0;\r\n\tvar temp = 0.0;\r\n\tndu[0][0] = 1.0;\r\n\tvar _g1 = 1;\r\n\tvar _g = p + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar j = _g1++;\r\n\t\tleft[j] = u - knots[knotIndex + 1 - j];\r\n\t\tright[j] = knots[knotIndex + j] - u;\r\n\t\tsaved = 0.0;\r\n\t\tvar _g2 = 0;\r\n\t\twhile(_g2 < j) {\r\n\t\t\tvar r = _g2++;\r\n\t\t\tndu[j][r] = right[r + 1] + left[j - r];\r\n\t\t\ttemp = ndu[r][j - 1] / ndu[j][r];\r\n\t\t\tndu[r][j] = saved + right[r + 1] * temp;\r\n\t\t\tsaved = left[j - r] * temp;\r\n\t\t}\r\n\t\tndu[j][j] = saved;\r\n\t}\r\n\tvar ders = verb_core_Vec.zeros2d(n + 1,p + 1);\r\n\tvar a = verb_core_Vec.zeros2d(2,p + 1);\r\n\tvar s1 = 0;\r\n\tvar s2 = 1;\r\n\tvar d = 0.0;\r\n\tvar rk = 0;\r\n\tvar pk = 0;\r\n\tvar j1 = 0;\r\n\tvar j2 = 0;\r\n\tvar _g11 = 0;\r\n\tvar _g3 = p + 1;\r\n\twhile(_g11 < _g3) {\r\n\t\tvar j3 = _g11++;\r\n\t\tders[0][j3] = ndu[j3][p];\r\n\t}\r\n\tvar _g12 = 0;\r\n\tvar _g4 = p + 1;\r\n\twhile(_g12 < _g4) {\r\n\t\tvar r1 = _g12++;\r\n\t\ts1 = 0;\r\n\t\ts2 = 1;\r\n\t\ta[0][0] = 1.0;\r\n\t\tvar _g31 = 1;\r\n\t\tvar _g21 = n + 1;\r\n\t\twhile(_g31 < _g21) {\r\n\t\t\tvar k = _g31++;\r\n\t\t\td = 0.0;\r\n\t\t\trk = r1 - k;\r\n\t\t\tpk = p - k;\r\n\t\t\tif(r1 >= k) {\r\n\t\t\t\ta[s2][0] = a[s1][0] / ndu[pk + 1][rk];\r\n\t\t\t\td = a[s2][0] * ndu[rk][pk];\r\n\t\t\t}\r\n\t\t\tif(rk >= -1) j1 = 1; else j1 = -rk;\r\n\t\t\tif(r1 - 1 <= pk) j2 = k - 1; else j2 = p - r1;\r\n\t\t\tvar _g5 = j1;\r\n\t\t\tvar _g41 = j2 + 1;\r\n\t\t\twhile(_g5 < _g41) {\r\n\t\t\t\tvar j4 = _g5++;\r\n\t\t\t\ta[s2][j4] = (a[s1][j4] - a[s1][j4 - 1]) / ndu[pk + 1][rk + j4];\r\n\t\t\t\td += a[s2][j4] * ndu[rk + j4][pk];\r\n\t\t\t}\r\n\t\t\tif(r1 <= pk) {\r\n\t\t\t\ta[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r1];\r\n\t\t\t\td += a[s2][k] * ndu[r1][pk];\r\n\t\t\t}\r\n\t\t\tders[k][r1] = d;\r\n\t\t\tvar temp1 = s1;\r\n\t\t\ts1 = s2;\r\n\t\t\ts2 = temp1;\r\n\t\t}\r\n\t}\r\n\tvar acc = p;\r\n\tvar _g13 = 1;\r\n\tvar _g6 = n + 1;\r\n\twhile(_g13 < _g6) {\r\n\t\tvar k1 = _g13++;\r\n\t\tvar _g32 = 0;\r\n\t\tvar _g22 = p + 1;\r\n\t\twhile(_g32 < _g22) {\r\n\t\t\tvar j5 = _g32++;\r\n\t\t\tders[k1][j5] *= acc;\r\n\t\t}\r\n\t\tacc *= p - k1;\r\n\t}\r\n\treturn ders;\r\n};\r\nverb_eval_Eval.basisFunctions = function(u,degree,knots) {\r\n\tvar knotSpan_index = verb_eval_Eval.knotSpan(degree,u,knots);\r\n\treturn verb_eval_Eval.basisFunctionsGivenKnotSpanIndex(knotSpan_index,u,degree,knots);\r\n};\r\nverb_eval_Eval.basisFunctionsGivenKnotSpanIndex = function(knotSpan_index,u,degree,knots) {\r\n\tvar basisFunctions = verb_core_Vec.zeros1d(degree + 1);\r\n\tvar left = verb_core_Vec.zeros1d(degree + 1);\r\n\tvar right = verb_core_Vec.zeros1d(degree + 1);\r\n\tvar saved = 0;\r\n\tvar temp = 0;\r\n\tbasisFunctions[0] = 1.0;\r\n\tvar _g1 = 1;\r\n\tvar _g = degree + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar j = _g1++;\r\n\t\tleft[j] = u - knots[knotSpan_index + 1 - j];\r\n\t\tright[j] = knots[knotSpan_index + j] - u;\r\n\t\tsaved = 0.0;\r\n\t\tvar _g2 = 0;\r\n\t\twhile(_g2 < j) {\r\n\t\t\tvar r = _g2++;\r\n\t\t\ttemp = basisFunctions[r] / (right[r + 1] + left[j - r]);\r\n\t\t\tbasisFunctions[r] = saved + right[r + 1] * temp;\r\n\t\t\tsaved = left[j - r] * temp;\r\n\t\t}\r\n\t\tbasisFunctions[j] = saved;\r\n\t}\r\n\treturn basisFunctions;\r\n};\r\nverb_eval_Eval.knotSpan = function(degree,u,knots) {\r\n\treturn verb_eval_Eval.knotSpanGivenN(knots.length - degree - 2,degree,u,knots);\r\n};\r\nverb_eval_Eval.knotSpanGivenN = function(n,degree,u,knots) {\r\n\tif(u > knots[n + 1] - verb_core_Constants.EPSILON) return n;\r\n\tif(u < knots[degree] + verb_core_Constants.EPSILON) return degree;\r\n\tvar low = degree;\r\n\tvar high = n + 1;\r\n\tvar mid = Math.floor((low + high) / 2);\r\n\twhile(u < knots[mid] || u >= knots[mid + 1]) {\r\n\t\tif(u < knots[mid]) high = mid; else low = mid;\r\n\t\tmid = Math.floor((low + high) / 2);\r\n\t}\r\n\treturn mid;\r\n};\r\nverb_eval_Eval.dehomogenize = function(homoPoint) {\r\n\tvar dim = homoPoint.length;\r\n\tvar point = [];\r\n\tvar wt = homoPoint[dim - 1];\r\n\tvar l = homoPoint.length - 1;\r\n\tvar _g = 0;\r\n\twhile(_g < l) {\r\n\t\tvar i = _g++;\r\n\t\tpoint.push(homoPoint[i] / wt);\r\n\t}\r\n\treturn point;\r\n};\r\nverb_eval_Eval.rational1d = function(homoPoints) {\r\n\tvar dim = homoPoints[0].length - 1;\r\n\treturn homoPoints.map(function(x) {\r\n\t\treturn x.slice(0,dim);\r\n\t});\r\n};\r\nverb_eval_Eval.rational2d = function(homoPoints) {\r\n\treturn homoPoints.map(verb_eval_Eval.rational1d);\r\n};\r\nverb_eval_Eval.weight1d = function(homoPoints) {\r\n\tvar dim = homoPoints[0].length - 1;\r\n\treturn homoPoints.map(function(x) {\r\n\t\treturn x[dim];\r\n\t});\r\n};\r\nverb_eval_Eval.weight2d = function(homoPoints) {\r\n\treturn homoPoints.map(verb_eval_Eval.weight1d);\r\n};\r\nverb_eval_Eval.dehomogenize1d = function(homoPoints) {\r\n\treturn homoPoints.map(verb_eval_Eval.dehomogenize);\r\n};\r\nverb_eval_Eval.dehomogenize2d = function(homoPoints) {\r\n\treturn homoPoints.map(verb_eval_Eval.dehomogenize1d);\r\n};\r\nverb_eval_Eval.homogenize1d = function(controlPoints,weights) {\r\n\tvar rows = controlPoints.length;\r\n\tvar dim = controlPoints[0].length;\r\n\tvar homo_controlPoints = [];\r\n\tvar wt = 0.0;\r\n\tvar ref_pt = [];\r\n\tvar weights1;\r\n\tif(weights != null) weights1 = weights; else weights1 = verb_core_Vec.rep(controlPoints.length,1.0);\r\n\tvar _g = 0;\r\n\twhile(_g < rows) {\r\n\t\tvar i = _g++;\r\n\t\tvar pt = [];\r\n\t\tref_pt = controlPoints[i];\r\n\t\twt = weights1[i];\r\n\t\tvar _g1 = 0;\r\n\t\twhile(_g1 < dim) {\r\n\t\t\tvar k = _g1++;\r\n\t\t\tpt.push(ref_pt[k] * wt);\r\n\t\t}\r\n\t\tpt.push(wt);\r\n\t\thomo_controlPoints.push(pt);\r\n\t}\r\n\treturn homo_controlPoints;\r\n};\r\nverb_eval_Eval.homogenize2d = function(controlPoints,weights) {\r\n\tvar rows = controlPoints.length;\r\n\tvar homo_controlPoints = [];\r\n\tvar weights1;\r\n\tif(weights != null) weights1 = weights; else {\r\n\t\tvar _g = [];\r\n\t\tvar _g1 = 0;\r\n\t\twhile(_g1 < rows) {\r\n\t\t\tvar i = _g1++;\r\n\t\t\t_g.push(verb_core_Vec.rep(controlPoints[0].length,1.0));\r\n\t\t}\r\n\t\tweights1 = _g;\r\n\t}\r\n\tvar _g11 = 0;\r\n\twhile(_g11 < rows) {\r\n\t\tvar i1 = _g11++;\r\n\t\thomo_controlPoints.push(verb_eval_Eval.homogenize1d(controlPoints[i1],weights1[i1]));\r\n\t}\r\n\treturn homo_controlPoints;\r\n};\r\nvar verb_eval_Intersect = $hx_exports.eval.Intersect = function() { };\r\n$hxClasses[\"verb.eval.Intersect\"] = verb_eval_Intersect;\r\nverb_eval_Intersect.__name__ = [\"verb\",\"eval\",\"Intersect\"];\r\nverb_eval_Intersect.surfaces = function(surface0,surface1,tol) {\r\n\tvar tess1 = verb_eval_Tess.rationalSurfaceAdaptive(surface0);\r\n\tvar tess2 = verb_eval_Tess.rationalSurfaceAdaptive(surface1);\r\n\tvar resApprox = verb_eval_Intersect.meshes(tess1,tess2);\r\n\tvar exactPls = resApprox.map(function(pl) {\r\n\t\treturn pl.map(function(inter) {\r\n\t\t\treturn verb_eval_Intersect.surfacesAtPointWithEstimate(surface0,surface1,inter.uv0,inter.uv1,tol);\r\n\t\t});\r\n\t});\r\n\treturn exactPls.map(function(x) {\r\n\t\treturn verb_eval_Make.rationalInterpCurve(x.map(function(y) {\r\n\t\t\treturn y.point;\r\n\t\t}),3);\r\n\t});\r\n};\r\nverb_eval_Intersect.surfacesAtPointWithEstimate = function(surface0,surface1,uv1,uv2,tol) {\r\n\tvar pds;\r\n\tvar p;\r\n\tvar pn;\r\n\tvar pu;\r\n\tvar pv;\r\n\tvar pd;\r\n\tvar qds;\r\n\tvar q;\r\n\tvar qn;\r\n\tvar qu;\r\n\tvar qv;\r\n\tvar qd;\r\n\tvar dist;\r\n\tvar maxits = 5;\r\n\tvar its = 0;\r\n\tdo {\r\n\t\tpds = verb_eval_Eval.rationalSurfaceDerivatives(surface0,uv1[0],uv1[1],1);\r\n\t\tp = pds[0][0];\r\n\t\tpu = pds[1][0];\r\n\t\tpv = pds[0][1];\r\n\t\tpn = verb_core_Vec.normalized(verb_core_Vec.cross(pu,pv));\r\n\t\tpd = verb_core_Vec.dot(pn,p);\r\n\t\tqds = verb_eval_Eval.rationalSurfaceDerivatives(surface1,uv2[0],uv2[1],1);\r\n\t\tq = qds[0][0];\r\n\t\tqu = qds[1][0];\r\n\t\tqv = qds[0][1];\r\n\t\tqn = verb_core_Vec.normalized(verb_core_Vec.cross(qu,qv));\r\n\t\tqd = verb_core_Vec.dot(qn,q);\r\n\t\tdist = verb_core_Vec.distSquared(p,q);\r\n\t\tif(dist < tol * tol) break;\r\n\t\tvar fn = verb_core_Vec.normalized(verb_core_Vec.cross(pn,qn));\r\n\t\tvar fd = verb_core_Vec.dot(fn,p);\r\n\t\tvar x = verb_eval_Intersect.threePlanes(pn,pd,qn,qd,fn,fd);\r\n\t\tif(x == null) throw new js__$Boot_HaxeError(\"panic!\");\r\n\t\tvar pdif = verb_core_Vec.sub(x,p);\r\n\t\tvar qdif = verb_core_Vec.sub(x,q);\r\n\t\tvar rw = verb_core_Vec.cross(pu,pn);\r\n\t\tvar rt = verb_core_Vec.cross(pv,pn);\r\n\t\tvar su = verb_core_Vec.cross(qu,qn);\r\n\t\tvar sv = verb_core_Vec.cross(qv,qn);\r\n\t\tvar dw = verb_core_Vec.dot(rt,pdif) / verb_core_Vec.dot(rt,pu);\r\n\t\tvar dt = verb_core_Vec.dot(rw,pdif) / verb_core_Vec.dot(rw,pv);\r\n\t\tvar du = verb_core_Vec.dot(sv,qdif) / verb_core_Vec.dot(sv,qu);\r\n\t\tvar dv = verb_core_Vec.dot(su,qdif) / verb_core_Vec.dot(su,qv);\r\n\t\tuv1 = verb_core_Vec.add([dw,dt],uv1);\r\n\t\tuv2 = verb_core_Vec.add([du,dv],uv2);\r\n\t\tits++;\r\n\t} while(its < maxits);\r\n\treturn new verb_core_SurfaceSurfaceIntersectionPoint(uv1,uv2,p,dist);\r\n};\r\nverb_eval_Intersect.meshes = function(mesh0,mesh1,bbtree0,bbtree1) {\r\n\tif(bbtree0 == null) bbtree0 = new verb_core_LazyMeshBoundingBoxTree(mesh0);\r\n\tif(bbtree1 == null) bbtree1 = new verb_core_LazyMeshBoundingBoxTree(mesh1);\r\n\tvar bbints = verb_eval_Intersect.boundingBoxTrees(bbtree0,bbtree1,0);\r\n\tvar segments = verb_core_ArrayExtensions.unique(bbints.map(function(ids) {\r\n\t\treturn verb_eval_Intersect.triangles(mesh0,ids.item0,mesh1,ids.item1);\r\n\t}).filter(function(x) {\r\n\t\treturn x != null;\r\n\t}).filter(function(x1) {\r\n\t\treturn verb_core_Vec.distSquared(x1.min.point,x1.max.point) > verb_core_Constants.EPSILON;\r\n\t}),function(a,b) {\r\n\t\tvar s1 = verb_core_Vec.sub(a.min.uv0,b.min.uv0);\r\n\t\tvar d1 = verb_core_Vec.dot(s1,s1);\r\n\t\tvar s2 = verb_core_Vec.sub(a.max.uv0,b.max.uv0);\r\n\t\tvar d2 = verb_core_Vec.dot(s2,s2);\r\n\t\tvar s3 = verb_core_Vec.sub(a.min.uv0,b.max.uv0);\r\n\t\tvar d3 = verb_core_Vec.dot(s3,s3);\r\n\t\tvar s4 = verb_core_Vec.sub(a.max.uv0,b.min.uv0);\r\n\t\tvar d4 = verb_core_Vec.dot(s4,s4);\r\n\t\treturn d1 < verb_core_Constants.EPSILON && d2 < verb_core_Constants.EPSILON || d3 < verb_core_Constants.EPSILON && d4 < verb_core_Constants.EPSILON;\r\n\t});\r\n\treturn verb_eval_Intersect.makeMeshIntersectionPolylines(segments);\r\n};\r\nverb_eval_Intersect.meshSlices = function(mesh,min,max,step) {\r\n\tvar bbtree = new verb_core_MeshBoundingBoxTree(mesh);\r\n\tvar bb = bbtree.boundingBox();\r\n\tvar x0 = bb.min[0];\r\n\tvar y0 = bb.min[1];\r\n\tvar x1 = bb.max[0];\r\n\tvar y1 = bb.max[1];\r\n\tvar span = verb_core_Vec.span(min,max,step);\r\n\tvar slices = [];\r\n\tvar _g = 0;\r\n\twhile(_g < span.length) {\r\n\t\tvar z = span[_g];\r\n\t\t++_g;\r\n\t\tvar pts = [[x0,y0,z],[x1,y0,z],[x1,y1,z],[x0,y1,z]];\r\n\t\tvar uvs = [[0.0,0.0],[1.0,0.0],[1.0,1.0],[0.0,1.0]];\r\n\t\tvar faces = [[0,1,2],[0,2,3]];\r\n\t\tvar plane = new verb_core_MeshData(faces,pts,null,uvs);\r\n\t\tslices.push(verb_eval_Intersect.meshes(mesh,plane,bbtree));\r\n\t}\r\n\treturn slices;\r\n};\r\nverb_eval_Intersect.makeMeshIntersectionPolylines = function(segments) {\r\n\tif(segments.length == 0) return [];\r\n\tvar _g = 0;\r\n\twhile(_g < segments.length) {\r\n\t\tvar s = segments[_g];\r\n\t\t++_g;\r\n\t\ts.max.opp = s.min;\r\n\t\ts.min.opp = s.max;\r\n\t}\r\n\tvar tree = verb_eval_Intersect.kdTreeFromSegments(segments);\r\n\tvar ends = [];\r\n\tvar _g1 = 0;\r\n\twhile(_g1 < segments.length) {\r\n\t\tvar seg = segments[_g1];\r\n\t\t++_g1;\r\n\t\tends.push(seg.min);\r\n\t\tends.push(seg.max);\r\n\t}\r\n\tvar _g2 = 0;\r\n\twhile(_g2 < ends.length) {\r\n\t\tvar segEnd = ends[_g2];\r\n\t\t++_g2;\r\n\t\tif(segEnd.adj != null) continue;\r\n\t\tvar adjEnd = verb_eval_Intersect.lookupAdjacentSegment(segEnd,tree,segments.length);\r\n\t\tif(adjEnd != null && adjEnd.adj == null) {\r\n\t\t\tsegEnd.adj = adjEnd;\r\n\t\t\tadjEnd.adj = segEnd;\r\n\t\t}\r\n\t}\r\n\tvar freeEnds = ends.filter(function(x) {\r\n\t\treturn x.adj == null;\r\n\t});\r\n\tif(freeEnds.length == 0) freeEnds = ends;\r\n\tvar pls = [];\r\n\tvar numVisitedEnds = 0;\r\n\tvar loopDetected = false;\r\n\twhile(freeEnds.length != 0) {\r\n\t\tvar end = freeEnds.pop();\r\n\t\tif(!end.visited) {\r\n\t\t\tvar pl = [];\r\n\t\t\tvar curEnd = end;\r\n\t\t\twhile(curEnd != null) {\r\n\t\t\t\tif(curEnd.visited) break;\r\n\t\t\t\tcurEnd.visited = true;\r\n\t\t\t\tcurEnd.opp.visited = true;\r\n\t\t\t\tpl.push(curEnd);\r\n\t\t\t\tnumVisitedEnds += 2;\r\n\t\t\t\tcurEnd = curEnd.opp.adj;\r\n\t\t\t\tif(curEnd == end) break;\r\n\t\t\t}\r\n\t\t\tif(pl.length > 0) {\r\n\t\t\t\tpl.push(pl[pl.length - 1].opp);\r\n\t\t\t\tpls.push(pl);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(freeEnds.length == 0 && ends.length > 0 && (loopDetected || numVisitedEnds < ends.length)) {\r\n\t\t\tloopDetected = true;\r\n\t\t\tvar e = ends.pop();\r\n\t\t\tfreeEnds.push(e);\r\n\t\t}\r\n\t}\r\n\treturn pls;\r\n};\r\nverb_eval_Intersect.kdTreeFromSegments = function(segments) {\r\n\tvar treePoints = [];\r\n\tvar _g = 0;\r\n\twhile(_g < segments.length) {\r\n\t\tvar seg = segments[_g];\r\n\t\t++_g;\r\n\t\ttreePoints.push(new verb_core_KdPoint(seg.min.point,seg.min));\r\n\t\ttreePoints.push(new verb_core_KdPoint(seg.max.point,seg.max));\r\n\t}\r\n\treturn new verb_core_KdTree(treePoints,verb_core_Vec.distSquared);\r\n};\r\nverb_eval_Intersect.lookupAdjacentSegment = function(segEnd,tree,numResults) {\r\n\tvar adj = tree.nearest(segEnd.point,numResults,verb_core_Constants.EPSILON).filter(function(r) {\r\n\t\treturn segEnd != r.item0.obj;\r\n\t}).map(function(r1) {\r\n\t\treturn r1.item0.obj;\r\n\t});\r\n\tif(adj.length == 1) return adj[0]; else return null;\r\n};\r\nverb_eval_Intersect.curveAndSurface = function(curve,surface,tol,crvBbTree,srfBbTree) {\r\n\tif(tol == null) tol = 1e-3;\r\n\tif(crvBbTree != null) crvBbTree = crvBbTree; else crvBbTree = new verb_core_LazyCurveBoundingBoxTree(curve);\r\n\tif(srfBbTree != null) srfBbTree = srfBbTree; else srfBbTree = new verb_core_LazySurfaceBoundingBoxTree(surface);\r\n\tvar ints = verb_eval_Intersect.boundingBoxTrees(crvBbTree,srfBbTree,tol);\r\n\treturn verb_core_ArrayExtensions.unique(ints.map(function(inter) {\r\n\t\tvar crvSeg = inter.item0;\r\n\t\tvar srfPart = inter.item1;\r\n\t\tvar min = verb_core_ArrayExtensions.first(crvSeg.knots);\r\n\t\tvar max = verb_core_ArrayExtensions.last(crvSeg.knots);\r\n\t\tvar u = (min + max) / 2.0;\r\n\t\tvar minu = verb_core_ArrayExtensions.first(srfPart.knotsU);\r\n\t\tvar maxu = verb_core_ArrayExtensions.last(srfPart.knotsU);\r\n\t\tvar minv = verb_core_ArrayExtensions.first(srfPart.knotsV);\r\n\t\tvar maxv = verb_core_ArrayExtensions.last(srfPart.knotsV);\r\n\t\tvar uv = [(minu + maxu) / 2.0,(minv + maxv) / 2.0];\r\n\t\treturn verb_eval_Intersect.curveAndSurfaceWithEstimate(crvSeg,srfPart,[u].concat(uv),tol);\r\n\t}).filter(function(x) {\r\n\t\treturn verb_core_Vec.distSquared(x.curvePoint,x.surfacePoint) < tol * tol;\r\n\t}),function(a,b) {\r\n\t\treturn Math.abs(a.u - b.u) < 0.5 * tol;\r\n\t});\r\n};\r\nverb_eval_Intersect.curveAndSurfaceWithEstimate = function(curve,surface,start_params,tol) {\r\n\tif(tol == null) tol = 1e-3;\r\n\tvar objective = function(x) {\r\n\t\tvar p1 = verb_eval_Eval.rationalCurvePoint(curve,x[0]);\r\n\t\tvar p2 = verb_eval_Eval.rationalSurfacePoint(surface,x[1],x[2]);\r\n\t\tvar p1_p2 = verb_core_Vec.sub(p1,p2);\r\n\t\treturn verb_core_Vec.dot(p1_p2,p1_p2);\r\n\t};\r\n\tvar grad = function(x1) {\r\n\t\tvar dc = verb_eval_Eval.rationalCurveDerivatives(curve,x1[0],1);\r\n\t\tvar ds = verb_eval_Eval.rationalSurfaceDerivatives(surface,x1[1],x1[2],1);\r\n\t\tvar r = verb_core_Vec.sub(ds[0][0],dc[0]);\r\n\t\tvar drdt = verb_core_Vec.mul(-1.0,dc[1]);\r\n\t\tvar drdu = ds[1][0];\r\n\t\tvar drdv = ds[0][1];\r\n\t\treturn [2.0 * verb_core_Vec.dot(drdt,r),2.0 * verb_core_Vec.dot(drdu,r),2.0 * verb_core_Vec.dot(drdv,r)];\r\n\t};\r\n\tvar sol_obj = verb_core_Minimizer.uncmin(objective,start_params,tol * tol,grad);\r\n\tvar $final = sol_obj.solution;\r\n\treturn new verb_core_CurveSurfaceIntersection($final[0],[$final[1],$final[2]],verb_eval_Eval.rationalCurvePoint(curve,$final[0]),verb_eval_Eval.rationalSurfacePoint(surface,$final[1],$final[2]));\r\n};\r\nverb_eval_Intersect.polylineAndMesh = function(polyline,mesh,tol) {\r\n\tvar res = verb_eval_Intersect.boundingBoxTrees(new verb_core_LazyPolylineBoundingBoxTree(polyline),new verb_core_LazyMeshBoundingBoxTree(mesh),tol);\r\n\tvar finalResults = [];\r\n\tvar _g = 0;\r\n\twhile(_g < res.length) {\r\n\t\tvar event = res[_g];\r\n\t\t++_g;\r\n\t\tvar polid = event.item0;\r\n\t\tvar faceid = event.item1;\r\n\t\tvar inter = verb_eval_Intersect.segmentWithTriangle(polyline.points[polid],polyline.points[polid + 1],mesh.points,mesh.faces[faceid]);\r\n\t\tif(inter == null) continue;\r\n\t\tvar pt = inter.point;\r\n\t\tvar u = verb_core_Vec.lerp(inter.p,[polyline.params[polid]],[polyline.params[polid + 1]])[0];\r\n\t\tvar uv = verb_core_Mesh.triangleUVFromPoint(mesh,faceid,pt);\r\n\t\tfinalResults.push(new verb_core_PolylineMeshIntersection(pt,u,uv,polid,faceid));\r\n\t}\r\n\treturn finalResults;\r\n};\r\nverb_eval_Intersect.boundingBoxTrees = function(ai,bi,tol) {\r\n\tif(tol == null) tol = 1e-9;\r\n\tvar atrees = [];\r\n\tvar btrees = [];\r\n\tatrees.push(ai);\r\n\tbtrees.push(bi);\r\n\tvar results = [];\r\n\twhile(atrees.length > 0) {\r\n\t\tvar a = atrees.pop();\r\n\t\tvar b = btrees.pop();\r\n\t\tif(a.empty() || b.empty()) continue;\r\n\t\tif(!a.boundingBox().intersects(b.boundingBox(),tol)) continue;\r\n\t\tvar ai1 = a.indivisible(tol);\r\n\t\tvar bi1 = b.indivisible(tol);\r\n\t\tif(ai1 && bi1) {\r\n\t\t\tresults.push(new verb_core_Pair(a[\"yield\"](),b[\"yield\"]()));\r\n\t\t\tcontinue;\r\n\t\t} else if(ai1 && !bi1) {\r\n\t\t\tvar bs1 = b.split();\r\n\t\t\tatrees.push(a);\r\n\t\t\tbtrees.push(bs1.item1);\r\n\t\t\tatrees.push(a);\r\n\t\t\tbtrees.push(bs1.item0);\r\n\t\t\tcontinue;\r\n\t\t} else if(!ai1 && bi1) {\r\n\t\t\tvar as1 = a.split();\r\n\t\t\tatrees.push(as1.item1);\r\n\t\t\tbtrees.push(b);\r\n\t\t\tatrees.push(as1.item0);\r\n\t\t\tbtrees.push(b);\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tvar $as = a.split();\r\n\t\tvar bs = b.split();\r\n\t\tatrees.push($as.item1);\r\n\t\tbtrees.push(bs.item1);\r\n\t\tatrees.push($as.item1);\r\n\t\tbtrees.push(bs.item0);\r\n\t\tatrees.push($as.item0);\r\n\t\tbtrees.push(bs.item1);\r\n\t\tatrees.push($as.item0);\r\n\t\tbtrees.push(bs.item0);\r\n\t}\r\n\treturn results;\r\n};\r\nverb_eval_Intersect.curves = function(curve1,curve2,tolerance) {\r\n\tvar ints = verb_eval_Intersect.boundingBoxTrees(new verb_core_LazyCurveBoundingBoxTree(curve1),new verb_core_LazyCurveBoundingBoxTree(curve2),0);\r\n\treturn verb_core_ArrayExtensions.unique(ints.map(function(x) {\r\n\t\treturn verb_eval_Intersect.curvesWithEstimate(curve1,curve2,verb_core_ArrayExtensions.first(x.item0.knots),verb_core_ArrayExtensions.first(x.item1.knots),tolerance);\r\n\t}).filter(function(x1) {\r\n\t\treturn verb_core_Vec.distSquared(x1.point0,x1.point1) < tolerance;\r\n\t}),function(a,b) {\r\n\t\treturn Math.abs(a.u0 - b.u0) < tolerance * 5;\r\n\t});\r\n};\r\nverb_eval_Intersect.curvesWithEstimate = function(curve0,curve1,u0,u1,tolerance) {\r\n\tvar objective = function(x) {\r\n\t\tvar p1 = verb_eval_Eval.rationalCurvePoint(curve0,x[0]);\r\n\t\tvar p2 = verb_eval_Eval.rationalCurvePoint(curve1,x[1]);\r\n\t\tvar p1_p2 = verb_core_Vec.sub(p1,p2);\r\n\t\treturn verb_core_Vec.dot(p1_p2,p1_p2);\r\n\t};\r\n\tvar grad = function(x1) {\r\n\t\tvar dc0 = verb_eval_Eval.rationalCurveDerivatives(curve0,x1[0],1);\r\n\t\tvar dc1 = verb_eval_Eval.rationalCurveDerivatives(curve1,x1[1],1);\r\n\t\tvar r = verb_core_Vec.sub(dc0[0],dc1[0]);\r\n\t\tvar drdu = dc0[1];\r\n\t\tvar drdt = verb_core_Vec.mul(-1.0,dc1[1]);\r\n\t\treturn [2.0 * verb_core_Vec.dot(drdu,r),2.0 * verb_core_Vec.dot(drdt,r)];\r\n\t};\r\n\tvar sol_obj = verb_core_Minimizer.uncmin(objective,[u0,u1],tolerance * tolerance,grad);\r\n\tvar u11 = sol_obj.solution[0];\r\n\tvar u2 = sol_obj.solution[1];\r\n\tvar p11 = verb_eval_Eval.rationalCurvePoint(curve0,u11);\r\n\tvar p21 = verb_eval_Eval.rationalCurvePoint(curve1,u2);\r\n\treturn new verb_core_CurveCurveIntersection(p11,p21,u11,u2);\r\n};\r\nverb_eval_Intersect.triangles = function(mesh0,faceIndex0,mesh1,faceIndex1) {\r\n\tvar tri0 = mesh0.faces[faceIndex0];\r\n\tvar tri1 = mesh1.faces[faceIndex1];\r\n\tvar n0 = verb_core_Mesh.getTriangleNorm(mesh0.points,tri0);\r\n\tvar n1 = verb_core_Mesh.getTriangleNorm(mesh1.points,tri1);\r\n\tvar o0 = mesh0.points[tri0[0]];\r\n\tvar o1 = mesh1.points[tri1[0]];\r\n\tvar ray = verb_eval_Intersect.planes(o0,n0,o1,n1);\r\n\tif(ray == null) return null;\r\n\tvar clip1 = verb_eval_Intersect.clipRayInCoplanarTriangle(ray,mesh0,faceIndex0);\r\n\tif(clip1 == null) return null;\r\n\tvar clip2 = verb_eval_Intersect.clipRayInCoplanarTriangle(ray,mesh1,faceIndex1);\r\n\tif(clip2 == null) return null;\r\n\tvar merged = verb_eval_Intersect.mergeTriangleClipIntervals(clip1,clip2,mesh0,faceIndex0,mesh1,faceIndex1);\r\n\tif(merged == null) return null;\r\n\treturn new verb_core_Interval(new verb_core_MeshIntersectionPoint(merged.min.uv0,merged.min.uv1,merged.min.point,faceIndex0,faceIndex1),new verb_core_MeshIntersectionPoint(merged.max.uv0,merged.max.uv1,merged.max.point,faceIndex0,faceIndex1));\r\n};\r\nverb_eval_Intersect.clipRayInCoplanarTriangle = function(ray,mesh,faceIndex) {\r\n\tvar tri = mesh.faces[faceIndex];\r\n\tvar o = [mesh.points[tri[0]],mesh.points[tri[1]],mesh.points[tri[2]]];\r\n\tvar uvs = [mesh.uvs[tri[0]],mesh.uvs[tri[1]],mesh.uvs[tri[2]]];\r\n\tvar uvd = [verb_core_Vec.sub(uvs[1],uvs[0]),verb_core_Vec.sub(uvs[2],uvs[1]),verb_core_Vec.sub(uvs[0],uvs[2])];\r\n\tvar s = [verb_core_Vec.sub(o[1],o[0]),verb_core_Vec.sub(o[2],o[1]),verb_core_Vec.sub(o[0],o[2])];\r\n\tvar d = s.map(verb_core_Vec.normalized);\r\n\tvar l = s.map(verb_core_Vec.norm);\r\n\tvar minU = null;\r\n\tvar maxU = null;\r\n\tvar _g = 0;\r\n\twhile(_g < 3) {\r\n\t\tvar i = _g++;\r\n\t\tvar o0 = o[i];\r\n\t\tvar d0 = d[i];\r\n\t\tvar res = verb_eval_Intersect.rays(o0,d0,ray.origin,ray.dir);\r\n\t\tif(res == null) continue;\r\n\t\tvar useg = res.u0;\r\n\t\tvar uray = res.u1;\r\n\t\tif(useg < -verb_core_Constants.EPSILON || useg > l[i] + verb_core_Constants.EPSILON) continue;\r\n\t\tif(minU == null || uray < minU.u) minU = new verb_core_CurveTriPoint(uray,verb_core_Vec.onRay(ray.origin,ray.dir,uray),verb_core_Vec.onRay(uvs[i],uvd[i],useg / l[i]));\r\n\t\tif(maxU == null || uray > maxU.u) maxU = new verb_core_CurveTriPoint(uray,verb_core_Vec.onRay(ray.origin,ray.dir,uray),verb_core_Vec.onRay(uvs[i],uvd[i],useg / l[i]));\r\n\t}\r\n\tif(maxU == null || minU == null) return null;\r\n\treturn new verb_core_Interval(minU,maxU);\r\n};\r\nverb_eval_Intersect.mergeTriangleClipIntervals = function(clip1,clip2,mesh1,faceIndex1,mesh2,faceIndex2) {\r\n\tif(clip2.min.u > clip1.max.u + verb_core_Constants.EPSILON || clip1.min.u > clip2.max.u + verb_core_Constants.EPSILON) return null;\r\n\tvar min;\r\n\tif(clip1.min.u > clip2.min.u) min = new verb_core_Pair(clip1.min,0); else min = new verb_core_Pair(clip2.min,1);\r\n\tvar max;\r\n\tif(clip1.max.u < clip2.max.u) max = new verb_core_Pair(clip1.max,0); else max = new verb_core_Pair(clip2.max,1);\r\n\tvar res = new verb_core_Interval(new verb_core_MeshIntersectionPoint(null,null,min.item0.point,faceIndex1,faceIndex2),new verb_core_MeshIntersectionPoint(null,null,max.item0.point,faceIndex1,faceIndex2));\r\n\tif(min.item1 == 0) {\r\n\t\tres.min.uv0 = min.item0.uv;\r\n\t\tres.min.uv1 = verb_core_Mesh.triangleUVFromPoint(mesh2,faceIndex2,min.item0.point);\r\n\t} else {\r\n\t\tres.min.uv0 = verb_core_Mesh.triangleUVFromPoint(mesh1,faceIndex1,min.item0.point);\r\n\t\tres.min.uv1 = min.item0.uv;\r\n\t}\r\n\tif(max.item1 == 0) {\r\n\t\tres.max.uv0 = max.item0.uv;\r\n\t\tres.max.uv1 = verb_core_Mesh.triangleUVFromPoint(mesh2,faceIndex2,max.item0.point);\r\n\t} else {\r\n\t\tres.max.uv0 = verb_core_Mesh.triangleUVFromPoint(mesh1,faceIndex1,max.item0.point);\r\n\t\tres.max.uv1 = max.item0.uv;\r\n\t}\r\n\treturn res;\r\n};\r\nverb_eval_Intersect.planes = function(origin0,normal0,origin1,normal1) {\r\n\tvar d = verb_core_Vec.cross(normal0,normal1);\r\n\tif(verb_core_Vec.dot(d,d) < verb_core_Constants.EPSILON) return null;\r\n\tvar li = 0;\r\n\tvar mi = Math.abs(d[0]);\r\n\tvar m1 = Math.abs(d[1]);\r\n\tvar m2 = Math.abs(d[2]);\r\n\tif(m1 > mi) {\r\n\t\tli = 1;\r\n\t\tmi = m1;\r\n\t}\r\n\tif(m2 > mi) {\r\n\t\tli = 2;\r\n\t\tmi = m2;\r\n\t}\r\n\tvar a1;\r\n\tvar b1;\r\n\tvar a2;\r\n\tvar b2;\r\n\tif(li == 0) {\r\n\t\ta1 = normal0[1];\r\n\t\tb1 = normal0[2];\r\n\t\ta2 = normal1[1];\r\n\t\tb2 = normal1[2];\r\n\t} else if(li == 1) {\r\n\t\ta1 = normal0[0];\r\n\t\tb1 = normal0[2];\r\n\t\ta2 = normal1[0];\r\n\t\tb2 = normal1[2];\r\n\t} else {\r\n\t\ta1 = normal0[0];\r\n\t\tb1 = normal0[1];\r\n\t\ta2 = normal1[0];\r\n\t\tb2 = normal1[1];\r\n\t}\r\n\tvar d1 = -verb_core_Vec.dot(origin0,normal0);\r\n\tvar d2 = -verb_core_Vec.dot(origin1,normal1);\r\n\tvar den = a1 * b2 - b1 * a2;\r\n\tvar x = (b1 * d2 - d1 * b2) / den;\r\n\tvar y = (d1 * a2 - a1 * d2) / den;\r\n\tvar p;\r\n\tif(li == 0) p = [0,x,y]; else if(li == 1) p = [x,0,y]; else p = [x,y,0];\r\n\treturn new verb_core_Ray(p,verb_core_Vec.normalized(d));\r\n};\r\nverb_eval_Intersect.threePlanes = function(n0,d0,n1,d1,n2,d2) {\r\n\tvar u = verb_core_Vec.cross(n1,n2);\r\n\tvar den = verb_core_Vec.dot(n0,u);\r\n\tif(Math.abs(den) < verb_core_Constants.EPSILON) return null;\r\n\tvar diff = verb_core_Vec.sub(verb_core_Vec.mul(d2,n1),verb_core_Vec.mul(d1,n2));\r\n\tvar num = verb_core_Vec.add(verb_core_Vec.mul(d0,u),verb_core_Vec.cross(n0,diff));\r\n\treturn verb_core_Vec.mul(1 / den,num);\r\n};\r\nverb_eval_Intersect.polylines = function(polyline0,polyline1,tol) {\r\n\tvar res = verb_eval_Intersect.boundingBoxTrees(new verb_core_LazyPolylineBoundingBoxTree(polyline0),new verb_core_LazyPolylineBoundingBoxTree(polyline1),tol);\r\n\tvar finalResults = [];\r\n\tvar _g = 0;\r\n\twhile(_g < res.length) {\r\n\t\tvar event = res[_g];\r\n\t\t++_g;\r\n\t\tvar polid0 = event.item0;\r\n\t\tvar polid1 = event.item1;\r\n\t\tvar inter = verb_eval_Intersect.segments(polyline0.points[polid0],polyline0.points[polid0 + 1],polyline1.points[polid1],polyline1.points[polid1 + 1],tol);\r\n\t\tif(inter == null) continue;\r\n\t\tinter.u0 = verb_core_Vec.lerp(inter.u0,[polyline0.params[polid0]],[polyline0.params[polid0 + 1]])[0];\r\n\t\tinter.u1 = verb_core_Vec.lerp(inter.u1,[polyline1.params[polid1]],[polyline1.params[polid1 + 1]])[0];\r\n\t\tfinalResults.push(inter);\r\n\t}\r\n\treturn finalResults;\r\n};\r\nverb_eval_Intersect.segments = function(a0,a1,b0,b1,tol) {\r\n\tvar a1ma0 = verb_core_Vec.sub(a1,a0);\r\n\tvar aN = Math.sqrt(verb_core_Vec.dot(a1ma0,a1ma0));\r\n\tvar a = verb_core_Vec.mul(1 / aN,a1ma0);\r\n\tvar b1mb0 = verb_core_Vec.sub(b1,b0);\r\n\tvar bN = Math.sqrt(verb_core_Vec.dot(b1mb0,b1mb0));\r\n\tvar b = verb_core_Vec.mul(1 / bN,b1mb0);\r\n\tvar int_params = verb_eval_Intersect.rays(a0,a,b0,b);\r\n\tif(int_params != null) {\r\n\t\tvar u0 = Math.min(Math.max(0,int_params.u0 / aN),1.0);\r\n\t\tvar u1 = Math.min(Math.max(0,int_params.u1 / bN),1.0);\r\n\t\tvar point0 = verb_core_Vec.onRay(a0,a1ma0,u0);\r\n\t\tvar point1 = verb_core_Vec.onRay(b0,b1mb0,u1);\r\n\t\tvar dist = verb_core_Vec.distSquared(point0,point1);\r\n\t\tif(dist < tol * tol) return new verb_core_CurveCurveIntersection(point0,point1,u0,u1);\r\n\t}\r\n\treturn null;\r\n};\r\nverb_eval_Intersect.rays = function(a0,a,b0,b) {\r\n\tvar dab = verb_core_Vec.dot(a,b);\r\n\tvar dab0 = verb_core_Vec.dot(a,b0);\r\n\tvar daa0 = verb_core_Vec.dot(a,a0);\r\n\tvar dbb0 = verb_core_Vec.dot(b,b0);\r\n\tvar dba0 = verb_core_Vec.dot(b,a0);\r\n\tvar daa = verb_core_Vec.dot(a,a);\r\n\tvar dbb = verb_core_Vec.dot(b,b);\r\n\tvar div = daa * dbb - dab * dab;\r\n\tif(Math.abs(div) < verb_core_Constants.EPSILON) return null;\r\n\tvar num = dab * (dab0 - daa0) - daa * (dbb0 - dba0);\r\n\tvar w = num / div;\r\n\tvar t = (dab0 - daa0 + w * dab) / daa;\r\n\tvar p0 = verb_core_Vec.onRay(a0,a,t);\r\n\tvar p1 = verb_core_Vec.onRay(b0,b,w);\r\n\treturn new verb_core_CurveCurveIntersection(p0,p1,t,w);\r\n};\r\nverb_eval_Intersect.segmentWithTriangle = function(p0,p1,points,tri) {\r\n\tvar v0 = points[tri[0]];\r\n\tvar v1 = points[tri[1]];\r\n\tvar v2 = points[tri[2]];\r\n\tvar u = verb_core_Vec.sub(v1,v0);\r\n\tvar v = verb_core_Vec.sub(v2,v0);\r\n\tvar n = verb_core_Vec.cross(u,v);\r\n\tvar dir = verb_core_Vec.sub(p1,p0);\r\n\tvar w0 = verb_core_Vec.sub(p0,v0);\r\n\tvar a = -verb_core_Vec.dot(n,w0);\r\n\tvar b = verb_core_Vec.dot(n,dir);\r\n\tif(Math.abs(b) < verb_core_Constants.EPSILON) return null;\r\n\tvar r = a / b;\r\n\tif(r < 0 || r > 1) return null;\r\n\tvar pt = verb_core_Vec.add(p0,verb_core_Vec.mul(r,dir));\r\n\tvar uv = verb_core_Vec.dot(u,v);\r\n\tvar uu = verb_core_Vec.dot(u,u);\r\n\tvar vv = verb_core_Vec.dot(v,v);\r\n\tvar w = verb_core_Vec.sub(pt,v0);\r\n\tvar wu = verb_core_Vec.dot(w,u);\r\n\tvar wv = verb_core_Vec.dot(w,v);\r\n\tvar denom = uv * uv - uu * vv;\r\n\tif(Math.abs(denom) < verb_core_Constants.EPSILON) return null;\r\n\tvar s = (uv * wv - vv * wu) / denom;\r\n\tvar t = (uv * wu - uu * wv) / denom;\r\n\tif(s > 1.0 + verb_core_Constants.EPSILON || t > 1.0 + verb_core_Constants.EPSILON || t < -verb_core_Constants.EPSILON || s < -verb_core_Constants.EPSILON || s + t > 1.0 + verb_core_Constants.EPSILON) return null;\r\n\treturn new verb_core_TriSegmentIntersection(pt,s,t,r);\r\n};\r\nverb_eval_Intersect.segmentAndPlane = function(p0,p1,v0,n) {\r\n\tvar denom = verb_core_Vec.dot(n,verb_core_Vec.sub(p1,p0));\r\n\tif(Math.abs(denom) < verb_core_Constants.EPSILON) return null;\r\n\tvar numer = verb_core_Vec.dot(n,verb_core_Vec.sub(v0,p0));\r\n\tvar p = numer / denom;\r\n\tif(p > 1.0 + verb_core_Constants.EPSILON || p < -verb_core_Constants.EPSILON) return null;\r\n\treturn { p : p};\r\n};\r\nvar verb_eval_Make = $hx_exports.eval.Make = function() { };\r\n$hxClasses[\"verb.eval.Make\"] = verb_eval_Make;\r\nverb_eval_Make.__name__ = [\"verb\",\"eval\",\"Make\"];\r\nverb_eval_Make.rationalTranslationalSurface = function(profile,rail) {\r\n\tvar pt0 = verb_eval_Eval.rationalCurvePoint(rail,verb_core_ArrayExtensions.first(rail.knots));\r\n\tvar startu = verb_core_ArrayExtensions.first(rail.knots);\r\n\tvar endu = verb_core_ArrayExtensions.last(rail.knots);\r\n\tvar numSamples = 2 * rail.controlPoints.length;\r\n\tvar span = (endu - startu) / (numSamples - 1);\r\n\tvar crvs = [];\r\n\tvar _g = 0;\r\n\twhile(_g < numSamples) {\r\n\t\tvar i = _g++;\r\n\t\tvar pt = verb_core_Vec.sub(verb_eval_Eval.rationalCurvePoint(rail,startu + i * span),pt0);\r\n\t\tvar crv = verb_eval_Modify.rationalCurveTransform(profile,[[1,0,0,pt[0]],[0,1,0,pt[1]],[0,0,1,pt[2]],[0,0,0,1]]);\r\n\t\tcrvs.push(crv);\r\n\t}\r\n\treturn verb_eval_Make.loftedSurface(crvs);\r\n};\r\nverb_eval_Make.surfaceBoundaryCurves = function(surface) {\r\n\tvar crvs = [];\r\n\tvar c0 = verb_eval_Make.surfaceIsocurve(surface,verb_core_ArrayExtensions.first(surface.knotsU),false);\r\n\tvar c1 = verb_eval_Make.surfaceIsocurve(surface,verb_core_ArrayExtensions.last(surface.knotsU),false);\r\n\tvar c2 = verb_eval_Make.surfaceIsocurve(surface,verb_core_ArrayExtensions.first(surface.knotsV),true);\r\n\tvar c3 = verb_eval_Make.surfaceIsocurve(surface,verb_core_ArrayExtensions.last(surface.knotsV),true);\r\n\treturn [c0,c1,c2,c3];\r\n};\r\nverb_eval_Make.surfaceIsocurve = function(surface,u,useV) {\r\n\tif(useV == null) useV = false;\r\n\tvar knots;\r\n\tif(useV) knots = surface.knotsV; else knots = surface.knotsU;\r\n\tvar degree;\r\n\tif(useV) degree = surface.degreeV; else degree = surface.degreeU;\r\n\tvar knotMults = verb_eval_Analyze.knotMultiplicities(knots);\r\n\tvar reqKnotIndex = -1;\r\n\tvar _g1 = 0;\r\n\tvar _g = knotMults.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tif(Math.abs(u - knotMults[i].knot) < verb_core_Constants.EPSILON) {\r\n\t\t\treqKnotIndex = i;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tvar numKnotsToInsert = degree + 1;\r\n\tif(reqKnotIndex >= 0) numKnotsToInsert = numKnotsToInsert - knotMults[reqKnotIndex].mult;\r\n\tvar newSrf;\r\n\tif(numKnotsToInsert > 0) newSrf = verb_eval_Modify.surfaceKnotRefine(surface,verb_core_Vec.rep(numKnotsToInsert,u),useV); else newSrf = surface;\r\n\tvar span = verb_eval_Eval.knotSpan(degree,u,knots);\r\n\tif(Math.abs(u - verb_core_ArrayExtensions.first(knots)) < verb_core_Constants.EPSILON) span = 0; else if(Math.abs(u - verb_core_ArrayExtensions.last(knots)) < verb_core_Constants.EPSILON) span = (useV?newSrf.controlPoints[0].length:newSrf.controlPoints.length) - 1;\r\n\tif(useV) return new verb_core_NurbsCurveData(newSrf.degreeU,newSrf.knotsU,(function($this) {\r\n\t\tvar $r;\r\n\t\tvar _g2 = [];\r\n\t\t{\r\n\t\t\tvar _g11 = 0;\r\n\t\t\tvar _g21 = newSrf.controlPoints;\r\n\t\t\twhile(_g11 < _g21.length) {\r\n\t\t\t\tvar row = _g21[_g11];\r\n\t\t\t\t++_g11;\r\n\t\t\t\t_g2.push(row[span]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t$r = _g2;\r\n\t\treturn $r;\r\n\t}(this)));\r\n\treturn new verb_core_NurbsCurveData(newSrf.degreeV,newSrf.knotsV,newSrf.controlPoints[span]);\r\n};\r\nverb_eval_Make.loftedSurface = function(curves,degreeV) {\r\n\tcurves = verb_eval_Modify.unifyCurveKnotVectors(curves);\r\n\tvar degreeU = curves[0].degree;\r\n\tif(degreeV == null) degreeV = 3;\r\n\tif(degreeV > curves.length - 1) degreeV = curves.length - 1;\r\n\tvar knotsU = curves[0].knots;\r\n\tvar knotsV = [];\r\n\tvar controlPoints = [];\r\n\tvar _g1 = 0;\r\n\tvar _g = curves[0].controlPoints.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = [_g1++];\r\n\t\tvar points = curves.map((function(i) {\r\n\t\t\treturn function(x) {\r\n\t\t\t\treturn x.controlPoints[i[0]];\r\n\t\t\t};\r\n\t\t})(i));\r\n\t\tvar c = verb_eval_Make.rationalInterpCurve(points,degreeV,true);\r\n\t\tcontrolPoints.push(c.controlPoints);\r\n\t\tknotsV = c.knots;\r\n\t}\r\n\treturn new verb_core_NurbsSurfaceData(degreeU,degreeV,knotsU,knotsV,controlPoints);\r\n};\r\nverb_eval_Make.clonedCurve = function(curve) {\r\n\treturn new verb_core_NurbsCurveData(curve.degree,curve.knots.slice(),curve.controlPoints.map(function(x) {\r\n\t\treturn x.slice();\r\n\t}));\r\n};\r\nverb_eval_Make.rationalBezierCurve = function(controlPoints,weights) {\r\n\tvar degree = controlPoints.length - 1;\r\n\tvar knots = [];\r\n\tvar _g1 = 0;\r\n\tvar _g = degree + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tknots.push(0.0);\r\n\t}\r\n\tvar _g11 = 0;\r\n\tvar _g2 = degree + 1;\r\n\twhile(_g11 < _g2) {\r\n\t\tvar i1 = _g11++;\r\n\t\tknots.push(1.0);\r\n\t}\r\n\tif(weights == null) weights = verb_core_Vec.rep(controlPoints.length,1.0);\r\n\treturn new verb_core_NurbsCurveData(degree,knots,verb_eval_Eval.homogenize1d(controlPoints,weights));\r\n};\r\nverb_eval_Make.fourPointSurface = function(p1,p2,p3,p4,degree) {\r\n\tif(degree == null) degree = 3;\r\n\tvar degreeFloat = degree;\r\n\tvar pts = [];\r\n\tvar _g1 = 0;\r\n\tvar _g = degree + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tvar row = [];\r\n\t\tvar _g3 = 0;\r\n\t\tvar _g2 = degree + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar j = _g3++;\r\n\t\t\tvar l = 1.0 - i / degreeFloat;\r\n\t\t\tvar p1p2 = verb_core_Vec.lerp(l,p1,p2);\r\n\t\t\tvar p4p3 = verb_core_Vec.lerp(l,p4,p3);\r\n\t\t\tvar res = verb_core_Vec.lerp(1.0 - j / degreeFloat,p1p2,p4p3);\r\n\t\t\tres.push(1.0);\r\n\t\t\trow.push(res);\r\n\t\t}\r\n\t\tpts.push(row);\r\n\t}\r\n\tvar zeros = verb_core_Vec.rep(degree + 1,0.0);\r\n\tvar ones = verb_core_Vec.rep(degree + 1,1.0);\r\n\treturn new verb_core_NurbsSurfaceData(degree,degree,zeros.concat(ones),zeros.concat(ones),pts);\r\n};\r\nverb_eval_Make.ellipseArc = function(center,xaxis,yaxis,startAngle,endAngle) {\r\n\tvar xradius = verb_core_Vec.norm(xaxis);\r\n\tvar yradius = verb_core_Vec.norm(yaxis);\r\n\txaxis = verb_core_Vec.normalized(xaxis);\r\n\tyaxis = verb_core_Vec.normalized(yaxis);\r\n\tif(endAngle < startAngle) endAngle = 2.0 * Math.PI + startAngle;\r\n\tvar theta = endAngle - startAngle;\r\n\tvar numArcs = 0;\r\n\tif(theta <= Math.PI / 2) numArcs = 1; else if(theta <= Math.PI) numArcs = 2; else if(theta <= 3 * Math.PI / 2) numArcs = 3; else numArcs = 4;\r\n\tvar dtheta = theta / numArcs;\r\n\tvar n = 2 * numArcs;\r\n\tvar w1 = Math.cos(dtheta / 2);\r\n\tvar P0 = verb_core_Vec.add(center,verb_core_Vec.add(verb_core_Vec.mul(xradius * Math.cos(startAngle),xaxis),verb_core_Vec.mul(yradius * Math.sin(startAngle),yaxis)));\r\n\tvar T0 = verb_core_Vec.sub(verb_core_Vec.mul(Math.cos(startAngle),yaxis),verb_core_Vec.mul(Math.sin(startAngle),xaxis));\r\n\tvar controlPoints = [];\r\n\tvar knots = verb_core_Vec.zeros1d(2 * numArcs + 3);\r\n\tvar index = 0;\r\n\tvar angle = startAngle;\r\n\tvar weights = verb_core_Vec.zeros1d(numArcs * 2);\r\n\tcontrolPoints[0] = P0;\r\n\tweights[0] = 1.0;\r\n\tvar _g1 = 1;\r\n\tvar _g = numArcs + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tangle += dtheta;\r\n\t\tvar P2 = verb_core_Vec.add(center,verb_core_Vec.add(verb_core_Vec.mul(xradius * Math.cos(angle),xaxis),verb_core_Vec.mul(yradius * Math.sin(angle),yaxis)));\r\n\t\tweights[index + 2] = 1;\r\n\t\tcontrolPoints[index + 2] = P2;\r\n\t\tvar T2 = verb_core_Vec.sub(verb_core_Vec.mul(Math.cos(angle),yaxis),verb_core_Vec.mul(Math.sin(angle),xaxis));\r\n\t\tvar inters = verb_eval_Intersect.rays(P0,verb_core_Vec.mul(1 / verb_core_Vec.norm(T0),T0),P2,verb_core_Vec.mul(1 / verb_core_Vec.norm(T2),T2));\r\n\t\tvar P1 = verb_core_Vec.add(P0,verb_core_Vec.mul(inters.u0,T0));\r\n\t\tweights[index + 1] = w1;\r\n\t\tcontrolPoints[index + 1] = P1;\r\n\t\tindex += 2;\r\n\t\tif(i < numArcs) {\r\n\t\t\tP0 = P2;\r\n\t\t\tT0 = T2;\r\n\t\t}\r\n\t}\r\n\tvar j = 2 * numArcs + 1;\r\n\tvar _g2 = 0;\r\n\twhile(_g2 < 3) {\r\n\t\tvar i1 = _g2++;\r\n\t\tknots[i1] = 0.0;\r\n\t\tknots[i1 + j] = 1.0;\r\n\t}\r\n\tswitch(numArcs) {\r\n\tcase 2:\r\n\t\tknots[3] = knots[4] = 0.5;\r\n\t\tbreak;\r\n\tcase 3:\r\n\t\tknots[3] = knots[4] = 0.333333333333333315;\r\n\t\tknots[5] = knots[6] = 0.66666666666666663;\r\n\t\tbreak;\r\n\tcase 4:\r\n\t\tknots[3] = knots[4] = 0.25;\r\n\t\tknots[5] = knots[6] = 0.5;\r\n\t\tknots[7] = knots[8] = 0.75;\r\n\t\tbreak;\r\n\t}\r\n\treturn new verb_core_NurbsCurveData(2,knots,verb_eval_Eval.homogenize1d(controlPoints,weights));\r\n};\r\nverb_eval_Make.arc = function(center,xaxis,yaxis,radius,startAngle,endAngle) {\r\n\treturn verb_eval_Make.ellipseArc(center,verb_core_Vec.mul(radius,verb_core_Vec.normalized(xaxis)),verb_core_Vec.mul(radius,verb_core_Vec.normalized(yaxis)),startAngle,endAngle);\r\n};\r\nverb_eval_Make.polyline = function(pts) {\r\n\tvar knots = [0.0,0.0];\r\n\tvar lsum = 0.0;\r\n\tvar _g1 = 0;\r\n\tvar _g = pts.length - 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tlsum += verb_core_Vec.dist(pts[i],pts[i + 1]);\r\n\t\tknots.push(lsum);\r\n\t}\r\n\tknots.push(lsum);\r\n\tknots = verb_core_Vec.mul(1 / lsum,knots);\r\n\tvar weights;\r\n\tvar _g2 = [];\r\n\tvar _g21 = 0;\r\n\tvar _g11 = pts.length;\r\n\twhile(_g21 < _g11) {\r\n\t\tvar i1 = _g21++;\r\n\t\t_g2.push(1.0);\r\n\t}\r\n\tweights = _g2;\r\n\treturn new verb_core_NurbsCurveData(1,knots,verb_eval_Eval.homogenize1d(pts.slice(0),weights));\r\n};\r\nverb_eval_Make.extrudedSurface = function(axis,length,profile) {\r\n\tvar controlPoints = [[],[],[]];\r\n\tvar weights = [[],[],[]];\r\n\tvar prof_controlPoints = verb_eval_Eval.dehomogenize1d(profile.controlPoints);\r\n\tvar prof_weights = verb_eval_Eval.weight1d(profile.controlPoints);\r\n\tvar translation = verb_core_Vec.mul(length,axis);\r\n\tvar halfTranslation = verb_core_Vec.mul(0.5 * length,axis);\r\n\tvar _g1 = 0;\r\n\tvar _g = prof_controlPoints.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar j = _g1++;\r\n\t\tcontrolPoints[2][j] = prof_controlPoints[j];\r\n\t\tcontrolPoints[1][j] = verb_core_Vec.add(halfTranslation,prof_controlPoints[j]);\r\n\t\tcontrolPoints[0][j] = verb_core_Vec.add(translation,prof_controlPoints[j]);\r\n\t\tweights[0][j] = prof_weights[j];\r\n\t\tweights[1][j] = prof_weights[j];\r\n\t\tweights[2][j] = prof_weights[j];\r\n\t}\r\n\treturn new verb_core_NurbsSurfaceData(2,profile.degree,[0,0,0,1,1,1],profile.knots,verb_eval_Eval.homogenize2d(controlPoints,weights));\r\n};\r\nverb_eval_Make.cylindricalSurface = function(axis,xaxis,base,height,radius) {\r\n\tvar yaxis = verb_core_Vec.cross(axis,xaxis);\r\n\tvar angle = 2.0 * Math.PI;\r\n\tvar circ = verb_eval_Make.arc(base,xaxis,yaxis,radius,0.0,2 * Math.PI);\r\n\treturn verb_eval_Make.extrudedSurface(axis,height,circ);\r\n};\r\nverb_eval_Make.revolvedSurface = function(profile,center,axis,theta) {\r\n\tvar prof_controlPoints = verb_eval_Eval.dehomogenize1d(profile.controlPoints);\r\n\tvar prof_weights = verb_eval_Eval.weight1d(profile.controlPoints);\r\n\tvar narcs;\r\n\tvar knotsU;\r\n\tvar controlPoints;\r\n\tvar weights;\r\n\tif(theta <= Math.PI / 2) {\r\n\t\tnarcs = 1;\r\n\t\tknotsU = verb_core_Vec.zeros1d(6 + 2 * (narcs - 1));\r\n\t} else if(theta <= Math.PI) {\r\n\t\tnarcs = 2;\r\n\t\tknotsU = verb_core_Vec.zeros1d(6 + 2 * (narcs - 1));\r\n\t\tknotsU[3] = knotsU[4] = 0.5;\r\n\t} else if(theta <= 3 * Math.PI / 2) {\r\n\t\tnarcs = 3;\r\n\t\tknotsU = verb_core_Vec.zeros1d(6 + 2 * (narcs - 1));\r\n\t\tknotsU[3] = knotsU[4] = 0.333333333333333315;\r\n\t\tknotsU[5] = knotsU[6] = 0.66666666666666663;\r\n\t} else {\r\n\t\tnarcs = 4;\r\n\t\tknotsU = verb_core_Vec.zeros1d(6 + 2 * (narcs - 1));\r\n\t\tknotsU[3] = knotsU[4] = 0.25;\r\n\t\tknotsU[5] = knotsU[6] = 0.5;\r\n\t\tknotsU[7] = knotsU[8] = 0.75;\r\n\t}\r\n\tvar dtheta = theta / narcs;\r\n\tvar j = 3 + 2 * (narcs - 1);\r\n\tvar _g = 0;\r\n\twhile(_g < 3) {\r\n\t\tvar i = _g++;\r\n\t\tknotsU[i] = 0.0;\r\n\t\tknotsU[j + i] = 1.0;\r\n\t}\r\n\tvar n = 2 * narcs;\r\n\tvar wm = Math.cos(dtheta / 2.0);\r\n\tvar angle = 0.0;\r\n\tvar sines = verb_core_Vec.zeros1d(narcs + 1);\r\n\tvar cosines = verb_core_Vec.zeros1d(narcs + 1);\r\n\tvar controlPoints1 = verb_core_Vec.zeros3d(2 * narcs + 1,prof_controlPoints.length,3);\r\n\tvar weights1 = verb_core_Vec.zeros2d(2 * narcs + 1,prof_controlPoints.length);\r\n\tvar _g1 = 1;\r\n\tvar _g2 = narcs + 1;\r\n\twhile(_g1 < _g2) {\r\n\t\tvar i1 = _g1++;\r\n\t\tangle += dtheta;\r\n\t\tcosines[i1] = Math.cos(angle);\r\n\t\tsines[i1] = Math.sin(angle);\r\n\t}\r\n\tvar _g11 = 0;\r\n\tvar _g3 = prof_controlPoints.length;\r\n\twhile(_g11 < _g3) {\r\n\t\tvar j1 = _g11++;\r\n\t\tvar O = verb_core_Trig.rayClosestPoint(prof_controlPoints[j1],center,axis);\r\n\t\tvar X = verb_core_Vec.sub(prof_controlPoints[j1],O);\r\n\t\tvar r = verb_core_Vec.norm(X);\r\n\t\tvar Y = verb_core_Vec.cross(axis,X);\r\n\t\tif(r > verb_core_Constants.EPSILON) {\r\n\t\t\tX = verb_core_Vec.mul(1 / r,X);\r\n\t\t\tY = verb_core_Vec.mul(1 / r,Y);\r\n\t\t}\r\n\t\tcontrolPoints1[0][j1] = prof_controlPoints[j1];\r\n\t\tvar P0 = prof_controlPoints[j1];\r\n\t\tweights1[0][j1] = prof_weights[j1];\r\n\t\tvar T0 = Y;\r\n\t\tvar index = 0;\r\n\t\tvar angle1 = 0.0;\r\n\t\tvar _g31 = 1;\r\n\t\tvar _g21 = narcs + 1;\r\n\t\twhile(_g31 < _g21) {\r\n\t\t\tvar i2 = _g31++;\r\n\t\t\tvar P2;\r\n\t\t\tif(r == 0) P2 = O; else P2 = verb_core_Vec.add(O,verb_core_Vec.add(verb_core_Vec.mul(r * cosines[i2],X),verb_core_Vec.mul(r * sines[i2],Y)));\r\n\t\t\tcontrolPoints1[index + 2][j1] = P2;\r\n\t\t\tweights1[index + 2][j1] = prof_weights[j1];\r\n\t\t\tvar T2 = verb_core_Vec.sub(verb_core_Vec.mul(cosines[i2],Y),verb_core_Vec.mul(sines[i2],X));\r\n\t\t\tif(r == 0) controlPoints1[index + 1][j1] = O; else {\r\n\t\t\t\tvar inters = verb_eval_Intersect.rays(P0,verb_core_Vec.mul(1 / verb_core_Vec.norm(T0),T0),P2,verb_core_Vec.mul(1 / verb_core_Vec.norm(T2),T2));\r\n\t\t\t\tvar P1 = verb_core_Vec.add(P0,verb_core_Vec.mul(inters.u0,T0));\r\n\t\t\t\tcontrolPoints1[index + 1][j1] = P1;\r\n\t\t\t}\r\n\t\t\tweights1[index + 1][j1] = wm * prof_weights[j1];\r\n\t\t\tindex += 2;\r\n\t\t\tif(i2 < narcs) {\r\n\t\t\t\tP0 = P2;\r\n\t\t\t\tT0 = T2;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn new verb_core_NurbsSurfaceData(2,profile.degree,knotsU,profile.knots,verb_eval_Eval.homogenize2d(controlPoints1,weights1));\r\n};\r\nverb_eval_Make.sphericalSurface = function(center,axis,xaxis,radius) {\r\n\tvar arc = verb_eval_Make.arc(center,verb_core_Vec.mul(-1.0,axis),xaxis,radius,0.0,Math.PI);\r\n\treturn verb_eval_Make.revolvedSurface(arc,center,axis,2 * Math.PI);\r\n};\r\nverb_eval_Make.conicalSurface = function(axis,xaxis,base,height,radius) {\r\n\tvar angle = 2 * Math.PI;\r\n\tvar prof_degree = 1;\r\n\tvar prof_ctrl_pts = [verb_core_Vec.add(base,verb_core_Vec.mul(height,axis)),verb_core_Vec.add(base,verb_core_Vec.mul(radius,xaxis))];\r\n\tvar prof_knots = [0.0,0.0,1.0,1.0];\r\n\tvar prof_weights = [1.0,1.0];\r\n\tvar prof = new verb_core_NurbsCurveData(prof_degree,prof_knots,verb_eval_Eval.homogenize1d(prof_ctrl_pts,prof_weights));\r\n\treturn verb_eval_Make.revolvedSurface(prof,base,axis,angle);\r\n};\r\nverb_eval_Make.rationalInterpCurve = function(points,degree,homogeneousPoints,start_tangent,end_tangent) {\r\n\tif(homogeneousPoints == null) homogeneousPoints = false;\r\n\tif(degree == null) degree = 3;\r\n\tif(points.length < degree + 1) throw new js__$Boot_HaxeError(\"You need to supply at least degree + 1 points! You only supplied \" + points.length + \" points.\");\r\n\tvar us = [0.0];\r\n\tvar _g1 = 1;\r\n\tvar _g = points.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tvar chord = verb_core_Vec.norm(verb_core_Vec.sub(points[i],points[i - 1]));\r\n\t\tvar last = us[us.length - 1];\r\n\t\tus.push(last + chord);\r\n\t}\r\n\tvar max = us[us.length - 1];\r\n\tvar _g11 = 0;\r\n\tvar _g2 = us.length;\r\n\twhile(_g11 < _g2) {\r\n\t\tvar i1 = _g11++;\r\n\t\tus[i1] = us[i1] / max;\r\n\t}\r\n\tvar knotsStart = verb_core_Vec.rep(degree + 1,0.0);\r\n\tvar hasTangents = start_tangent != null && end_tangent != null;\r\n\tvar start;\r\n\tif(hasTangents) start = 0; else start = 1;\r\n\tvar end;\r\n\tif(hasTangents) end = us.length - degree + 1; else end = us.length - degree;\r\n\tvar _g3 = start;\r\n\twhile(_g3 < end) {\r\n\t\tvar i2 = _g3++;\r\n\t\tvar weightSums = 0.0;\r\n\t\tvar _g12 = 0;\r\n\t\twhile(_g12 < degree) {\r\n\t\t\tvar j = _g12++;\r\n\t\t\tweightSums += us[i2 + j];\r\n\t\t}\r\n\t\tknotsStart.push(1 / degree * weightSums);\r\n\t}\r\n\tvar knots = knotsStart.concat(verb_core_Vec.rep(degree + 1,1.0));\r\n\tvar A = [];\r\n\tvar n;\r\n\tif(hasTangents) n = points.length + 1; else n = points.length - 1;\r\n\tvar lst;\r\n\tif(hasTangents) lst = 1; else lst = 0;\r\n\tvar ld;\r\n\tif(hasTangents) ld = points.length - (degree - 1); else ld = points.length - (degree + 1);\r\n\tvar _g4 = 0;\r\n\twhile(_g4 < us.length) {\r\n\t\tvar u = us[_g4];\r\n\t\t++_g4;\r\n\t\tvar span = verb_eval_Eval.knotSpanGivenN(n,degree,u,knots);\r\n\t\tvar basisFuncs = verb_eval_Eval.basisFunctionsGivenKnotSpanIndex(span,u,degree,knots);\r\n\t\tvar ls = span - degree;\r\n\t\tvar rowstart = verb_core_Vec.zeros1d(ls);\r\n\t\tvar rowend = verb_core_Vec.zeros1d(ld - ls);\r\n\t\tA.push(rowstart.concat(basisFuncs).concat(rowend));\r\n\t}\r\n\tif(hasTangents) {\r\n\t\tvar ln = A[0].length - 2;\r\n\t\tvar tanRow0 = [-1.0,1.0].concat(verb_core_Vec.zeros1d(ln));\r\n\t\tvar tanRow1 = verb_core_Vec.zeros1d(ln).concat([-1.0,1.0]);\r\n\t\tverb_core_ArrayExtensions.spliceAndInsert(A,1,0,tanRow0);\r\n\t\tverb_core_ArrayExtensions.spliceAndInsert(A,A.length - 1,0,tanRow1);\r\n\t}\r\n\tvar dim = points[0].length;\r\n\tvar xs = [];\r\n\tvar mult1 = (1 - knots[knots.length - degree - 2]) / degree;\r\n\tvar mult0 = knots[degree + 1] / degree;\r\n\tvar _g5 = 0;\r\n\twhile(_g5 < dim) {\r\n\t\tvar i3 = [_g5++];\r\n\t\tvar b;\r\n\t\tif(!hasTangents) b = points.map((function(i3) {\r\n\t\t\treturn function(x1) {\r\n\t\t\t\treturn x1[i3[0]];\r\n\t\t\t};\r\n\t\t})(i3)); else {\r\n\t\t\tb = [points[0][i3[0]]];\r\n\t\t\tb.push(mult0 * start_tangent[i3[0]]);\r\n\t\t\tvar _g21 = 1;\r\n\t\t\tvar _g13 = points.length - 1;\r\n\t\t\twhile(_g21 < _g13) {\r\n\t\t\t\tvar j1 = _g21++;\r\n\t\t\t\tb.push(points[j1][i3[0]]);\r\n\t\t\t}\r\n\t\t\tb.push(mult1 * end_tangent[i3[0]]);\r\n\t\t\tb.push(verb_core_ArrayExtensions.last(points)[i3[0]]);\r\n\t\t}\r\n\t\tvar x = verb_core_Mat.solve(A,b);\r\n\t\txs.push(x);\r\n\t}\r\n\tvar controlPts = verb_core_Mat.transpose(xs);\r\n\tif(!homogeneousPoints) {\r\n\t\tvar weights = verb_core_Vec.rep(controlPts.length,1.0);\r\n\t\tcontrolPts = verb_eval_Eval.homogenize1d(controlPts,weights);\r\n\t}\r\n\treturn new verb_core_NurbsCurveData(degree,knots,controlPts);\r\n};\r\nvar verb_eval_Modify = $hx_exports.eval.Modify = function() { };\r\n$hxClasses[\"verb.eval.Modify\"] = verb_eval_Modify;\r\nverb_eval_Modify.__name__ = [\"verb\",\"eval\",\"Modify\"];\r\nverb_eval_Modify.curveReverse = function(curve) {\r\n\treturn new verb_core_NurbsCurveData(curve.degree,verb_eval_Modify.knotsReverse(curve.knots),verb_core_ArrayExtensions.reversed(curve.controlPoints));\r\n};\r\nverb_eval_Modify.surfaceReverse = function(surface,useV) {\r\n\tif(useV == null) useV = false;\r\n\tif(useV) return new verb_core_NurbsSurfaceData(surface.degreeU,surface.degreeV,surface.knotsU,verb_eval_Modify.knotsReverse(surface.knotsV),(function($this) {\r\n\t\tvar $r;\r\n\t\tvar _g = [];\r\n\t\t{\r\n\t\t\tvar _g1 = 0;\r\n\t\t\tvar _g2 = surface.controlPoints;\r\n\t\t\twhile(_g1 < _g2.length) {\r\n\t\t\t\tvar row = _g2[_g1];\r\n\t\t\t\t++_g1;\r\n\t\t\t\t_g.push(verb_core_ArrayExtensions.reversed(row));\r\n\t\t\t}\r\n\t\t}\r\n\t\t$r = _g;\r\n\t\treturn $r;\r\n\t}(this)));\r\n\treturn new verb_core_NurbsSurfaceData(surface.degreeU,surface.degreeV,verb_eval_Modify.knotsReverse(surface.knotsU),surface.knotsV,verb_core_ArrayExtensions.reversed(surface.controlPoints));\r\n};\r\nverb_eval_Modify.knotsReverse = function(knots) {\r\n\tvar min = verb_core_ArrayExtensions.first(knots);\r\n\tvar max = verb_core_ArrayExtensions.last(knots);\r\n\tvar l = [min];\r\n\tvar len = knots.length;\r\n\tvar _g = 1;\r\n\twhile(_g < len) {\r\n\t\tvar i = _g++;\r\n\t\tl.push(l[i - 1] + (knots[len - i] - knots[len - i - 1]));\r\n\t}\r\n\treturn l;\r\n};\r\nverb_eval_Modify.unifyCurveKnotVectors = function(curves) {\r\n\tcurves = curves.map(verb_eval_Make.clonedCurve);\r\n\tvar maxDegree = Lambda.fold(curves,function(x,a) {\r\n\t\treturn verb_eval_Modify.imax(x.degree,a);\r\n\t},0);\r\n\tvar _g1 = 0;\r\n\tvar _g = curves.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tif(curves[i].degree < maxDegree) curves[i] = verb_eval_Modify.curveElevateDegree(curves[i],maxDegree);\r\n\t}\r\n\tvar knotIntervals;\r\n\tvar _g2 = [];\r\n\tvar _g11 = 0;\r\n\twhile(_g11 < curves.length) {\r\n\t\tvar c = curves[_g11];\r\n\t\t++_g11;\r\n\t\t_g2.push(new verb_core_Interval(verb_core_ArrayExtensions.first(c.knots),verb_core_ArrayExtensions.last(c.knots)));\r\n\t}\r\n\tknotIntervals = _g2;\r\n\tvar _g21 = 0;\r\n\tvar _g12 = curves.length;\r\n\twhile(_g21 < _g12) {\r\n\t\tvar i1 = _g21++;\r\n\t\tvar min = [knotIntervals[i1].min];\r\n\t\tcurves[i1].knots = curves[i1].knots.map((function(min) {\r\n\t\t\treturn function(x4) {\r\n\t\t\t\treturn x4 - min[0];\r\n\t\t\t};\r\n\t\t})(min));\r\n\t}\r\n\tvar knotSpans = knotIntervals.map(function(x1) {\r\n\t\treturn x1.max - x1.min;\r\n\t});\r\n\tvar maxKnotSpan = Lambda.fold(knotSpans,function(x2,a1) {\r\n\t\treturn Math.max(x2,a1);\r\n\t},0.0);\r\n\tvar _g22 = 0;\r\n\tvar _g13 = curves.length;\r\n\twhile(_g22 < _g13) {\r\n\t\tvar i2 = _g22++;\r\n\t\tvar scale = [maxKnotSpan / knotSpans[i2]];\r\n\t\tcurves[i2].knots = curves[i2].knots.map((function(scale) {\r\n\t\t\treturn function(x5) {\r\n\t\t\t\treturn x5 * scale[0];\r\n\t\t\t};\r\n\t\t})(scale));\r\n\t}\r\n\tvar mergedKnots = Lambda.fold(curves,function(x3,a2) {\r\n\t\treturn verb_core_Vec.sortedSetUnion(x3.knots,a2);\r\n\t},[]);\r\n\tvar _g23 = 0;\r\n\tvar _g14 = curves.length;\r\n\twhile(_g23 < _g14) {\r\n\t\tvar i3 = _g23++;\r\n\t\tvar rem = verb_core_Vec.sortedSetSub(mergedKnots,curves[i3].knots);\r\n\t\tif(rem.length == 0) curves[i3] = curves[i3];\r\n\t\tcurves[i3] = verb_eval_Modify.curveKnotRefine(curves[i3],rem);\r\n\t}\r\n\treturn curves;\r\n};\r\nverb_eval_Modify.imin = function(a,b) {\r\n\tif(a < b) return a; else return b;\r\n};\r\nverb_eval_Modify.imax = function(a,b) {\r\n\tif(a > b) return a; else return b;\r\n};\r\nverb_eval_Modify.curveElevateDegree = function(curve,finalDegree) {\r\n\tif(finalDegree <= curve.degree) return curve;\r\n\tvar n = curve.knots.length - curve.degree - 2;\r\n\tvar newDegree = curve.degree;\r\n\tvar knots = curve.knots;\r\n\tvar controlPoints = curve.controlPoints;\r\n\tvar degreeInc = finalDegree - curve.degree;\r\n\tvar dim = curve.controlPoints[0].length;\r\n\tvar bezalfs = verb_core_Vec.zeros2d(newDegree + degreeInc + 1,newDegree + 1);\r\n\tvar bpts = [];\r\n\tvar ebpts = [];\r\n\tvar Nextbpts = [];\r\n\tvar alphas = [];\r\n\tvar m = n + newDegree + 1;\r\n\tvar ph = finalDegree;\r\n\tvar ph2 = Math.floor(ph / 2);\r\n\tvar Qw = [];\r\n\tvar Uh = [];\r\n\tvar nh;\r\n\tbezalfs[0][0] = 1.0;\r\n\tbezalfs[ph][newDegree] = 1.0;\r\n\tvar _g1 = 1;\r\n\tvar _g = ph2 + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tvar inv = 1.0 / verb_core_Binomial.get(ph,i);\r\n\t\tvar mpi = verb_eval_Modify.imin(newDegree,i);\r\n\t\tvar _g3 = verb_eval_Modify.imax(0,i - degreeInc);\r\n\t\tvar _g2 = mpi + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar j = _g3++;\r\n\t\t\tbezalfs[i][j] = inv * verb_core_Binomial.get(newDegree,j) * verb_core_Binomial.get(degreeInc,i - j);\r\n\t\t}\r\n\t}\r\n\tvar _g4 = ph2 + 1;\r\n\twhile(_g4 < ph) {\r\n\t\tvar i1 = _g4++;\r\n\t\tvar mpi1 = verb_eval_Modify.imin(newDegree,i1);\r\n\t\tvar _g21 = verb_eval_Modify.imax(0,i1 - degreeInc);\r\n\t\tvar _g11 = mpi1 + 1;\r\n\t\twhile(_g21 < _g11) {\r\n\t\t\tvar j1 = _g21++;\r\n\t\t\tbezalfs[i1][j1] = bezalfs[ph - i1][newDegree - j1];\r\n\t\t}\r\n\t}\r\n\tvar mh = ph;\r\n\tvar kind = ph + 1;\r\n\tvar r = -1;\r\n\tvar a = newDegree;\r\n\tvar b = newDegree + 1;\r\n\tvar cind = 1;\r\n\tvar ua = knots[0];\r\n\tQw[0] = controlPoints[0];\r\n\tvar _g12 = 0;\r\n\tvar _g5 = ph + 1;\r\n\twhile(_g12 < _g5) {\r\n\t\tvar i2 = _g12++;\r\n\t\tUh[i2] = ua;\r\n\t}\r\n\tvar _g13 = 0;\r\n\tvar _g6 = newDegree + 1;\r\n\twhile(_g13 < _g6) {\r\n\t\tvar i3 = _g13++;\r\n\t\tbpts[i3] = controlPoints[i3];\r\n\t}\r\n\twhile(b < m) {\r\n\t\tvar i4 = b;\r\n\t\twhile(b < m && knots[b] == knots[b + 1]) b = b + 1;\r\n\t\tvar mul = b - i4 + 1;\r\n\t\tvar mh1 = mh + mul + degreeInc;\r\n\t\tvar ub = knots[b];\r\n\t\tvar oldr = r;\r\n\t\tr = newDegree - mul;\r\n\t\tvar lbz;\r\n\t\tif(oldr > 0) lbz = Math.floor((oldr + 2) / 2); else lbz = 1;\r\n\t\tvar rbz;\r\n\t\tif(r > 0) rbz = Math.floor(ph - (r + 1) / 2); else rbz = ph;\r\n\t\tif(r > 0) {\r\n\t\t\tvar numer = ub - ua;\r\n\t\t\tvar alfs = [];\r\n\t\t\tvar k = newDegree;\r\n\t\t\twhile(k > mul) {\r\n\t\t\t\talfs[k - mul - 1] = numer / (knots[a + k] - ua);\r\n\t\t\t\tk--;\r\n\t\t\t}\r\n\t\t\tvar _g14 = 1;\r\n\t\t\tvar _g7 = r + 1;\r\n\t\t\twhile(_g14 < _g7) {\r\n\t\t\t\tvar j2 = _g14++;\r\n\t\t\t\tvar save = r - j2;\r\n\t\t\t\tvar s = mul + j2;\r\n\t\t\t\tvar k1 = newDegree;\r\n\t\t\t\twhile(k1 >= s) {\r\n\t\t\t\t\tbpts[k1] = verb_core_Vec.add(verb_core_Vec.mul(alfs[k1 - s],bpts[k1]),verb_core_Vec.mul(1.0 - alfs[k1 - s],bpts[k1 - 1]));\r\n\t\t\t\t\tk1--;\r\n\t\t\t\t}\r\n\t\t\t\tNextbpts[save] = bpts[newDegree];\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar _g15 = lbz;\r\n\t\tvar _g8 = ph + 1;\r\n\t\twhile(_g15 < _g8) {\r\n\t\t\tvar i5 = _g15++;\r\n\t\t\tebpts[i5] = verb_core_Vec.zeros1d(dim);\r\n\t\t\tvar mpi2 = verb_eval_Modify.imin(newDegree,i5);\r\n\t\t\tvar _g31 = verb_eval_Modify.imax(0,i5 - degreeInc);\r\n\t\t\tvar _g22 = mpi2 + 1;\r\n\t\t\twhile(_g31 < _g22) {\r\n\t\t\t\tvar j3 = _g31++;\r\n\t\t\t\tebpts[i5] = verb_core_Vec.add(ebpts[i5],verb_core_Vec.mul(bezalfs[i5][j3],bpts[j3]));\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(oldr > 1) {\r\n\t\t\tvar first = kind - 2;\r\n\t\t\tvar last = kind;\r\n\t\t\tvar den = ub - ua;\r\n\t\t\tvar bet = (ub - Uh[kind - 1]) / den;\r\n\t\t\tvar _g9 = 1;\r\n\t\t\twhile(_g9 < oldr) {\r\n\t\t\t\tvar tr = _g9++;\r\n\t\t\t\tvar i6 = first;\r\n\t\t\t\tvar j4 = last;\r\n\t\t\t\tvar kj = j4 - kind + 1;\r\n\t\t\t\twhile(j4 - i6 > tr) {\r\n\t\t\t\t\tif(i6 < cind) {\r\n\t\t\t\t\t\tvar alf = (ub - Uh[i6]) / (ua - Uh[i6]);\r\n\t\t\t\t\t\tQw[i6] = verb_core_Vec.lerp(alf,Qw[i6],Qw[i6 - 1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(j4 >= lbz) {\r\n\t\t\t\t\t\tif(j4 - tr <= kind - ph + oldr) {\r\n\t\t\t\t\t\t\tvar gam = (ub - Uh[j4 - tr]) / den;\r\n\t\t\t\t\t\t\tebpts[kj] = verb_core_Vec.lerp(gam,ebpts[kj],ebpts[kj + 1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else ebpts[kj] = verb_core_Vec.lerp(bet,ebpts[kj],ebpts[kj + 1]);\r\n\t\t\t\t\ti6 = i6 + 1;\r\n\t\t\t\t\tj4 = j4 - 1;\r\n\t\t\t\t\tkj = kj - 1;\r\n\t\t\t\t}\r\n\t\t\t\tfirst = first - 1;\r\n\t\t\t\tlast = last + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(a != newDegree) {\r\n\t\t\tvar _g16 = 0;\r\n\t\t\tvar _g10 = ph - oldr;\r\n\t\t\twhile(_g16 < _g10) {\r\n\t\t\t\tvar i7 = _g16++;\r\n\t\t\t\tUh[kind] = ua;\r\n\t\t\t\tkind = kind + 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar _g17 = lbz;\r\n\t\tvar _g18 = rbz + 1;\r\n\t\twhile(_g17 < _g18) {\r\n\t\t\tvar j5 = _g17++;\r\n\t\t\tQw[cind] = ebpts[j5];\r\n\t\t\tcind = cind + 1;\r\n\t\t}\r\n\t\tif(b < m) {\r\n\t\t\tvar _g19 = 0;\r\n\t\t\twhile(_g19 < r) {\r\n\t\t\t\tvar j6 = _g19++;\r\n\t\t\t\tbpts[j6] = Nextbpts[j6];\r\n\t\t\t}\r\n\t\t\tvar _g110 = r;\r\n\t\t\tvar _g20 = newDegree + 1;\r\n\t\t\twhile(_g110 < _g20) {\r\n\t\t\t\tvar j7 = _g110++;\r\n\t\t\t\tbpts[j7] = controlPoints[b - newDegree + j7];\r\n\t\t\t}\r\n\t\t\ta = b;\r\n\t\t\tb = b + 1;\r\n\t\t\tua = ub;\r\n\t\t} else {\r\n\t\t\tvar _g111 = 0;\r\n\t\t\tvar _g23 = ph + 1;\r\n\t\t\twhile(_g111 < _g23) {\r\n\t\t\t\tvar i8 = _g111++;\r\n\t\t\t\tUh[kind + i8] = ub;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tnh = mh - ph - 1;\r\n\treturn new verb_core_NurbsCurveData(finalDegree,Uh,Qw);\r\n};\r\nverb_eval_Modify.rationalSurfaceTransform = function(surface,mat) {\r\n\tvar pts = verb_eval_Eval.dehomogenize2d(surface.controlPoints);\r\n\tvar _g1 = 0;\r\n\tvar _g = pts.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tvar _g3 = 0;\r\n\t\tvar _g2 = pts[i].length;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar j = _g3++;\r\n\t\t\tvar homoPt = pts[i][j];\r\n\t\t\thomoPt.push(1.0);\r\n\t\t\tpts[i][j] = verb_core_Mat.dot(mat,homoPt).slice(0,homoPt.length - 1);\r\n\t\t}\r\n\t}\r\n\treturn new verb_core_NurbsSurfaceData(surface.degreeU,surface.degreeV,surface.knotsU.slice(),surface.knotsV.slice(),verb_eval_Eval.homogenize2d(pts,verb_eval_Eval.weight2d(surface.controlPoints)));\r\n};\r\nverb_eval_Modify.rationalCurveTransform = function(curve,mat) {\r\n\tvar pts = verb_eval_Eval.dehomogenize1d(curve.controlPoints);\r\n\tvar _g1 = 0;\r\n\tvar _g = pts.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tvar homoPt = pts[i];\r\n\t\thomoPt.push(1.0);\r\n\t\tpts[i] = verb_core_Mat.dot(mat,homoPt).slice(0,homoPt.length - 1);\r\n\t}\r\n\treturn new verb_core_NurbsCurveData(curve.degree,curve.knots.slice(),verb_eval_Eval.homogenize1d(pts,verb_eval_Eval.weight1d(curve.controlPoints)));\r\n};\r\nverb_eval_Modify.surfaceKnotRefine = function(surface,knotsToInsert,useV) {\r\n\tvar newPts = [];\r\n\tvar knots;\r\n\tvar degree;\r\n\tvar ctrlPts;\r\n\tif(!useV) {\r\n\t\tctrlPts = verb_core_Mat.transpose(surface.controlPoints);\r\n\t\tknots = surface.knotsU;\r\n\t\tdegree = surface.degreeU;\r\n\t} else {\r\n\t\tctrlPts = surface.controlPoints;\r\n\t\tknots = surface.knotsV;\r\n\t\tdegree = surface.degreeV;\r\n\t}\r\n\tvar c = null;\r\n\tvar _g = 0;\r\n\twhile(_g < ctrlPts.length) {\r\n\t\tvar cptrow = ctrlPts[_g];\r\n\t\t++_g;\r\n\t\tc = verb_eval_Modify.curveKnotRefine(new verb_core_NurbsCurveData(degree,knots,cptrow),knotsToInsert);\r\n\t\tnewPts.push(c.controlPoints);\r\n\t}\r\n\tvar newknots = c.knots;\r\n\tif(!useV) {\r\n\t\tnewPts = verb_core_Mat.transpose(newPts);\r\n\t\treturn new verb_core_NurbsSurfaceData(surface.degreeU,surface.degreeV,newknots,surface.knotsV.slice(),newPts);\r\n\t} else return new verb_core_NurbsSurfaceData(surface.degreeU,surface.degreeV,surface.knotsU.slice(),newknots,newPts);\r\n};\r\nverb_eval_Modify.decomposeCurveIntoBeziers = function(curve) {\r\n\tvar degree = curve.degree;\r\n\tvar controlPoints = curve.controlPoints;\r\n\tvar knots = curve.knots;\r\n\tvar knotmults = verb_eval_Analyze.knotMultiplicities(knots);\r\n\tvar reqMult = degree + 1;\r\n\tvar _g = 0;\r\n\twhile(_g < knotmults.length) {\r\n\t\tvar knotmult = knotmults[_g];\r\n\t\t++_g;\r\n\t\tif(knotmult.mult < reqMult) {\r\n\t\t\tvar knotsInsert = verb_core_Vec.rep(reqMult - knotmult.mult,knotmult.knot);\r\n\t\t\tvar res = verb_eval_Modify.curveKnotRefine(new verb_core_NurbsCurveData(degree,knots,controlPoints),knotsInsert);\r\n\t\t\tknots = res.knots;\r\n\t\t\tcontrolPoints = res.controlPoints;\r\n\t\t}\r\n\t}\r\n\tvar numCrvs = knots.length / reqMult - 1;\r\n\tvar crvKnotLength = reqMult * 2;\r\n\tvar crvs = [];\r\n\tvar i = 0;\r\n\twhile(i < controlPoints.length) {\r\n\t\tvar kts = knots.slice(i,i + crvKnotLength);\r\n\t\tvar pts = controlPoints.slice(i,i + reqMult);\r\n\t\tcrvs.push(new verb_core_NurbsCurveData(degree,kts,pts));\r\n\t\ti += reqMult;\r\n\t}\r\n\treturn crvs;\r\n};\r\nverb_eval_Modify.curveKnotRefine = function(curve,knotsToInsert) {\r\n\tif(knotsToInsert.length == 0) return verb_eval_Make.clonedCurve(curve);\r\n\tvar degree = curve.degree;\r\n\tvar controlPoints = curve.controlPoints;\r\n\tvar knots = curve.knots;\r\n\tvar n = controlPoints.length - 1;\r\n\tvar m = n + degree + 1;\r\n\tvar r = knotsToInsert.length - 1;\r\n\tvar a = verb_eval_Eval.knotSpan(degree,knotsToInsert[0],knots);\r\n\tvar b = verb_eval_Eval.knotSpan(degree,knotsToInsert[r],knots);\r\n\tvar controlPoints_post = [];\r\n\tvar knots_post = [];\r\n\tvar _g1 = 0;\r\n\tvar _g = a - degree + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i1 = _g1++;\r\n\t\tcontrolPoints_post[i1] = controlPoints[i1];\r\n\t}\r\n\tvar _g11 = b - 1;\r\n\tvar _g2 = n + 1;\r\n\twhile(_g11 < _g2) {\r\n\t\tvar i2 = _g11++;\r\n\t\tcontrolPoints_post[i2 + r + 1] = controlPoints[i2];\r\n\t}\r\n\tvar _g12 = 0;\r\n\tvar _g3 = a + 1;\r\n\twhile(_g12 < _g3) {\r\n\t\tvar i3 = _g12++;\r\n\t\tknots_post[i3] = knots[i3];\r\n\t}\r\n\tvar _g13 = b + degree;\r\n\tvar _g4 = m + 1;\r\n\twhile(_g13 < _g4) {\r\n\t\tvar i4 = _g13++;\r\n\t\tknots_post[i4 + r + 1] = knots[i4];\r\n\t}\r\n\tvar i = b + degree - 1;\r\n\tvar k = b + degree + r;\r\n\tvar j = r;\r\n\twhile(j >= 0) {\r\n\t\twhile(knotsToInsert[j] <= knots[i] && i > a) {\r\n\t\t\tcontrolPoints_post[k - degree - 1] = controlPoints[i - degree - 1];\r\n\t\t\tknots_post[k] = knots[i];\r\n\t\t\tk = k - 1;\r\n\t\t\ti = i - 1;\r\n\t\t}\r\n\t\tcontrolPoints_post[k - degree - 1] = controlPoints_post[k - degree];\r\n\t\tvar _g14 = 1;\r\n\t\tvar _g5 = degree + 1;\r\n\t\twhile(_g14 < _g5) {\r\n\t\t\tvar l = _g14++;\r\n\t\t\tvar ind = k - degree + l;\r\n\t\t\tvar alfa = knots_post[k + l] - knotsToInsert[j];\r\n\t\t\tif(Math.abs(alfa) < verb_core_Constants.EPSILON) controlPoints_post[ind - 1] = controlPoints_post[ind]; else {\r\n\t\t\t\talfa = alfa / (knots_post[k + l] - knots[i - degree + l]);\r\n\t\t\t\tcontrolPoints_post[ind - 1] = verb_core_Vec.add(verb_core_Vec.mul(alfa,controlPoints_post[ind - 1]),verb_core_Vec.mul(1.0 - alfa,controlPoints_post[ind]));\r\n\t\t\t}\r\n\t\t}\r\n\t\tknots_post[k] = knotsToInsert[j];\r\n\t\tk = k - 1;\r\n\t\tj--;\r\n\t}\r\n\treturn new verb_core_NurbsCurveData(degree,knots_post,controlPoints_post);\r\n};\r\nverb_eval_Modify.curveKnotInsert = function(curve,u,r) {\r\n\tvar degree = curve.degree;\r\n\tvar controlPoints = curve.controlPoints;\r\n\tvar knots = curve.knots;\r\n\tvar s = 0;\r\n\tvar num_pts = controlPoints.length;\r\n\tvar k = verb_eval_Eval.knotSpan(degree,u,knots);\r\n\tvar num_pts_post = num_pts + r;\r\n\tvar controlPoints_temp = [];\r\n\tvar knots_post = [];\r\n\tvar controlPoints_post = [];\r\n\tvar i = 0;\r\n\tvar _g1 = 1;\r\n\tvar _g = k + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i1 = _g1++;\r\n\t\tknots_post[i1] = knots[i1];\r\n\t}\r\n\tvar _g11 = 1;\r\n\tvar _g2 = r + 1;\r\n\twhile(_g11 < _g2) {\r\n\t\tvar i2 = _g11++;\r\n\t\tknots_post[k + i2] = u;\r\n\t}\r\n\tvar _g12 = k + 1;\r\n\tvar _g3 = knots.length;\r\n\twhile(_g12 < _g3) {\r\n\t\tvar i3 = _g12++;\r\n\t\tknots_post[i3 + r] = knots[i3];\r\n\t}\r\n\tvar _g13 = 0;\r\n\tvar _g4 = k - degree + 1;\r\n\twhile(_g13 < _g4) {\r\n\t\tvar i4 = _g13++;\r\n\t\tcontrolPoints_post[i4] = controlPoints[i4];\r\n\t}\r\n\tvar _g5 = k - s;\r\n\twhile(_g5 < num_pts) {\r\n\t\tvar i5 = _g5++;\r\n\t\tcontrolPoints_post[i5 + r] = controlPoints[i5];\r\n\t}\r\n\tvar _g14 = 0;\r\n\tvar _g6 = degree - s + 1;\r\n\twhile(_g14 < _g6) {\r\n\t\tvar i6 = _g14++;\r\n\t\tcontrolPoints_temp[i6] = controlPoints[k - degree + i6];\r\n\t}\r\n\tvar L = 0;\r\n\tvar alpha = 0;\r\n\tvar _g15 = 1;\r\n\tvar _g7 = r + 1;\r\n\twhile(_g15 < _g7) {\r\n\t\tvar j = _g15++;\r\n\t\tL = k - degree + j;\r\n\t\tvar _g31 = 0;\r\n\t\tvar _g21 = degree - j - s + 1;\r\n\t\twhile(_g31 < _g21) {\r\n\t\t\tvar i7 = _g31++;\r\n\t\t\talpha = (u - knots[L + i7]) / (knots[i7 + k + 1] - knots[L + i7]);\r\n\t\t\tcontrolPoints_temp[i7] = verb_core_Vec.add(verb_core_Vec.mul(alpha,controlPoints_temp[i7 + 1]),verb_core_Vec.mul(1.0 - alpha,controlPoints_temp[i7]));\r\n\t\t}\r\n\t\tcontrolPoints_post[L] = controlPoints_temp[0];\r\n\t\tcontrolPoints_post[k + r - j - s] = controlPoints_temp[degree - j - s];\r\n\t}\r\n\tvar _g16 = L + 1;\r\n\tvar _g8 = k - s;\r\n\twhile(_g16 < _g8) {\r\n\t\tvar i8 = _g16++;\r\n\t\tcontrolPoints_post[i8] = controlPoints_temp[i8 - L];\r\n\t}\r\n\treturn new verb_core_NurbsCurveData(degree,knots_post,controlPoints_post);\r\n};\r\nvar verb_eval_Tess = $hx_exports.eval.Tess = function() { };\r\n$hxClasses[\"verb.eval.Tess\"] = verb_eval_Tess;\r\nverb_eval_Tess.__name__ = [\"verb\",\"eval\",\"Tess\"];\r\nverb_eval_Tess.rationalCurveRegularSample = function(curve,numSamples,includeU) {\r\n\treturn verb_eval_Tess.rationalCurveRegularSampleRange(curve,curve.knots[0],verb_core_ArrayExtensions.last(curve.knots),numSamples,includeU);\r\n};\r\nverb_eval_Tess.rationalCurveRegularSampleRange = function(curve,start,end,numSamples,includeU) {\r\n\tif(numSamples < 1) numSamples = 2;\r\n\tvar p = [];\r\n\tvar span = (end - start) / (numSamples - 1);\r\n\tvar u = 0;\r\n\tvar _g = 0;\r\n\twhile(_g < numSamples) {\r\n\t\tvar i = _g++;\r\n\t\tu = start + span * i;\r\n\t\tif(includeU) p.push([u].concat(verb_eval_Eval.rationalCurvePoint(curve,u))); else p.push(verb_eval_Eval.rationalCurvePoint(curve,u));\r\n\t}\r\n\treturn p;\r\n};\r\nverb_eval_Tess.rationalCurveAdaptiveSample = function(curve,tol,includeU) {\r\n\tif(includeU == null) includeU = false;\r\n\tif(tol == null) tol = 1e-6;\r\n\tif(curve.degree == 1) {\r\n\t\tif(!includeU) return curve.controlPoints.map(verb_eval_Eval.dehomogenize); else {\r\n\t\t\tvar _g = [];\r\n\t\t\tvar _g2 = 0;\r\n\t\t\tvar _g1 = curve.controlPoints.length;\r\n\t\t\twhile(_g2 < _g1) {\r\n\t\t\t\tvar i = _g2++;\r\n\t\t\t\t_g.push([curve.knots[i + 1]].concat(verb_eval_Eval.dehomogenize(curve.controlPoints[i])));\r\n\t\t\t}\r\n\t\t\treturn _g;\r\n\t\t}\r\n\t}\r\n\treturn verb_eval_Tess.rationalCurveAdaptiveSampleRange(curve,curve.knots[0],verb_core_ArrayExtensions.last(curve.knots),tol,includeU);\r\n};\r\nverb_eval_Tess.rationalCurveAdaptiveSampleRange = function(curve,start,end,tol,includeU) {\r\n\tvar p1 = verb_eval_Eval.rationalCurvePoint(curve,start);\r\n\tvar p3 = verb_eval_Eval.rationalCurvePoint(curve,end);\r\n\tvar t = 0.5 + 0.2 * Math.random();\r\n\tvar mid = start + (end - start) * t;\r\n\tvar p2 = verb_eval_Eval.rationalCurvePoint(curve,mid);\r\n\tvar diff = verb_core_Vec.sub(p1,p3);\r\n\tvar diff2 = verb_core_Vec.sub(p1,p2);\r\n\tif(verb_core_Vec.dot(diff,diff) < tol && verb_core_Vec.dot(diff2,diff2) > tol || !verb_core_Trig.threePointsAreFlat(p1,p2,p3,tol)) {\r\n\t\tvar exact_mid = start + (end - start) * 0.5;\r\n\t\tvar left_pts = verb_eval_Tess.rationalCurveAdaptiveSampleRange(curve,start,exact_mid,tol,includeU);\r\n\t\tvar right_pts = verb_eval_Tess.rationalCurveAdaptiveSampleRange(curve,exact_mid,end,tol,includeU);\r\n\t\treturn left_pts.slice(0,-1).concat(right_pts);\r\n\t} else if(includeU) return [[start].concat(p1),[end].concat(p3)]; else return [p1,p3];\r\n};\r\nverb_eval_Tess.rationalSurfaceNaive = function(surface,divs_u,divs_v) {\r\n\tif(divs_u < 1) divs_u = 1;\r\n\tif(divs_v < 1) divs_v = 1;\r\n\tvar degreeU = surface.degreeU;\r\n\tvar degreeV = surface.degreeV;\r\n\tvar controlPoints = surface.controlPoints;\r\n\tvar knotsU = surface.knotsU;\r\n\tvar knotsV = surface.knotsV;\r\n\tvar u_span = verb_core_ArrayExtensions.last(knotsU) - knotsU[0];\r\n\tvar v_span = verb_core_ArrayExtensions.last(knotsV) - knotsV[0];\r\n\tvar span_u = u_span / divs_u;\r\n\tvar span_v = v_span / divs_v;\r\n\tvar points = [];\r\n\tvar uvs = [];\r\n\tvar normals = [];\r\n\tvar _g1 = 0;\r\n\tvar _g = divs_u + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tvar _g3 = 0;\r\n\t\tvar _g2 = divs_v + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar j = _g3++;\r\n\t\t\tvar pt_u = i * span_u;\r\n\t\t\tvar pt_v = j * span_v;\r\n\t\t\tuvs.push([pt_u,pt_v]);\r\n\t\t\tvar derivs = verb_eval_Eval.rationalSurfaceDerivatives(surface,pt_u,pt_v,1);\r\n\t\t\tvar pt = derivs[0][0];\r\n\t\t\tpoints.push(pt);\r\n\t\t\tvar normal = verb_core_Vec.normalized(verb_core_Vec.cross(derivs[1][0],derivs[0][1]));\r\n\t\t\tnormals.push(normal);\r\n\t\t}\r\n\t}\r\n\tvar faces = [];\r\n\tvar _g4 = 0;\r\n\twhile(_g4 < divs_u) {\r\n\t\tvar i1 = _g4++;\r\n\t\tvar _g11 = 0;\r\n\t\twhile(_g11 < divs_v) {\r\n\t\t\tvar j1 = _g11++;\r\n\t\t\tvar a_i = i1 * (divs_v + 1) + j1;\r\n\t\t\tvar b_i = (i1 + 1) * (divs_v + 1) + j1;\r\n\t\t\tvar c_i = b_i + 1;\r\n\t\t\tvar d_i = a_i + 1;\r\n\t\t\tvar abc = [a_i,b_i,c_i];\r\n\t\t\tvar acd = [a_i,c_i,d_i];\r\n\t\t\tfaces.push(abc);\r\n\t\t\tfaces.push(acd);\r\n\t\t}\r\n\t}\r\n\treturn new verb_core_MeshData(faces,points,normals,uvs);\r\n};\r\nverb_eval_Tess.divideRationalSurfaceAdaptive = function(surface,options) {\r\n\tif(options == null) options = new verb_eval_AdaptiveRefinementOptions();\r\n\tif(options.minDivsU != null) options.minDivsU = options.minDivsU; else options.minDivsU = 1;\r\n\tif(options.minDivsV != null) options.minDivsU = options.minDivsV; else options.minDivsU = 1;\r\n\tif(options.refine != null) options.refine = options.refine; else options.refine = true;\r\n\tvar minU = (surface.controlPoints.length - 1) * 2;\r\n\tvar minV = (surface.controlPoints[0].length - 1) * 2;\r\n\tvar divsU;\r\n\tif(options.minDivsU > minU) divsU = options.minDivsU = options.minDivsU; else divsU = options.minDivsU = minU;\r\n\tvar divsV;\r\n\tif(options.minDivsV > minV) divsV = options.minDivsV = options.minDivsV; else divsV = options.minDivsV = minV;\r\n\tvar umax = verb_core_ArrayExtensions.last(surface.knotsU);\r\n\tvar umin = surface.knotsU[0];\r\n\tvar vmax = verb_core_ArrayExtensions.last(surface.knotsV);\r\n\tvar vmin = surface.knotsV[0];\r\n\tvar du = (umax - umin) / divsU;\r\n\tvar dv = (vmax - vmin) / divsV;\r\n\tvar divs = [];\r\n\tvar pts = [];\r\n\tvar _g1 = 0;\r\n\tvar _g = divsV + 1;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\tvar ptrow = [];\r\n\t\tvar _g3 = 0;\r\n\t\tvar _g2 = divsU + 1;\r\n\t\twhile(_g3 < _g2) {\r\n\t\t\tvar j = _g3++;\r\n\t\t\tvar u = umin + du * j;\r\n\t\t\tvar v = vmin + dv * i;\r\n\t\t\tvar ds = verb_eval_Eval.rationalSurfaceDerivatives(surface,u,v,1);\r\n\t\t\tvar norm = verb_core_Vec.normalized(verb_core_Vec.cross(ds[0][1],ds[1][0]));\r\n\t\t\tptrow.push(new verb_core_SurfacePoint(ds[0][0],norm,[u,v],-1,verb_core_Vec.isZero(norm)));\r\n\t\t}\r\n\t\tpts.push(ptrow);\r\n\t}\r\n\tvar _g4 = 0;\r\n\twhile(_g4 < divsV) {\r\n\t\tvar i1 = _g4++;\r\n\t\tvar _g11 = 0;\r\n\t\twhile(_g11 < divsU) {\r\n\t\t\tvar j1 = _g11++;\r\n\t\t\tvar corners = [pts[divsV - i1 - 1][j1],pts[divsV - i1 - 1][j1 + 1],pts[divsV - i1][j1 + 1],pts[divsV - i1][j1]];\r\n\t\t\tdivs.push(new verb_eval_AdaptiveRefinementNode(surface,corners));\r\n\t\t}\r\n\t}\r\n\tif(!options.refine) return divs;\r\n\tvar _g5 = 0;\r\n\twhile(_g5 < divsV) {\r\n\t\tvar i2 = _g5++;\r\n\t\tvar _g12 = 0;\r\n\t\twhile(_g12 < divsU) {\r\n\t\t\tvar j2 = _g12++;\r\n\t\t\tvar ci = i2 * divsU + j2;\r\n\t\t\tvar n = verb_eval_Tess.north(ci,i2,j2,divsU,divsV,divs);\r\n\t\t\tvar e = verb_eval_Tess.east(ci,i2,j2,divsU,divsV,divs);\r\n\t\t\tvar s = verb_eval_Tess.south(ci,i2,j2,divsU,divsV,divs);\r\n\t\t\tvar w = verb_eval_Tess.west(ci,i2,j2,divsU,divsV,divs);\r\n\t\t\tdivs[ci].neighbors = [s,e,n,w];\r\n\t\t\tdivs[ci].divide(options);\r\n\t\t}\r\n\t}\r\n\treturn divs;\r\n};\r\nverb_eval_Tess.north = function(index,i,j,divsU,divsV,divs) {\r\n\tif(i == 0) return null;\r\n\treturn divs[index - divsU];\r\n};\r\nverb_eval_Tess.south = function(index,i,j,divsU,divsV,divs) {\r\n\tif(i == divsV - 1) return null;\r\n\treturn divs[index + divsU];\r\n};\r\nverb_eval_Tess.east = function(index,i,j,divsU,divsV,divs) {\r\n\tif(j == divsU - 1) return null;\r\n\treturn divs[index + 1];\r\n};\r\nverb_eval_Tess.west = function(index,i,j,divsU,divsV,divs) {\r\n\tif(j == 0) return null;\r\n\treturn divs[index - 1];\r\n};\r\nverb_eval_Tess.triangulateAdaptiveRefinementNodeTree = function(arrTree) {\r\n\tvar mesh = verb_core_MeshData.empty();\r\n\tvar _g = 0;\r\n\twhile(_g < arrTree.length) {\r\n\t\tvar x = arrTree[_g];\r\n\t\t++_g;\r\n\t\tx.triangulate(mesh);\r\n\t}\r\n\treturn mesh;\r\n};\r\nverb_eval_Tess.rationalSurfaceAdaptive = function(surface,options) {\r\n\tif(options != null) options = options; else options = new verb_eval_AdaptiveRefinementOptions();\r\n\tvar arrTrees = verb_eval_Tess.divideRationalSurfaceAdaptive(surface,options);\r\n\treturn verb_eval_Tess.triangulateAdaptiveRefinementNodeTree(arrTrees);\r\n};\r\nvar verb_eval_AdaptiveRefinementOptions = $hx_exports.core.AdaptiveRefinementOptions = function() {\r\n\tthis.minDivsV = 1;\r\n\tthis.minDivsU = 1;\r\n\tthis.refine = true;\r\n\tthis.maxDepth = 10;\r\n\tthis.minDepth = 0;\r\n\tthis.normTol = 2.5e-2;\r\n};\r\n$hxClasses[\"verb.eval.AdaptiveRefinementOptions\"] = verb_eval_AdaptiveRefinementOptions;\r\nverb_eval_AdaptiveRefinementOptions.__name__ = [\"verb\",\"eval\",\"AdaptiveRefinementOptions\"];\r\nverb_eval_AdaptiveRefinementOptions.prototype = {\r\n\t__class__: verb_eval_AdaptiveRefinementOptions\r\n};\r\nvar verb_eval_AdaptiveRefinementNode = $hx_exports.core.AdaptiveRefinementNode = function(srf,corners,neighbors) {\r\n\tthis.srf = srf;\r\n\tif(neighbors == null) this.neighbors = [null,null,null,null]; else this.neighbors = neighbors;\r\n\tthis.corners = corners;\r\n\tif(this.corners == null) {\r\n\t\tvar u0 = srf.knotsU[0];\r\n\t\tvar u1 = verb_core_ArrayExtensions.last(srf.knotsU);\r\n\t\tvar v0 = srf.knotsV[0];\r\n\t\tvar v1 = verb_core_ArrayExtensions.last(srf.knotsV);\r\n\t\tthis.corners = [verb_core_SurfacePoint.fromUv(u0,v0),verb_core_SurfacePoint.fromUv(u1,v0),verb_core_SurfacePoint.fromUv(u1,v1),verb_core_SurfacePoint.fromUv(u0,v1)];\r\n\t}\r\n};\r\n$hxClasses[\"verb.eval.AdaptiveRefinementNode\"] = verb_eval_AdaptiveRefinementNode;\r\nverb_eval_AdaptiveRefinementNode.__name__ = [\"verb\",\"eval\",\"AdaptiveRefinementNode\"];\r\nverb_eval_AdaptiveRefinementNode.prototype = {\r\n\tisLeaf: function() {\r\n\t\treturn this.children == null;\r\n\t}\r\n\t,center: function() {\r\n\t\tif(this.centerPoint != null) return this.centerPoint; else return this.evalSrf(this.u05,this.v05);\r\n\t}\r\n\t,evalCorners: function() {\r\n\t\tthis.u05 = (this.corners[0].uv[0] + this.corners[2].uv[0]) / 2;\r\n\t\tthis.v05 = (this.corners[0].uv[1] + this.corners[2].uv[1]) / 2;\r\n\t\tvar _g = 0;\r\n\t\twhile(_g < 4) {\r\n\t\t\tvar i = _g++;\r\n\t\t\tif(this.corners[i].point == null) {\r\n\t\t\t\tvar c = this.corners[i];\r\n\t\t\t\tthis.evalSrf(c.uv[0],c.uv[1],c);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t,evalSrf: function(u,v,srfPt) {\r\n\t\tvar derivs = verb_eval_Eval.rationalSurfaceDerivatives(this.srf,u,v,1);\r\n\t\tvar pt = derivs[0][0];\r\n\t\tvar norm = verb_core_Vec.cross(derivs[0][1],derivs[1][0]);\r\n\t\tvar degen = verb_core_Vec.isZero(norm);\r\n\t\tif(!degen) norm = verb_core_Vec.normalized(norm);\r\n\t\tif(srfPt != null) {\r\n\t\t\tsrfPt.degen = degen;\r\n\t\t\tsrfPt.point = pt;\r\n\t\t\tsrfPt.normal = norm;\r\n\t\t\treturn srfPt;\r\n\t\t} else return new verb_core_SurfacePoint(pt,norm,[u,v],-1,degen);\r\n\t}\r\n\t,getEdgeCorners: function(edgeIndex) {\r\n\t\tif(this.isLeaf()) return [this.corners[edgeIndex]];\r\n\t\tif(this.horizontal) switch(edgeIndex) {\r\n\t\tcase 0:\r\n\t\t\treturn this.children[0].getEdgeCorners(0);\r\n\t\tcase 1:\r\n\t\t\treturn this.children[0].getEdgeCorners(1).concat(this.children[1].getEdgeCorners(1));\r\n\t\tcase 2:\r\n\t\t\treturn this.children[1].getEdgeCorners(2);\r\n\t\tcase 3:\r\n\t\t\treturn this.children[1].getEdgeCorners(3).concat(this.children[0].getEdgeCorners(3));\r\n\t\t}\r\n\t\tswitch(edgeIndex) {\r\n\t\tcase 0:\r\n\t\t\treturn this.children[0].getEdgeCorners(0).concat(this.children[1].getEdgeCorners(0));\r\n\t\tcase 1:\r\n\t\t\treturn this.children[1].getEdgeCorners(1);\r\n\t\tcase 2:\r\n\t\t\treturn this.children[1].getEdgeCorners(2).concat(this.children[0].getEdgeCorners(2));\r\n\t\tcase 3:\r\n\t\t\treturn this.children[0].getEdgeCorners(3);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\t,getAllCorners: function(edgeIndex) {\r\n\t\tvar baseArr = [this.corners[edgeIndex]];\r\n\t\tif(this.neighbors[edgeIndex] == null) return baseArr;\r\n\t\tvar corners = this.neighbors[edgeIndex].getEdgeCorners((edgeIndex + 2) % 4);\r\n\t\tvar funcIndex = edgeIndex % 2;\r\n\t\tvar e = verb_core_Constants.EPSILON;\r\n\t\tvar that = this;\r\n\t\tvar rangeFuncMap = [function(c) {\r\n\t\t\treturn c.uv[0] > that.corners[0].uv[0] + e && c.uv[0] < that.corners[2].uv[0] - e;\r\n\t\t},function(c1) {\r\n\t\t\treturn c1.uv[1] > that.corners[0].uv[1] + e && c1.uv[1] < that.corners[2].uv[1] - e;\r\n\t\t}];\r\n\t\tvar cornercopy = corners.filter(rangeFuncMap[funcIndex]);\r\n\t\tcornercopy.reverse();\r\n\t\treturn baseArr.concat(cornercopy);\r\n\t}\r\n\t,midpoint: function(index) {\r\n\t\tif(this.midPoints == null) this.midPoints = [null,null,null,null];\r\n\t\tif(!(this.midPoints[index] == null)) return this.midPoints[index];\r\n\t\tswitch(index) {\r\n\t\tcase 0:\r\n\t\t\tthis.midPoints[0] = this.evalSrf(this.u05,this.corners[0].uv[1]);\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\tthis.midPoints[1] = this.evalSrf(this.corners[1].uv[0],this.v05);\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tthis.midPoints[2] = this.evalSrf(this.u05,this.corners[2].uv[1]);\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tthis.midPoints[3] = this.evalSrf(this.corners[0].uv[0],this.v05);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\treturn this.midPoints[index];\r\n\t}\r\n\t,hasBadNormals: function() {\r\n\t\treturn this.corners[0].degen || this.corners[1].degen || this.corners[2].degen || this.corners[3].degen;\r\n\t}\r\n\t,fixNormals: function() {\r\n\t\tvar l = this.corners.length;\r\n\t\tvar _g = 0;\r\n\t\twhile(_g < l) {\r\n\t\t\tvar i = _g++;\r\n\t\t\tvar corn = this.corners[i];\r\n\t\t\tif(this.corners[i].degen) {\r\n\t\t\t\tvar v1 = this.corners[(i + 1) % l];\r\n\t\t\t\tvar v2 = this.corners[(i + 3) % l];\r\n\t\t\t\tif(v1.degen) this.corners[i].normal = v2.normal; else this.corners[i].normal = v1.normal;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t,shouldDivide: function(options,currentDepth) {\r\n\t\tif(currentDepth < options.minDepth) return true;\r\n\t\tif(currentDepth >= options.maxDepth) return false;\r\n\t\tif(this.hasBadNormals()) {\r\n\t\t\tthis.fixNormals();\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.splitVert = verb_core_Vec.normSquared(verb_core_Vec.sub(this.corners[0].normal,this.corners[1].normal)) > options.normTol || verb_core_Vec.normSquared(verb_core_Vec.sub(this.corners[2].normal,this.corners[3].normal)) > options.normTol;\r\n\t\tthis.splitHoriz = verb_core_Vec.normSquared(verb_core_Vec.sub(this.corners[1].normal,this.corners[2].normal)) > options.normTol || verb_core_Vec.normSquared(verb_core_Vec.sub(this.corners[3].normal,this.corners[0].normal)) > options.normTol;\r\n\t\tif(this.splitVert || this.splitHoriz) return true;\r\n\t\tvar center = this.center();\r\n\t\treturn verb_core_Vec.normSquared(verb_core_Vec.sub(center.normal,this.corners[0].normal)) > options.normTol || verb_core_Vec.normSquared(verb_core_Vec.sub(center.normal,this.corners[1].normal)) > options.normTol || verb_core_Vec.normSquared(verb_core_Vec.sub(center.normal,this.corners[2].normal)) > options.normTol || verb_core_Vec.normSquared(verb_core_Vec.sub(center.normal,this.corners[3].normal)) > options.normTol;\r\n\t}\r\n\t,divide: function(options) {\r\n\t\tif(options == null) options = new verb_eval_AdaptiveRefinementOptions();\r\n\t\tif(options.normTol == null) options.normTol = 8.5e-2;\r\n\t\tif(options.minDepth == null) options.minDepth = 0;\r\n\t\tif(options.maxDepth == null) options.maxDepth = 10;\r\n\t\tthis._divide(options,0,true);\r\n\t}\r\n\t,_divide: function(options,currentDepth,horiz) {\r\n\t\tthis.evalCorners();\r\n\t\tif(!this.shouldDivide(options,currentDepth)) return;\r\n\t\tcurrentDepth++;\r\n\t\tif(this.splitVert && !this.splitHoriz) horiz = false; else if(!this.splitVert && this.splitHoriz) horiz = true;\r\n\t\tthis.horizontal = horiz;\r\n\t\tif(this.horizontal) {\r\n\t\t\tvar bott = [this.corners[0],this.corners[1],this.midpoint(1),this.midpoint(3)];\r\n\t\t\tvar top = [this.midpoint(3),this.midpoint(1),this.corners[2],this.corners[3]];\r\n\t\t\tthis.children = [new verb_eval_AdaptiveRefinementNode(this.srf,bott),new verb_eval_AdaptiveRefinementNode(this.srf,top)];\r\n\t\t\tthis.children[0].neighbors = [this.neighbors[0],this.neighbors[1],this.children[1],this.neighbors[3]];\r\n\t\t\tthis.children[1].neighbors = [this.children[0],this.neighbors[1],this.neighbors[2],this.neighbors[3]];\r\n\t\t} else {\r\n\t\t\tvar left = [this.corners[0],this.midpoint(0),this.midpoint(2),this.corners[3]];\r\n\t\t\tvar right = [this.midpoint(0),this.corners[1],this.corners[2],this.midpoint(2)];\r\n\t\t\tthis.children = [new verb_eval_AdaptiveRefinementNode(this.srf,left),new verb_eval_AdaptiveRefinementNode(this.srf,right)];\r\n\t\t\tthis.children[0].neighbors = [this.neighbors[0],this.children[1],this.neighbors[2],this.neighbors[3]];\r\n\t\t\tthis.children[1].neighbors = [this.neighbors[0],this.neighbors[1],this.neighbors[2],this.children[0]];\r\n\t\t}\r\n\t\tvar _g = 0;\r\n\t\tvar _g1 = this.children;\r\n\t\twhile(_g < _g1.length) {\r\n\t\t\tvar child = _g1[_g];\r\n\t\t\t++_g;\r\n\t\t\tchild._divide(options,currentDepth,!horiz);\r\n\t\t}\r\n\t}\r\n\t,triangulate: function(mesh) {\r\n\t\tif(mesh == null) mesh = verb_core_MeshData.empty();\r\n\t\tif(this.isLeaf()) return this.triangulateLeaf(mesh);\r\n\t\tvar _g = 0;\r\n\t\tvar _g1 = this.children;\r\n\t\twhile(_g < _g1.length) {\r\n\t\t\tvar x = _g1[_g];\r\n\t\t\t++_g;\r\n\t\t\tif(x == null) break;\r\n\t\t\tx.triangulate(mesh);\r\n\t\t}\r\n\t\treturn mesh;\r\n\t}\r\n\t,triangulateLeaf: function(mesh) {\r\n\t\tvar baseIndex = mesh.points.length;\r\n\t\tvar uvs = [];\r\n\t\tvar ids = [];\r\n\t\tvar splitid = 0;\r\n\t\tvar _g = 0;\r\n\t\twhile(_g < 4) {\r\n\t\t\tvar i1 = _g++;\r\n\t\t\tvar edgeCorners = this.getAllCorners(i1);\r\n\t\t\tif(edgeCorners.length == 2) splitid = i1 + 1;\r\n\t\t\tvar _g2 = 0;\r\n\t\t\tvar _g1 = edgeCorners.length;\r\n\t\t\twhile(_g2 < _g1) {\r\n\t\t\t\tvar j1 = _g2++;\r\n\t\t\t\tuvs.push(edgeCorners[j1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar _g3 = 0;\r\n\t\twhile(_g3 < uvs.length) {\r\n\t\t\tvar corner = uvs[_g3];\r\n\t\t\t++_g3;\r\n\t\t\tif(corner.id != -1) {\r\n\t\t\t\tids.push(corner.id);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tmesh.uvs.push(corner.uv);\r\n\t\t\tmesh.points.push(corner.point);\r\n\t\t\tmesh.normals.push(corner.normal);\r\n\t\t\tcorner.id = baseIndex;\r\n\t\t\tids.push(baseIndex);\r\n\t\t\tbaseIndex++;\r\n\t\t}\r\n\t\tif(uvs.length == 4) {\r\n\t\t\tmesh.faces.push([ids[0],ids[3],ids[1]]);\r\n\t\t\tmesh.faces.push([ids[3],ids[2],ids[1]]);\r\n\t\t\treturn mesh;\r\n\t\t} else if(uvs.length == 5) {\r\n\t\t\tvar il = ids.length;\r\n\t\t\tmesh.faces.push([ids[splitid],ids[(splitid + 2) % il],ids[(splitid + 1) % il]]);\r\n\t\t\tmesh.faces.push([ids[(splitid + 4) % il],ids[(splitid + 3) % il],ids[splitid]]);\r\n\t\t\tmesh.faces.push([ids[splitid],ids[(splitid + 3) % il],ids[(splitid + 2) % il]]);\r\n\t\t\treturn mesh;\r\n\t\t}\r\n\t\tvar center = this.center();\r\n\t\tmesh.uvs.push(center.uv);\r\n\t\tmesh.points.push(center.point);\r\n\t\tmesh.normals.push(center.normal);\r\n\t\tvar centerIndex = mesh.points.length - 1;\r\n\t\tvar i = 0;\r\n\t\tvar j = uvs.length - 1;\r\n\t\twhile(i < uvs.length) {\r\n\t\t\tmesh.faces.push([centerIndex,ids[i],ids[j]]);\r\n\t\t\tj = i++;\r\n\t\t}\r\n\t\treturn mesh;\r\n\t}\r\n\t,__class__: verb_eval_AdaptiveRefinementNode\r\n};\r\nvar verb_exe_Dispatcher = $hx_exports.exe.Dispatcher = function() { };\r\n$hxClasses[\"verb.exe.Dispatcher\"] = verb_exe_Dispatcher;\r\nverb_exe_Dispatcher.__name__ = [\"verb\",\"exe\",\"Dispatcher\"];\r\nverb_exe_Dispatcher.init = function() {\r\n\tif(verb_exe_Dispatcher._init) return;\r\n\tverb_exe_Dispatcher._workerPool = new verb_exe_WorkerPool(verb_exe_Dispatcher.THREADS);\r\n\tverb_exe_Dispatcher._init = true;\r\n};\r\nverb_exe_Dispatcher.dispatchMethod = function(classType,methodName,args) {\r\n\tverb_exe_Dispatcher.init();\r\n\tvar def = new promhx_Deferred();\r\n\tvar callback = function(x) {\r\n\t\tdef.resolve(x);\r\n\t};\r\n\tverb_exe_Dispatcher._workerPool.addWork(Type.getClassName(classType),methodName,args,callback);\r\n\treturn new promhx_Promise(def);\r\n};\r\nvar verb_exe_WorkerPool = $hx_exports.exe.WorkerPool = function(numThreads,fileName) {\r\n\tif(fileName == null) fileName = \"verb.js\";\r\n\tif(numThreads == null) numThreads = 1;\r\n\tthis._callbacks = new haxe_ds_IntMap();\r\n\tthis._working = new haxe_ds_IntMap();\r\n\tthis._pool = [];\r\n\tthis._queue = [];\r\n\tvar _g = 0;\r\n\twhile(_g < numThreads) {\r\n\t\tvar i = _g++;\r\n\t\tvar w;\r\n\t\ttry {\r\n\t\t\tw = new Worker(verb_exe_WorkerPool.basePath + fileName);\r\n\t\t} catch( e ) {\r\n\t\t\tif (e instanceof js__$Boot_HaxeError) e = e.val;\r\n\t\t\tw = new Worker(verb_exe_WorkerPool.basePath + fileName.substring(0,-3) + \".min.js\");\r\n\t\t}\r\n\t\tthis._pool.push(w);\r\n\t}\r\n};\r\n$hxClasses[\"verb.exe.WorkerPool\"] = verb_exe_WorkerPool;\r\nverb_exe_WorkerPool.__name__ = [\"verb\",\"exe\",\"WorkerPool\"];\r\nverb_exe_WorkerPool.prototype = {\r\n\taddWork: function(className,methodName,args,callback) {\r\n\t\tvar work = new verb_exe__$WorkerPool_Work(className,methodName,args);\r\n\t\tthis._callbacks.set(work.id,callback);\r\n\t\tthis._queue.push(work);\r\n\t\tthis.processQueue();\r\n\t}\r\n\t,processQueue: function() {\r\n\t\tvar _g = this;\r\n\t\twhile(this._queue.length > 0 && this._pool.length > 0) {\r\n\t\t\tvar work = this._queue.shift();\r\n\t\t\tvar workId = [work.id];\r\n\t\t\tvar worker = [this._pool.shift()];\r\n\t\t\tthis._working.h[workId[0]] = worker[0];\r\n\t\t\tworker[0].onmessage = (function(worker,workId) {\r\n\t\t\t\treturn function(e) {\r\n\t\t\t\t\t_g._working.remove(workId[0]);\r\n\t\t\t\t\t_g._pool.push(worker[0]);\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tif(_g._callbacks.h.hasOwnProperty(workId[0])) {\r\n\t\t\t\t\t\t\t_g._callbacks.h[workId[0]](e.data.result);\r\n\t\t\t\t\t\t\t_g._callbacks.remove(workId[0]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch( error ) {\r\n\t\t\t\t\t\tif (error instanceof js__$Boot_HaxeError) error = error.val;\r\n\t\t\t\t\t\tconsole.log(error);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t_g.processQueue();\r\n\t\t\t\t};\r\n\t\t\t})(worker,workId);\r\n\t\t\tworker[0].postMessage(work);\r\n\t\t}\r\n\t}\r\n\t,__class__: verb_exe_WorkerPool\r\n};\r\nvar verb_exe__$WorkerPool_Work = function(className,methodName,args) {\r\n\tthis.className = className;\r\n\tthis.methodName = methodName;\r\n\tthis.args = args;\r\n\tthis.id = verb_exe__$WorkerPool_Work.uuid++;\r\n};\r\n$hxClasses[\"verb.exe._WorkerPool.Work\"] = verb_exe__$WorkerPool_Work;\r\nverb_exe__$WorkerPool_Work.__name__ = [\"verb\",\"exe\",\"_WorkerPool\",\"Work\"];\r\nverb_exe__$WorkerPool_Work.prototype = {\r\n\t__class__: verb_exe__$WorkerPool_Work\r\n};\r\nvar verb_geom_ICurve = function() { };\r\n$hxClasses[\"verb.geom.ICurve\"] = verb_geom_ICurve;\r\nverb_geom_ICurve.__name__ = [\"verb\",\"geom\",\"ICurve\"];\r\nverb_geom_ICurve.__interfaces__ = [verb_core_ISerializable];\r\nverb_geom_ICurve.prototype = {\r\n\t__class__: verb_geom_ICurve\r\n};\r\nvar verb_geom_NurbsCurve = $hx_exports.geom.NurbsCurve = function(data) {\r\n\tthis._data = verb_eval_Check.isValidNurbsCurveData(data);\r\n};\r\n$hxClasses[\"verb.geom.NurbsCurve\"] = verb_geom_NurbsCurve;\r\nverb_geom_NurbsCurve.__name__ = [\"verb\",\"geom\",\"NurbsCurve\"];\r\nverb_geom_NurbsCurve.__interfaces__ = [verb_geom_ICurve];\r\nverb_geom_NurbsCurve.byKnotsControlPointsWeights = function(degree,knots,controlPoints,weights) {\r\n\treturn new verb_geom_NurbsCurve(new verb_core_NurbsCurveData(degree,knots.slice(),verb_eval_Eval.homogenize1d(controlPoints,weights)));\r\n};\r\nverb_geom_NurbsCurve.byPoints = function(points,degree) {\r\n\tif(degree == null) degree = 3;\r\n\treturn new verb_geom_NurbsCurve(verb_eval_Make.rationalInterpCurve(points,degree));\r\n};\r\nverb_geom_NurbsCurve.__super__ = verb_core_SerializableBase;\r\nverb_geom_NurbsCurve.prototype = $extend(verb_core_SerializableBase.prototype,{\r\n\tdegree: function() {\r\n\t\treturn this._data.degree;\r\n\t}\r\n\t,knots: function() {\r\n\t\treturn this._data.knots.slice(0);\r\n\t}\r\n\t,controlPoints: function() {\r\n\t\treturn verb_eval_Eval.dehomogenize1d(this._data.controlPoints);\r\n\t}\r\n\t,weights: function() {\r\n\t\treturn verb_eval_Eval.weight1d(this._data.controlPoints);\r\n\t}\r\n\t,asNurbs: function() {\r\n\t\treturn new verb_core_NurbsCurveData(this.degree(),this.knots(),verb_eval_Eval.homogenize1d(this.controlPoints(),this.weights()));\r\n\t}\r\n\t,clone: function() {\r\n\t\treturn new verb_geom_NurbsCurve(this._data);\r\n\t}\r\n\t,domain: function() {\r\n\t\treturn new verb_core_Interval(verb_core_ArrayExtensions.first(this._data.knots),verb_core_ArrayExtensions.last(this._data.knots));\r\n\t}\r\n\t,transform: function(mat) {\r\n\t\treturn new verb_geom_NurbsCurve(verb_eval_Modify.rationalCurveTransform(this._data,mat));\r\n\t}\r\n\t,transformAsync: function(mat) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Modify,\"rationalCurveTransform\",[this._data,mat]).then(function(x) {\r\n\t\t\treturn new verb_geom_NurbsCurve(x);\r\n\t\t});\r\n\t}\r\n\t,point: function(u) {\r\n\t\treturn verb_eval_Eval.rationalCurvePoint(this._data,u);\r\n\t}\r\n\t,pointAsync: function(u) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Eval,\"rationalCurvePoint\",[this._data,u]);\r\n\t}\r\n\t,tangent: function(u) {\r\n\t\treturn verb_eval_Eval.rationalCurveTangent(this._data,u);\r\n\t}\r\n\t,tangentAsync: function(u) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Eval,\"rationalCurveTangent\",[this._data,u]);\r\n\t}\r\n\t,derivatives: function(u,numDerivs) {\r\n\t\tif(numDerivs == null) numDerivs = 1;\r\n\t\treturn verb_eval_Eval.rationalCurveDerivatives(this._data,u,numDerivs);\r\n\t}\r\n\t,derivativesAsync: function(u,numDerivs) {\r\n\t\tif(numDerivs == null) numDerivs = 1;\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Eval,\"rationalCurveDerivatives\",[this._data,u,numDerivs]);\r\n\t}\r\n\t,closestPoint: function(pt) {\r\n\t\treturn verb_eval_Analyze.rationalCurveClosestPoint(this._data,pt);\r\n\t}\r\n\t,closestPointAsync: function(pt) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Analyze,\"rationalCurveClosestPoint\",[this._data,pt]);\r\n\t}\r\n\t,closestParam: function(pt) {\r\n\t\treturn verb_eval_Analyze.rationalCurveClosestParam(this._data,pt);\r\n\t}\r\n\t,closestParamAsync: function(pt) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Analyze,\"rationalCurveClosestParam\",[this._data,pt]);\r\n\t}\r\n\t,length: function() {\r\n\t\treturn verb_eval_Analyze.rationalCurveArcLength(this._data);\r\n\t}\r\n\t,lengthAsync: function() {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Analyze,\"rationalCurveArcLength\",[this._data]);\r\n\t}\r\n\t,lengthAtParam: function(u) {\r\n\t\treturn verb_eval_Analyze.rationalCurveArcLength(this._data,u);\r\n\t}\r\n\t,lengthAtParamAsync: function() {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Analyze,\"rationalCurveArcLength\",[this._data]);\r\n\t}\r\n\t,paramAtLength: function(len,tolerance) {\r\n\t\treturn verb_eval_Analyze.rationalCurveParamAtArcLength(this._data,len,tolerance);\r\n\t}\r\n\t,paramAtLengthAsync: function(len,tolerance) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Analyze,\"rationalCurveParamAtArcLength\",[this._data,len,tolerance]);\r\n\t}\r\n\t,divideByEqualArcLength: function(divisions) {\r\n\t\treturn verb_eval_Divide.rationalCurveByEqualArcLength(this._data,divisions);\r\n\t}\r\n\t,divideByEqualArcLengthAsync: function(divisions) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Divide,\"rationalCurveByEqualArcLength\",[this._data,divisions]);\r\n\t}\r\n\t,divideByArcLength: function(arcLength) {\r\n\t\treturn verb_eval_Divide.rationalCurveByArcLength(this._data,arcLength);\r\n\t}\r\n\t,divideByArcLengthAsync: function(divisions) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Divide,\"rationalCurveByArcLength\",[this._data,divisions]);\r\n\t}\r\n\t,split: function(u) {\r\n\t\treturn verb_eval_Divide.curveSplit(this._data,u).map(function(x) {\r\n\t\t\treturn new verb_geom_NurbsCurve(x);\r\n\t\t});\r\n\t}\r\n\t,splitAsync: function(u) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Divide,\"curveSplit\",[this._data,u]).then(function(cs) {\r\n\t\t\treturn cs.map(function(x) {\r\n\t\t\t\treturn new verb_geom_NurbsCurve(x);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t,reverse: function() {\r\n\t\treturn new verb_geom_NurbsCurve(verb_eval_Modify.curveReverse(this._data));\r\n\t}\r\n\t,reverseAsync: function() {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Modify,\"curveReverse\",[this._data]).then(function(c) {\r\n\t\t\treturn new verb_geom_NurbsCurve(c);\r\n\t\t});\r\n\t}\r\n\t,tessellate: function(tolerance) {\r\n\t\treturn verb_eval_Tess.rationalCurveAdaptiveSample(this._data,tolerance,false);\r\n\t}\r\n\t,tessellateAsync: function(tolerance) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Tess,\"rationalCurveAdaptiveSample\",[this._data,tolerance,false]);\r\n\t}\r\n\t,__class__: verb_geom_NurbsCurve\r\n});\r\nvar verb_geom_Arc = $hx_exports.geom.Arc = function(center,xaxis,yaxis,radius,minAngle,maxAngle) {\r\n\tverb_geom_NurbsCurve.call(this,verb_eval_Make.arc(center,xaxis,yaxis,radius,minAngle,maxAngle));\r\n\tthis._center = center;\r\n\tthis._xaxis = xaxis;\r\n\tthis._yaxis = yaxis;\r\n\tthis._radius = radius;\r\n\tthis._minAngle = minAngle;\r\n\tthis._maxAngle = maxAngle;\r\n};\r\n$hxClasses[\"verb.geom.Arc\"] = verb_geom_Arc;\r\nverb_geom_Arc.__name__ = [\"verb\",\"geom\",\"Arc\"];\r\nverb_geom_Arc.__super__ = verb_geom_NurbsCurve;\r\nverb_geom_Arc.prototype = $extend(verb_geom_NurbsCurve.prototype,{\r\n\tcenter: function() {\r\n\t\treturn this._center;\r\n\t}\r\n\t,xaxis: function() {\r\n\t\treturn this._xaxis;\r\n\t}\r\n\t,yaxis: function() {\r\n\t\treturn this._yaxis;\r\n\t}\r\n\t,radius: function() {\r\n\t\treturn this._radius;\r\n\t}\r\n\t,minAngle: function() {\r\n\t\treturn this._minAngle;\r\n\t}\r\n\t,maxAngle: function() {\r\n\t\treturn this._maxAngle;\r\n\t}\r\n\t,__class__: verb_geom_Arc\r\n});\r\nvar verb_geom_BezierCurve = $hx_exports.geom.BezierCurve = function(points,weights) {\r\n\tverb_geom_NurbsCurve.call(this,verb_eval_Make.rationalBezierCurve(points,weights));\r\n};\r\n$hxClasses[\"verb.geom.BezierCurve\"] = verb_geom_BezierCurve;\r\nverb_geom_BezierCurve.__name__ = [\"verb\",\"geom\",\"BezierCurve\"];\r\nverb_geom_BezierCurve.__super__ = verb_geom_NurbsCurve;\r\nverb_geom_BezierCurve.prototype = $extend(verb_geom_NurbsCurve.prototype,{\r\n\t__class__: verb_geom_BezierCurve\r\n});\r\nvar verb_geom_Circle = $hx_exports.geom.Circle = function(center,xaxis,yaxis,radius) {\r\n\tverb_geom_Arc.call(this,center,xaxis,yaxis,radius,0,Math.PI * 2);\r\n};\r\n$hxClasses[\"verb.geom.Circle\"] = verb_geom_Circle;\r\nverb_geom_Circle.__name__ = [\"verb\",\"geom\",\"Circle\"];\r\nverb_geom_Circle.__super__ = verb_geom_Arc;\r\nverb_geom_Circle.prototype = $extend(verb_geom_Arc.prototype,{\r\n\t__class__: verb_geom_Circle\r\n});\r\nvar verb_geom_ISurface = function() { };\r\n$hxClasses[\"verb.geom.ISurface\"] = verb_geom_ISurface;\r\nverb_geom_ISurface.__name__ = [\"verb\",\"geom\",\"ISurface\"];\r\nverb_geom_ISurface.__interfaces__ = [verb_core_ISerializable];\r\nverb_geom_ISurface.prototype = {\r\n\t__class__: verb_geom_ISurface\r\n};\r\nvar verb_geom_NurbsSurface = $hx_exports.geom.NurbsSurface = function(data) {\r\n\tthis._data = verb_eval_Check.isValidNurbsSurfaceData(data);\r\n};\r\n$hxClasses[\"verb.geom.NurbsSurface\"] = verb_geom_NurbsSurface;\r\nverb_geom_NurbsSurface.__name__ = [\"verb\",\"geom\",\"NurbsSurface\"];\r\nverb_geom_NurbsSurface.__interfaces__ = [verb_geom_ISurface];\r\nverb_geom_NurbsSurface.byKnotsControlPointsWeights = function(degreeU,degreeV,knotsU,knotsV,controlPoints,weights) {\r\n\treturn new verb_geom_NurbsSurface(new verb_core_NurbsSurfaceData(degreeU,degreeV,knotsU,knotsV,verb_eval_Eval.homogenize2d(controlPoints,weights)));\r\n};\r\nverb_geom_NurbsSurface.byCorners = function(point0,point1,point2,point3) {\r\n\treturn new verb_geom_NurbsSurface(verb_eval_Make.fourPointSurface(point0,point1,point2,point3));\r\n};\r\nverb_geom_NurbsSurface.byLoftingCurves = function(curves,degreeV) {\r\n\treturn new verb_geom_NurbsSurface(verb_eval_Make.loftedSurface((function($this) {\r\n\t\tvar $r;\r\n\t\tvar _g = [];\r\n\t\t{\r\n\t\t\tvar _g1 = 0;\r\n\t\t\twhile(_g1 < curves.length) {\r\n\t\t\t\tvar c = curves[_g1];\r\n\t\t\t\t++_g1;\r\n\t\t\t\t_g.push(c.asNurbs());\r\n\t\t\t}\r\n\t\t}\r\n\t\t$r = _g;\r\n\t\treturn $r;\r\n\t}(this)),degreeV));\r\n};\r\nverb_geom_NurbsSurface.__super__ = verb_core_SerializableBase;\r\nverb_geom_NurbsSurface.prototype = $extend(verb_core_SerializableBase.prototype,{\r\n\tdegreeU: function() {\r\n\t\treturn this._data.degreeU;\r\n\t}\r\n\t,degreeV: function() {\r\n\t\treturn this._data.degreeV;\r\n\t}\r\n\t,knotsU: function() {\r\n\t\treturn this._data.knotsU.slice(0);\r\n\t}\r\n\t,knotsV: function() {\r\n\t\treturn this._data.knotsV.slice(0);\r\n\t}\r\n\t,controlPoints: function() {\r\n\t\treturn verb_eval_Eval.dehomogenize2d(this._data.controlPoints);\r\n\t}\r\n\t,weights: function() {\r\n\t\treturn verb_eval_Eval.weight2d(this._data.controlPoints);\r\n\t}\r\n\t,asNurbs: function() {\r\n\t\treturn new verb_core_NurbsSurfaceData(this.degreeU(),this.degreeV(),this.knotsU(),this.knotsV(),verb_eval_Eval.homogenize2d(this.controlPoints(),this.weights()));\r\n\t}\r\n\t,clone: function() {\r\n\t\treturn new verb_geom_NurbsSurface(this.asNurbs());\r\n\t}\r\n\t,domainU: function() {\r\n\t\treturn new verb_core_Interval(verb_core_ArrayExtensions.first(this._data.knotsU),verb_core_ArrayExtensions.last(this._data.knotsU));\r\n\t}\r\n\t,domainV: function() {\r\n\t\treturn new verb_core_Interval(verb_core_ArrayExtensions.first(this._data.knotsV),verb_core_ArrayExtensions.last(this._data.knotsV));\r\n\t}\r\n\t,point: function(u,v) {\r\n\t\treturn verb_eval_Eval.rationalSurfacePoint(this._data,u,v);\r\n\t}\r\n\t,pointAsync: function(u,v) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Eval,\"rationalSurfacePoint\",[this._data,u,v]);\r\n\t}\r\n\t,normal: function(u,v) {\r\n\t\treturn verb_eval_Eval.rationalSurfaceNormal(this._data,u,v);\r\n\t}\r\n\t,normalAsync: function(u,v) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Eval,\"rationalSurfaceNormal\",[this._data,u,v]);\r\n\t}\r\n\t,derivatives: function(u,v,numDerivs) {\r\n\t\tif(numDerivs == null) numDerivs = 1;\r\n\t\treturn verb_eval_Eval.rationalSurfaceDerivatives(this._data,u,v,numDerivs);\r\n\t}\r\n\t,derivativesAsync: function(u,v,numDerivs) {\r\n\t\tif(numDerivs == null) numDerivs = 1;\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Eval,\"rationalSurfaceDerivatives\",[this._data,u,v,numDerivs]);\r\n\t}\r\n\t,closestParam: function(pt) {\r\n\t\treturn verb_eval_Analyze.rationalSurfaceClosestParam(this._data,pt);\r\n\t}\r\n\t,closestParamAsync: function(pt) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Analyze,\"rationalSurfaceClosestParam\",[this._data,pt]);\r\n\t}\r\n\t,closestPoint: function(pt) {\r\n\t\treturn verb_eval_Analyze.rationalSurfaceClosestPoint(this._data,pt);\r\n\t}\r\n\t,closestPointAsync: function(pt) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Analyze,\"rationalSurfaceClosestPoint\",[this._data,pt]);\r\n\t}\r\n\t,split: function(u,useV) {\r\n\t\tif(useV == null) useV = false;\r\n\t\treturn verb_eval_Divide.surfaceSplit(this._data,u,useV).map(function(x) {\r\n\t\t\treturn new verb_geom_NurbsSurface(x);\r\n\t\t});\r\n\t}\r\n\t,splitAsync: function(u,useV) {\r\n\t\tif(useV == null) useV = false;\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Divide,\"surfaceSplit\",[this._data,u,useV]).then(function(s) {\r\n\t\t\treturn s.map(function(x) {\r\n\t\t\t\treturn new verb_geom_NurbsSurface(x);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t,reverse: function(useV) {\r\n\t\tif(useV == null) useV = false;\r\n\t\treturn new verb_geom_NurbsSurface(verb_eval_Modify.surfaceReverse(this._data,useV));\r\n\t}\r\n\t,reverseAsync: function(useV) {\r\n\t\tif(useV == null) useV = false;\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Modify,\"surfaceReverse\",[this._data,useV]).then(function(c) {\r\n\t\t\treturn new verb_geom_NurbsSurface(c);\r\n\t\t});\r\n\t}\r\n\t,isocurve: function(u,useV) {\r\n\t\tif(useV == null) useV = false;\r\n\t\treturn new verb_geom_NurbsCurve(verb_eval_Make.surfaceIsocurve(this._data,u,useV));\r\n\t}\r\n\t,isocurveAsync: function(u,useV) {\r\n\t\tif(useV == null) useV = false;\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Make,\"surfaceIsocurve\",[this._data,u,useV]).then(function(x) {\r\n\t\t\treturn new verb_geom_NurbsCurve(x);\r\n\t\t});\r\n\t}\r\n\t,boundaries: function(options) {\r\n\t\treturn verb_eval_Make.surfaceBoundaryCurves(this._data).map(function(x) {\r\n\t\t\treturn new verb_geom_NurbsCurve(x);\r\n\t\t});\r\n\t}\r\n\t,boundariesAsync: function(options) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Make,\"surfaceBoundaryCurves\",[this._data]).then(function(cs) {\r\n\t\t\treturn cs.map(function(x) {\r\n\t\t\t\treturn new verb_geom_NurbsCurve(x);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\t,tessellate: function(options) {\r\n\t\treturn verb_eval_Tess.rationalSurfaceAdaptive(this._data,options);\r\n\t}\r\n\t,tessellateAsync: function(options) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Tess,\"rationalSurfaceAdaptive\",[this._data,options]);\r\n\t}\r\n\t,transform: function(mat) {\r\n\t\treturn new verb_geom_NurbsSurface(verb_eval_Modify.rationalSurfaceTransform(this._data,mat));\r\n\t}\r\n\t,transformAsync: function(mat) {\r\n\t\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Modify,\"rationalSurfaceTransform\",[this._data,mat]).then(function(x) {\r\n\t\t\treturn new verb_geom_NurbsSurface(x);\r\n\t\t});\r\n\t}\r\n\t,__class__: verb_geom_NurbsSurface\r\n});\r\nvar verb_geom_ConicalSurface = $hx_exports.geom.ConicalSurface = function(axis,xaxis,base,height,radius) {\r\n\tverb_geom_NurbsSurface.call(this,verb_eval_Make.conicalSurface(axis,xaxis,base,height,radius));\r\n\tthis._axis = axis;\r\n\tthis._xaxis = xaxis;\r\n\tthis._base = base;\r\n\tthis._height = height;\r\n\tthis._radius = radius;\r\n};\r\n$hxClasses[\"verb.geom.ConicalSurface\"] = verb_geom_ConicalSurface;\r\nverb_geom_ConicalSurface.__name__ = [\"verb\",\"geom\",\"ConicalSurface\"];\r\nverb_geom_ConicalSurface.__super__ = verb_geom_NurbsSurface;\r\nverb_geom_ConicalSurface.prototype = $extend(verb_geom_NurbsSurface.prototype,{\r\n\taxis: function() {\r\n\t\treturn this._axis;\r\n\t}\r\n\t,xaxis: function() {\r\n\t\treturn this._xaxis;\r\n\t}\r\n\t,base: function() {\r\n\t\treturn this._base;\r\n\t}\r\n\t,height: function() {\r\n\t\treturn this._height;\r\n\t}\r\n\t,radius: function() {\r\n\t\treturn this._radius;\r\n\t}\r\n\t,__class__: verb_geom_ConicalSurface\r\n});\r\nvar verb_geom_CylindricalSurface = $hx_exports.geom.CylindricalSurface = function(axis,xaxis,base,height,radius) {\r\n\tverb_geom_NurbsSurface.call(this,verb_eval_Make.cylindricalSurface(axis,xaxis,base,height,radius));\r\n\tthis._axis = axis;\r\n\tthis._xaxis = xaxis;\r\n\tthis._base = base;\r\n\tthis._height = height;\r\n\tthis._radius = radius;\r\n};\r\n$hxClasses[\"verb.geom.CylindricalSurface\"] = verb_geom_CylindricalSurface;\r\nverb_geom_CylindricalSurface.__name__ = [\"verb\",\"geom\",\"CylindricalSurface\"];\r\nverb_geom_CylindricalSurface.__super__ = verb_geom_NurbsSurface;\r\nverb_geom_CylindricalSurface.prototype = $extend(verb_geom_NurbsSurface.prototype,{\r\n\taxis: function() {\r\n\t\treturn this._axis;\r\n\t}\r\n\t,xaxis: function() {\r\n\t\treturn this._xaxis;\r\n\t}\r\n\t,base: function() {\r\n\t\treturn this._base;\r\n\t}\r\n\t,height: function() {\r\n\t\treturn this._height;\r\n\t}\r\n\t,radius: function() {\r\n\t\treturn this._radius;\r\n\t}\r\n\t,__class__: verb_geom_CylindricalSurface\r\n});\r\nvar verb_geom_EllipseArc = $hx_exports.geom.EllipseArc = function(center,xaxis,yaxis,minAngle,maxAngle) {\r\n\tverb_geom_NurbsCurve.call(this,verb_eval_Make.ellipseArc(center,xaxis,yaxis,minAngle,maxAngle));\r\n\tthis._center = center;\r\n\tthis._xaxis = xaxis;\r\n\tthis._yaxis = yaxis;\r\n\tthis._minAngle = minAngle;\r\n\tthis._maxAngle = maxAngle;\r\n};\r\n$hxClasses[\"verb.geom.EllipseArc\"] = verb_geom_EllipseArc;\r\nverb_geom_EllipseArc.__name__ = [\"verb\",\"geom\",\"EllipseArc\"];\r\nverb_geom_EllipseArc.__super__ = verb_geom_NurbsCurve;\r\nverb_geom_EllipseArc.prototype = $extend(verb_geom_NurbsCurve.prototype,{\r\n\tcenter: function() {\r\n\t\treturn this._center;\r\n\t}\r\n\t,xaxis: function() {\r\n\t\treturn this._xaxis;\r\n\t}\r\n\t,yaxis: function() {\r\n\t\treturn this._yaxis;\r\n\t}\r\n\t,minAngle: function() {\r\n\t\treturn this._minAngle;\r\n\t}\r\n\t,maxAngle: function() {\r\n\t\treturn this._maxAngle;\r\n\t}\r\n\t,__class__: verb_geom_EllipseArc\r\n});\r\nvar verb_geom_Ellipse = $hx_exports.geom.Ellipse = function(center,xaxis,yaxis) {\r\n\tverb_geom_EllipseArc.call(this,center,xaxis,yaxis,0,Math.PI * 2);\r\n};\r\n$hxClasses[\"verb.geom.Ellipse\"] = verb_geom_Ellipse;\r\nverb_geom_Ellipse.__name__ = [\"verb\",\"geom\",\"Ellipse\"];\r\nverb_geom_Ellipse.__super__ = verb_geom_EllipseArc;\r\nverb_geom_Ellipse.prototype = $extend(verb_geom_EllipseArc.prototype,{\r\n\t__class__: verb_geom_Ellipse\r\n});\r\nvar verb_geom_ExtrudedSurface = $hx_exports.geom.ExtrudedSurface = function(profile,direction) {\r\n\tverb_geom_NurbsSurface.call(this,verb_eval_Make.extrudedSurface(verb_core_Vec.normalized(direction),verb_core_Vec.norm(direction),profile.asNurbs()));\r\n\tthis._profile = profile;\r\n\tthis._direction = direction;\r\n};\r\n$hxClasses[\"verb.geom.ExtrudedSurface\"] = verb_geom_ExtrudedSurface;\r\nverb_geom_ExtrudedSurface.__name__ = [\"verb\",\"geom\",\"ExtrudedSurface\"];\r\nverb_geom_ExtrudedSurface.__super__ = verb_geom_NurbsSurface;\r\nverb_geom_ExtrudedSurface.prototype = $extend(verb_geom_NurbsSurface.prototype,{\r\n\tprofile: function() {\r\n\t\treturn this._profile;\r\n\t}\r\n\t,direction: function() {\r\n\t\treturn this._direction;\r\n\t}\r\n\t,__class__: verb_geom_ExtrudedSurface\r\n});\r\nvar verb_geom_Intersect = $hx_exports.geom.Intersect = function() { };\r\n$hxClasses[\"verb.geom.Intersect\"] = verb_geom_Intersect;\r\nverb_geom_Intersect.__name__ = [\"verb\",\"geom\",\"Intersect\"];\r\nverb_geom_Intersect.curves = function(first,second,tol) {\r\n\tif(tol == null) tol = 1e-3;\r\n\treturn verb_eval_Intersect.curves(first.asNurbs(),second.asNurbs(),tol);\r\n};\r\nverb_geom_Intersect.curvesAsync = function(first,second,tol) {\r\n\tif(tol == null) tol = 1e-3;\r\n\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Intersect,\"curves\",[first.asNurbs(),second.asNurbs(),tol]);\r\n};\r\nverb_geom_Intersect.curveAndSurface = function(curve,surface,tol) {\r\n\tif(tol == null) tol = 1e-3;\r\n\treturn verb_eval_Intersect.curveAndSurface(curve.asNurbs(),surface.asNurbs(),tol);\r\n};\r\nverb_geom_Intersect.curveAndSurfaceAsync = function(curve,surface,tol) {\r\n\tif(tol == null) tol = 1e-3;\r\n\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Intersect,\"curveAndSurface\",[curve.asNurbs(),surface.asNurbs(),tol]);\r\n};\r\nverb_geom_Intersect.surfaces = function(first,second,tol) {\r\n\tif(tol == null) tol = 1e-3;\r\n\treturn verb_eval_Intersect.surfaces(first.asNurbs(),second.asNurbs(),tol).map(function(cd) {\r\n\t\treturn new verb_geom_NurbsCurve(cd);\r\n\t});\r\n};\r\nverb_geom_Intersect.surfacesAsync = function(first,second,tol) {\r\n\tif(tol == null) tol = 1e-3;\r\n\treturn verb_exe_Dispatcher.dispatchMethod(verb_eval_Intersect,\"surfaces\",[first.asNurbs(),second.asNurbs(),tol]).then(function(cds) {\r\n\t\treturn cds.map(function(cd) {\r\n\t\t\treturn new verb_geom_NurbsCurve(cd);\r\n\t\t});\r\n\t});\r\n};\r\nvar verb_geom_Line = $hx_exports.geom.Line = function(start,end) {\r\n\tverb_geom_NurbsCurve.call(this,verb_eval_Make.polyline([start,end]));\r\n\tthis._start = start;\r\n\tthis._end = end;\r\n};\r\n$hxClasses[\"verb.geom.Line\"] = verb_geom_Line;\r\nverb_geom_Line.__name__ = [\"verb\",\"geom\",\"Line\"];\r\nverb_geom_Line.__super__ = verb_geom_NurbsCurve;\r\nverb_geom_Line.prototype = $extend(verb_geom_NurbsCurve.prototype,{\r\n\tstart: function() {\r\n\t\treturn this._start;\r\n\t}\r\n\t,end: function() {\r\n\t\treturn this._end;\r\n\t}\r\n\t,__class__: verb_geom_Line\r\n});\r\nvar verb_geom_RevolvedSurface = $hx_exports.geom.RevolvedSurface = function(profile,center,axis,angle) {\r\n\tverb_geom_NurbsSurface.call(this,verb_eval_Make.revolvedSurface(profile.asNurbs(),center,axis,angle));\r\n\tthis._profile = profile;\r\n\tthis._center = center;\r\n\tthis._axis = axis;\r\n\tthis._angle = angle;\r\n};\r\n$hxClasses[\"verb.geom.RevolvedSurface\"] = verb_geom_RevolvedSurface;\r\nverb_geom_RevolvedSurface.__name__ = [\"verb\",\"geom\",\"RevolvedSurface\"];\r\nverb_geom_RevolvedSurface.__super__ = verb_geom_NurbsSurface;\r\nverb_geom_RevolvedSurface.prototype = $extend(verb_geom_NurbsSurface.prototype,{\r\n\tprofile: function() {\r\n\t\treturn this._profile;\r\n\t}\r\n\t,center: function() {\r\n\t\treturn this._center;\r\n\t}\r\n\t,axis: function() {\r\n\t\treturn this._center;\r\n\t}\r\n\t,angle: function() {\r\n\t\treturn this._angle;\r\n\t}\r\n\t,__class__: verb_geom_RevolvedSurface\r\n});\r\nvar verb_geom_SphericalSurface = $hx_exports.geom.SphericalSurface = function(center,radius) {\r\n\tverb_geom_NurbsSurface.call(this,verb_eval_Make.sphericalSurface(center,[0,0,1],[1,0,0],radius));\r\n\tthis._center = center;\r\n\tthis._radius = radius;\r\n};\r\n$hxClasses[\"verb.geom.SphericalSurface\"] = verb_geom_SphericalSurface;\r\nverb_geom_SphericalSurface.__name__ = [\"verb\",\"geom\",\"SphericalSurface\"];\r\nverb_geom_SphericalSurface.__super__ = verb_geom_NurbsSurface;\r\nverb_geom_SphericalSurface.prototype = $extend(verb_geom_NurbsSurface.prototype,{\r\n\tcenter: function() {\r\n\t\treturn this._center;\r\n\t}\r\n\t,radius: function() {\r\n\t\treturn this._radius;\r\n\t}\r\n\t,__class__: verb_geom_SphericalSurface\r\n});\r\nvar verb_geom_SweptSurface = $hx_exports.geom.SweptSurface = function(profile,rail) {\r\n\tverb_geom_NurbsSurface.call(this,verb_eval_Make.rationalTranslationalSurface(profile.asNurbs(),rail.asNurbs()));\r\n\tthis._profile = profile;\r\n\tthis._rail = rail;\r\n};\r\n$hxClasses[\"verb.geom.SweptSurface\"] = verb_geom_SweptSurface;\r\nverb_geom_SweptSurface.__name__ = [\"verb\",\"geom\",\"SweptSurface\"];\r\nverb_geom_SweptSurface.__super__ = verb_geom_NurbsSurface;\r\nverb_geom_SweptSurface.prototype = $extend(verb_geom_NurbsSurface.prototype,{\r\n\tprofile: function() {\r\n\t\treturn this._profile;\r\n\t}\r\n\t,rail: function() {\r\n\t\treturn this._rail;\r\n\t}\r\n\t,__class__: verb_geom_SweptSurface\r\n});\r\nfunction $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }\r\nvar $_, $fid = 0;\r\nfunction $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }\r\n$hxClasses.Math = Math;\r\nString.prototype.__class__ = $hxClasses.String = String;\r\nString.__name__ = [\"String\"];\r\n$hxClasses.Array = Array;\r\nArray.__name__ = [\"Array\"];\r\nDate.prototype.__class__ = $hxClasses.Date = Date;\r\nDate.__name__ = [\"Date\"];\r\nvar Int = $hxClasses.Int = { __name__ : [\"Int\"]};\r\nvar Dynamic = $hxClasses.Dynamic = { __name__ : [\"Dynamic\"]};\r\nvar Float = $hxClasses.Float = Number;\r\nFloat.__name__ = [\"Float\"];\r\nvar Bool = $hxClasses.Bool = Boolean;\r\nBool.__ename__ = [\"Bool\"];\r\nvar Class = $hxClasses.Class = { __name__ : [\"Class\"]};\r\nvar Enum = { };\r\nif(Array.prototype.map == null) Array.prototype.map = function(f) {\r\n\tvar a = [];\r\n\tvar _g1 = 0;\r\n\tvar _g = this.length;\r\n\twhile(_g1 < _g) {\r\n\t\tvar i = _g1++;\r\n\t\ta[i] = f(this[i]);\r\n\t}\r\n\treturn a;\r\n};\r\nif(Array.prototype.filter == null) Array.prototype.filter = function(f1) {\r\n\tvar a1 = [];\r\n\tvar _g11 = 0;\r\n\tvar _g2 = this.length;\r\n\twhile(_g11 < _g2) {\r\n\t\tvar i1 = _g11++;\r\n\t\tvar e = this[i1];\r\n\t\tif(f1(e)) a1.push(e);\r\n\t}\r\n\treturn a1;\r\n};\r\nvar __map_reserved = {}\r\nvar ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;\r\nif(ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;\r\nvar DataView = $global.DataView || js_html_compat_DataView;\r\nvar Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;\r\n// var global = window;\r\n(function (global, undefined) {\r\n    \"use strict\";\r\n\r\n    if (global.setImmediate) {\r\n        return;\r\n    }\r\n\r\n    var nextHandle = 1; // Spec says greater than zero\r\n    var tasksByHandle = {};\r\n    var currentlyRunningATask = false;\r\n    var doc = global.document;\r\n    var setImmediate;\r\n\r\n    function addFromSetImmediateArguments(args) {\r\n        tasksByHandle[nextHandle] = partiallyApplied.apply(undefined, args);\r\n        return nextHandle++;\r\n    }\r\n\r\n    // This function accepts the same arguments as setImmediate, but\r\n    // returns a function that requires no arguments.\r\n    function partiallyApplied(handler) {\r\n        var args = [].slice.call(arguments, 1);\r\n        return function() {\r\n            if (typeof handler === \"function\") {\r\n                handler.apply(undefined, args);\r\n            } else {\r\n                (new Function(\"\" + handler))();\r\n            }\r\n        };\r\n    }\r\n\r\n    function runIfPresent(handle) {\r\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\r\n        // So if we're currently running a task, we'll need to delay this invocation.\r\n        if (currentlyRunningATask) {\r\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\r\n            // \"too much recursion\" error.\r\n            setTimeout(partiallyApplied(runIfPresent, handle), 0);\r\n        } else {\r\n            var task = tasksByHandle[handle];\r\n            if (task) {\r\n                currentlyRunningATask = true;\r\n                try {\r\n                    task();\r\n                } finally {\r\n                    clearImmediate(handle);\r\n                    currentlyRunningATask = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function clearImmediate(handle) {\r\n        delete tasksByHandle[handle];\r\n    }\r\n\r\n    function installNextTickImplementation() {\r\n        setImmediate = function() {\r\n            var handle = addFromSetImmediateArguments(arguments);\r\n            process.nextTick(partiallyApplied(runIfPresent, handle));\r\n            return handle;\r\n        };\r\n    }\r\n\r\n    function canUsePostMessage() {\r\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\r\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\r\n        if (global.postMessage && !global.importScripts) {\r\n            var postMessageIsAsynchronous = true;\r\n            var oldOnMessage = global.onmessage;\r\n            global.onmessage = function() {\r\n                postMessageIsAsynchronous = false;\r\n            };\r\n            global.postMessage(\"\", \"*\");\r\n            global.onmessage = oldOnMessage;\r\n            return postMessageIsAsynchronous;\r\n        }\r\n    }\r\n\r\n    function installPostMessageImplementation() {\r\n        // Installs an event handler on `global` for the `message` event: see\r\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\r\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\r\n\r\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\r\n        var onGlobalMessage = function(event) {\r\n            if (event.source === global &&\r\n                typeof event.data === \"string\" &&\r\n                event.data.indexOf(messagePrefix) === 0) {\r\n                runIfPresent(+event.data.slice(messagePrefix.length));\r\n            }\r\n        };\r\n\r\n        if (global.addEventListener) {\r\n            global.addEventListener(\"message\", onGlobalMessage, false);\r\n        } else {\r\n            global.attachEvent(\"onmessage\", onGlobalMessage);\r\n        }\r\n\r\n        setImmediate = function() {\r\n            var handle = addFromSetImmediateArguments(arguments);\r\n            global.postMessage(messagePrefix + handle, \"*\");\r\n            return handle;\r\n        };\r\n    }\r\n\r\n    function installMessageChannelImplementation() {\r\n        var channel = new MessageChannel();\r\n        channel.port1.onmessage = function(event) {\r\n            var handle = event.data;\r\n            runIfPresent(handle);\r\n        };\r\n\r\n        setImmediate = function() {\r\n            var handle = addFromSetImmediateArguments(arguments);\r\n            channel.port2.postMessage(handle);\r\n            return handle;\r\n        };\r\n    }\r\n\r\n    function installReadyStateChangeImplementation() {\r\n        var html = doc.documentElement;\r\n        setImmediate = function() {\r\n            var handle = addFromSetImmediateArguments(arguments);\r\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\r\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\r\n            var script = doc.createElement(\"script\");\r\n            script.onreadystatechange = function () {\r\n                runIfPresent(handle);\r\n                script.onreadystatechange = null;\r\n                html.removeChild(script);\r\n                script = null;\r\n            };\r\n            html.appendChild(script);\r\n            return handle;\r\n        };\r\n    }\r\n\r\n    function installSetTimeoutImplementation() {\r\n        setImmediate = function() {\r\n            var handle = addFromSetImmediateArguments(arguments);\r\n            setTimeout(partiallyApplied(runIfPresent, handle), 0);\r\n            return handle;\r\n        };\r\n    }\r\n\r\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\r\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\r\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\r\n\r\n    // Don't get fooled by e.g. browserify environments.\r\n    if ({}.toString.call(global.process) === \"[object process]\") {\r\n        // For Node.js before 0.9\r\n        installNextTickImplementation();\r\n\r\n    } else if (canUsePostMessage()) {\r\n        // For non-IE10 modern browsers\r\n        installPostMessageImplementation();\r\n\r\n    } else if (global.MessageChannel) {\r\n        // For web workers, where supported\r\n        installMessageChannelImplementation();\r\n\r\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\r\n        // For IE 6–8\r\n        installReadyStateChangeImplementation();\r\n\r\n    } else {\r\n        // For older browsers\r\n        installSetTimeoutImplementation();\r\n    }\r\n\r\n    attachTo.setImmediate = setImmediate;\r\n    attachTo.clearImmediate = clearImmediate;\r\n}(new Function(\"return this\")()));\r\n;\r\nhaxe_Serializer.USE_CACHE = false;\r\nhaxe_Serializer.USE_ENUM_INDEX = false;\r\nhaxe_Serializer.BASE64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:\";\r\nhaxe_Unserializer.DEFAULT_RESOLVER = Type;\r\nhaxe_Unserializer.BASE64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:\";\r\nhaxe_ds_ObjectMap.count = 0;\r\nhaxe_io_FPHelper.i64tmp = (function($this) {\r\n\tvar $r;\r\n\tvar x = new haxe__$Int64__$_$_$Int64(0,0);\r\n\t$r = x;\r\n\treturn $r;\r\n}(this));\r\njs_Boot.__toStr = {}.toString;\r\njs_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;\r\npromhx_base_EventLoop.queue = new List();\r\nverb_core_Binomial.memo = new haxe_ds_IntMap();\r\nverb_core_Constants.TOLERANCE = 1e-6;\r\nverb_core_Constants.EPSILON = 1e-10;\r\nverb_core_Constants.VERSION = \"2.0.0\";\r\nverb_eval_Analyze.Tvalues = [[],[],[-0.5773502691896257645091487805019574556476,0.5773502691896257645091487805019574556476],[0,-0.7745966692414833770358530799564799221665,0.7745966692414833770358530799564799221665],[-0.3399810435848562648026657591032446872005,0.3399810435848562648026657591032446872005,-0.8611363115940525752239464888928095050957,0.8611363115940525752239464888928095050957],[0,-0.5384693101056830910363144207002088049672,0.5384693101056830910363144207002088049672,-0.9061798459386639927976268782993929651256,0.9061798459386639927976268782993929651256],[0.6612093864662645136613995950199053470064,-0.6612093864662645136613995950199053470064,-0.2386191860831969086305017216807119354186,0.2386191860831969086305017216807119354186,-0.9324695142031520278123015544939946091347,0.9324695142031520278123015544939946091347],[0,0.4058451513773971669066064120769614633473,-0.4058451513773971669066064120769614633473,-0.7415311855993944398638647732807884070741,0.7415311855993944398638647732807884070741,-0.9491079123427585245261896840478512624007,0.9491079123427585245261896840478512624007],[-0.1834346424956498049394761423601839806667,0.1834346424956498049394761423601839806667,-0.5255324099163289858177390491892463490419,0.5255324099163289858177390491892463490419,-0.7966664774136267395915539364758304368371,0.7966664774136267395915539364758304368371,-0.9602898564975362316835608685694729904282,0.9602898564975362316835608685694729904282],[0,-0.8360311073266357942994297880697348765441,0.8360311073266357942994297880697348765441,-0.9681602395076260898355762029036728700494,0.9681602395076260898355762029036728700494,-0.3242534234038089290385380146433366085719,0.3242534234038089290385380146433366085719,-0.6133714327005903973087020393414741847857,0.6133714327005903973087020393414741847857],[-0.1488743389816312108848260011297199846175,0.1488743389816312108848260011297199846175,-0.4333953941292471907992659431657841622000,0.4333953941292471907992659431657841622000,-0.6794095682990244062343273651148735757692,0.6794095682990244062343273651148735757692,-0.8650633666889845107320966884234930485275,0.8650633666889845107320966884234930485275,-0.9739065285171717200779640120844520534282,0.9739065285171717200779640120844520534282],[0,-0.2695431559523449723315319854008615246796,0.2695431559523449723315319854008615246796,-0.5190961292068118159257256694586095544802,0.5190961292068118159257256694586095544802,-0.7301520055740493240934162520311534580496,0.7301520055740493240934162520311534580496,-0.8870625997680952990751577693039272666316,0.8870625997680952990751577693039272666316,-0.9782286581460569928039380011228573907714,0.9782286581460569928039380011228573907714],[-0.1252334085114689154724413694638531299833,0.1252334085114689154724413694638531299833,-0.3678314989981801937526915366437175612563,0.3678314989981801937526915366437175612563,-0.5873179542866174472967024189405342803690,0.5873179542866174472967024189405342803690,-0.7699026741943046870368938332128180759849,0.7699026741943046870368938332128180759849,-0.9041172563704748566784658661190961925375,0.9041172563704748566784658661190961925375,-0.9815606342467192506905490901492808229601,0.9815606342467192506905490901492808229601],[0,-0.2304583159551347940655281210979888352115,0.2304583159551347940655281210979888352115,-0.4484927510364468528779128521276398678019,0.4484927510364468528779128521276398678019,-0.6423493394403402206439846069955156500716,0.6423493394403402206439846069955156500716,-0.8015780907333099127942064895828598903056,0.8015780907333099127942064895828598903056,-0.9175983992229779652065478365007195123904,0.9175983992229779652065478365007195123904,-0.9841830547185881494728294488071096110649,0.9841830547185881494728294488071096110649],[-0.1080549487073436620662446502198347476119,0.1080549487073436620662446502198347476119,-0.3191123689278897604356718241684754668342,0.3191123689278897604356718241684754668342,-0.5152486363581540919652907185511886623088,0.5152486363581540919652907185511886623088,-0.6872929048116854701480198030193341375384,0.6872929048116854701480198030193341375384,-0.8272013150697649931897947426503949610397,0.8272013150697649931897947426503949610397,-0.9284348836635735173363911393778742644770,0.9284348836635735173363911393778742644770,-0.9862838086968123388415972667040528016760,0.9862838086968123388415972667040528016760],[0,-0.2011940939974345223006283033945962078128,0.2011940939974345223006283033945962078128,-0.3941513470775633698972073709810454683627,0.3941513470775633698972073709810454683627,-0.5709721726085388475372267372539106412383,0.5709721726085388475372267372539106412383,-0.7244177313601700474161860546139380096308,0.7244177313601700474161860546139380096308,-0.8482065834104272162006483207742168513662,0.8482065834104272162006483207742168513662,-0.9372733924007059043077589477102094712439,0.9372733924007059043077589477102094712439,-0.9879925180204854284895657185866125811469,0.9879925180204854284895657185866125811469],[-0.0950125098376374401853193354249580631303,0.0950125098376374401853193354249580631303,-0.2816035507792589132304605014604961064860,0.2816035507792589132304605014604961064860,-0.4580167776572273863424194429835775735400,0.4580167776572273863424194429835775735400,-0.6178762444026437484466717640487910189918,0.6178762444026437484466717640487910189918,-0.7554044083550030338951011948474422683538,0.7554044083550030338951011948474422683538,-0.8656312023878317438804678977123931323873,0.8656312023878317438804678977123931323873,-0.9445750230732325760779884155346083450911,0.9445750230732325760779884155346083450911,-0.9894009349916499325961541734503326274262,0.9894009349916499325961541734503326274262],[0,-0.1784841814958478558506774936540655574754,0.1784841814958478558506774936540655574754,-0.3512317634538763152971855170953460050405,0.3512317634538763152971855170953460050405,-0.5126905370864769678862465686295518745829,0.5126905370864769678862465686295518745829,-0.6576711592166907658503022166430023351478,0.6576711592166907658503022166430023351478,-0.7815140038968014069252300555204760502239,0.7815140038968014069252300555204760502239,-0.8802391537269859021229556944881556926234,0.8802391537269859021229556944881556926234,-0.9506755217687677612227169578958030214433,0.9506755217687677612227169578958030214433,-0.9905754753144173356754340199406652765077,0.9905754753144173356754340199406652765077],[-0.0847750130417353012422618529357838117333,0.0847750130417353012422618529357838117333,-0.2518862256915055095889728548779112301628,0.2518862256915055095889728548779112301628,-0.4117511614628426460359317938330516370789,0.4117511614628426460359317938330516370789,-0.5597708310739475346078715485253291369276,0.5597708310739475346078715485253291369276,-0.6916870430603532078748910812888483894522,0.6916870430603532078748910812888483894522,-0.8037049589725231156824174550145907971032,0.8037049589725231156824174550145907971032,-0.8926024664975557392060605911271455154078,0.8926024664975557392060605911271455154078,-0.9558239495713977551811958929297763099728,0.9558239495713977551811958929297763099728,-0.9915651684209309467300160047061507702525,0.9915651684209309467300160047061507702525],[0,-0.1603586456402253758680961157407435495048,0.1603586456402253758680961157407435495048,-0.3165640999636298319901173288498449178922,0.3165640999636298319901173288498449178922,-0.4645707413759609457172671481041023679762,0.4645707413759609457172671481041023679762,-0.6005453046616810234696381649462392798683,0.6005453046616810234696381649462392798683,-0.7209661773352293786170958608237816296571,0.7209661773352293786170958608237816296571,-0.8227146565371428249789224867127139017745,0.8227146565371428249789224867127139017745,-0.9031559036148179016426609285323124878093,0.9031559036148179016426609285323124878093,-0.9602081521348300308527788406876515266150,0.9602081521348300308527788406876515266150,-0.9924068438435844031890176702532604935893,0.9924068438435844031890176702532604935893],[-0.0765265211334973337546404093988382110047,0.0765265211334973337546404093988382110047,-0.2277858511416450780804961953685746247430,0.2277858511416450780804961953685746247430,-0.3737060887154195606725481770249272373957,0.3737060887154195606725481770249272373957,-0.5108670019508270980043640509552509984254,0.5108670019508270980043640509552509984254,-0.6360536807265150254528366962262859367433,0.6360536807265150254528366962262859367433,-0.7463319064601507926143050703556415903107,0.7463319064601507926143050703556415903107,-0.8391169718222188233945290617015206853296,0.8391169718222188233945290617015206853296,-0.9122344282513259058677524412032981130491,0.9122344282513259058677524412032981130491,-0.9639719272779137912676661311972772219120,0.9639719272779137912676661311972772219120,-0.9931285991850949247861223884713202782226,0.9931285991850949247861223884713202782226],[0,-0.1455618541608950909370309823386863301163,0.1455618541608950909370309823386863301163,-0.2880213168024010966007925160646003199090,0.2880213168024010966007925160646003199090,-0.4243421202074387835736688885437880520964,0.4243421202074387835736688885437880520964,-0.5516188358872198070590187967243132866220,0.5516188358872198070590187967243132866220,-0.6671388041974123193059666699903391625970,0.6671388041974123193059666699903391625970,-0.7684399634756779086158778513062280348209,0.7684399634756779086158778513062280348209,-0.8533633645833172836472506385875676702761,0.8533633645833172836472506385875676702761,-0.9200993341504008287901871337149688941591,0.9200993341504008287901871337149688941591,-0.9672268385663062943166222149076951614246,0.9672268385663062943166222149076951614246,-0.9937521706203895002602420359379409291933,0.9937521706203895002602420359379409291933],[-0.0697392733197222212138417961186280818222,0.0697392733197222212138417961186280818222,-0.2078604266882212854788465339195457342156,0.2078604266882212854788465339195457342156,-0.3419358208920842251581474204273796195591,0.3419358208920842251581474204273796195591,-0.4693558379867570264063307109664063460953,0.4693558379867570264063307109664063460953,-0.5876404035069115929588769276386473488776,0.5876404035069115929588769276386473488776,-0.6944872631866827800506898357622567712673,0.6944872631866827800506898357622567712673,-0.7878168059792081620042779554083515213881,0.7878168059792081620042779554083515213881,-0.8658125777203001365364256370193787290847,0.8658125777203001365364256370193787290847,-0.9269567721871740005206929392590531966353,0.9269567721871740005206929392590531966353,-0.9700604978354287271239509867652687108059,0.9700604978354287271239509867652687108059,-0.9942945854823992920730314211612989803930,0.9942945854823992920730314211612989803930],[0,-0.1332568242984661109317426822417661370104,0.1332568242984661109317426822417661370104,-0.2641356809703449305338695382833096029790,0.2641356809703449305338695382833096029790,-0.3903010380302908314214888728806054585780,0.3903010380302908314214888728806054585780,-0.5095014778460075496897930478668464305448,0.5095014778460075496897930478668464305448,-0.6196098757636461563850973116495956533871,0.6196098757636461563850973116495956533871,-0.7186613631319501944616244837486188483299,0.7186613631319501944616244837486188483299,-0.8048884016188398921511184069967785579414,0.8048884016188398921511184069967785579414,-0.8767523582704416673781568859341456716389,0.8767523582704416673781568859341456716389,-0.9329710868260161023491969890384229782357,0.9329710868260161023491969890384229782357,-0.9725424712181152319560240768207773751816,0.9725424712181152319560240768207773751816,-0.9947693349975521235239257154455743605736,0.9947693349975521235239257154455743605736],[-0.0640568928626056260850430826247450385909,0.0640568928626056260850430826247450385909,-0.1911188674736163091586398207570696318404,0.1911188674736163091586398207570696318404,-0.3150426796961633743867932913198102407864,0.3150426796961633743867932913198102407864,-0.4337935076260451384870842319133497124524,0.4337935076260451384870842319133497124524,-0.5454214713888395356583756172183723700107,0.5454214713888395356583756172183723700107,-0.6480936519369755692524957869107476266696,0.6480936519369755692524957869107476266696,-0.7401241915785543642438281030999784255232,0.7401241915785543642438281030999784255232,-0.8200019859739029219539498726697452080761,0.8200019859739029219539498726697452080761,-0.8864155270044010342131543419821967550873,0.8864155270044010342131543419821967550873,-0.9382745520027327585236490017087214496548,0.9382745520027327585236490017087214496548,-0.9747285559713094981983919930081690617411,0.9747285559713094981983919930081690617411,-0.9951872199970213601799974097007368118745,0.9951872199970213601799974097007368118745]];\r\nverb_eval_Analyze.Cvalues = [[],[],[1.0,1.0],[0.8888888888888888888888888888888888888888,0.5555555555555555555555555555555555555555,0.5555555555555555555555555555555555555555],[0.6521451548625461426269360507780005927646,0.6521451548625461426269360507780005927646,0.3478548451374538573730639492219994072353,0.3478548451374538573730639492219994072353],[0.5688888888888888888888888888888888888888,0.4786286704993664680412915148356381929122,0.4786286704993664680412915148356381929122,0.2369268850561890875142640407199173626432,0.2369268850561890875142640407199173626432],[0.3607615730481386075698335138377161116615,0.3607615730481386075698335138377161116615,0.4679139345726910473898703439895509948116,0.4679139345726910473898703439895509948116,0.1713244923791703450402961421727328935268,0.1713244923791703450402961421727328935268],[0.4179591836734693877551020408163265306122,0.3818300505051189449503697754889751338783,0.3818300505051189449503697754889751338783,0.2797053914892766679014677714237795824869,0.2797053914892766679014677714237795824869,0.1294849661688696932706114326790820183285,0.1294849661688696932706114326790820183285],[0.3626837833783619829651504492771956121941,0.3626837833783619829651504492771956121941,0.3137066458778872873379622019866013132603,0.3137066458778872873379622019866013132603,0.2223810344533744705443559944262408844301,0.2223810344533744705443559944262408844301,0.1012285362903762591525313543099621901153,0.1012285362903762591525313543099621901153],[0.3302393550012597631645250692869740488788,0.1806481606948574040584720312429128095143,0.1806481606948574040584720312429128095143,0.0812743883615744119718921581105236506756,0.0812743883615744119718921581105236506756,0.3123470770400028400686304065844436655987,0.3123470770400028400686304065844436655987,0.2606106964029354623187428694186328497718,0.2606106964029354623187428694186328497718],[0.2955242247147528701738929946513383294210,0.2955242247147528701738929946513383294210,0.2692667193099963550912269215694693528597,0.2692667193099963550912269215694693528597,0.2190863625159820439955349342281631924587,0.2190863625159820439955349342281631924587,0.1494513491505805931457763396576973324025,0.1494513491505805931457763396576973324025,0.0666713443086881375935688098933317928578,0.0666713443086881375935688098933317928578],[0.2729250867779006307144835283363421891560,0.2628045445102466621806888698905091953727,0.2628045445102466621806888698905091953727,0.2331937645919904799185237048431751394317,0.2331937645919904799185237048431751394317,0.1862902109277342514260976414316558916912,0.1862902109277342514260976414316558916912,0.1255803694649046246346942992239401001976,0.1255803694649046246346942992239401001976,0.0556685671161736664827537204425485787285,0.0556685671161736664827537204425485787285],[0.2491470458134027850005624360429512108304,0.2491470458134027850005624360429512108304,0.2334925365383548087608498989248780562594,0.2334925365383548087608498989248780562594,0.2031674267230659217490644558097983765065,0.2031674267230659217490644558097983765065,0.1600783285433462263346525295433590718720,0.1600783285433462263346525295433590718720,0.1069393259953184309602547181939962242145,0.1069393259953184309602547181939962242145,0.0471753363865118271946159614850170603170,0.0471753363865118271946159614850170603170],[0.2325515532308739101945895152688359481566,0.2262831802628972384120901860397766184347,0.2262831802628972384120901860397766184347,0.2078160475368885023125232193060527633865,0.2078160475368885023125232193060527633865,0.1781459807619457382800466919960979955128,0.1781459807619457382800466919960979955128,0.1388735102197872384636017768688714676218,0.1388735102197872384636017768688714676218,0.0921214998377284479144217759537971209236,0.0921214998377284479144217759537971209236,0.0404840047653158795200215922009860600419,0.0404840047653158795200215922009860600419],[0.2152638534631577901958764433162600352749,0.2152638534631577901958764433162600352749,0.2051984637212956039659240656612180557103,0.2051984637212956039659240656612180557103,0.1855383974779378137417165901251570362489,0.1855383974779378137417165901251570362489,0.1572031671581935345696019386238421566056,0.1572031671581935345696019386238421566056,0.1215185706879031846894148090724766259566,0.1215185706879031846894148090724766259566,0.0801580871597602098056332770628543095836,0.0801580871597602098056332770628543095836,0.0351194603317518630318328761381917806197,0.0351194603317518630318328761381917806197],[0.2025782419255612728806201999675193148386,0.1984314853271115764561183264438393248186,0.1984314853271115764561183264438393248186,0.1861610000155622110268005618664228245062,0.1861610000155622110268005618664228245062,0.1662692058169939335532008604812088111309,0.1662692058169939335532008604812088111309,0.1395706779261543144478047945110283225208,0.1395706779261543144478047945110283225208,0.1071592204671719350118695466858693034155,0.1071592204671719350118695466858693034155,0.0703660474881081247092674164506673384667,0.0703660474881081247092674164506673384667,0.0307532419961172683546283935772044177217,0.0307532419961172683546283935772044177217],[0.1894506104550684962853967232082831051469,0.1894506104550684962853967232082831051469,0.1826034150449235888667636679692199393835,0.1826034150449235888667636679692199393835,0.1691565193950025381893120790303599622116,0.1691565193950025381893120790303599622116,0.1495959888165767320815017305474785489704,0.1495959888165767320815017305474785489704,0.1246289712555338720524762821920164201448,0.1246289712555338720524762821920164201448,0.0951585116824927848099251076022462263552,0.0951585116824927848099251076022462263552,0.0622535239386478928628438369943776942749,0.0622535239386478928628438369943776942749,0.0271524594117540948517805724560181035122,0.0271524594117540948517805724560181035122],[0.1794464703562065254582656442618856214487,0.1765627053669926463252709901131972391509,0.1765627053669926463252709901131972391509,0.1680041021564500445099706637883231550211,0.1680041021564500445099706637883231550211,0.1540457610768102880814315948019586119404,0.1540457610768102880814315948019586119404,0.1351363684685254732863199817023501973721,0.1351363684685254732863199817023501973721,0.1118838471934039710947883856263559267358,0.1118838471934039710947883856263559267358,0.0850361483171791808835353701910620738504,0.0850361483171791808835353701910620738504,0.0554595293739872011294401653582446605128,0.0554595293739872011294401653582446605128,0.0241483028685479319601100262875653246916,0.0241483028685479319601100262875653246916],[0.1691423829631435918406564701349866103341,0.1691423829631435918406564701349866103341,0.1642764837458327229860537764659275904123,0.1642764837458327229860537764659275904123,0.1546846751262652449254180038363747721932,0.1546846751262652449254180038363747721932,0.1406429146706506512047313037519472280955,0.1406429146706506512047313037519472280955,0.1225552067114784601845191268002015552281,0.1225552067114784601845191268002015552281,0.1009420441062871655628139849248346070628,0.1009420441062871655628139849248346070628,0.0764257302548890565291296776166365256053,0.0764257302548890565291296776166365256053,0.0497145488949697964533349462026386416808,0.0497145488949697964533349462026386416808,0.0216160135264833103133427102664524693876,0.0216160135264833103133427102664524693876],[0.1610544498487836959791636253209167350399,0.1589688433939543476499564394650472016787,0.1589688433939543476499564394650472016787,0.1527660420658596667788554008976629984610,0.1527660420658596667788554008976629984610,0.1426067021736066117757461094419029724756,0.1426067021736066117757461094419029724756,0.1287539625393362276755157848568771170558,0.1287539625393362276755157848568771170558,0.1115666455473339947160239016817659974813,0.1115666455473339947160239016817659974813,0.0914900216224499994644620941238396526609,0.0914900216224499994644620941238396526609,0.0690445427376412265807082580060130449618,0.0690445427376412265807082580060130449618,0.0448142267656996003328381574019942119517,0.0448142267656996003328381574019942119517,0.0194617882297264770363120414644384357529,0.0194617882297264770363120414644384357529],[0.1527533871307258506980843319550975934919,0.1527533871307258506980843319550975934919,0.1491729864726037467878287370019694366926,0.1491729864726037467878287370019694366926,0.1420961093183820513292983250671649330345,0.1420961093183820513292983250671649330345,0.1316886384491766268984944997481631349161,0.1316886384491766268984944997481631349161,0.1181945319615184173123773777113822870050,0.1181945319615184173123773777113822870050,0.1019301198172404350367501354803498761666,0.1019301198172404350367501354803498761666,0.0832767415767047487247581432220462061001,0.0832767415767047487247581432220462061001,0.0626720483341090635695065351870416063516,0.0626720483341090635695065351870416063516,0.0406014298003869413310399522749321098790,0.0406014298003869413310399522749321098790,0.0176140071391521183118619623518528163621,0.0176140071391521183118619623518528163621],[0.1460811336496904271919851476833711882448,0.1445244039899700590638271665537525436099,0.1445244039899700590638271665537525436099,0.1398873947910731547221334238675831108927,0.1398873947910731547221334238675831108927,0.1322689386333374617810525744967756043290,0.1322689386333374617810525744967756043290,0.1218314160537285341953671771257335983563,0.1218314160537285341953671771257335983563,0.1087972991671483776634745780701056420336,0.1087972991671483776634745780701056420336,0.0934444234560338615532897411139320884835,0.0934444234560338615532897411139320884835,0.0761001136283793020170516533001831792261,0.0761001136283793020170516533001831792261,0.0571344254268572082836358264724479574912,0.0571344254268572082836358264724479574912,0.0369537897708524937999506682993296661889,0.0369537897708524937999506682993296661889,0.0160172282577743333242246168584710152658,0.0160172282577743333242246168584710152658],[0.1392518728556319933754102483418099578739,0.1392518728556319933754102483418099578739,0.1365414983460151713525738312315173965863,0.1365414983460151713525738312315173965863,0.1311735047870623707329649925303074458757,0.1311735047870623707329649925303074458757,0.1232523768105124242855609861548144719594,0.1232523768105124242855609861548144719594,0.1129322960805392183934006074217843191142,0.1129322960805392183934006074217843191142,0.1004141444428809649320788378305362823508,0.1004141444428809649320788378305362823508,0.0859416062170677274144436813727028661891,0.0859416062170677274144436813727028661891,0.0697964684245204880949614189302176573987,0.0697964684245204880949614189302176573987,0.0522933351526832859403120512732112561121,0.0522933351526832859403120512732112561121,0.0337749015848141547933022468659129013491,0.0337749015848141547933022468659129013491,0.0146279952982722006849910980471854451902,0.0146279952982722006849910980471854451902],[0.1336545721861061753514571105458443385831,0.1324620394046966173716424647033169258050,0.1324620394046966173716424647033169258050,0.1289057221880821499785953393997936532597,0.1289057221880821499785953393997936532597,0.1230490843067295304675784006720096548158,0.1230490843067295304675784006720096548158,0.1149966402224113649416435129339613014914,0.1149966402224113649416435129339613014914,0.1048920914645414100740861850147438548584,0.1048920914645414100740861850147438548584,0.0929157660600351474770186173697646486034,0.0929157660600351474770186173697646486034,0.0792814117767189549228925247420432269137,0.0792814117767189549228925247420432269137,0.0642324214085258521271696151589109980391,0.0642324214085258521271696151589109980391,0.0480376717310846685716410716320339965612,0.0480376717310846685716410716320339965612,0.0309880058569794443106942196418845053837,0.0309880058569794443106942196418845053837,0.0134118594871417720813094934586150649766,0.0134118594871417720813094934586150649766],[0.1279381953467521569740561652246953718517,0.1279381953467521569740561652246953718517,0.1258374563468282961213753825111836887264,0.1258374563468282961213753825111836887264,0.1216704729278033912044631534762624256070,0.1216704729278033912044631534762624256070,0.1155056680537256013533444839067835598622,0.1155056680537256013533444839067835598622,0.1074442701159656347825773424466062227946,0.1074442701159656347825773424466062227946,0.0976186521041138882698806644642471544279,0.0976186521041138882698806644642471544279,0.0861901615319532759171852029837426671850,0.0861901615319532759171852029837426671850,0.0733464814110803057340336152531165181193,0.0733464814110803057340336152531165181193,0.0592985849154367807463677585001085845412,0.0592985849154367807463677585001085845412,0.0442774388174198061686027482113382288593,0.0442774388174198061686027482113382288593,0.0285313886289336631813078159518782864491,0.0285313886289336631813078159518782864491,0.0123412297999871995468056670700372915759,0.0123412297999871995468056670700372915759]];\r\nverb_exe_Dispatcher.THREADS = 1;\r\nverb_exe_Dispatcher._init = false;\r\nverb_exe_WorkerPool.basePath = \"\";\r\nverb_exe__$WorkerPool_Work.uuid = 0;\r\nverb_Verb.main();\r\n})(typeof console != \"undefined\" ? console : {log:function(){}}, verb, typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this);\r\n\r\n\r\n    return verb;\r\n\r\n});","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nwindow['CESIUM_BASE_URL'] = 'assets/cesium';\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":"webpack:///"}